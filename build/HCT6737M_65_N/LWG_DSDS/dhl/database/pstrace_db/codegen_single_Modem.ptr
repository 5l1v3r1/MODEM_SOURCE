# 1 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c"
# 1 "./modem/sim/include/sim_trc.h" 1
# 311 "./modem/sim/include/sim_trc.h"
# 1 "interface/service/dhl/kal_trace.h" 1
# 393 "interface/service/dhl/kal_trace.h"
# 1 "interface/service/dhl/dhl_trace.h" 1
# 201 "interface/service/dhl/dhl_trace.h"
typedef char * va_list;

# 1 "interface/service/kal/kal_general_types.h" 1
# 111 "interface/service/kal/kal_general_types.h"
# 1 "interface/service/kal/clib.h" 1
# 112 "interface/service/kal/kal_general_types.h" 2






typedef char kal_char;

typedef unsigned short kal_wchar;


typedef unsigned char kal_uint8;

typedef signed char kal_int8;

typedef unsigned short int kal_uint16;

typedef signed short int kal_int16;

typedef unsigned int kal_uint32;

typedef signed int kal_int32;



   typedef unsigned long long kal_uint64;






   typedef signed long long kal_int64;






typedef unsigned short WCHAR;




typedef enum
{

    KAL_FALSE,

    KAL_TRUE
} kal_bool;
# 204 "interface/service/dhl/dhl_trace.h" 2
# 1 "interface/service/kal/kal_public_defs.h" 1
# 280 "interface/service/kal/kal_public_defs.h"
# 1 "interface/service/kal/kal_general_types.h" 1
# 281 "interface/service/kal/kal_public_defs.h" 2

# 1 "interface/service/config/stack_config.h" 1
# 108 "interface/service/config/stack_config.h"
# 1 "interface/sap/hisr_modid.h" 1
# 94 "interface/sap/hisr_modid.h"
# 1 "interface/sap/module_id_range.h" 1
# 131 "interface/sap/module_id_range.h"
# 1 "interface/sap/cross_core/global_modid_range.h" 1
# 69 "interface/sap/cross_core/global_modid_range.h"
typedef enum {

    MOD_ID_GLOBAL_BEGIN = 0, MOD_ID_GLOBAL_NIL_CHECK_TAIL = MOD_ID_GLOBAL_BEGIN,
    MOD_ID_GLOBAL_MD1_BEGIN, MOD_ID_GLOBAL_MD1_TAIL = MOD_ID_GLOBAL_MD1_BEGIN + 63,
    MOD_ID_GLOBAL_MD2_BEGIN, MOD_ID_GLOBAL_MD2_TAIL = MOD_ID_GLOBAL_MD2_BEGIN + 31,
    MOD_ID_GLOBAL_MD3_BEGIN, MOD_ID_GLOBAL_MD3_TAIL = MOD_ID_GLOBAL_MD3_BEGIN + 31,
    MOD_ID_GLOBAL_TAIL,

}GLOBAL_MODULE_ID_TYPE;

typedef unsigned int module_global_id_boundary_check1[130 - MOD_ID_GLOBAL_TAIL];
# 132 "interface/sap/module_id_range.h" 2

typedef enum {

 MOD_ID_SRV_CODE_BEGIN = 130, MOD_ID_SRV_CODE_TAIL = MOD_ID_SRV_CODE_BEGIN + 50,

 MOD_ID_MODEM_2G3G_CODE_BEGIN, MOD_ID_MODEM_2G3G_CODE_TAIL = MOD_ID_MODEM_2G3G_CODE_BEGIN + 340,

 MOD_ID_MODEM_4G_CODE_BEGIN, MOD_ID_MODEM_4G_CODE_TAIL = MOD_ID_MODEM_4G_CODE_BEGIN + 230,

 MOD_ID_MIDDLEWARE_CODE_BEGIN, MOD_ID_MIDDLEWARE_CODE_TAIL = MOD_ID_MIDDLEWARE_CODE_BEGIN + 90,

 MOD_ID_DRV_CODE_BEGIN, MOD_ID_DRV_CODE_TAIL = MOD_ID_DRV_CODE_BEGIN + 150,

 MOD_ID_HISR_CODE_BEGIN, MOD_ID_HISR_CODE_TAIL = MOD_ID_HISR_CODE_BEGIN + 148 +1,

   MOD_ID_CODE_END,

 MOD_ID_END = MOD_ID_CODE_END,






 END_OF_MOD_ID_BEGIN = (1023 + 130), END_OF_MOD_ID_TAIL,

}MODULE_ID_TYPE;

typedef unsigned int module_id_boundary_check1[END_OF_MOD_ID_BEGIN - MOD_ID_CODE_END];






typedef enum __cgen_module_type_id_END_OF_MOD_ID_BEGIN{MODULE_TAG_END_OF_MOD_ID_BEGIN = END_OF_MOD_ID_BEGIN,
 END_OF_MOD_ID,
MODULE_ID_CGEN_PARSE_LAST_ID=END_OF_MOD_ID_TAIL }_cgen_module_type_id_END_OF_MOD_ID_TAIL;
# 95 "interface/sap/hisr_modid.h" 2
# 1 "interface/sap/module_hisrid_range.h" 1



typedef enum {
 HISR_ID_CODE_RESERVED = 0,
 HISR_ID_SS_CODE_BEGIN = HISR_ID_CODE_RESERVED,
 HISR_ID_MODEM_CODE_BEGIN = HISR_ID_SS_CODE_BEGIN + 9,
 HISR_ID_DRV_CODE_BEGIN = HISR_ID_MODEM_CODE_BEGIN + 17,
 HISR_ID_LISR2HISR_CODE_BEGIN = HISR_ID_DRV_CODE_BEGIN + 22,
 HISR_ID_CODE_MAX = 9 + 17 + 22 + 61
} HISR_ID_CODE_BEGIN;
# 96 "interface/sap/hisr_modid.h" 2

typedef enum __cgen_module_type_id_MOD_ID_HISR_CODE_BEGIN{MODULE_TAG_MOD_ID_HISR_CODE_BEGIN = MOD_ID_HISR_CODE_BEGIN,
# 126 "interface/sap/hisr_modid.h"
# 1 "interface/service/config/hisr_config_internal.h" 1
# 356 "interface/service/config/hisr_config_internal.h"
# 1 "interface/sap/module_hisrid_range.h" 1
# 357 "interface/service/config/hisr_config_internal.h" 2
# 686 "interface/service/config/hisr_config_internal.h"


MOD_TRCPRCHISR,







# 707 "interface/service/config/hisr_config_internal.h"
MOD_TIMER_HISR,




MOD_BCHISR,




MOD_L1DMA_HISR,




MOD_MALMO_HISR,




MOD_IRDEBUG_HISR,
# 740 "interface/service/config/hisr_config_internal.h"



MOD_UMTS_HISR,






MOD_UL1_LOW_HISR,






MOD_UUL2HISR,










MOD_UL2ACCRXHISR,






MOD_UL2BCP_HISR,






MOD_TL1HISR,




MOD_HIF_CB_HISR,




MOD_LTE_DSP_TIMER_HISR,




MOD_ERT_HISR,




MOD_UL2ACCFINT_HISR,
# 817 "interface/service/config/hisr_config_internal.h"
















MOD_DRV_HISR,







MOD_L1SPHISR,
# 851 "interface/service/config/hisr_config_internal.h"
MOD_HIF_USB_HISR,




MOD_HIF_SDIO_HISR,




MOD_HIF_CLDMA_HISR,
# 878 "interface/service/config/hisr_config_internal.h"



MOD_HIF_CCIFRX_HISR,




MOD_HIF_CCIFTX_HISR,
# 919 "interface/service/config/hisr_config_internal.h"


MOD_GPT_DEBUG_HISR,






MOD_LISR2HISR_WTIMER,




MOD_LISR2HISR_RTR_SLT,




MOD_LISR2HISR_AI,




MOD_LISR2HISR_PI,





MOD_LISR2HISR_LTE2MD_PEER_WAKEUP,






MOD_LISR2HISR_DSP_IRQ_EVENT,






MOD_LISR2HISR_DSP_TIMER,




MOD_L2_LTE_COPRO_HISR,




MOD_L2_LMAC_RAR_HISR,




MOD_L2_LMAC_EAR_HISR,





MOD_LISR2HISR_SEARCHER,




MOD_LISR2HISR_TFCI_0,




MOD_LISR2HISR_TFCI_1,




MOD_LISR2HISR_RXBRP_CC0,




MOD_LISR2HISR_RXBRP_CC1,




MOD_LISR2HISR_RXBRP_CCB,




MOD_LISR2HISR_TDMA,



MOD_LISR2HISR_CTIRQ1,






MOD_LISR2HISR_CTIRQ2,





MOD_LISR2HISR_RXBRP_HS,




MOD_LISR2HISR_RXADC_OVLD_ANT0,




MOD_LISR2HISR_RXADC_OVLD_ANT1,
# 1064 "interface/service/config/hisr_config_internal.h"


MOD_LISR2HISR_SW_LISR2,




MOD_LISR2HISR_SW_LISR1,




MOD_LISR2HISR_SW_LISR3,
# 1090 "interface/service/config/hisr_config_internal.h"


MOD_LISR2HISR_TOPSM,







MOD_LISR2HISR_OSTIMER_ARM,
# 1109 "interface/service/config/hisr_config_internal.h"


MOD_LISR2HISR_MODEM2G_TOPSM,
# 1120 "interface/service/config/hisr_config_internal.h"


MOD_LISR2HISR_DSP2CPU,
# 1136 "interface/service/config/hisr_config_internal.h"

MOD_LISR2HISR_MDGDMA2,




MOD_LISR2HISR_DEINT0,




MOD_LISR2HISR_DEINT1,




MOD_LISR2HISR_DEINT2,




MOD_LISR2HISR_DEINT3,




MOD_LISR2HISR_EINT,





MOD_DCC_HISR,



MOD_LISR2HISR_EMIMPU,
# 1181 "interface/service/config/hisr_config_internal.h"

MOD_BT_SCO_HISR,




MOD_LISR2HISR_CC_IRQ_MD2MD1_SYS,




MOD_LISR2HISR_CC_IRQ_MD2MD1_R0,




MOD_LISR2HISR_CC_IRQ_MD2MD1_R1,




MOD_LISR2HISR_CC_IRQ_MD2MD1_R2,




MOD_LISR2HISR_BUS_MONITOR_MDPERI,




MOD_LISR2HISR_BUS_MONITOR_MDMCU,
# 127 "interface/sap/hisr_modid.h" 2
# 136 "interface/sap/hisr_modid.h"
MODULE_ID_CGEN_PARSE_LAST_ID=MOD_ID_HISR_CODE_TAIL }_cgen_module_type_id_MOD_ID_HISR_CODE_TAIL;
# 109 "interface/service/config/stack_config.h" 2
# 1 "interface/sap/cross_core/global_modid.h" 1
# 66 "interface/sap/cross_core/global_modid.h"
# 1 "interface/sap/cross_core/global_modid_range.h" 1
# 67 "interface/sap/cross_core/global_modid.h" 2


typedef enum __cgen_module_type_id_MOD_ID_GLOBAL_BEGIN{MODULE_TAG_MOD_ID_GLOBAL_BEGIN = MOD_ID_GLOBAL_BEGIN,

    MOD_NIL = MOD_ID_GLOBAL_BEGIN,
MODULE_ID_CGEN_PARSE_LAST_ID=MOD_ID_GLOBAL_NIL_CHECK_TAIL }_cgen_module_type_id_MOD_ID_GLOBAL_NIL_CHECK_TAIL;


typedef enum __cgen_module_type_id_MOD_ID_GLOBAL_MD1_BEGIN{MODULE_TAG_MOD_ID_GLOBAL_MD1_BEGIN = MOD_ID_GLOBAL_MD1_BEGIN,


# 1 "interface/sap/cross_core/md1_module_config.h" 1
# 70 "interface/sap/cross_core/md1_module_config.h"
MOD_GMSS_MD1,
MOD_SIM_MD1,
MOD_SIM_2_MD1,
MOD_L4C_MD1,
MOD_RAC_MD1,
MOD_ERRC_MD1,
MOD_EL1_MD1,
MOD_RRM_MD1,
MOD_RRM_2_MD1,
MOD_RRM_3_MD1,
MOD_RRM_4_MD1,
MOD_RRCE_MD1,
# 79 "interface/sap/cross_core/global_modid.h" 2

MODULE_TAG_MOD_ID_GLOBAL_MD1_TAIL,
MODULE_ID_CGEN_PARSE_LAST_ID=MOD_ID_GLOBAL_MD1_TAIL }_cgen_module_type_id_MOD_ID_GLOBAL_MD1_TAIL;


typedef enum __cgen_module_type_id_MOD_ID_GLOBAL_MD2_BEGIN{MODULE_TAG_MOD_ID_GLOBAL_MD2_BEGIN = MOD_ID_GLOBAL_MD2_BEGIN,


# 1 "interface/sap/cross_core/md2_module_config.h" 1
# 88 "interface/sap/cross_core/global_modid.h" 2

MODULE_TAG_MOD_ID_GLOBAL_MD2_TAIL,
MODULE_ID_CGEN_PARSE_LAST_ID=MOD_ID_GLOBAL_MD2_TAIL }_cgen_module_type_id_MOD_ID_GLOBAL_MD2_TAIL;


typedef enum __cgen_module_type_id_MOD_ID_GLOBAL_MD3_BEGIN{MODULE_TAG_MOD_ID_GLOBAL_MD3_BEGIN = MOD_ID_GLOBAL_MD3_BEGIN,


# 1 "interface/sap/cross_core/md3_module_config.h" 1
# 70 "interface/sap/cross_core/md3_module_config.h"
MOD_UIM_MD3,
MOD_UIM_2_MD3,
MOD_CSS_MD3,
MOD_VAL_MD3,
MOD_CLC_MD3,
MOD_CL1_MD3,
# 97 "interface/sap/cross_core/global_modid.h" 2

MODULE_TAG_MOD_ID_GLOBAL_MD3_TAIL,
MODULE_ID_CGEN_PARSE_LAST_ID=MOD_ID_GLOBAL_MD3_TAIL }_cgen_module_type_id_MOD_ID_GLOBAL_MD3_TAIL;
# 110 "interface/service/config/stack_config.h" 2
# 1 "interface/sap/srv_modid.h" 1
# 93 "interface/sap/srv_modid.h"
typedef enum __cgen_module_type_id_MOD_ID_SRV_CODE_BEGIN{MODULE_TAG_MOD_ID_SRV_CODE_BEGIN = MOD_ID_SRV_CODE_BEGIN,
# 129 "interface/sap/srv_modid.h"
# 1 "interface/service/config/srv_task_config.h" 1
# 329 "interface/service/config/srv_task_config.h"




MOD_DUMMY_NIL = MOD_ID_SRV_CODE_BEGIN,


















MOD_DUMMY_NVRAM,

MOD_NVRAM,































MOD_DUMMY_DHL,

MOD_DHL,






















# 444 "interface/service/config/srv_task_config.h"


MOD_DUMMY_DHL_READER,

MOD_DHL_READER,
























# 511 "interface/service/config/srv_task_config.h"


MOD_DUMMY_TST_FTRANS,


MOD_TST_FTRANS,















# 593 "interface/service/config/srv_task_config.h"


MOD_DUMMY_DHLRT,

MOD_DHLRT,

















# 625 "interface/service/config/srv_task_config.h"


MOD_DUMMY_FS,
MOD_FS,























MOD_DUMMY_CCCISRV,


MOD_CCCISRV,
MOD_CCCIFS,
MOD_CCCIIPC,
MOD_CCCIRPC,
MOD_CCCIMSG,
MOD_CCCI,





















MOD_DUMMY_CCCI_IT_CTRL,
MOD_CCCI_IT_CTRL,





















MOD_DUMMY_CCCI_IT_CTRL_TASK1,
MOD_CCCI_IT_CTRL_TASK1,




















MOD_DUMMY_CCCI_IT_CTRL_TASK2,
MOD_CCCI_IT_CTRL_TASK2,




















MOD_DUMMY_CCCI_IT_CTRL_TASK3,
MOD_CCCI_IT_CTRL_TASK3,




















MOD_DUMMY_CCCI_IT_CTRL_TASK4,
MOD_CCCI_IT_CTRL_TASK4,





















MOD_DUMMY_QBM,
MOD_QBM,




















MOD_DUMMY_MDDBG,
MOD_MDDBG,




















MOD_DUMMY_EXTEST,
MOD_EXTEST,






















MOD_DUMMY_DHLSPR,

MOD_DHL_SP_READER,











# 886 "interface/service/config/srv_task_config.h"
MOD_TIMER,

MOD_SYSTEM,
MOD_EVENT_INFO,

MOD_FLC,

MOD_HMU,


MOD_SST_COMMON,
MOD_EX_LOG,
MOD_IDC,
MOD_EARLY_LOG,
MOD_HLT,
# 936 "interface/service/config/srv_task_config.h"


MODULE_TAG_SRV_TAIL,











# 130 "interface/sap/srv_modid.h" 2

MODULE_ID_CGEN_PARSE_LAST_ID=MOD_ID_SRV_CODE_TAIL }_cgen_module_type_id_MOD_ID_SRV_CODE_TAIL;
# 111 "interface/service/config/stack_config.h" 2
# 1 "interface/sap/modem_2g3g_modid.h" 1
# 89 "interface/sap/modem_2g3g_modid.h"
typedef enum __cgen_module_type_id_MOD_ID_MODEM_2G3G_CODE_BEGIN{MODULE_TAG_MOD_ID_MODEM_2G3G_CODE_BEGIN = MOD_ID_MODEM_2G3G_CODE_BEGIN,
# 125 "interface/sap/modem_2g3g_modid.h"
# 1 "interface/service/config/modem_2g3g_task_config.h" 1
# 487 "interface/service/config/modem_2g3g_task_config.h"




MOD_MODEM_DUMMY_BEGIN = MOD_ID_MODEM_2G3G_CODE_BEGIN,



















MOD_DUMMY_RRLP,

MOD_RRLP,










# 552 "interface/service/config/modem_2g3g_task_config.h"


MOD_DUMMY_RATCM,

MOD_RATCM,

MOD_RATCM_2,
# 568 "interface/service/config/modem_2g3g_task_config.h"


















# 708 "interface/service/config/modem_2g3g_task_config.h"


MOD_DUMMY_URR,


MOD_MEME,
# 724 "interface/service/config/modem_2g3g_task_config.h"
MOD_CSE,
# 735 "interface/service/config/modem_2g3g_task_config.h"
MOD_CSCE,
# 746 "interface/service/config/modem_2g3g_task_config.h"
MOD_SIBE,
# 757 "interface/service/config/modem_2g3g_task_config.h"
MOD_USIME,
# 768 "interface/service/config/modem_2g3g_task_config.h"
MOD_RRCE,
# 779 "interface/service/config/modem_2g3g_task_config.h"
MOD_SLCE,
# 790 "interface/service/config/modem_2g3g_task_config.h"
MOD_ADR,
# 801 "interface/service/config/modem_2g3g_task_config.h"
MOD_URR,
# 812 "interface/service/config/modem_2g3g_task_config.h"
MOD_DB,
# 980 "interface/service/config/modem_2g3g_task_config.h"
   

























MOD_DUMMY_UL2,


MOD_URLC,
# 1020 "interface/service/config/modem_2g3g_task_config.h"
MOD_UMAC,
# 1031 "interface/service/config/modem_2g3g_task_config.h"
MOD_UL2,
# 1042 "interface/service/config/modem_2g3g_task_config.h"
MOD_SEQ,
# 1097 "interface/service/config/modem_2g3g_task_config.h"
   













# 1137 "interface/service/config/modem_2g3g_task_config.h"


MOD_DUMMY_UL2D,

MOD_DRLC,
# 1152 "interface/service/config/modem_2g3g_task_config.h"
MOD_BMC,
# 1163 "interface/service/config/modem_2g3g_task_config.h"
MOD_PDCP,
MOD_RABM,
MOD_CSR,
MOD_UL2D,
# 1181 "interface/service/config/modem_2g3g_task_config.h"
   

























MOD_DUMMY_UL1,

MOD_UL1,
# 1219 "interface/service/config/modem_2g3g_task_config.h"

















# 1325 "interface/service/config/modem_2g3g_task_config.h"


MOD_DUMMY_RSVA,

MOD_RSVAS,

MOD_RSVAK,
MOD_RSVAU,
# 1343 "interface/service/config/modem_2g3g_task_config.h"
MOD_RSVAG,


MOD_RSVAE,


































MOD_DUMMY_MM,

MOD_MM,

MOD_MM_2,
# 1395 "interface/service/config/modem_2g3g_task_config.h"























MOD_DUMMY_CC,

MOD_CC,

MOD_CC_2,
# 1435 "interface/service/config/modem_2g3g_task_config.h"
   



















MOD_DUMMY_CISS,

MOD_CISS,

MOD_CISS_2,
# 1469 "interface/service/config/modem_2g3g_task_config.h"





















MOD_DUMMY_SMS,

MOD_SMS,

MOD_SMS_2,
# 1504 "interface/service/config/modem_2g3g_task_config.h"





















MOD_DUMMY_SIM,




MOD_DUMMY_SIM_2,
# 1540 "interface/service/config/modem_2g3g_task_config.h"
MOD_SIM,
# 1552 "interface/service/config/modem_2g3g_task_config.h"





















MOD_SIM_2,


















# 1655 "interface/service/config/modem_2g3g_task_config.h"


MOD_DUMMY_L4,


MOD_ATCI,

MOD_ATCI_2,
# 1672 "interface/service/config/modem_2g3g_task_config.h"
MOD_MBCI,

MOD_MBCI_2,
# 1684 "interface/service/config/modem_2g3g_task_config.h"
MOD_L4C,

MOD_L4C_2,
# 1695 "interface/service/config/modem_2g3g_task_config.h"
MOD_RAT_TCM,

MOD_RAT_TCM_2,
# 1706 "interface/service/config/modem_2g3g_task_config.h"
MOD_TCM,

MOD_TCM_2,
# 1718 "interface/service/config/modem_2g3g_task_config.h"
MOD_SMSAL,

MOD_SMSAL_2,
# 1729 "interface/service/config/modem_2g3g_task_config.h"
MOD_UEM,


MOD_RAC,

MOD_RAC_2,
# 1744 "interface/service/config/modem_2g3g_task_config.h"
MOD_SMU,

MOD_SMU_2,
# 1755 "interface/service/config/modem_2g3g_task_config.h"
MOD_USAT,


MOD_CSM,

MOD_CSM_2,
# 1770 "interface/service/config/modem_2g3g_task_config.h"
MOD_ENG,

MOD_ENG_2,



MOD_PHB,

MOD_PHB_2,
# 1789 "interface/service/config/modem_2g3g_task_config.h"
MOD_TFTLIB,

MOD_TFTLIB_2,
# 1807 "interface/service/config/modem_2g3g_task_config.h"



















# 1840 "interface/service/config/modem_2g3g_task_config.h"








MOD_DUMMY_RR,

MOD_RRM,
MOD_GAS = MOD_RRM,
MOD_AS = MOD_RRM,
MOD_RMPC = MOD_RRM,

MOD_RRM_2,
MOD_GAS_2 = MOD_RRM_2,
MOD_AS_2 = MOD_RRM_2,
MOD_RMPC_2 = MOD_RRM_2,

MOD_RRM_3,
MOD_GAS_3 = MOD_RRM_3,
MOD_AS_3 = MOD_RRM_3,
MOD_RMPC_3 = MOD_RRM_3,

MOD_RRM_4,
MOD_GAS_4 = MOD_RRM_4,
MOD_AS_4 = MOD_RRM_4,
MOD_RMPC_4 = MOD_RRM_4,





MOD_RLC,

MOD_RLC_2,
# 1897 "interface/service/config/modem_2g3g_task_config.h"
MOD_MAC,

MOD_MAC_2,
# 1908 "interface/service/config/modem_2g3g_task_config.h"
MOD_LAPDM,

MOD_LAPDM_2,
# 1920 "interface/service/config/modem_2g3g_task_config.h"
MOD_MPAL,

MOD_MPAL_2,
# 1936 "interface/service/config/modem_2g3g_task_config.h"
   






# 1956 "interface/service/config/modem_2g3g_task_config.h"
























MOD_DUMMY_REASM,

MOD_REASM,

MOD_REASM_2,
# 1993 "interface/service/config/modem_2g3g_task_config.h"



















MOD_DUMMY_SNDCP,

MOD_SNDCP,

MOD_SNDCP_2,
# 2025 "interface/service/config/modem_2g3g_task_config.h"



















MOD_DUMMY_SM,

MOD_SM,

MOD_SM_2,
# 2060 "interface/service/config/modem_2g3g_task_config.h"




















MOD_DUMMY_LLC,

MOD_LLC,

MOD_LLC_2,
# 2093 "interface/service/config/modem_2g3g_task_config.h"



















MOD_DUMMY_DATA,

MOD_TDT,

MOD_TDT_2,
# 2125 "interface/service/config/modem_2g3g_task_config.h"
MOD_RLP,

MOD_RLP_2,
# 2136 "interface/service/config/modem_2g3g_task_config.h"
MOD_L2R,

MOD_L2R_2,
# 2147 "interface/service/config/modem_2g3g_task_config.h"
MOD_T30,

MOD_T30_2,
# 2158 "interface/service/config/modem_2g3g_task_config.h"
MOD_FA,

MOD_FA_2,
# 2171 "interface/service/config/modem_2g3g_task_config.h"













# 2352 "interface/service/config/modem_2g3g_task_config.h"


MOD_DUMMY_L1,




MOD_DUMMY_L1_2,
# 2371 "interface/service/config/modem_2g3g_task_config.h"
MOD_L1,































MOD_L1_2,




















# 2518 "interface/service/config/modem_2g3g_task_config.h"


MOD_DUMMY_EXT_MODEM,

MOD_EXT_MODEM,























MOD_DUMMY_UL1TST,

MOD_UL1TST,
























MOD_DUMMY_ULCS,

MOD_UAGPS,




MOD_UAGPS_CP,






















MOD_NWSEL,

MOD_NWSEL_2,
# 2615 "interface/service/config/modem_2g3g_task_config.h"
MOD_GMSS,

MOD_GMSS_2,
# 2627 "interface/service/config/modem_2g3g_task_config.h"














# 2710 "interface/service/config/modem_2g3g_task_config.h"
MOD_UL1HISR,
# 2721 "interface/service/config/modem_2g3g_task_config.h"
MOD_RFC2507,
# 2732 "interface/service/config/modem_2g3g_task_config.h"


MODULE_TAG_MODEM_DUMMY_TAIL,










# 126 "interface/sap/modem_2g3g_modid.h" 2

MODULE_ID_CGEN_PARSE_LAST_ID=MOD_ID_MODEM_2G3G_CODE_TAIL }_cgen_module_type_id_MOD_ID_MODEM_2G3G_CODE_TAIL;
# 112 "interface/service/config/stack_config.h" 2
# 1 "interface/sap/modem_4g_modid.h" 1
# 81 "interface/sap/modem_4g_modid.h"
typedef enum __cgen_module_type_id_MOD_ID_MODEM_4G_CODE_BEGIN{MODULE_TAG_MOD_ID_MODEM_4G_CODE_BEGIN = MOD_ID_MODEM_4G_CODE_BEGIN,
# 117 "interface/sap/modem_4g_modid.h"
# 1 "interface/service/config/modem_4g_task_config.h" 1
# 459 "interface/service/config/modem_4g_task_config.h"




MOD_MODEM_4G_DUMMY_BEGIN = MOD_ID_MODEM_4G_CODE_BEGIN,
















MOD_DUMMY_EUTEST,
MOD_EUTEST,






















MOD_DUMMY_ETSTM,

MOD_ETSTM,


























MOD_DUMMY_ERT,


MOD_ERLCUL,
MOD_EMAC,
MOD_EL1TX,
MOD_LTE_TIMER,






















MOD_DUMMY_EL1,


MOD_EL1,






















MOD_DUMMY_EL2,


MOD_ERLCDL,
MOD_EPDCP,
MOD_EL2TASK,
MOD_ROHC,
MOD_EL2TASK_EMAC,























MOD_DUMMY_MRS,

MOD_MRS,

MOD_MRS_2,
# 633 "interface/service/config/modem_4g_task_config.h"






















MOD_ERRC,
MOD_ERRC_EVTH,
MOD_ERRC_CEL,
MOD_ERRC_CHM,
MOD_ERRC_CONN,
MOD_ERRC_MOB,
MOD_ERRC_RCM,
MOD_ERRC_SPV,
MOD_ERRC_SYS,
MOD_EAS,
# 680 "interface/service/config/modem_4g_task_config.h"






   









# 723 "interface/service/config/modem_4g_task_config.h"



MOD_EMM,


MOD_EMM_CALL,
MOD_EMM_CMNPROC,
MOD_EMM_CONN,
MOD_EMM_ERRCIF,
MOD_EMM_ESMIF,
MOD_EMM_ETCIF,
MOD_EMM_EVALIF,
MOD_EMM_EVTCTRL,
MOD_EMM_MMIF,
MOD_EMM_NASMSG,
MOD_EMM_PLMNSEL,
MOD_EMM_RATBAND,
MOD_EMM_RATCHG,
MOD_EMM_REG,
MOD_EMM_SEC,
MOD_EMM_SV,
MOD_EMM_TIMERIF,








   








# 773 "interface/service/config/modem_4g_task_config.h"


MOD_ESM,








   








# 802 "interface/service/config/modem_4g_task_config.h"


MOD_IMC,

    MOD_IMC_2,
# 815 "interface/service/config/modem_4g_task_config.h"
MOD_IMCB,

    MOD_IMCB_2,
# 826 "interface/service/config/modem_4g_task_config.h"
MOD_IMCSMS,

    MOD_IMCSMS_2,
# 838 "interface/service/config/modem_4g_task_config.h"

















MOD_SDM,





















MOD_VDM,
MOD_VDM_CTRL,
MOD_VDM_TRK,
MOD_VDM_ADS,
MOD_VDM_VCC,




















MOD_DUMMY_IMSP,

MOD_IMSP,

MOD_IMSP_2,
# 916 "interface/service/config/modem_4g_task_config.h"















# 939 "interface/service/config/modem_4g_task_config.h"



MOD_EVAL,








   







# 967 "interface/service/config/modem_4g_task_config.h"



MOD_ETC,








   







# 1096 "interface/service/config/modem_4g_task_config.h"


MOD_MLL1,
















# 1144 "interface/service/config/modem_4g_task_config.h"


MOD_DUMMY_LPP,

MOD_LPP,





















MOD_DUMMY_EDSP,
MOD_EDSP,















# 1199 "interface/service/config/modem_4g_task_config.h"
MOD_EMM_NMSRV,
MOD_EMM_OPIDSRV,
MOD_EMM_USIMSRV,
MOD_EMM_NVMSRV,
MOD_USBOSD,
# 1214 "interface/service/config/modem_4g_task_config.h"


MODULE_TAG_MODEM_4G_DUMMY_TAIL,










# 118 "interface/sap/modem_4g_modid.h" 2

MODULE_ID_CGEN_PARSE_LAST_ID=MOD_ID_MODEM_4G_CODE_TAIL }_cgen_module_type_id_MOD_ID_MODEM_4G_CODE_TAIL;
# 113 "interface/service/config/stack_config.h" 2
# 1 "interface/sap/middleware_modid.h" 1
# 93 "interface/sap/middleware_modid.h"
typedef enum __cgen_module_type_id_MOD_ID_MIDDLEWARE_CODE_BEGIN{MODULE_TAG_MOD_ID_MIDDLEWARE_CODE_BEGIN = MOD_ID_MIDDLEWARE_CODE_BEGIN,
# 129 "interface/sap/middleware_modid.h"
# 1 "interface/service/config/middleWare_task_config.h" 1
# 451 "interface/service/config/middleWare_task_config.h"


MOD_MW_DUMMY_BEGIN = MOD_ID_MIDDLEWARE_CODE_BEGIN,
















MOD_DUMMY_PPP,

MOD_PPP,

























MOD_DUMMY_PFC_SW,

MOD_PFC_SW,
























MOD_DUMMY_UPS,

MOD_UPS,















# 630 "interface/service/config/middleWare_task_config.h"


MOD_DUMMY_SYSDEBUG,

MOD_SYSDEBUG,





















MOD_DUMMY_VT,

MOD_VT,




















MOD_DUMMY_FT,

MOD_FT,




















MOD_DUMMY_FTC,


MOD_FTC,















# 749 "interface/service/config/middleWare_task_config.h"


MOD_DUMMY_LBS,

MOD_GPS,
MOD_LBS,























MOD_DUMMY_IPCORE,


MOD_RATDM,

MOD_RATDM_2,
# 792 "interface/service/config/middleWare_task_config.h"
MOD_IPCORE,
MOD_LTM,
MOD_UPCM,
MOD_TFT_PF,
MOD_LTM_SIM,






















MOD_DUMMY_ETHERCORE,


MOD_ETHERCORE,






















MOD_DUMMY_USBCLASS,


MOD_USBCLASS,
MOD_ACM,
MOD_RNDIS,
MOD_MBIM,
MOD_ECM,






















MOD_DUMMY_USBCORE,


MOD_USBCORE,























MOD_DUMMY_NMU,


MOD_NMU,
MOD_DHCP4C,
MOD_NDPC,






















MOD_CLDMACORE,





















MOD_CCIFCORE,







MOD_CCCI_HISR,















MOD_UARTCORE,























MOD_DUMMY_USBMSD,


MOD_USBMSD,






















MOD_DUMMY_CCCIDEV,


MOD_CCCIDEV,
MOD_CCMNI,
MOD_CCCITTY,





















MOD_DUMMY_CCCIITDEV1,

MOD_CCCIITDEV1,



















MOD_DUMMY_CCCIITDEV2,

MOD_CCCIITDEV2,




















MOD_DUMMY_CCCIITDEV3,

MOD_CCCIITDEV3,



















MOD_DUMMY_CCCIITDEV4,

MOD_CCCIITDEV4,





















MOD_DUMMY_CCCIITFS,

MOD_CCCIITFS,





















MOD_DUMMY_TTY_UT,

MOD_TTY_UT,
















MOD_TTY_UT99,






MOD_DUMMY_TTY_UT2,

MOD_TTY_UT2,





















MOD_DUMMY_TTY_UT3,

MOD_TTY_UT3,






















MOD_DUMMY_EXCP_TTYUT,

MOD_EXCP_TTYUT,





















MOD_DUMMY_SYS_TTY,

MOD_SYS_TEST,






















MOD_BTT,



















MOD_AOMGR,




















MOD_SLT_NL,













MOD_SLT,







MOD_DUMMY_USBIDLE,

MOD_USBIDLE,





















MOD_DUMMY_LTECSR,


MOD_LTECSR,















# 1409 "interface/service/config/middleWare_task_config.h"


MODULE_TAG_MW_DUMMY_TAIL,










# 130 "interface/sap/middleware_modid.h" 2

MODULE_ID_CGEN_PARSE_LAST_ID=MOD_ID_MIDDLEWARE_CODE_TAIL }_cgen_module_type_id_MOD_ID_MIDDLEWARE_CODE_TAIL;
# 114 "interface/service/config/stack_config.h" 2
# 1 "interface/sap/drv_modid.h" 1
# 88 "interface/sap/drv_modid.h"
typedef enum __cgen_module_type_id_MOD_ID_DRV_CODE_BEGIN{MODULE_TAG_MOD_ID_DRV_CODE_BEGIN = MOD_ID_DRV_CODE_BEGIN,
# 124 "interface/sap/drv_modid.h"
# 1 "interface/service/config/drv_task_config.h" 1
# 239 "interface/service/config/drv_task_config.h"



MOD_DRV_DUMMY_BEGIN = MOD_ID_DRV_CODE_BEGIN,

















MOD_DUMMY_CMUX,

MOD_CMUX,
MOD_CMUXUH,
MOD_UPS_HIGH,





















MOD_DUMMY_IDLER,
MOD_IDLER,


























MOD_DUMMY_BMT,

MOD_BMT,




























MOD_DUMMY_L1SP,

MOD_L1SP,





# 362 "interface/service/config/drv_task_config.h"























MOD_DUMMY_L1AUDIO_SPH_SRV,

MOD_L1AUDIO_SPH_SRV,




















MOD_DUMMY_MED,

MOD_MED,
MOD_AUD=MOD_MED,























# 466 "interface/service/config/drv_task_config.h"


MOD_DUMMY_IDLE,

MOD_IDLE,















# 512 "interface/service/config/drv_task_config.h"



MOD_DUMMY_SDIOCORE,

MOD_SDIOCORE,















# 544 "interface/service/config/drv_task_config.h"
MOD_EINT_HISR,
MOD_UART1_HISR,
MOD_UART2_HISR,
MOD_UART3_HISR,
MOD_RTC_HISR,
MOD_MSDC_HISR,




MOD_DP_ENGINE,
MOD_PPP_HW,
MOD_SIM_DRV,
MOD_PMU,
MOD_PMIC,
MOD_LPWR,
MOD_F32K,
MOD_PWM,
MOD_UART,

MOD_DRV_DBG,
MOD_TTY,
MOD_DSPFM,
MOD_DEVDRV,
MOD_EMI,

MOD_VISUAL_HISR,
# 584 "interface/service/config/drv_task_config.h"


MODULE_TAG_DRV_DUMMY_TAIL,











# 125 "interface/sap/drv_modid.h" 2

MODULE_ID_CGEN_PARSE_LAST_ID=MOD_ID_DRV_CODE_TAIL }_cgen_module_type_id_MOD_ID_DRV_CODE_TAIL;
# 115 "interface/service/config/stack_config.h" 2
# 131 "interface/service/config/stack_config.h"
typedef enum
{
    KAL_PRIORITY_CLASS0 = 0,
    KAL_PRIORITY_CLASS1 = 10,
    KAL_PRIORITY_CLASS2 = 20,
    KAL_PRIORITY_CLASS3 = 30,
    KAL_PRIORITY_CLASS4 = 40,
    KAL_PRIORITY_CLASS5 = 50,
    KAL_PRIORITY_CLASS6 = 60,
    KAL_PRIORITY_CLASS7 = 70,
    KAL_PRIORITY_CLASS8 = 80,
    KAL_PRIORITY_CLASS9 = 90,
    KAL_PRIORITY_CLASS10 = 100,
    KAL_PRIORITY_CLASS11 = 110,
    KAL_PRIORITY_CLASS12 = 120,
    KAL_PRIORITY_CLASS13 = 130,
    KAL_PRIORITY_CLASS14 = 140,
    KAL_PRIORITY_CLASS15 = 150,
    KAL_PRIORITY_CLASS16 = 160,
    KAL_PRIORITY_CLASS17 = 170,
    KAL_PRIORITY_CLASS18 = 180,
    KAL_PRIORITY_CLASS19 = 190,
    KAL_PRIORITY_CLASS20 = 200,
    KAL_PRIORITY_CLASS21 = 210,
    KAL_PRIORITY_CLASS22 = 220,
    KAL_PRIORITY_CLASS23 = 230,
    KAL_PRIORITY_CLASS24 = 240,
    KAL_PRIORITY_CLASS25 = 250
} kal_priority_type;




# 1 "interface/service/config/srv_task_config.h" 1
# 165 "interface/service/config/stack_config.h" 2
# 1 "interface/service/config/modem_2g3g_task_config.h" 1
# 166 "interface/service/config/stack_config.h" 2
# 1 "interface/service/config/modem_4g_task_config.h" 1
# 167 "interface/service/config/stack_config.h" 2
# 1 "interface/service/config/middleWare_task_config.h" 1
# 168 "interface/service/config/stack_config.h" 2
# 1 "interface/service/config/drv_task_config.h" 1
# 169 "interface/service/config/stack_config.h" 2
# 184 "interface/service/config/stack_config.h"
typedef unsigned int hisr_max_num_check[(((20)+(128)) - 147) * (149 - ((20)+(128)))];
# 283 "interface/service/kal/kal_public_defs.h" 2

# 1 "interface/service/config/stack_msgs.h" 1
# 285 "interface/service/kal/kal_public_defs.h" 2






typedef struct
{
    kal_uint8 unused;
} kal_taskid_s;
typedef kal_taskid_s* kal_taskid;


typedef struct
{
    kal_uint8 unused;
} kal_hisrid_s;
typedef kal_hisrid_s* kal_hisrid;


typedef struct
{
    kal_uint8 unused;
} kal_semid_s;
typedef kal_semid_s* kal_semid;


typedef struct
{
    kal_uint8 unused;
} kal_msgqid_s;
typedef kal_msgqid_s* kal_msgqid;


typedef struct
{

    kal_uint32 pending_msgs;

    kal_uint32 max_msgs;
} kal_msgq_info;


typedef struct
{
    kal_uint8 unused;
} kal_mutexid_s;

typedef kal_mutexid_s* kal_mutexid;


typedef struct
{
    kal_uint8 unused;
} kal_eventgrpid_s;
typedef kal_eventgrpid_s* kal_eventgrpid;


typedef struct
{
    kal_uint8 unused;
} kal_poolid_s;

typedef kal_poolid_s* kal_poolid;


typedef struct
{
    kal_uint8 unused;
} KAL_ADM_ID_s;
typedef KAL_ADM_ID_s* KAL_ADM_ID;


typedef struct
{
    kal_uint8 unused;
} KAL_AFM_ID_s;
typedef KAL_AFM_ID_s* KAL_AFM_ID;


typedef struct
{
   kal_uint8 unused;
} KAL_FLMM_ID_s;
typedef KAL_FLMM_ID_s* KAL_FLMM_ID;


typedef struct
{
   kal_uint8 unused;
} KAL_SLMM_ID_s;
typedef KAL_SLMM_ID_s* KAL_SLMM_ID;


typedef struct
{
    kal_uint8 unused;
} kal_enhmutexid_s;
typedef kal_enhmutexid_s* kal_enhmutexid;


typedef struct
{
    kal_uint8 unused;
} kal_timerid_s;

typedef kal_timerid_s* kal_timerid;


typedef struct event_scheduler
{
    kal_uint8 unused;
} event_scheduler;


typedef void* eventid;


typedef struct task_entry_struct
{

    kal_uint32 parameter;
} task_entry_struct;


typedef void (*kal_func_ptr)(void);

typedef void (*kal_task_func_ptr)(task_entry_struct *task_entry_ptr);

typedef void (*kal_hisr_func_ptr)(void);

typedef void (*kal_timer_func_ptr)(void *param_ptr);






typedef enum {
   TD_UL = 0x01 << 0,
   TD_DL = 0x01 << 1,
   TD_CTRL = 0x01 << 2,
   TD_RESET = 0x01 << 3
} transfer_direction;






typedef struct local_para_struct {




    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;



} local_para_struct;
# 453 "interface/service/kal/kal_public_defs.h"
typedef struct peer_buff_struct {
   kal_uint16 pdu_len; kal_uint8 ref_count; kal_uint8 pb_resvered; kal_uint16 free_header_space; kal_uint16 free_tail_space;



} peer_buff_struct;

typedef kal_uint16 interrupt_type;
typedef kal_uint16 module_type;
typedef kal_uint16 sap_type;
typedef kal_uint16 msg_type;


typedef struct ilm_struct {
   module_type src_mod_id;
   module_type dest_mod_id;
   sap_type sap_id;
   msg_type msg_id;
   local_para_struct *local_para_ptr;
   peer_buff_struct *peer_buff_ptr;
} ilm_struct;
# 482 "interface/service/kal/kal_public_defs.h"
typedef enum {
 STACK_TIMER_INITIALIZED,
 STACK_TIMER_NOT_RUNNING = STACK_TIMER_INITIALIZED,
 STACK_TIMER_RUNNING,
 STACK_TIMER_NOT_TIMED_OUT = STACK_TIMER_RUNNING,
 STACK_TIMER_EXPIRED,
 STACK_TIMER_TIMED_OUT = STACK_TIMER_EXPIRED,
 STACK_TIMER_STOPPED
} stack_timer_status_type;

typedef enum {
 STACK_TIMER_USER_VIEW_STOPPED,
 STACK_TIMER_USER_VIEW_RUNNING
}stack_timer_user_view_status_type;


typedef struct stack_timer_struct_t {
 stack_timer_user_view_status_type timer_user_view_status;
 stack_timer_status_type timer_status;
 kal_uint8 invalid_time_out_count;
    kal_timerid kal_timer_id;
 kal_uint16 timer_indx;
 module_type dest_mod_id;



} stack_timer_struct;
# 577 "interface/service/kal/kal_public_defs.h"
typedef enum
{

    FACTORY_BOOT = 0,

    NORMAL_BOOT = 1,

    USBMS_BOOT = 2,

    FUE_BOOT = 3,

    NUM_OF_BOOT_MODE,

    UNKNOWN_BOOT_MODE = 0xff
} boot_mode_type;
# 738 "interface/service/kal/kal_public_defs.h"
typedef struct ASSERT_DUMP_PARAM
{
    kal_uint32 addr[10];
    kal_uint32 len[10];
} ASSERT_DUMP_PARAM_T;


typedef enum
{
    ASSERT_NONE,
    ASSERT_SPECIFIC_CALLBACK,
    ASSERT_SPECIFIC_WITH_LR,
    ASSERT_LINE,
    ASSERT_EXT,
    ASSERT_EXT_DUMP,
    ASSERT_NATIVE
} assert_specific_key;


typedef void (*Assert_Specific_Callback)(void* para_ptr);



typedef enum {
    KAL_NO_WAIT,
    KAL_INFINITE_WAIT
} kal_wait_mode;


typedef enum {
    KAL_SUCCESS,
    KAL_ERROR,
    KAL_Q_FULL,
    KAL_Q_EMPTY,
    KAL_SEM_NOT_AVAILABLE,
    KAL_WOULD_BLOCK,
    KAL_MESSAGE_TOO_BIG,
    KAL_INVALID_ID,
    KAL_NOT_INITIALIZED,
    KAL_INVALID_LENGHT,
    KAL_NULL_ADDRESS,
    KAL_NOT_RECEIVE,
    KAL_NOT_SEND,
    KAL_MEMORY_NOT_VALID,
    KAL_NOT_PRESENT,
    KAL_MEMORY_NOT_RELEASE,
    KAL_TIMEOUT
} kal_status;


typedef enum {

    KAL_ERROR_RESERVE1,
    KAL_ERROR_RESERVE2,
    KAL_ERROR_RESERVE3,
    KAL_ERROR_TCB,

    KAL_READY,

    KAL_SLEEP_SUSPEND,
    KAL_SEMA_SUSPEND,
    KAL_ENHMUTEX_SUSPEND,
    KAL_OTHER_SUSPEND,
    KAL_EVENT_SUSPEND,
    KAL_QUEUE_SUSPEND,
    KAL_RESERVE1_SUSPEND,
    KAL_RESERVE2_SUSPEND,
    KAL_RESERVE3_SUSPEND,

    KAL_TERMINATED,
} kal_task_status;
# 978 "interface/service/kal/kal_public_defs.h"
struct adt_node;


typedef void (*ilm_free_callback_t)(ilm_struct *ilm_ptr);

typedef void (*translator_adt_enc_callback_t)(const ilm_struct *ilm_ptr, struct adt_node **adt);
# 205 "interface/service/dhl/dhl_trace.h" 2
# 254 "interface/service/dhl/dhl_trace.h"
typedef enum
{
   TRACE_FUNC,
   TRACE_STATE,
   TRACE_INFO,
   TRACE_WARNING,
   TRACE_ERROR,
   TRACE_GROUP_1,
   TRACE_GROUP_2,
   TRACE_GROUP_3,
   TRACE_GROUP_4,
   TRACE_GROUP_5,
   TRACE_GROUP_6,
   TRACE_GROUP_7,
   TRACE_GROUP_8,
   TRACE_GROUP_9,
   TRACE_GROUP_10,
   TRACE_PEER
}trace_class_enum;







extern void dhl_trace(trace_class_enum trc_class, kal_uint32 user_flag, kal_uint32 msg_index, const char *arg_type, ...);







extern void dhl_internal_trace(trace_class_enum trc_class, kal_uint32 user_flag, kal_uint8 access_level, kal_uint32 msg_index, const char *arg_type, ...);
extern void dhl_brief_trace(trace_class_enum trc_class, kal_uint32 user_flag, kal_uint32 msg_index, const char *arg_type, ...);
extern void dhl_raw_trace(trace_class_enum trc_class, kal_uint32 user_flag, kal_uint32 msg_index, const kal_char *fmt, kal_uint32 buf_len, const kal_uint8 *pData);
extern void dhl_print(trace_class_enum trc_class, kal_uint32 user_flag, module_type mod_id, const char *fmt, ...);
extern void dhl_print_string(trace_class_enum trc_class, kal_uint32 user_flag, module_type mod_id, const char *str);


extern void dhl_peer_trace(kal_uint32 global_peer_msg_id, kal_uint32 raw_data_len, kal_uint8* raw_data, kal_uint32 trace_index, const char *arg_type, ...);
# 311 "interface/service/dhl/dhl_trace.h"
extern void dhl_internal_trace_impl(trace_class_enum trc_class, kal_uint32 user_flag, kal_uint8 access_level, kal_uint32 msg_index, kal_uint32 module_id, const char *arg_type, va_list argument_info);
extern void dhl_print_impl(trace_class_enum trc_class, kal_uint32 user_flag, module_type mod_id, const char *fmt, va_list argument_info);

typedef void (*TST_String_Inject_CB)(kal_uint32 index, kal_uint8 *pData);






  extern void kal_trace( trace_class_enum, kal_uint32, const kal_char* , ...);
  extern void kal_brief_trace( trace_class_enum, kal_uint32, const kal_char* , ...);
  extern void kal_assert_trace( trace_class_enum, kal_uint32, const kal_char* , ...);
# 334 "interface/service/dhl/dhl_trace.h"
  extern void _kal_trace( trace_class_enum, kal_uint32, const kal_char* , ...);
  extern void _kal_brief_trace( trace_class_enum, kal_uint32, const kal_char* , ...);
  extern void kal_trace_for_3rd_party( trace_class_enum, kal_uint32, const kal_char* , va_list);
  extern void kal_lib_trace( trace_class_enum, kal_uint32, const kal_char* , ...);
  extern void kal_assert_trace( trace_class_enum, kal_uint32, const kal_char* , ...);
  extern void kal_wap_trace(module_type mod_id, trace_class_enum trc_class, const char *fmt,...);
  extern void kal_buffer_trace(trace_class_enum trc_class, kal_uint32 msg_index, const kal_char* fmt, kal_uint32 buf_len, const kal_uint8* pData);
  extern void kal_dev_trace(trace_class_enum trc_class, kal_uint32 msg_index, const char *arg_type,...);
  extern void kal_bootup_trace( trace_class_enum, kal_uint32, const kal_char* , ...);
  extern void kal_prompt_trace( module_type, const kal_char *fmt, ...);



    extern kal_bool tst_is_PsTrc_open_and_pstrace_flag;
    extern void dhl_brief_trace_opt_helper(trace_class_enum trc_class, kal_uint32 user_flag, kal_uint32 msg_index, const char *arg_type, ...);
# 525 "interface/service/dhl/dhl_trace.h"
  extern void tst_sys_init_trace(const kal_char *info);
  extern void tst_sys_trace(kal_char *info);
  extern void tst_sysfatal_trace(kal_char *info);
  extern kal_int32 tst_trace_check_ps_filter_off(trace_class_enum trc_class, kal_uint32* module_id, kal_uint32 supportOption);
# 547 "interface/service/dhl/dhl_trace.h"
typedef void (*TST_VC_CallBack)(const kal_uint8* pData, kal_uint32 nLen);
typedef void (*TST_String_Inject_CB)(kal_uint32 index, kal_uint8 *pData);





typedef enum
{
    TVCI_GPS_LOGGING,
    TVCI_DNT_L2COPRO_LOGGING,
    TVCI_CATCHER_POLLING,
    TVCI_GDB_COMM,
    TVCI_AST_LOGGING,
    TVCI_MINI_LOG,
    TVCI_VM_LOGGING,
    TVCI_BTT,
    TVCI_LAST_ID
}
tst_virtual_channel_id;



kal_bool tst_vc_register_channel(tst_virtual_channel_id channel_id, TST_VC_CallBack fnCmd);
kal_bool tst_vc_response(tst_virtual_channel_id channel_id, const kal_uint8 *pData, kal_uint16 len);




void tst_log_with_offset_single_gpd(sap_type desc_SAP, sap_type raw_data_sap, kal_uint32 msg_index, const char *arg_type, kal_uint32 offset, kal_uint32 *dl_gpd);

kal_bool tst_save_assert_bypass_trace(kal_char *info);

void dhl_log_primitive6(module_type src_mod_id, module_type dest_mod_id, sap_type sap_id, msg_type msg_id, local_para_struct *local_para_ptr, peer_buff_struct *peer_buff_ptr);

typedef enum {
    DHL_CUSTOM_MEM_PMIC,
    DHL_CUSTOM_MEM_MAX
} DHL_CUSTOM_MEM_TYPE;

typedef void (*DHL_CUSTOM_READ_MEM_CALLBACK)(void* read_addr, kal_uint32 len, kal_uint32 option, void** read_buffer_addr, kal_uint32 *read_buffer_len);
typedef void (*DHL_CUSTOM_WRITE_MEM_CALLBACK)(void* write_addr, kal_uint32 len, kal_uint32 option, void* write_buffer_addr);

kal_bool dhl_register_custom_mem_read(DHL_CUSTOM_MEM_TYPE mem_type, DHL_CUSTOM_READ_MEM_CALLBACK read_cb);
kal_bool dhl_register_custom_mem_write(DHL_CUSTOM_MEM_TYPE mem_type, DHL_CUSTOM_WRITE_MEM_CALLBACK write_cb);
# 605 "interface/service/dhl/dhl_trace.h"
extern kal_bool dhl_enable_customized_SD_wakeup_time(kal_uint8 c_sec);




extern kal_bool dhl_disable_customized_SD_wakeup_time(void);
# 394 "interface/service/dhl/kal_trace.h" 2
# 312 "./modem/sim/include/sim_trc.h" 2






START_MODULE_MSG MOD_SIM 20



    FUNC_SIM_START_REQ_HANDLER "sim_start_req_handler()"
    FUNC_SIM_APP_START_REQ_HANDLER "sim_app_start_req_handler()"
    FUNC_SIM_WRITE_REQ_HANDLER "sim_write_req_handler()"
    FUNC_SIM_READ_REQ_HANDLER "sim_read_req_handler()"
    FUNC_SIM_INCREASE_REQ_HANDLER "sim_increase_req_handler()"
    FUNC_SIM_SECURITY_REQ_HANDLER "sim_security_req_handler()"
    FUNC_SIM_RUN_ALGO_REQ_HANDLER "sim_run_algo_req_handler()"
    FUNC_SIM_SEEK_REQ_HANDLER "sim_seek_req_handler()"
    FUNC_SIM_FILE_INFO_REQ_HANDLER "sim_file_info_req_handler()"
    FUNC_SIM_DIAL_MODE_REQ_HANDLER "sim_dial_mode_req_handler()"
    FUNC_SIM_STATUS_REQ_HANDLER "sim_status_req_handler()"
    FUNC_SIM_POWEROFF_REQ_HANDLER "sim_poweroff_req_handler()"
    FUNC_SIM_TIMER_EXPIRY_HANDLER "sim_timer_expiry_handler()"

    FUNC_SIM_BT_SAP_CONNECT_REQ_HANDLER "bt_sim_connect_req_handler()"
    FUNC_SIM_BT_SAP_RESET_REQ_HANDLER "bt_sim_reset_req_handler()"
    FUNC_SIM_BT_SAP_APDU_REQ_HANDLER "bt_sim_apdu_req_handler()"
    FUNC_SIM_BT_SAP_DISCONNECT_REQ_HANDLER "bt_sim_disconnect_req_handler()"
    FUNC_SIM_BT_SAP_POWER_OFF_REQ_HANDLER "bt_sim_power_off_req_handler()"
    FUNC_SIM_BT_SAP_POWER_ON_REQ_HANDLER "bt_sim_power_on_req_handler()"

    FUNC_L4C_SIM_GET_GSMCDMA_DUALSIM_INFO_REQ_HANDLER "l4c_sim_GET_gsmcdma_dualsim_info_req_handler()"
    FUNC_L4C_SIM_SET_GSMCDMA_DUALSIM_INFO_REQ_HANDLER "l4c_sim_SET_gsmcdma_dualsim_mode_req_handler()"



 FUNC_SIM_INTSIM_ACCESS_REQ_HANDLER "sim_intsim_access_req_handler()"
 FUNC_SIM_INTSIM_NOTIFY_IND_HANDLER "sim_intsim_notify_ind_handler()"
 FUNC_SIM_INTSIM_SECURITY_IND_HANDLER "sim_intsim_security_ind_handler()"
    FUNC_SIM_INTSIM_DIAL_MODE_CHANGE_IND_HANDLER "sim_intsim_dial_mode_change_ind_handler()"
 FUNC_SIM_APDU_ACCESS_REQ_HANDLER "sim_apdu_access_req_handler()"
 FUNC_SIM_MANAGE_CHANNEL_REQ_HANDLER "sim_manage_channnel_req_handler()"
    FUNC_SAT_PROCOMM_DISPLAY_TEXT "sat_procomm_display_text()"
    FUNC_SAT_PROCOMM_GET_INKEY "sat_procomm_get_inkey()"
    FUNC_SAT_PROCOMM_GET_INPUT "sat_procomm_get_input()"
    FUNC_SAT_PROCOMM_PLAY_TONE "sat_procomm_play_tone()"
    FUNC_SAT_PROCOMM_SETUP_MENU "sat_procomm_setup_menu()"
    FUNC_SAT_PROCOMM_SELECT_ITEM "sat_procomm_select_item()"
    FUNC_SAT_PROCOMM_SEND_SMS "sat_procomm_send_sms()"
    FUNC_SAT_PROCOMM_SEND_SS "sat_procomm_send_ss()"
    FUNC_SAT_PROCOMM_SEND_USSD "sat_procomm_send_ussd()"
    FUNC_SAT_PROCOMM_SETUP_CALL "sat_procomm_setup_call()"
    FUNC_SAT_PROCOMM_MORE_TIME "sat_procomm_more_time()"
    FUNC_SAT_PROCOMM_REFRESH "sat_procomm_refresh()"
    FUNC_SAT_PROCOMM_POLL_INTERVAL "sat_procomm_poll_interval()"
    FUNC_SAT_PROCOMM_POLLING_OFF "sat_procomm_polling_off"
    FUNC_SAT_PROCOMM_PROVIDE_LOCAL_INFO "sat_procomm_provide_local_info()"
    FUNC_SAT_PROCOMM_SETUP_EVENT_LIST "sat_procomm_setup_event_list()"
    FUNC_SAT_PROCOMM_PERFORM_CARD_APDU "sat_procomm_perform_card_apdu()"
    FUNC_SAT_PROCOMM_POWER_OFF_CARD "sat_procomm_power_off_card()"
    FUNC_SAT_PROCOMM_POWER_ON_CARD "sat_procomm_power_on_card()"
    FUNC_SAT_PROCOMM_GET_READER_STATUS "sat_procomm_get_reader_status()"
    FUNC_SAT_PROCOMM_TIMER_MANAGEMENT "sat_procomm_timer_management()"
    FUNC_SAT_PROCOMM_SET_UP_IDLE_MODE_TEXT "sat_procomm_set_up_idle_mode_text()"
    FUNC_SAT_PROCOMM_RUN_AT_COMMAND "sat_procomm_run_at_command()"
    FUNC_SAT_PROCOMM_SEND_DTMF "sat_procomm_send_dtmf()"
    FUNC_SAT_PROCOMM_LANGUAGE_NOTIFICATION "sat_procomm_language_notification()"
    FUNC_SAT_PROCOMM_LAUNCH_BROWSER "sat_procomm_launch_browser()"
    FUNC_SAT_PROCOMM_OPEN_CHANNEL "sat_procomm_open_channel()"
    FUNC_SAT_PROCOMM_CLOSE_CHANNEL "sat_procomm_close_channel()"
    FUNC_SAT_PROCOMM_RECEIVE_DATA "sat_procomm_recv_data()"
    FUNC_SAT_PROCOMM_SEND_DATA "sat_procomm_send_data()"
    FUNC_SAT_PROCOMM_GET_CHANNEL_STATUS "sat_procomm_ch_status()"
    FUNC_SAT_SET_UP_IDLE_MODE_TEXT_RES_HANDLER "sat_set_up_idle_mode_text_res_handler()"
    FUNC_SAT_PROCOMM_ACTIVATE "sat_procomm_activate()"
    FUNC_SAT_ACTIVATE_RES_HANDLER "sat_activate_res_handler()"
    FUNC_SAT_PROCOMM_CONTACTLESS_STATE_CHANGED "sat_procomm_contactless_state_changed()"
    FUNC_SAT_PROCOMM_CONTACTLESS_STATE_CHANGED_RES_HANDLER "sat_contactless_state_changed_res_handler()"
    FUNC_SAT_RUN_AT_COMMAND_RES_HANDLER "sat_run_at_command_res_handler()"
    FUNC_SAT_SEND_DTMF_RES_HANDLER "sat_send_dtmf_res_handler()"
    FUNC_SAT_LANGUAGE_NOTIFICATION_RES_HANDLER "sat_language_notification_res_handler()"
    FUNC_SAT_LAUNCH_BROWSER_RES_HANDLER "sat_launch_browser_res_handler()"
    FUNC_SAT_OPEN_GPRS_CHANNEL_RES_HANDLER "sat_open_gprs_channel_res_handler()"
    FUNC_SAT_OPEN_CSD_CHANNEL_RES_HANDLER "sat_open_csd_channel_res_handler()"
    FUNC_SAT_OPEN_SERVER_MODE_CHANNEL_RES_HANDLER "sat_open_server_mode_channel_res_handler()"
    FUNC_SAT_CLOSE_CHANNEL_RES_HANDLER "sat_close_channel_res_handler()"
    FUNC_SAT_SEND_DATA_RES_HANDLER "sat_send_data_res_handler()"
    FUNC_SAT_RECV_DATA_RES_HANDLER "sat_recv_data_res_handler()"
    FUNC_SAT_CH_STATUS_RES_HANDLER "sat_ch_status_res_handler()"
    FUNC_SAT_PROVIDE_LOCAL_INFORMATION_HANDLER "sat_provide_local_information_handler()"
    FUNC_SAT_PROACTIVE_CMD_PROCESS "sat_proactive_cmd_process()"
    FUNC_SAT_FILE_CHANGE_RES_HANDLER "sat_file_change_res_handler()"
    FUNC_SAT_DSPL_TEXT_RES_HANDLER "sat_dspl_text_res_handler()"
    FUNC_SAT_GET_INKEY_RES_HANDLER "sat_get_inkey_res_handler()"
    FUNC_SAT_GET_INPUT_RES_HANDLER "sat_get_input_res_handler()"
    FUNC_SAT_PLAY_TONE_RES_HANDLER "sat_play_tone_res_handler()"
    FUNC_SAT_SETUP_MENU_RES_HANDLER "sat_setup_menu_res_handler()"
    FUNC_SAT_SELECT_ITEM_RES_HANDLER "sat_select_item_res_handler()"
    FUNC_SAT_SEND_SMS_RES_HANDLER "sat_send_sms_res_handler()"
    FUNC_SAT_SEND_SS_RES_HANDLER "sat_send_ss_res_handler()"
    FUNC_SAT_SEND_USSD_RES_HANDLER "sat_send_ussd_res_handler()"
    FUNC_SAT_SETUP_CALL_RES_HANDLER "sat_setup_call_res_handler()"
    FUNC_SAT_SMS_DL_REQ_HANDLER "sat_sms_dl_req_handler()"
    FUNC_SAT_CB_DL_REQ_HANDLER "sat_cb_dl_req_handler()"
    FUNC_SAT_MENU_SELECT_REQ_HANDLER "sat_menu_select_req_handler()"
    FUNC_SAT_CALL_CTRL_BY_SIM_REQ_HANDLER "sat_call_ctrl_by_sim_req_handler()"
    FUNC_SAT_CALL_STATUS_IND_HANDLER "sat_call_status_ind_handler()"
    FUNC_SAT_PDP_STATUS_IND_HANDLER "sat_pdp_status_ind_handler()"
    FUNC_SAT_SEND_SMS_CTRL_BY_SIM_REQ_HANDLER "sat_send_sms_ctrl_by_sim_req_handler()"
    FUNC_SIM_JSR177_ATR_REQ_HANDLER "sim_jsr177_atr_req_handler()"
    FUNC_SIM_JSR177_APDU_REQ_HANDLER "sim_jsr177_apdu_req_handler()"
    FUNC_SIM_SEARCH_RECORD_REQ_HANDLER "sim_search_record_req_handler()"
    FUNC_SIM_SYNC_POLL_TIMER_IND_HANDLER "sim_sync_poll_timer_ind_handler()"
    FUNC_SIM_RECOVERY_ENHANCEMENT_SWITCH_REQ_HANDLER "sim_recovery_enhancement_switch_req_handler()"
    FUNC_SAT_PROFILE_WRITE_REQ_HANDLER "sat_profile_write_req_handler()"


    STATE_SIM_RESET "SIM: RESET SIM STATE"
    STATE_SIM_CARD_NOT_INSERTED "SIM: SIM Card Not Inserted"
    STATE_SIM_SELECT_CMD_SUCCESS "SIM: sim_select() success!"
    STATE_SAT_REFRESH_BUSY "SAT REFRESH BUSY: send file change ind"
    STATE_SIM_CMD_SUCCESS "SIM: SIM_CMD_SUCCESS"
    STATE_SIM_CMD_FAIL "SIM: SIM_CMD_FAIL"
    STATE_SIM_CHV_RETRY_ALLOW "SIM: SIM_CHV_RETRY_ALLOW"
    STATE_SIM_CHV_BLOCK "SIM: SIM_CHV_BLOCK"
    STATE_SIM_SAT_CMD_BUSY "SIM: SIM_SAT_CMD_BUSY"
    STATE_SIM_DL_ERROR "SIM: SIM_DL_ERROR"
    STATE_SIM_MEMORY_PROBLEM "SIM: SIM_MEMORY_PROBLEM"
    STATE_SIM_TECHNICAL_PROBLEM "SIM: SIM_TECHNICAL_PROBLEM"
    STATE_SIM_WRONG_INSTRUCTION_CLASS "SIM: SIM_WRONG_INSTRUCTION_CLASS"
    STATE_SIM_30V "SIM: 3.0 V SIM"
    STATE_SIM_18V "SIM: 1.8V SIM"
    STATE_SIM_RESET_30V "SIM RESET at 3.0V"
    STATE_SIM_RESET_18V "SIM RESET at 1.8V"
    STATE_SIM_FILE_NOT_FOUND "FILE_NOT_FOUND"
    STATE_SIM_BT_SAP_APDU_PROTOCOL_TYPE_0 "Transport Protocol Type: 0"
    STATE_SIM_RESET_ITSELF "SIM reset itself"


    STATE_MMI_CANT_GET_DUALSIM_INFO "G+C MMI can't get dualsim info"
    STATE_GSMCDMA_DETECTED "G+C GSMCDMA dualsim file detected"
    STATE_DUALSIM_CMD_FAIL_DISCONNECT_NOT_ALLOWED "G+C dualsim disconnect not allowed"
    STATE_DUALSIM_CMD_FAIL_CONNECT_NOT_ALLOWED "G+C dualsim connect not allowed"

    STATE_SIM_CALL_DISCONNECT "SIM: Disconnect on-going call"

    STATE_SIM_CONNECT_WITH_PHONE_SUCCESS "CONNECT_WITH_PHONE_SUCCESS"
    STATE_SIM_CONNECT_WITH_PHONE_FAILED "CONNECT_WITH_PHONE_FAILED"
    STATE_SIM_DISCONNECT_WITH_PHONE_SUCCESS "DISCONNECT_WITH_PHONE_SUCCESS"
    STATE_SIM_DISCONNECT_WITH_PHONE_FAILED "DISCONNECT_WITH_PHONE_FAILED"

    STATE_SIM_BT_SAP_RESET_SUCCESS "BT_SAP_RESET_SUCCESS"
    STATE_SIM_BT_SAP_RESET_FAILED "BT_SAP_RESET_FAILED"

    STATE_SIM_RECOVERY_ENHANCEMENT_ON "SIM: sim recovery enhancement switch on!"
    STATE_SIM_RECOVERY_ENHANCEMENT_OFF "SIM: sim recovery enhancement switch off!"

    STATE_SIM_PLUG_OUT_CALLBACK "SIM PLUG OUT(%d) -> PS(%d)"
    STATE_SIM_PLUG_IN_CALLBACK "SIM PLUG IN(%d) -> PS(%d)"


    INFO_SIM_SELECT_FILE "SIM_FILE_SELECTED: %02X %02X => %02X %02X"
    INFO_SIM_STATUS_WORD "SIM_STATUS_WORD:   %02X %02X"
    INFO_SAT_TIMER_EXPIRE_MESSAGE_RCVD "Timer Expiry Message is received"
    INFO_SIM_SAT_CMD_BUSY_RETRY "SIM_SAT_CMD_BUSY_RETRY"

    INFO_SIM_RESET_ERROR "SIM_RESET_ERROR: %MDCL_SIM_STATUS"
    INFO_SIM_SELECT_ELP_BY_SPEC "SELECT_ELP_BY_SPEC"
    INFO_SIM_SELECT_ELP_BY_SPEC_ISO639_SPECIFIED "INFO_SIM_SELECT_ELP_BY_SPEC_ISO639_SPECIFIED: type = %d, index = %d"
    INFO_SIM_SELECT_ELP_BY_SPEC_ME_SUPPORT "INFO_SIM_SELECT_ELP_BY_SPEC_ME_SUPPORT: type = %d, index = %d"

    INFO_SIM_CONNECT_TYPE "CONNECT_TYPE: %Msim_plug_out_type_enum"

    INFO_MMI_ALLOW_SIM_FETCH "MMIallow %Msim_interface_enum fetch"
    INFO_MMI_NOT_ALLOW_SIM_FETCH "MMInotallow %Msim_interface_enum fetch"
    INFO_RR_ALLOW_SIM_FETCH "RRallow %Msim_interface_enum fetch"
    INFO_RR_NOT_ALLOW_SIM_FETCH "RRnotallow %Msim_interface_enum fetch"
    INFO_USIM_AL_SELECT "SELECT:%Msim_file_index_enum => %02X %02X"
    INFO_SIM_AL_STATUS "STATUS => %02X %02X"
    INFO_SIM_AL_READ_BINARY "READ BINARY  offset: %hd length: %hd => %02X %02X"
    INFO_SIM_AL_UPDATE_BINARY "UPDATE BINARY offset: %hd length: %hd => %02X %02X"
    INFO_SIM_AL_READ_RECORD "READ RECORD rec# %hd size: %hd => %02X %02X"
    INFO_SIM_AL_UPDATE_RECORD "UPDATE_RECORD rec# %hd size: %hd => %02X %02X"
    INFO_SIM_AL_INCREASE "INCREASE => %02X %02X"
    INFO_SIM_AL_VERIFY "VERIFY => %02X %02X"
    INFO_SIM_AL_CHANGE_PIN "CHANGE PIN => %02X %02X"
    INFO_SIM_AL_SWITCH_PIN "SWITCH PIN: %Msim_instruction_code_enum => %02X %02X"
    INFO_SIM_AL_UNBLOCK_PIN "UNBLOCK PIN => %02X %02X"
    INFO_SIM_AL_DEACTIVATE_FILE "DEACTIVATE FILE: %Msim_file_index_enum => %02X %02X"
    INFO_SIM_AL_ACTIVATE_FILE "ACTIVATE FILE: %Msim_file_index_enum => %02X %02X"
    INFO_SIM_AL_APP_AUTHENTICATE "APP_AUTHENTICATE => %02X %02X"
    INFO_SIM_AL_AUTHENTICATE "AUTHENTICATE => %02X %02X"
    INFO_SIM_AL_TERMINAL_PROFILE "TERMINAL PROFILE => %02X %02X"
    INFO_SIM_AL_ENVELOPE "ENVELOPE: send %hd bytes recv %hd bytes => %02X %02X"
    INFO_SIM_AL_FETCH "FETCH %hd bytes => %02X %02X"
    INFO_SIM_AL_TERMINAL_RESPONSE "TERMINAL RESPONSE => %02X %02X"
    INFO_USIM_AL_GET_CHALLENGE "GET CHALLENGE: %hd bytes => %02X %02X"
    INFO_USIM_AL_MANAGE_CHANNEL "MANAGE CHANNEL %Musim_channel_op_enum %Musim_logic_channel_enum => %02X %02X"
    INFO_USIM_SELECT_AID "USIM SELECT AID: %02X %02X"
    INFO_USIM_AL_READ_BINARY_SFI "usim_al_read_binary_with_sfi: %Musim_sfi_enum %hd  => %02X %02X"
    INFO_USIM_AL_TERMINAL_CAPABILITY "TERMINAL CAPABILITY => %02X %02X"

    INFO_USIM_NO_FILE_MAPPING "No rule of mapping %Msim_file_index_enum to USIM"
    INFO_USIM_FILE_MAPPING "Mapping %Msim_file_index_enum to %Msim_file_index_enum"
    INFO_SERVICE_MAPPING_TRUE "Mapping %Msim_service_enum Support"
    INFO_SERVICE_MAPPING_FALSE "Mapping %Msim_service_enum Not Support"
    INFO_SIM_LOWCOST_MERGE_TASK "LOWCOST_MERGE_TASK feature support"
    INFO_SAT_TR_DROPPED "Terminal Response is dropped"
    INFO_SIM_SWITCH "SIM_SWITCH: SIM %Msim_interface_enum switch to SLOT %Msim_interface_enum"
    INFO_SIM_CSUS_SWITCH "SIM_CSUS_SWITCH: SIM %Msim_interface_enum switch to SLOT %Msim_interface_enum"
    INFO_SIM_POLL_TIMER_STATE "SIM_SYNC_TIMER: sim_sync_poll_timer_state = %Msim_sync_poll_timer_state_enum"
    INFO_SIM_POLL_TIMER_PERIOD "SIM_SYNC_TIMER: poll_timer_period = %d (ticks)"
    INFO_USIM_CHANNEL_CONSISTENT "+CGLA: CLA byte indicating Channel ID is subject to input ID"
    INFO_TERMINAL_CAPABILITY_SUPPORTTED "TERMINAL CAPABILITY SUPPORTTED!!"
    INFO_VERIFY_ADM "Verify ADM via apdu_access_req"
    INFO_MMDC_RELAY_MSG "sim_sat_mmdc_msg_handler() RELAY TO MOD_SIM"
    INFO_UIM_CAT_MSG "uim_sat_proactive_command_ind_hdlr() - %Msat_proactive_cmd_enum"
    INFO_SIM_HOT_SWAP_POLL_TIMER_SET "sim_hot_swap_poll_timer_set(): poll time is from %d to %d, ps_id=%Mprotocol_id_enum"
    INFO_SIM_HOT_SWAP_POLL_TIMER_ROLLBACK "sim_hot_swap_poll_timer_rollback() poll time is from %d to %d, ps_id=%Mprotocol_id_enum"

    INFO_PROFILE_MT_DEFAULT_DOWNLOAD "[SAT]Profile MT default download"
    INFO_PROFILE_MT_AND_TE_DOWNLOAD "[SAT]Profile MT and TE download"
    INFO_PROFILE_HALT_DOWNLOAD "[SAT]Profile download halt"
    INFO_ACTIVATE_TE_FACILITY "[SAT]Active TE facility"
    INFO_SVLTE_STK_ACTIVATE "xTK switch - STK activate"
    INFO_SVLTE_UTK_ACTIVATE "xTK switch - UTK activate"
    INFO_SVLTE_STK_READY "sat_utk_enabled_update_req_handler() - sat_ready_to_start:%d"
    INFO_CT_MOTE_CHANGE "sat_ct_mode_req_handler() - from:%d->%d"


    WARNING_SMS_DL_REQ_ADDR_SIZE_FALSE "SMS_DL size_of_addr exceed"

    WARNING_RES_LENGTH_FALSE "length of RES exceed"
    WARNING_CK_LENGTH_FALSE "length of CK is not 16"
    WARNING_IK_LENGTH_FALSE "length of IK is not 16"
    WARNING_KC_LENGTH_FALSE "length of Kc is not 8"
    WARNING_AUTS_LENGTH_FALSE "length of AUTS exceed"
    WARNING_AUTHENTICATION_TAG_UNKNOWN "authentication response tag unknown"
    WARNING_SRES_LENGTH_FALSE "length of SRES exceed"
    WARNING_FCP_PROP_INFO_SIZE "Proprietary Info longer than 17"
    WARNING_PLMN_FILE_SIZE "PLMN file size is larger than 500"
    WARNING_UST_FILE_SIZE "USIM UST file size is larger than 256"
    WARNING_EST_FILE_SIZE "USIM EST file size is larger than 256"
    WARNING_UICC_DETECTION_RULE "UICC detection rule warning"
    WARNING_FCP_SIZE "FCP size is larger than 127,fcp[1]=%x,fcp[2]=%x"
    WARNING_UNKNOWN_FILE_STRUCT "Unknown EF file structure,type of structure=%x"
 WARNING_WRONG_FILE_STRUCT "Wrong EF file structure,type of structure=%x"


    WARNING_SIM_CARD_REMOVED "SIM_ERROR: SIM_CARD_REMOVED"
    WARNING_FCP_TLV_LEN_ERROR "USIM_FCP_ERROR: FCP TLV LENGTH ERROR!"
    WARNING_FCP_PROP_INFO_TLV_LEN_ERROR "USIM_FCP_ERROR: FCP PROP INFO TLV LENGTH ERROR!"
    WARNING_FCP_FILE_DESCRIPTOR_ERROR "USIM_FCP_ERROR: FCP FILE DESCRIPTOR ERROR!"
    WARNING_FCP_FILE_ID_LEN_ERROR "USIM_FCP_ERROR: FCP FILE ID ERROR!"
    WARNING_FCP_DF_NAME_LEN_ERROR "USIM_FCP_ERROR: FCP DF NAME LENGTH ERROR!"
    WARNING_FCP_PROP_UICC_CHAR_LEN_ERROR "USIM_FCP_ERROR: FCP PROP UICC CHAR LENGTH ERROR!"
    WARNING_FCP_PROP_APP_PWR_LEN_ERROR "USIM_FCP_ERROR: FCP PROP APP PWR LENGTH ERROR!"
    WARNING_FCP_PROP_MIN_APP_CLK_LEN_ERROR "USIM_FCP_ERROR: FCP PROP MIN APP CLK LENGTH ERROR!"
    WARNING_FCP_PROP_AVAIL_MEM_LEN_ERROR "USIM_FCP_ERROR: FCP PROP AVAILABLE MEMORY LENGTH ERROR!"
    WARNING_FCP_PROP_SUPPORTED_SYS_CMD_ERROR "USIM_FCP_ERROR: FCP PROP SUPPORTED SYS CMD LENGTH ERROR!"
    WARNING_FCP_LIFE_CYCLE_LEN_ERROR "USIM_FCP_ERROR: FCP LIFE CYCLE LENGTH ERROR!"
    WARNING_FCP_PIN_NUMBER_ERROR "USIM_FCP_ERROR: FCP PIN STATUS TEMPLATE DO NUMBER ERROR!"
    WARNING_FCP_PIN_DO_TAG_ERROR "USIM_FCP_ERROR: FCP PIN DO TAG ERROR!"
    WARNING_FCP_TOTAL_FILE_SIZE_LEN_ERROR "USIM_FCP_ERROR: FCP TOTAL FILE SIZE LENGTH ERROR!"
    WARNING_FCP_FILE_SIZE_LEN_ERROR "USIM_FCP_ERROR: FCP FILE SIZE LENGTH ERROR!"
    WARNING_FCP_SFI_LEN_ERROR "USIM_FCP_ERROR: FCP SFI LENGTH ERROR!"
    WARNING_FCP_TEMP_TAG_ERROR "USIM_FCP_ERROR: FCP TEMPLATE TAG ERROR!"
    WARNING_FCP_SUB_TAG_ERROR "USIM_FCP_ERROR: FCP SUB TAG ERROR!"
    WARNING_USIM_ICCID_LEN_ERROR "USIM_ERROR: USIM ICCID LENGTH ERROR!"
    WARNING_USIM_AID_LEN_ERROR "USIM_ERROR: USIM AID LENGTH ERROR!"
    WARNING_FCP_PIN_PS_DO_NOT_PRESENT "USIM_FCP_ERROR: FCP PS_DO DOES NOT PRESENT FIRST!"
    WARNING_INFO_NUM_RECORD_SIZE "SIM EF_InfoNum: record size not in 1 to 64"
    WARNING_UNEXPECTED_STKTR "Unexpected AT+STKTR,is_wait_for_rsp = %d"
    WARNING_SIM_CHANNEL_OPERATION "SIM_ERROR: CHANNEL OPERATION NOT ALLOWED FOR SIM!"
    WARNING_APDU_LEN_ERROR "TOO SHORT APDU LENGTH!"
    WARNING_APDU_INPUT_LEN_ERROR "CMD DATA LENGTH NOT CONSIST WITH P3!"
    WARNING_APPLICATION_OPERATION_ERROR "USIM_ERROR: APP OPERATION NOT ALLOWED ON BASIC CNANNEL!"
    WARNING_INCREASE_OPERATION_ERROR "INCREASE OPERATION NOT ALLOWED NOW!"
    WARNING_CHV_OPERATION_ERROR "CHV OPERATION NOT ALLOWED NOW!"
    WARNING_USIM_CHANNEL_OPERATION_ERROR "USIM_CHANNEL_ERROR: CHANNEL No OUT OF RANGE!"
    WARNING_MMDC_CS_MSG_NOT_ALLOW "sim_sat_mmdc_cs_send_ilm() MSG NOT ALLOWED!"
    WARNING_UIM_CAT_MSG_NOT_ALLOW "uim_sim_send_ilm() MSG NOT ALLOWED!"
    WARNING_UIM_CAT_UNEXPECTED_TR "uim_sat_terminal_rsp_handler() - unexpected %Msat_proactive_cmd_enum"
    WARNING_UIM_CAT_UNEXPECTED_ENVELOPE "uim_sat_envelope_handler() - unexpected %Msat_tag_enum"
    WARNING_REISSUE_REFRESH_WRONG_DATA "sat_reissue_refresh_handler() WRONG DATA and INTERRUPT the REFRESH!"
    WARNING_USIM_UFC_LEN_TOO_LONG "USIM UFC FILE SIZE TOO LONG!"


    ERROR_SIM_RESET_ABNORMAL_CMD_RETRY "SIM_RESET_ABNORMAL: command retry"
    ERROR_SERVICE_NOT_DEFINED "%Msim_service_enum Not Defined!"
    ERROR_SIM_INTERFACE_ERROR "SIM_ERROR: interface = %d Not Valid!"


    GROUP3_SIM_START_TIMER "sim_start_timer()"
    GROUP3_SIM_STOP_TIMER "sim_stop_timer()"
    GROUP3_SIM_START_RECOVERY_TIMER "sim_start_recovery_timer()"


    GROUP2_SIM_ERROR_HANDLE "sim_error_handler()"
    GROUP2_SIM_APP_ERROR_HANDLE "sim_app_error_handler()"

    GROUP2_SIM_READ_ECC_ELP "sim_read_ecc_elp()"
    GROUP2_SIM_PROFILE_DOWNLOAD "sim_profile_download()"
    GROUP2_SIM_READ_PHASE "sim_read_phase()"
    GROUP2_SIM_GET_DN_TYPE "sim_get_dn_type()"
    GROUP2_SIM_GET_PS_INFO "sim_get_ps_info()"
    GROUP2_SIM_READ_SERVICE_TABLE "sim_read_service_table()"
    GROUP2_SIM_INITIALIZATION "sim_initialization()"
    GROUP2_SIM_GET_CHV_INFO "sim_get_chv_info()"
    GROUP2_SIM_STARTUP_READ "sim_startup_read()"
    GROUP2_SIM_AL_RESET "sim_al_reset()"
    GROUP2_SIM_RESET_ABNORMAL "sim_reset_abnormal()"
    GROUP2_SIM_EXCEPTION_HANDLE "sim_exception_handle()"
    GROUP2_SIM_AL_VERIFY_CHV "sim_al_verify_chv()"
    GROUP2_SIM_AL_UNBLOCK_CHV "sim_al_unblock_chv()"
    GROUP2_SIM_AL_CHANGE_CHV "sim_al__change_chv()"
    GROUP2_SIM_AL_SWITCH_CHV "sim_al_switch_chv()"
    GROUP2_SIM_AL_READ_BINARY "sim_al_read_binary()"
    GROUP2_SIM_AL_UPDATE_BINARY "sim_al_update_binary()"
    GROUP2_SIM_AL_UPDATE_RECORD "sim_al_update_record()"
    GROUP2_SIM_AL_RUN_GSM_ALGO "sim_al_run_gsm_algo()"
    GROUP2_SIM_AL_SEEK "sim_al_run_gsm_algo()"
    GROUP2_SIM_AL_STATUS "sim_al_status()"
    GROUP2_SIM_AL_REHABILITATE "sim_al_rehabilitate()"
    GROUP2_SIM_AL_INVALIDATE "sim_al_invalidate()"
    GROUP2_SIM_AL_INCREASE "sim_al_increase()"
    GROUP2_SIM_AL_POWEROFF "sim_al_poweroff()"
    GROUP2_SIM_AL_READ_RECORD "sim_al_read_record()"
    GROUP2_SIM_AL_GET_RESPONSE "sim_al_get_response()"
    GROUP2_SIM_AL_FETCH "sim_al_fetch()"
    GROUP2_SIM_AL_TERMINAL_RESPONSE "sim_al_terminal_response()"
    GROUP2_SIM_AL_TERMINAL_PROFILE "sim_al_terminal_profile()"
    GROUP2_SIM_AL_ENVELOPE "sim_al_envelope()"
    GROUP2_SIM_AL_SEARCH_RECORD "sim_al_search_record()"
    GROUP2_USIM_AL_MANAGE_CHANNEL "usim_al_manage_channel()"
    GROUP2_USIM_AL_TERMINAL_CAPABILITY "usim_al_terminal_capability()"

    GROUP2_SIM_CONNECT_REFRESH "sim_connect_refresh()"

    GROUP2_USIM_RESET_ABNORMAL "usim_reset_abnormal()"
    GROUP2_CSIM_RESET_ABNORMAL "csim_reset_abnormal()"
    GROUP2_ISIM_RESET_ABNORMAL "isim_reset_abnormal()"
    GROUP2_USIM_EXCEPTION_HANDLE "usim_exception_handle()"
    GROUP2_CSIM_EXCEPTION_HANDLE "csim_exception_handle()"
    GROUP2_ISIM_EXCEPTION_HANDLE "isim_exception_handle()"

    GROUP2_SIM_APDU_RESP "sim_apdu_resp()"
    GROUP2_USIM_APDU_RESP "usim_apdu_resp()"

    GROUP2_BUILD_TERMINAL_RESPONSE "build_terminal_response()"
    GROUP2_FIND_MODIFIED_TYPE "find_modified_type()"
    GROUP2_SAT_EVDL_MT_CALL "sat_evdl_mt_call()"
    GROUP2_SAT_EVDL_CALL_CONNECT "sat_evdl_call_connect()"
    GROUP2_SAT_EVDL_CALL_DISCONNECT "sat_evdl_call_disconnect()"
    GROUP2_SAT_EVDL_LOCATION_STATUS "sat_evdl_location_status()"
    GROUP2_SAT_EVDL_USER_ACTIVITY "sat_evdl_user_activity()"
    GROUP2_SAT_EVDL_IDLE_SCREEN_AVAILABLE "sat_evdl_idle_screen_available()"
    GROUP2_SAT_EVDL_CARD_READER_STATUS "sat_evdl_card_reader_status()"
    GROUP2_SAT_EVDL_LANGUAGE_SELECTION "sat_evdl_language_selection()"
    GROUP2_SAT_EVDL_BROWSER_TERMINATION "sat_evdl_browser_termination()"
    GROUP2_SAT_EVDL_DATA_AVAILABLE "sat_evdl_data_available()"
    GROUP2_SAT_EVDL_CHANNEL_STATUS "sat_evdl_channel_status()"
    GROUP2_SAT_EVDL_ACCESS_TECHNOLOGY_CHANGE "sat_evdl_access_technology_change()"
    GROUP2_SAT_EVDL_NW_SEARCH_MODE_CHANGE "sat_evdl_nw_search_mode_change()"
    GROUP2_SAT_EVDL_NW_REJECT "sat_evdl_nw_reject()"
    GROUP2_SAT_EVDL_HCI_CONNECTIVITY "sat_evdl_hci_connectivity()"
    GROUP2_SAT_TIMER_EXPIRATION "sat_timer_expiration()"
    GROUP2_SAT_CALL_CTRL_CHECK "sat_call_ctrl_check()"
    GROUP2_SAT_SMS_CTRL_CHECK "sat_sms_ctrl_check()"
    GROUP2_SAT_START_BASE_TIMER "sat_start_base_timer()"
    GROUP2_SAT_STOP_BASE_TIMER "sat_stop_base_timer()"
    GROUP2_SAT_START_TIMER "sat_start_timer()"
    GROUP2_SAT_STOP_TIMER "sat_stop_timer()"
    GROUP2_SAT_TIMER_EXPIRY_HDLR "sat_timer_expiry_hdlr()"
    GROUP2_DECODE_TEXT_STRING "decode_text_string()"
    GROUP2_DECODE_ICON_ID "decode_icon_id()"
    GROUP2_DECODE_ALPHA_ID "decode_alpha_id()"
    GROUP2_DECODE_ONLY_DATA_BLOCK "decode_only_data_block()"
    GROUP2_DECODE_ONLY_U8 "decode_only_u8()"
    GROUP2_DECODE_DURATION "decode_duration()"
    GROUP2_DECODE_ITEM "decode_item()"
    GROUP2_DECODE_ITEM_NEXT_ACTION_IND "decode_item_next_action_ind()"
    GROUP2_DECODE_ITEM_ICON_ID_LIST "decode_item_icon_id_list"
    GROUP2_DECODE_FILE_LIST "decode_file_list()"
    GROUP2_ENCODE_TEXT_STRING "encode_text_string()"


    GROUP3_SIM_CMD_TX "%Msim_instruction_code_enum : length: %hd"
    GROUP3_SIM_CMD_RX "APDU_rx length: %hd"
    GROUP3_SIM_CMD_APDU_TX "APDU_tx %hd: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X"
    GROUP3_SIM_CMD_APDU_RX "APDU_rx %hd: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X"


    GROUP3_USIM_CMD_TX "%Musim_instruction_code_enum : length: %hd"
    GROUP3_USIM_CMD_RX "APDU_rx length: %hd"
    GROUP3_USIM_CMD_APDU_TX "APDU_tx %hd: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X"
    GROUP3_USIM_CMD_APDU_RX "APDU_rx %hd: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X"


    SIM_GEMINI_CMD1 "[SIM_CMD1] %x %x %x %x, %x %x %x %x"
    SIM_GEMINI_CMD2 "[SIM_CMD2] %x %x %x %x, %x %x %x %x"
    SIM_GEMINI_CMD3 "[SIM_CMD3] %x %x %x %x, %x %x %x %x"
    SIM_GEMINI_GEN1 "[SIM_GEN1] file %x, line %x, %x %x, %x %x %x %x"
    SIM_GEMINI_GEN2 "[SIM_GEN2] %x %x, %x %x"

END_MODULE_MSG
# 2 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./service/nvram/include/nvram_trc.h" 1
# 147 "./service/nvram/include/nvram_trc.h"
# 1 "./build/HCT6737M_65_N/LWG_DSDS/nvram_auto_gen/nvram_gen_trc.h" 1
typedef enum {
    _NVRAM_EF_SYS_LID = 0,
    _NVRAM_EF_IMPT_COUNTER_LID = 8,
    _NVRAM_EF_L1_AGCPATHLOSS_LID = 15,
    _NVRAM_EF_L1_RAMPTABLE_GSM850_LID = 16,
    _NVRAM_EF_L1_RAMPTABLE_GSM900_LID = 17,
    _NVRAM_EF_L1_RAMPTABLE_DCS1800_LID = 18,
    _NVRAM_EF_L1_RAMPTABLE_PCS1900_LID = 19,
    _NVRAM_EF_L1_EPSK_RAMPTABLE_GSM850_LID = 20,
    _NVRAM_EF_L1_EPSK_RAMPTABLE_GSM900_LID = 21,
    _NVRAM_EF_L1_EPSK_RAMPTABLE_DCS1800_LID = 22,
    _NVRAM_EF_L1_EPSK_RAMPTABLE_PCS1900_LID = 23,
    _NVRAM_EF_L1_EPSK_INTERSLOT_RAMP_GSM850_LID = 24,
    _NVRAM_EF_L1_EPSK_INTERSLOT_RAMP_GSM900_LID = 25,
    _NVRAM_EF_L1_EPSK_INTERSLOT_RAMP_DCS1800_LID = 26,
    _NVRAM_EF_L1_EPSK_INTERSLOT_RAMP_PCS1900_LID = 27,
    _NVRAM_EF_L1_AFCDATA_LID = 28,
    _NVRAM_EF_L1_TXIQ_LID = 29,
    _NVRAM_EF_L1_RFSPECIALCOEF_LID = 30,
    _NVRAM_EF_L1_INTERSLOT_RAMP_GSM850_LID = 31,
    _NVRAM_EF_L1_INTERSLOT_RAMP_GSM900_LID = 32,
    _NVRAM_EF_L1_INTERSLOT_RAMP_DCS1800_LID = 33,
    _NVRAM_EF_L1_INTERSLOT_RAMP_PCS1900_LID = 34,
    _NVRAM_EF_L1_CRYSTAL_AFCDATA_LID = 35,
    _NVRAM_EF_L1_CRYSTAL_CAPDATA_LID = 36,
    _NVRAM_EF_L1_GMSK_TX_POWER_ROLLBACK_TABLE_LID = 37,
    _NVRAM_EF_L1_EPSK_TX_POWER_ROLLBACK_TABLE_LID = 38,
    _NVRAM_EF_L1_GMSK_TXPC_LID = 39,
    _NVRAM_EF_L1_EPSK_TXPC_LID = 40,
    _NVRAM_EF_L1_LNAPATHLOSS_LID = 41,
    _NVRAM_EF_L1_TEMPERATURE_ADC_LID = 42,
    _NVRAM_EF_UL1_TEMP_DAC_LID = 2816,
    _NVRAM_EF_UL1_PATHLOSS_BAND1_LID = 2817,
    _NVRAM_EF_UL1_PATHLOSS_BAND2_LID = 2818,
    _NVRAM_EF_UL1_PATHLOSS_BAND3_LID = 2819,
    _NVRAM_EF_UL1_PATHLOSS_BAND4_LID = 2820,
    _NVRAM_EF_UL1_PATHLOSS_BAND5_LID = 2821,
    _NVRAM_EF_UL1_PATHLOSS_BAND6_LID = 2822,
    _NVRAM_EF_UL1_PATHLOSS_BAND7_LID = 2823,
    _NVRAM_EF_UL1_PATHLOSS_BAND8_LID = 2824,
    _NVRAM_EF_UL1_PATHLOSS_BAND9_LID = 2825,
    _NVRAM_EF_UL1_PATHLOSS_BAND10_LID = 2826,
    _NVRAM_EF_UL1_PATHLOSS_BAND11_LID = 2827,
    _NVRAM_EF_UL1_PATHLOSS_BAND19_LID = 2835,
    _NVRAM_EF_UL1_TXDAC_BAND1_LID = 2836,
    _NVRAM_EF_UL1_TXDAC_BAND2_LID = 2837,
    _NVRAM_EF_UL1_TXDAC_BAND3_LID = 2838,
    _NVRAM_EF_UL1_TXDAC_BAND4_LID = 2839,
    _NVRAM_EF_UL1_TXDAC_BAND5_LID = 2840,
    _NVRAM_EF_UL1_TXDAC_BAND6_LID = 2841,
    _NVRAM_EF_UL1_TXDAC_BAND7_LID = 2842,
    _NVRAM_EF_UL1_TXDAC_BAND8_LID = 2843,
    _NVRAM_EF_UL1_TXDAC_BAND9_LID = 2844,
    _NVRAM_EF_UL1_TXDAC_BAND10_LID = 2845,
    _NVRAM_EF_UL1_TXDAC_BAND11_LID = 2846,
    _NVRAM_EF_UL1_TXDAC_BAND19_LID = 2854,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND1_LID = 2855,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND2_LID = 2856,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND3_LID = 2857,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND4_LID = 2858,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND5_LID = 2859,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND6_LID = 2860,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND7_LID = 2861,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND8_LID = 2862,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND9_LID = 2863,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND10_LID = 2864,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND11_LID = 2865,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND19_LID = 2873,
    _NVRAM_EF_UL1_PATHLOSS2_BAND1_LID = 2874,
    _NVRAM_EF_UL1_PATHLOSS2_BAND2_LID = 2875,
    _NVRAM_EF_UL1_PATHLOSS2_BAND3_LID = 2876,
    _NVRAM_EF_UL1_PATHLOSS2_BAND4_LID = 2877,
    _NVRAM_EF_UL1_PATHLOSS2_BAND5_LID = 2878,
    _NVRAM_EF_UL1_PATHLOSS2_BAND6_LID = 2879,
    _NVRAM_EF_UL1_PATHLOSS2_BAND7_LID = 2880,
    _NVRAM_EF_UL1_PATHLOSS2_BAND8_LID = 2881,
    _NVRAM_EF_UL1_PATHLOSS2_BAND9_LID = 2882,
    _NVRAM_EF_UL1_PATHLOSS2_BAND10_LID = 2883,
    _NVRAM_EF_UL1_PATHLOSS2_BAND11_LID = 2884,
    _NVRAM_EF_UL1_PATHLOSS2_BAND19_LID = 2892,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND1_LID = 2893,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND2_LID = 2894,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND3_LID = 2895,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND4_LID = 2896,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND5_LID = 2897,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND6_LID = 2898,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND7_LID = 2899,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND8_LID = 2900,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND9_LID = 2901,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND10_LID = 2902,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND11_LID = 2903,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND19_LID = 2911,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND1_LID = 2912,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND2_LID = 2913,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND3_LID = 2914,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND4_LID = 2915,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND5_LID = 2916,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND6_LID = 2917,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND7_LID = 2918,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND8_LID = 2919,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND9_LID = 2920,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND10_LID = 2921,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND11_LID = 2922,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND19_LID = 2930,
    _NVRAM_EF_UL1_AFCDAC_LID = 2931,
    _NVRAM_EF_UL1_AFCCAP_LID = 2932,
    _NVRAM_EF_BARCODE_NUM_LID = 107,
    _NVRAM_EF_CAL_FLAG_LID = 108,
    _NVRAM_EF_CAL_DATA_CHECK_LID = 109,
    _NVRAM_EF_IMEI_IMEISV_LID = 165,
    _NVRAM_EF_SML_LID = 166,
    _NVRAM_EF_SIM_LOCK_LID = 167,
    _NVRAM_EF_SYS_STATISTICS_LID = 7,
    _NVRAM_EF_AS_BAND_SETTING_LID = 121,
    _NVRAM_EF_L1_2G_RF_PARAMETER_LID = 113,
    _NVRAM_EF_BAND_INFO_LID = 122,
    _NVRAM_EF_GAS_WORKING_BAND_INFO_LID = 422,
    _NVRAM_EF_TST_FILTER_LID = 123,
    _NVRAM_EF_GAS_CSG_FINGERPRINT_LID = 188,
    _NVRAM_EF_DHL_FILTER_LID = 416,
    _NVRAM_EF_PORT_SETTING_LID = 124,
    _NVRAM_EF_SMSAL_SMS_LID = 158,
    _NVRAM_EF_SMSAL_MAILBOX_ADDR_LID = 159,
    _NVRAM_EF_SMSAL_COMMON_PARAM_LID = 160,
    _NVRAM_EF_SMSAL_SMSP_LID = 161,
    _NVRAM_EF_SMSAL_MWIS_LID = 162,
    _NVRAM_EF_CB_DEFAULT_CH_LID = 163,
    _NVRAM_EF_CB_CH_INFO_LID = 164,
    _NVRAM_EF_TCM_CID_0_PROFILE_LID = 150,
    _NVRAM_EF_TCM_PDP_PROFILE_LID = 151,
    _NVRAM_EF_CFU_FLAG_LID = 152,
    _NVRAM_EF_MM_LOCIGPRS_LID = 153,
    _NVRAM_EF_ALS_LINE_ID_LID = 155,
    _NVRAM_EF_MSCAP_LID = 156,
    _NVRAM_EF_CLASSMARK_RACAP_LID = 126,
    _NVRAM_EF_SIM_ASSERT_LID = 127,
    _NVRAM_EF_RTC_DATA_LID = 128,
    _NVRAM_EF_NET_PAR_LID = 129,
    _NVRAM_EF_UMTS_BAND_PRIORITY_LID = 142,
    _NVRAM_EF_UMTS_DMCR_SETTING_LID = 420,
    _NVRAM_EF_UMTS_SIB_SKIP_SETTING_LID = 421,
    _NVRAM_EF_UMTS_IMSI_LID = 131,
    _NVRAM_EF_UMTS_START_HFN_LID = 132,
    _NVRAM_EF_UMTS_USIME_RRC_DYNAMIC_CAP_LID = 133,
    _NVRAM_EF_UMTS_FREQUENCY_REPOSITORY_LID = 138,
    _NVRAM_EF_PREV_VISITED_CELL_INFO_LID = 139,
    _NVRAM_EF_UE_CSG_LIST_LID = 140,
    _NVRAM_EF_UMTS_FINGERPRINT_INFO_LID = 141,
    _NVRAM_EF_L1_3G_CAL_DATA_LID = 134,
    _NVRAM_EF_ETWS_SETTING_LID = 173,
    _NVRAM_EF_CSM_ESSP_LID = 176,
    _NVRAM_EF_CUST_HW_LEVEL_TBL_LID = 143,
    _NVRAM_EF_UEM_MANUFACTURE_DATA_LID = 144,
    _NVRAM_EF_UEM_RMI_DATA_LID = 145,
    _NVRAM_EF_GPS_SETTING_DATA_LID = 146,
    _NVRAM_EF_MS_SECURITY_LID = 168,
    _NVRAM_EF_PHB_LN_ENTRY_LID = 170,
    _NVRAM_EF_PHB_LN_TYPE_SEQ_LID = 171,
    _NVRAM_EF_SYS_CACHE_OCTET_LID = 181,
    _NVRAM_EF_RAC_PREFERENCE_LID = 185,
    _NVRAM_EF_PS_CONFORMANCE_TESTMODE_LID = 172,
    _NVRAM_EF_PHB_LID = 169,
    _NVRAM_EF_TST_CONFIG_LID = 196,
    _NVRAM_EF_MSQ_LIST_LID = 175,
    _NVRAM_EF_EPSLOCI_EPSNSC_TIN_LID = 261,
    _NVRAM_EF_LTE_PREFERENCE_LID = 262,
    _NVRAM_EF_ERRC_STORED_CARRIER_LID = 263,
    _NVRAM_EF_ERRC_PERFORMANCE_PARA_LID = 264,
    _NVRAM_EF_ERRC_FINGER_PRINT_LID = 265,
    _NVRAM_EF_ERRC_LEARNED_MCC_LID = 266,
    _NVRAM_EF_ERRC_STORED_CELL_LID = 267,
    _NVRAM_EF_ERRC_AFR_SETTING_LID = 268,
    _NVRAM_EF_LTE_CAP_LID = 269,
    _NVRAM_EF_UE_EUTRA_CAP_CSFB_LID = 270,
    _NVRAM_EF_UE_EUTRA_CAP_MMDC_LID = 271,
    _NVRAM_EF_NWSEL_DATA_LID = 187,
    _NVRAM_EF_EL1_PWRONCAL_LID = 197,
    _NVRAM_EF_EL1_DSPLOGFILTER_LID = 198,
    _NVRAM_EF_EL1_FREQADJTBL_LID = 199,
    _NVRAM_EF_EL1_RSSIGAINTBL_1STBAND_LID = 200,
    _NVRAM_EF_EL1_RSSIGAINTBL_2NDBAND_LID = 201,
    _NVRAM_EF_EL1_RSSIGAINTBL_3RDBAND_LID = 202,
    _NVRAM_EF_EL1_RSSIGAINTBL_4THBAND_LID = 203,
    _NVRAM_EF_EL1_RSSIGAINTBL_5THBAND_LID = 204,
    _NVRAM_EF_EL1_RSSIGAINTBL_6THBAND_LID = 205,
    _NVRAM_EF_EL1_RSSIGAINTBL_7THBAND_LID = 206,
    _NVRAM_EF_EL1_RSSIGAINTBL_8THBAND_LID = 207,
    _NVRAM_EF_EL1_RSSIGAINTBL_9THBAND_LID = 208,
    _NVRAM_EF_EL1_RSSIGAINTBL_10THBAND_LID = 209,
    _NVRAM_EF_EL1_RSSIGAINTBL_11THBAND_LID = 210,
    _NVRAM_EF_EL1_RSSIGAINTBL_12THBAND_LID = 211,
    _NVRAM_EF_EL1_RSSIGAINTBL_13THBAND_LID = 212,
    _NVRAM_EF_EL1_RSSIGAINTBL_14THBAND_LID = 213,
    _NVRAM_EF_EL1_CTRL_REG_RW_LID = 214,
    _NVRAM_EF_EL1_TXDAC_1STBAND_LID = 215,
    _NVRAM_EF_EL1_TXDAC_2NDBAND_LID = 216,
    _NVRAM_EF_EL1_TXDAC_3RDBAND_LID = 217,
    _NVRAM_EF_EL1_TXDAC_4THBAND_LID = 218,
    _NVRAM_EF_EL1_TXDAC_5THBAND_LID = 219,
    _NVRAM_EF_EL1_TXDAC_6THBAND_LID = 220,
    _NVRAM_EF_EL1_TXDAC_7THBAND_LID = 221,
    _NVRAM_EF_EL1_TXDAC_8THBAND_LID = 222,
    _NVRAM_EF_EL1_TXDAC_9THBAND_LID = 223,
    _NVRAM_EF_EL1_TXDAC_10THBAND_LID = 224,
    _NVRAM_EF_EL1_TXDAC_11THBAND_LID = 225,
    _NVRAM_EF_EL1_TXDAC_12THBAND_LID = 226,
    _NVRAM_EF_EL1_TXDAC_13THBAND_LID = 227,
    _NVRAM_EF_EL1_TXDAC_14THBAND_LID = 228,
    _NVRAM_EF_EL1_TXPAOCTLEV_1STBAND_LID = 229,
    _NVRAM_EF_EL1_TXPAOCTLEV_2NDBAND_LID = 230,
    _NVRAM_EF_EL1_TXPAOCTLEV_3RDBAND_LID = 231,
    _NVRAM_EF_EL1_TXPAOCTLEV_4THBAND_LID = 232,
    _NVRAM_EF_EL1_TXPAOCTLEV_5THBAND_LID = 233,
    _NVRAM_EF_EL1_TXPAOCTLEV_6THBAND_LID = 234,
    _NVRAM_EF_EL1_TXPAOCTLEV_7THBAND_LID = 235,
    _NVRAM_EF_EL1_TXPAOCTLEV_8THBAND_LID = 236,
    _NVRAM_EF_EL1_TXPAOCTLEV_9THBAND_LID = 237,
    _NVRAM_EF_EL1_TXPAOCTLEV_10THBAND_LID = 238,
    _NVRAM_EF_EL1_TXPAOCTLEV_11THBAND_LID = 239,
    _NVRAM_EF_EL1_TXPAOCTLEV_12THBAND_LID = 240,
    _NVRAM_EF_EL1_TXPAOCTLEV_13THBAND_LID = 241,
    _NVRAM_EF_EL1_TXPAOCTLEV_14THBAND_LID = 242,
    _NVRAM_EF_EL1_ETVINLUTDATA_1STBAND_LID = 243,
    _NVRAM_EF_EL1_ETVINLUTDATA_2NDBAND_LID = 244,
    _NVRAM_EF_EL1_ETVINLUTDATA_3RDBAND_LID = 245,
    _NVRAM_EF_EL1_ETVINLUTDATA_4THBAND_LID = 246,
    _NVRAM_EF_EL1_ETVINLUTDATA_5THBAND_LID = 247,
    _NVRAM_EF_EL1_ETVINLUTDATA_6THBAND_LID = 248,
    _NVRAM_EF_EL1_ETVINLUTDATA_7THBAND_LID = 249,
    _NVRAM_EF_EL1_ETVINLUTDATA_8THBAND_LID = 250,
    _NVRAM_EF_EL1_ETVINLUTDATA_9THBAND_LID = 251,
    _NVRAM_EF_EL1_ETVINLUTDATA_10THBAND_LID = 252,
    _NVRAM_EF_EL1_ETVINLUTDATA_11THBAND_LID = 253,
    _NVRAM_EF_EL1_ETVINLUTDATA_12THBAND_LID = 254,
    _NVRAM_EF_EL1_ETVINLUTDATA_13THBAND_LID = 255,
    _NVRAM_EF_EL1_ETVINLUTDATA_14THBAND_LID = 256,
    _NVRAM_EF_EL1_ETCOMPPARAM_LID = 257,
    _NVRAM_EF_EL1_TEMPERATUREDAC_LID = 258,
    _NVRAM_EF_EL1_BAND_INDICATOR_LID = 272,
    _NVRAM_EF_EL1_RX_PDATABASE_LID = 273,
    _NVRAM_EF_EL1_TX_PDATABASE_LID = 274,
    _NVRAM_EF_EL1_RF_IO_LID = 275,
    _NVRAM_EF_EL1_CUSTOM_DYNAMIC_INIT_LID = 276,
    _NVRAM_EF_EL1_CUSTOM_DYNAMIC_INIT_DEBUG_LID = 277,
    _NVRAM_EF_EL1_RF_RX_PATH_CONFIG_LID = 278,
    _NVRAM_EF_EL1_MIPI_FEATURE_LID = 279,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_1STBAND_LID = 284,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_2NDBAND_LID = 285,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_3RDBAND_LID = 286,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_4THBAND_LID = 287,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_5THBAND_LID = 288,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_6THBAND_LID = 289,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_7THBAND_LID = 290,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_8THBAND_LID = 291,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_9THBAND_LID = 292,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_10THBAND_LID = 293,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_11THBAND_LID = 294,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_12THBAND_LID = 295,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_13THBAND_LID = 296,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_14THBAND_LID = 297,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_1STBAND_LID = 298,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_2NDBAND_LID = 299,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_3RDBAND_LID = 300,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_4THBAND_LID = 301,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_5THBAND_LID = 302,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_6THBAND_LID = 303,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_7THBAND_LID = 304,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_8THBAND_LID = 305,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_9THBAND_LID = 306,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_10THBAND_LID = 307,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_11THBAND_LID = 308,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_12THBAND_LID = 309,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_13THBAND_LID = 310,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_14THBAND_LID = 311,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_1STBAND_LID = 326,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_2NDBAND_LID = 327,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_3RDBAND_LID = 328,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_4THBAND_LID = 329,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_5THBAND_LID = 330,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_6THBAND_LID = 331,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_7THBAND_LID = 332,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_8THBAND_LID = 333,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_9THBAND_LID = 334,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_10THBAND_LID = 335,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_11THBAND_LID = 336,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_12THBAND_LID = 337,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_13THBAND_LID = 338,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_14THBAND_LID = 339,
    _NVRAM_EF_EL1_MPRADJTBL_LID = 259,
    _NVRAM_EF_EL1_AMPRADJTBL_LID = 260,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_1STBAND_LID = 312,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_2NDBAND_LID = 313,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_3RDBAND_LID = 314,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_4THBAND_LID = 315,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_5THBAND_LID = 316,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_6THBAND_LID = 317,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_7THBAND_LID = 318,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_8THBAND_LID = 319,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_9THBAND_LID = 320,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_10THBAND_LID = 321,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_11THBAND_LID = 322,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_12THBAND_LID = 323,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_13THBAND_LID = 324,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_14THBAND_LID = 325,
    _NVRAM_EF_EL1_RXON_BPIOFFSET_LID = 280,
    _NVRAM_EF_EL1_TXON_BPIOFFSET_LID = 281,
    _NVRAM_EF_EL1_RXOFF_BPIOFFSET_LID = 282,
    _NVRAM_EF_EL1_TXOFF_BPIOFFSET_LID = 283,
    _NVRAM_EF_EL1_MIPI_BYPASS_FEATURE_LID = 373,
    _NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_1STBAND_LID = 374,
    _NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_2NDBAND_LID = 375,
    _NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_3RDBAND_LID = 376,
    _NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_1STBAND_LID = 379,
    _NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_2NDBAND_LID = 380,
    _NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_3RDBAND_LID = 381,
    _NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_1STBAND_LID = 384,
    _NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_2NDBAND_LID = 385,
    _NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_3RDBAND_LID = 386,
    _NVRAM_EF_EL1_MIPI_RX_DATA_1STBAND_LID = 340,
    _NVRAM_EF_EL1_MIPI_RX_DATA_2NDBAND_LID = 341,
    _NVRAM_EF_EL1_MIPI_RX_DATA_3RDBAND_LID = 342,
    _NVRAM_EF_EL1_MIPI_RX_DATA_4THBAND_LID = 343,
    _NVRAM_EF_EL1_MIPI_RX_DATA_5THBAND_LID = 344,
    _NVRAM_EF_EL1_MIPI_RX_DATA_6THBAND_LID = 345,
    _NVRAM_EF_EL1_MIPI_RX_DATA_7THBAND_LID = 346,
    _NVRAM_EF_EL1_MIPI_RX_DATA_8THBAND_LID = 347,
    _NVRAM_EF_EL1_MIPI_RX_DATA_9THBAND_LID = 348,
    _NVRAM_EF_EL1_MIPI_RX_DATA_10THBAND_LID = 349,
    _NVRAM_EF_EL1_MIPI_RX_DATA_11THBAND_LID = 350,
    _NVRAM_EF_EL1_MIPI_RX_DATA_12THBAND_LID = 351,
    _NVRAM_EF_EL1_MIPI_RX_DATA_13THBAND_LID = 352,
    _NVRAM_EF_EL1_MIPI_RX_DATA_14THBAND_LID = 353,
    _NVRAM_EF_EL1_MIPI_TX_DATA_1STBAND_LID = 354,
    _NVRAM_EF_EL1_MIPI_TX_DATA_2NDBAND_LID = 355,
    _NVRAM_EF_EL1_MIPI_TX_DATA_3RDBAND_LID = 356,
    _NVRAM_EF_EL1_MIPI_TX_DATA_4THBAND_LID = 357,
    _NVRAM_EF_EL1_MIPI_TX_DATA_5THBAND_LID = 358,
    _NVRAM_EF_EL1_MIPI_TX_DATA_6THBAND_LID = 359,
    _NVRAM_EF_EL1_MIPI_TX_DATA_7THBAND_LID = 360,
    _NVRAM_EF_EL1_MIPI_TX_DATA_8THBAND_LID = 361,
    _NVRAM_EF_EL1_MIPI_TX_DATA_9THBAND_LID = 362,
    _NVRAM_EF_EL1_MIPI_TX_DATA_10THBAND_LID = 363,
    _NVRAM_EF_EL1_MIPI_TX_DATA_11THBAND_LID = 364,
    _NVRAM_EF_EL1_MIPI_TX_DATA_12THBAND_LID = 365,
    _NVRAM_EF_EL1_MIPI_TX_DATA_13THBAND_LID = 366,
    _NVRAM_EF_EL1_MIPI_TX_DATA_14THBAND_LID = 367,
    _NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_1STBAND_LID = 368,
    _NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_2NDBAND_LID = 369,
    _NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_3RDBAND_LID = 370,
    _NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_4THBAND_LID = 377,
    _NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_5THBAND_LID = 378,
    _NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_4THBAND_LID = 382,
    _NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_5THBAND_LID = 383,
    _NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_4THBAND_LID = 387,
    _NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_5THBAND_LID = 388,
    _NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_4THBAND_LID = 371,
    _NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_5THBAND_LID = 372,
    _NVRAM_EF_EL1_TAS_PARAMETER_LID = 404,
    _NVRAM_EF_EL1_SVLTE_BAND_INDICATOR_LID = 407,
    _NVRAM_EF_EL1_GPS_CO_TMS_DATA_LID = 406,
    _NVRAM_EF_MML1_CUSTOM_DYNAMIC_INIT_LID = 408,
    _NVRAM_EF_MML1_MIPI_INITIAL_CW_LID = 409,
    _NVRAM_EF_MML1_MIPI_USID_CHANGE_LID = 410,
    _NVRAM_EF_HMU_CONFIG_LID = 411,
    _NVRAM_EF_HMU_HD_CONFIG_LID = 412,
    _NVRAM_EF_NMU_CONFIG_LID = 413,
    _NVRAM_EF_REGIONAL_PHONE_MODE_LID = 415,
    _NVRAM_EF_IMS_PROFILE_LID = 178,
    _NVRAM_EF_LTECSR_PROFILE_LID = 179,
    _NVRAM_EF_VDM_ADS_PROFILE_LID = 180,
    _NVRAM_EF_L1_MIPI_CTRL_TABLE_GSM850_LID = 116,
    _NVRAM_EF_L1_MIPI_CTRL_TABLE_GSM900_LID = 117,
    _NVRAM_EF_L1_MIPI_CTRL_TABLE_DCS1800_LID = 118,
    _NVRAM_EF_L1_MIPI_CTRL_TABLE_PCS1900_LID = 119,
    _NVRAM_EF_L1_CUSTOM_DRDI_STATUS_DEBUGINFO_LID = 120,
    _NVRAM_EF_L1_TAS_CUSTOM_PARAMES_LID = 54,
    _NVRAM_EF_L1_TAS_CUSTOM_PDATA_LID = 55,
    _NVRAM_EF_SBP_MODEM_CONFIG_LID = 417,
    _NVRAM_EF_SBP_MODEM_DATA_CONFIG_LID = 418,
    _NVRAM_EF_2G_BA_INFO_LID = 424,
    _NVRAM_EF_UL1_3G_RF_PARAMETER_LID = 1026,
    _NVRAM_EF_UL1_IOT_CUSTOMIZATION_LID = 1027,
    _NVRAM_EF_UL1_HSPA_CATEGORY_LID = 1028,
    _NVRAM_EF_UL1_CUSTOM_DYNAMIC_INIT_DEBUG_LID = 195,
    _NVRAM_EF_UL1_MIPI_TPC_HIGHBAND1_LID = 1029,
    _NVRAM_EF_UL1_MIPI_TPC_HIGHBAND2_LID = 1030,
    _NVRAM_EF_UL1_MIPI_TPC_HIGHBAND3_LID = 1031,
    _NVRAM_EF_UL1_MIPI_TPC_LOWBAND1_LID = 1032,
    _NVRAM_EF_UL1_MIPI_TPC_LOWBAND2_LID = 1033,
    _NVRAM_EF_UL1_MIPI_RX_EVENT_HIGHBAND1_LID = 1039,
    _NVRAM_EF_UL1_MIPI_RX_EVENT_HIGHBAND2_LID = 1040,
    _NVRAM_EF_UL1_MIPI_RX_EVENT_HIGHBAND3_LID = 1041,
    _NVRAM_EF_UL1_MIPI_RX_EVENT_LOWBAND1_LID = 1042,
    _NVRAM_EF_UL1_MIPI_RX_EVENT_LOWBAND2_LID = 1043,
    _NVRAM_EF_UL1_MIPI_RX_DATA_HIGHBAND1_LID = 1044,
    _NVRAM_EF_UL1_MIPI_RX_DATA_HIGHBAND2_LID = 1045,
    _NVRAM_EF_UL1_MIPI_RX_DATA_HIGHBAND3_LID = 1046,
    _NVRAM_EF_UL1_MIPI_RX_DATA_LOWBAND1_LID = 1047,
    _NVRAM_EF_UL1_MIPI_RX_DATA_LOWBAND2_LID = 1048,
    _NVRAM_EF_UL1_MIPI_TX_EVENT_HIGHBAND1_LID = 1049,
    _NVRAM_EF_UL1_MIPI_TX_EVENT_HIGHBAND2_LID = 1050,
    _NVRAM_EF_UL1_MIPI_TX_EVENT_HIGHBAND3_LID = 1051,
    _NVRAM_EF_UL1_MIPI_TX_EVENT_LOWBAND1_LID = 1052,
    _NVRAM_EF_UL1_MIPI_TX_EVENT_LOWBAND2_LID = 1053,
    _NVRAM_EF_UL1_MIPI_TX_DATA_HIGHBAND1_LID = 1054,
    _NVRAM_EF_UL1_MIPI_TX_DATA_HIGHBAND2_LID = 1055,
    _NVRAM_EF_UL1_MIPI_TX_DATA_HIGHBAND3_LID = 1056,
    _NVRAM_EF_UL1_MIPI_TX_DATA_LOWBAND1_LID = 1057,
    _NVRAM_EF_UL1_MIPI_TX_DATA_LOWBAND2_LID = 1058,
    _NVRAM_EF_UL1_MIPI_ASM_ISOLATION_HIGHBAND1_LID = 1059,
    _NVRAM_EF_UL1_MIPI_ASM_ISOLATION_HIGHBAND2_LID = 1060,
    _NVRAM_EF_UL1_MIPI_ASM_ISOLATION_HIGHBAND3_LID = 1061,
    _NVRAM_EF_UL1_MIPI_ASM_ISOLATION_LOWBAND1_LID = 1062,
    _NVRAM_EF_UL1_MIPI_ASM_ISOLATION_LOWBAND2_LID = 1063,
    _NVRAM_EF_UL1_MIPI_INIT_CW_LID = 1064,
    _NVRAM_EF_UL1_MIPI_SLEEP_CW_LID = 1065,
    _NVRAM_EF_SYS_EXCEPTION_LID = 6,
    _NVRAM_EF_ADC_LID = 2560,
    NVRAM_TRC_LID_TOTAL
}nvram_trc_lid_enum;
# 148 "./service/nvram/include/nvram_trc.h" 2







START_MODULE_MSG MOD_NVRAM 20


    FUNC_NVRAM_STARTUP "NVRAM: startup handler"
    FUNC_NVRAM_STARTUP_CNF "NVRAM: confirm result: %02X"
    FUNC_NVRAM_READ "NVRAM: read handler"
    FUNC_NVRAM_READ_CNF "NVRAM: read result: %02X. Sniff: file_idx:%2X, para:%2X, %02X:%02X"
    FUNC_NVRAM_WRITE "NVRAM: write handler"
    FUNC_NVRAM_WRITE_CNF "NVRAM: write result: %02X"
    FUNC_NVRAM_WRITE_IMEI "NVRAM: write imei handler"
    FUNC_NVRAM_WRITE_IMEI_CNF "NVRAM: write imei result: %02X"
    FUNC_NVRAM_RESET "NVRAM: reset handler"
    FUNC_NVRAM_RESET_CNF "NVRAM: reset result: %02X"
    FUNC_NVRAM_TST "NVRAM: tst handler"
    FUNC_NVRAM_READ_SM "NVRAM: read sm handler"
    FUNC_NVRAM_READ_SM_CNF "NVRAM: read sm result: %02X. Sniff: file_idx:%2X, para:%2X, %02X:%02X"
    FUNC_NVRAM_WRITE_SM "NVRAM: write sm handler"
    FUNC_NVRAM_WRITE_SM_CNF "NVRAM: write sm result: %02X"


    STATE_NVRAM_NULL "NVRAM: State: NULL. Cannot initialized. Device fail?"
    STATE_NVRAM_NOT_READY "NVRAM: State: Not ready. Initialized but not receive STARTUP yet"
    STATE_NVRAM_READY "NVRAM: State: Ready. Receive STARTUP and ready"


    INFO_NVRAM_DRV_INIT "NVRAM: DRV report: initialized"
    INFO_NVRAM_DRV_UNFORMATTED "NVRAM: DRV report: DRV_UNFORMATTED"
    INFO_NVRAM_LOCK_STATUS "NVRAM: lock: %d"


    WARNING_NVRAM_SYS_RECORD "NVRAM: %d is corrupted"
    WARNING_NVRAM_ALL_LDI_INIT "NVRAM: Warning: all logical data items of category '%d' are to be reset; unformatted device or incompatible version?"


    ERROR_NVRAM_CANNOT_STARTUP "NVRAM: Receive STARTUP but cannot startup. Device fail?"
    ERROR_NVRAM_STATE "NVRAM: State error"
    ERROR_NVRAM_TST_INVALID_COMM "NVRAM: Invalid Command"

    FUNC_NVRAM_NOTIFY_EXCEPTION1 "NVRAM: Read exception error!"
    FUNC_NVRAM_NOTIFY_STATISTICS "NVRAM: Notification!!! Statistics updated!"
    FUNC_NVRAM_NOTIFY_EXCEPTION2 "NVRAM: Notification!!! Pending exceptions [SN: %x] [Type: %x] [TaskName: %8s][SysTime: (%2d/%2d) %2d:%2d]"
    FUNC_NVRAM_WRITE_EXCEPTION1 "nvram_write_exception(): ex_data == NULL"
    FUNC_NVRAM_WRITE_EXCEPTION2 "nvram_write_exception(): Read Exception [%d] Error!"


    IO_READ_DATA_ITEM_START "Read Start: LID=%d, rec_index=%d, rec_amount=%d, buffer_size=%d"
    IO_READ_DATA_ITEM_RESULT "Read Result: LID=%d, status=%d, line=%d"
    IO_READ_DATA_ITEM_SINGLE "Read Single Result: LID=%d, drv_status=%d, fat_status=%d, line=%d"
    IO_READ_DATA_ITEM_MULTIPLE "Read Multiple Result: LID=%d, drv_status=%d, fat_status=%d, line=%d"

    IO_WRITE_DATA_ITEM_START "Write Start: LID=%d, index =%d, is_init=%d"
    IO_WRITE_DATA_ITEM_RESULT "Write Result: LID=%d, status=%d, line= %d, init=%d"
    IO_WRITE_DATA_ITEM_SINGLE "Write Single Result: LID=%d, drv_status=%d, fat_status=%d, line=%d"
    IO_WRITE_DATA_ITEM_MULTIPLE "Write Multiple Result: LID=%d, drv_status=%d, fat_status=%d, line=%d"

    IO_RESET_DATA_ITEM "Reset Data Item: LID=%d, line=%d"

    EX_IO_RECOVER_IMAGE_BY_LID "Recover image via lid error, LID=%d, error =%d, line=%d"

    FUNC_NVRAM_GET_DEFAULT_VALUE "NVRAM: Get default value LID=%d, result=%d, size=%d, des=%s"
    INFO_NVRAM_INIT_SDS_STATUS "NVRAM: init status, sw_status=%d, storage_mode=%d"
    FUNC_NVRAM_SDS_READ_DATA_ITEM "NVRAM: sds_read_data_item, LID=%d, result=%d"
    FUNC_NVRAM_SDS_FLUSH_IN "NVRAM: sds_flush_in, result=%d"
    FUNC_NVRAM_SDS_FLUSH_OUT "NVRAM: sds_flush_out"
    FUNC_NVRAM_SDS_THROW_EXCEPTION "NVRAM: sds_throw_exception, error=%d line=%d"

    FUNC_NVRAM_AP_BIN_REGION_BACKUP "NVRAM: nvram_ap_bin_region_backup"


    OTP_INIT "Init OTP"
    OTP_FAKE_WRITE "OTP Write Area: %x~%x"
    OTP_AREA_ALLOW "OTP Area Allowed: %x~%x"
    OTP_PROGRAM_TWICE "OTP Area programmed twice: %x~%x"
    OTP_OVERSCOPE "OTP Area Overscope: 0x%X~0x%X"
    OTP_READ_RESULT "OTP_Read result = %d, range =%x : %x"
    OTP_WRITE_RESULT "OTP_Write result = %d"


    MERGE_WRITE_TEMP_RESULT "Write temp record Result: lid_moving_index=%d, lid_adding_index=%d, fat_status=%d, line=%d"
    MERGE_TRUNK_STATUS "FS_Open_Truncate status: %d"
    MERGE_OPEN_PKG_FILE_RESULT "nvram_create_package_file: package_File = %d"


    TEST_RESET_OK "[NVRAM][Test]Exception record clear complete!"
    TEST_RESET_FAIL "[NVRAM][Test]Error to clear Exception record!"
    TEST_RESET_ALL_OK "[NVRAM][Test]All data item has been reset!"
    TEST_RESET_ALL_FAIL "[NVRAM][Test]Reset all data item failed!"
    TEST_RESET_INVALID_LID "[NVRAM][Test]Invalid LID!"
    TEST_RESET_CERTAIN_OK "[NVRAM][Test]Data item has been reset!"
    TEST_RESET_CERTAIN_FAIL "[NVRAM][Test]Reset data item failed!"

    TEST_VALID_EXCEPTIONS "[NVRAM][Test]Total %d Exceptions Vaild!"
    TEST_INVALID_EXCEPTIONS "[NVRAM][Test]Exception #%d is Invaild!"
    TEST_REC_NUM_OUT_RANGE "[NVRAM][Test]Get Exception record number out of range!"
    TEST_RESET_STAT_OK "[NVRAM][Test]Reset statistics succeded!"
    TEST_RESET_STAT_FAIL "[NVRAM][Test]Reset statistics failed!"
    TEST_RESET_ALLOC_FAIL "[NVRAM][Test]Could not allocat ctrl buffer! Show statistics info detail abort!"
    TEST_GET_STAT_FAIL "[NVRAM][Test]Get statistic information form nvram error!"

    TEST_SYSINFO_DETAIL1 "[NVRAM][Test][Sysinfo]%2d: [%4d][%4d][%4d][%4d][%4d]"
    TEST_SYSINFO_DETAIL2 "[NVRAM][Test][Sysinfo]%2d: [%7s %4d][%7s %4d][%7s %4d][%7s %4d][%7s %4d]"

    TEST_SYSINFO_STATUS "[NVRAM][Test][Sysinfo]status = %u"
    TEST_SYSINFO_MAX_SYSMEM "[NVRAM][Test][Sysinfo]Max SysMem used = %u"
    TEST_SYSINFO_MAX_SYSDBGMEM "[NVRAM][Test][Sysinfo]Max SysDbgMem used = %u"
    TEST_SYSINFO_MAX_TASK_STACK_USED "[NVRAM][Test][Sysinfo]Max task stack used:"

    TEST_SYSINFO_MAX_HISR_STACK_USED "[NVRAM][Test][Sysinfo]Max hisr stack used:"
    TEST_SYSINFO_MAX_TASK_EXTQ_ENQED "[NVRAM][Test][Sysinfo]Max task extq enqued:"
    TEST_SYSINFO_CTRLBUFF_ALLOC "[NVRAM][Test][Sysinfo]Max ctrl buff num allocated:"
    TEST_SYSINFO_CTRLBUFF_LIST "[NVRAM][Test][Sysinfo](8/16/32/64/128) / (256/512/1024/2048/4096) / (8192/16384/32768/65536)"


    L1_SEND_UNINIT_LID "[NVRAM][L1_DEF]Un-cali: LID = %d"
    L1_SEND_UNINIT_LID_PKG "[NVRAM][L1_DEF]Un-cali: LID = %d, Description = package lid"


 ABNORMAL_RETURN "[NVRAM][UNZIP]Abnormal return at line:%d"
 UNZIP_SIZE "[NVRAM][UNZIP]nvram_unzip_size()LID =%d"
 UNZIP_SIZE_RESULT "[NVRAM][UNZIP]nvram_unzip_size()zip_size=%d, org_size=%d"
 UNZIP_RESULT "[NVRAM][UNZIP]nvram_unzip_default_value() zip_size=%d, org_size=%d, ret =%d"

    FUNC_NVRAM_VERSION_CONFLICT_RESOLVE "nvram_version_conflict_resolve step=%d"
    FUNC_NVRAM_SUPPLEMENTARY_CHECK "nvram_supplementary_check, type=%d"
    FUNC_NVRAM_INIT_ALL "nvram_init_all, category=%d"
    FUNC_NVRAM_INIT "nvram_init, step=%d, para=%d"
    FUNC_NVRAM_DRV_FAT_THROW_EXCEPTION "nvram_drv_fat_throw_exception, err=%d, line=%d"
    FUNC_NVRAM_RESET_DATA_ITEMS "nvram_reset_data_items, category=%d, state=%d, app_id=%d, lid=%d, rec_index=%d"
    FUNC_NVRAM_CREATE_ALL_FOLDER "nvram_create_all_folder, folder=%d"
    FUNC_NVRAM_DELETE_ALL_NVRAM_FILES "nvram_delete_all_nvram_files, bootup_type=%d"
    INFO_NVRAM_DATA_ITEM "LID=%Mnvram_trc_lid_enum, size=%d"

END_MODULE_MSG
# 3 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./modem/l4/smsal/include/smsal_trc.h" 1
# 225 "./modem/l4/smsal/include/smsal_trc.h"
START_MODULE_MSG MOD_SMSAL 20




   SMSAL_NW_TO_MS_PEER_MSG "[NW->MS]: %Msmsal_peer_msg_name_enum "
   SMSAL_MS_TO_NW_PEER_MSG "[MS->NW]: %Msmsal_peer_msg_name_enum "




   FUNC_SMSAL_INIT "SMSAL: init()"
   FUNC_SMSAL_INIT_REQ "SMSAL: startup handler"
   FUNC_SMSAL_INIT_CNF "SMSAL: startup confirm result: %d"
   FUNC_SMSAL_INIT_ME_ONLY_CNF "SMSAL: startup confirm (me only) result: %d"
   FUNC_SMSAL_READ "SMSAL: read handler"
   FUNC_SMSAL_READ_CNF "SMSAL: read result: %d, cause: %2x"
   FUNC_SMSAL_READ_RAW_DATA "SMSAL: read raw data handler"
   FUNC_SMSAL_READ_RAW_DATA_CNF "SMSAL: read raw data result: %d, cause: %2x"
   FUNC_SMSAL_WRITE "SMSAL: write handler"
   FUNC_SMSAL_WRITE_CNF "SMSAL: write result: %d, cause: %2x"
   FUNC_SMSAL_WRITE_RAW_DATA "SMSAL: write raw data handler"
   FUNC_SMSAL_WRITE_RAW_DATA_CNF "SMSAL: write raw data result: %d, cause: %2x"
   FUNC_SMSAL_DELETE "SMSAL: delete handler"
   FUNC_SMSAL_DELETE_CNF "SMSAL: delete result: %d, cause: %2x"
   FUNC_SMSAL_SEND "SMSAL: send handler"
   FUNC_SMSAL_SEND_CNF "SMSAL: send result: %d cause: %2x"
   FUNC_SMSAL_SEND_FROM_STORAGE "SMSAL: send from storage handler"
   FUNC_SMSAL_SEND_FROM_STORAGE_CNF "SMSAL: send from storage result: %d, cause: %2x"
   FUNC_SMSAL_SET_PARAM "SMSAL: set parameter handler"
   FUNC_SMSAL_SET_PARAM_CNF "SMSAL: set parameter result: %d, cause: %2x"
   FUNC_SMSAL_MEM_FULL "SMSAL: storage capacity full :%Msmsal_mem_full_enum"
   FUNC_SMSAL_MEM_EXCEED "SMSAL: MEM EXCEED : %Msmsal_mem_exceed_enum"
   FUNC_SMSAL_MEM_AVAILABLE "SMSAL: storage capacity available"
   FUNC_SMSAL_MSG_WAITING "SMSAL: message waiting"
   FUNC_SMSAL_MSG_WAITING_EXT "SMSAL: message waiting extension (msp:%d, line:%d)"
   FUNC_SMSAL_EVM_IND "SMSAL: Enhanced Voice Mail"
   FUNC_UPDATE_MSGBOX_REPORT "SMSAL: enter smsal_update_msgbox_for_report"
   FUNC_SMSAL_MSGBOX_POST "SMSAL: enter smsal_msgbox_post: index=%d"
   FUNC_SMSAL_MT_FIX_7BIT_EMPTY_CONTENT "SMSAL: enter smsal_mt_fix_7bit_empty_content"
   FUNC_SMSAL_INIT_FIX_7BIT_EMPTY_CONTENT "SMSAL: enter smsal_init_fix_7bit_empty_content"
   FUNC_SMSAL_IMS_SEND "SMSAL: smsal_ims_send_handler()"
   FUNC_SMSAL_IMS_SEND_CNF "SMSAL IMS: send result: %d cause: %2x"
   FUNC_SMSAL_RESET_FOR_NORMAL_INIT "SMSAL: reset for normal init"
   FUNC_GET_PLMN "SMSAL: smsal_get_hplmn_id()"




   FUNC_SMSAL_MSG_REPLACE_HDLR "SMSAL: enter smsal_msg_replace_hdlr, pid=%d"
   FUNC_SMSAL_REPLACE_MSG_CNF "SMSAL: enter smsal_replace_msg_cnf"
   FUNC_SMSAL_REPLACE_MSG_REJ "SMSAL: enter smsal_replace_msg_rej"
   FUNC_SMSAL_MT_MSG_HDLR "SMSAL: enter smsal_mt_msg_hdlr"
   FUNC_SMSAL_DELIVER_NACK_POST "SMSAL: enter smsal_deliver_nack_post: smi=%d failure_cause=%d"
   FUNC_SMSAL_DELIVER_ACK_POST "SMSAL: enter smsal_deliver_ack_post: smi=%d"
   FUNC_SMSAL_NEW_MSG_IND "SMSAL: enter smsal_new_msg_ind: smi=%d"
   FUNC_SMSAL_MSG_SUBMIT_POST "SMSAL: enter smsal_msg_submit_post"
   FUNC_SMSAL_SEND_MSG_TEXT_MODE "SMSAL: enter smsal_send_msg_text_mode"
   FUNC_SMSAL_SEND_CMD_TEXT_MODE "SMSAL: enter smsal_send_cmd_text_mode"
   FUNC_SMSAL_SEND_PDU_MODE "SMSAL: enter smsal_send_pdu_mode"
   FUNC_SMSAL_SEND_CONC "SMSAL: enter smsal_send_conc"
   FUNC_SMSAL_IS_AVL_FOR_NEW_MSG "SMSAL: enter smsal_is_avl_for_new_msg"
   FUNC_SMSAL_STORE_NEW_MSG "SMSAL: enter smsal_store_new_msg"
   FUNC_CPHS_VM_IND "SMSAL: cphs voicemail indication"
   FUNC_SMSAL_IMS_SEND_DELIVER_CNF "SMSAL: enter smsal_ims_send_deliver_cnf"
   FUNC_SMSAL_IMS_SEND_STATUS_CNF "SMSAL: enter smsal_ims_send_status_report_cnf"


   FUNC_SMSAL_SIM_DATA_DL_HDLR "SMSAL: enter smsal_sim_data_dl_hdlr: smi=%d"
   FUNC_SMSAL_SAT_MO_SMS_CTRL_CNF "SMSAL: enter smsal_sat_mo_sms_ctrl_cnf"
   FUNC_SMSAL_SAT_SEND_MSG_CNF "SMSAL: enter smsal_sat_send_msg_cnf"
   FUNC_SMSAL_SAT_MO_MSG_CTRL "SMSAL: enter smsal_sat_mo_msg_ctrl"
   FUNC_SMSAL_SAT_SEND_CMD "SMSAL: enter smsal_sat_send_cmd"
   FUNC_SMSAL_SAT_SEND_MSG "SMSAL: enter smsal_sat_send_msg"




   FUNC_SMSAL_DELIVER_HDLR "SMSAL: receive mt message"
   FUNC_SMSAL_SUBMIT_ACK_HDLR "SMSAL: receive submit report ack"
   FUNC_SMSAL_SUBMIT_NACK_HDLR "SMSAL: receive submit report nack"
   FUNC_SMSAL_STATUS_REPORT_HDLR "SMSAL: receive status report: mr=%d"
   FUNC_SMSAL_SMMA_CNF "SMSAL: receive memory notification cnf: result=%d"




   FUNC_SMSAL_RESET_SHORT_MSG "SMSAL: enter smsal_reset_short_msg, storage_type=%Msmsal_storage_enum, record_no=%d"
   FUNC_SMSAL_READ_SHORT_MSG "SMSAL: enter smsal_read_short_msg, storage_type=%Msmsal_storage_enum, record_no=%d"
   FUNC_SMSAL_WRITE_SHORT_MSG "SMSAL: enter smsal_write_short_msg, storage_type=%Msmsal_storage_enum, record_no=%d"



   FUNC_SMSAL_SAT_FILE_CHANGE_HDLR "SMSAL: enter smsal_sat_file_change_hdlr"
   FUNC_SMSAL_SAT_FILE_CHANGE_RES "SMSAL: enter smsal_sat_file_change_res, result=%d"



   FUNC_SMSAL_CBCH_REQ_HANDLER "CB(SMSAL): enter smsal_cbch_req_handler"
   FUNC_SMSAL_CB_SEND_RATCM_CBCH_REQ "CB(SMSAL): enter smsal_cb_send_ratcm_cbch_req"
   FUNC_SMSAL_CB_SEND_EVAL_CBCH_REQ "CB(SMSAL): enter smsal_cb_send_eval_cbch_req"
   FUNC_SMSAL_CB_UPDATE_REQ_HANDLE "CB(SMSAL): enter smsal_cb_update_req_handler"
   FUNC_SMSAL_CB_FLUSH_OLDEST "CB(SMSAL): enter smsal_cb_flush_oldest"
   FUNC_SMSAL_RATCM_CB_GS_CHANGE_IND_HANDLER "CB(SMSAL): enter smsal_ratcm_cb_gs_change_ind_handler"
   FUNC_SMSAL_EVAL_CB_GS_CHANGE_IND_HANDLER "CB(SMSAL): enter smsal_eval_cb_gs_change_ind_handler"
   FUNC_SMSAL_RATCM_CB_DATA_IND_HANDLER "CB(SMSAL): enter smsal_ratcm_cb_data_ind_handler"
   FUNC_SMSAL_CB_SERVICE_BY_PLMN_HANDLER "CB(SMSAL): enter smsal_cb_service_by_plmn_handler"
   FUNC_SMSAL_EVAL_CB_DATA_IND_HANDLER "CB(SMSAL): enter smsal_eval_cb_data_ind_handler"
   INFO_UPDATE_CB_MID "CB(SMSAL): update cb mid"
   INFO_UPDATE_CB_MIR "CB(SMSAL): update cb mir"
   INFO_UPDATE_CB_DCS "CB(SMSAL): update cb dcs"
   INFO_UPDATE_CB_MASK "CB(SMSAL): update cb mask"
   INFO_UPDATE_CB_ALL_LANG "CB(SMSAL): update cb all language"
   FUNC_SMSAL_CB_RESET "CB(SMSAL): enter smsal_cb_reset"
   INFO_CB_PAGE_INFO "CB(SMSAL): recv a page: [%Mrat_enum] sn=%d mi=%d dcs=%d cur_page=%d total_page=%d"
   INFO_CB_RESERVED_PAGE_INFO "CB(SMSAL): recv a reserved_dcs cb page"
   INFO_CB_SERVICE_PLMN_NUM "CB(SMSAL): PLMN num in customer file=%d"
   ERROR_RECV_WRONG_CB_PAGE "CB(SMSAL): [%Mrat_enum] recv a wrong cb page (len=%d) "
   ERROR_RECV_UNSUPPORTED_CB_PAGE "CB(SMSAL): recv an unsupported cb page"
   ERROR_WHEN_WRITE_CB_PARA "CB(SMSAL): cb_write_rej: sub_act_code=%d cause=%d"
   ERROR_UNSUPPORTED_CB_TO_NMI "CB(SMSAL): unsupported cb page to dst[%Msmsal_nmi_dest_enum]"




   WRITE_CONC_MSG_INFO "SMSAL: write concatenated messaeg, %d segs, len of last seg:%d"
   STORE_MT_MSG_SUCC_INFO "SMSAL: store a mt msg, index=%d, storage=%d"
   INFO_SMSAL_FOUND_MSG_REQ_STATUS_REP "SMSAL: found a msg which requested status report previously mr=%d addr_len=%d addr_type=%2x addr_bcd=%2x %2x %2x %2x %2x %2x %2x %2x %2x %2x"
   INFO_SMSAL_UPDATE_STATUS_FOR_RCV_STATUS_REP "SMSAL: update status for receiving status report"
   INFO_SMSAL_MSGBOX_POST "SMSAL: smsal_msgbox_post ok: mr=%d"
   INFO_RECV_CLASS0_MSG "SMSAL: recv class0 message"
   INFO_RECV_CLASS1_MSG "SMSAL: recv class1 message"
   INFO_RECV_CLASS2_MSG "SMSAL: recv class2 message"
   INFO_RECV_CLASS3_MSG "SMSAL: recv class3 message"
   INFO_RECV_CLASS1_BUT_NVRAM_NOT_READ "SMSAL: recvv class1 message but nvram not read yet"
   MT_SMS_DISPATCH "SMSAL: MT SMS dispatch. [store=%d],[LMI=%d],[RMI=%d][dest=%d][rmi_index=%d]"
   MT_7BIT_EMPTY_CONTENT "SMSAL: FIX MT SMS 7bit code, have no content: [DCS=%d]"
   INIT_7BIT_EMPTY_CONTENT "SMSAL: FIX INIT SMS 7bit code, have no content: [DCS=%d]"

   INFO_SAT_MO_SMS_ALLOW_WITH_MODIFY "SMSAL: sat mo sms ctrl, allow with modification of addr, size_of_addr1=%d, size_of_addr2=%d"
   INFO_SAT_MO_SMS_ALLOW_WITHOUT_MODIFY "SMSAL: sat mo sms ctrl, allow without modification of addr"
   INFO_SMSAL_SAT_MO_MSG_CTRL_NOT_SUPPORT "SMSAL: sat mo sms ctrl not support"


   INFO_SEND_SMSAL_AS_CBCH_REQ "CB(SMSAL): send SMSAL_AS_CBCH_REQ to as"
   INFO_SEND_SMSAL_AS_CBCH_REQ_INTER_RAT "CB(SMSAL): NOT send SMSAL_AS_CBCH_REQ to as due to interRAT"
   INFO_SEND_SMSAL_AS_CB_UPDATE_REQ "CB(SMSAL): send SMSAL_AS_CB_UPDATE_REQ to as"
   INFO_SEND_SMSAL_AS_CB_UPDATE_REQ_INTER_RAT "CB(SMSAL): NOT send SMSAL_AS_CB_UPDATE_REQ to as due to interRAT"
   INFO_SEND_L4CSMSAL_CB_MSG_IND "CB(SMSAL): send L4CSMSAL_CB_MSG_IND to l4c"
   INFO_SEND_SAT_CB_DL_REQ "CB(SMSAL): send SAT_CB_DL_REQ to sim"
   INFO_SEND_SMSAL_CB_MSG_IND_TO_SELF "CB(SMSAL): send CB_DATA_IND to SMSAL: [%d/%d]"
   INFO_PLMN_ID "SMSAL: PLMN ID = %d"


   MSG_BOX_TOTAL_NUM "MB: total MB = %d "
   MSG_BOX_INFO_1 "MB(%d):[state=%d][status=%d][rec=%d][type=%d] "
   MSG_BOX_INFO_2 "MB(%d):[%Msmsal_storage_enum][%Msmsal_mti_enum]"

   INFO_STORAGE_SM "SM:[total=%d][used=%d][inbox=%d][outbox=%d]"
   INFO_STORAGE_ME "ME:[total=%d][used=%d][inbox=%d][outbox=%d]"

   INFO_MSGBOX_NUM_INFO "SMSAL: simchg=%d, insim=%d, inme=%d, otsim=%d, otme=%d, unread=%d, all_sim=%d, all_me=%d"

   INFO_EVM_STATUS_INFO "SMSAL: EVM - status data"
   INFO_EVM_MSG_INFO "SMSAL: EVM id=0x%x(%d), len=%d, day=%d, p=%d"
   INFO_EVM_MSG_EXT_INFO "SMSAL: EVM - extension data"

   INFO_GET_CUSTOM_SMSC "SMSAL:Finding the SC Addr from Custom Function"
   INFO_GET_CUSTOM_SMSC_ERROR "NO SC ADDR with this PLMN"
   INFO_SCA_LENGTH "SCA length = %d"


    INFO_TST_WRITE_SMS2SIM "SMSAL: tst write sms to sim info: set %03d byte as %02x"






   EF_SMS_NOT_SUPPORT "SMSAL: EFsms not support"
   EF_SMSS_NOT_SUPPORT "SMSAL: EFsmss not support"
   EF_SMSP_NOT_SUPPORT "SMSAL: EFsmsp not support"
   MSG_PTR_IS_NULL "SMSAL: Msg_ptr is NULL in smsal_cnma_timeout()"
   TIMER_IS_NOT_USED "SMSAL: the CNMI timer entry is not used"
   GSM_DEFAULT_7_BIT_NOT_EQUAL_TO_ANSCII "SMSAL: GSM default 7-bit != anscii"

   SMSALCB_RESET_OLD_BLK "CB(SMSAL):flush old session.(blk_id=%d, blk->sn=%d, new sn=%d, cause=%Mcb_geography_enum)"
   SMSAL_DISCARD_UNREG_APP_PORT "SMSAL: discard MT-SMS with port number=%d"
   SMSAL_CUT_PDU_LEN "SMSAL: PDU length is modied, old pdu_len = %d, new pdu_len = %d"




   WRONG_SMSAL_MSG "SMSAL: wrong message %d"
   SMSAL_REJECT_MSG_BEFORE_INIT "SMSAL: reject msg comes before normal initiation"

   NO_FREE_PENDING_ACT_STRUCT "SMSAL: no free pending action structure"
   GET_NVRAM_INFO "SMSAL: get_nvram_info error: result=%d rec_num=%d rec_size=%d"
   READ_SIM_ERROR "SMSAL: read sim error: access_id=%d, file_id=%02x, length=%d, para=%02x"
   WRITE_SIM_ERROR "SMSAL: write sim error: access_id=%d, file_id=%02x, length=%d, para=%02x"
   READ_SIM_FILEINFO_ERROR "SMSAL: read sim file info error: access_id=%d, file_id=%02x, info_type=%d"
   STORAGE_NOT_AVAILABLE "SMSAL: storage not available, storage_type = %d, requested num = %d, tot_sim = %d, used_sim = %d, tot_me = %d, used_me = %d"
   NO_SPACE_FOR_MT_SMS "SMSAL: no space for mt sms, cause=%d"
   SMSAL_WRONG_MSG_IN_SIM_ENTRY_FUNC "SMSAL: recv wrong msg in sim_entry_func: msgid=%d"
   SMSAL_WRONG_MSG_IN_NVM_ENTRY_FUNC "SMSAL: recv wrong msg in nvm_entry_func: msgid=%d"
   WRITE_SIM_ERROR_FOR_STORE_C2_MSG "SMSAL: write sim error for storing class message"
   SMSAL_EFSMS_CORRUPT "SMSAL: read a record in EFsms which may be corrupted: storage=%d record_no=%d"

   GET_NVRAM_SIZE_ERROR "SMSAL: get_nvram_size error: pdu_size=%d"
   SMSAL_MSGBOX_DEL_EMPTY_ERROR "SMSAL: delete an inVALID message: storage=%Msmsal_storage_enum record_no=%d"

   SMSAL_DECODE_SMS_PDU_ERROR "SMSAL: decode sms pdu error"
   SMSAL_DECODE_UDH_ERROR "SMSAL: UDH is invalid [%Msmsal_mti_enum] val: %x"


   SMSAL_SAT_MO_SMS_ERROR "SMSAL: sat mo sms ctrl error, not allow or sim error"


   SMSAL_START_TIMER_FUNC "SMSAL: start timer: timer_id=%d invoke_id=%d timeout=%d"
   SMSAL_STOP_TIMER_FUNC "SMSAL: stop timer: timer_id=%d invoke_id=%d"
   SMSAL_CNMA_EXE "SMSAL: cnmi_id=%d mode=%d"


END_MODULE_MSG
# 4 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./modem/l4/phb/include/phb_trc.h" 1
# 196 "./modem/l4/phb/include/phb_trc.h"
START_MODULE_MSG MOD_PHB 20


   FUNC_PHB_STARTUP "[PHB] startup handler"
   FUNC_PHB_STARTUP_ERR "[PHB] startup error handler"
   FUNC_PHB_STARTUP_CNF "[PHB] startup result: %02X"
   FUNC_PHB_IS_SIM_FILE_SUPPORT "[PHB] is sim file support, chv1_status: %d"

   FUNC_PHB_STARTUP_SYNC_LN_TYPE_SEQ "[LN] startup sync ln type seq"
   FUNC_PHB_STARTUP_ERASE_LN "[LN] startup erase ln"

   FUNC_PHB_READ "[PHB] read handler"
   FUNC_PHB_READ_USIM "[PHB] read usim handler"
   FUNC_PHB_READ_ERR "phb_read_err_handler: %d"
   FUNC_PHB_READ_CNF "[PHB] read result: %02X, total: %02X, src_id: %02X, msg_id: %04X"
   FUNC_PHB_READ_FAKE "[PHB] read piggyback"

   FUNC_PHB_WRITE "[PHB] write handler"
   FUNC_PHB_WRITE_USIM "[PHB] write usim handler"
   FUNC_PHB_WRITE_ERR "[PHB] write error handler"
   FUNC_PHB_WRITE_CONT "[PHB] write continue handler"
   FUNC_PHB_WRITE_CNF "[PHB] write result: %02X, total: %02X, src_id: %02X"

   FUNC_PHB_DELETE "[PHB] delete handler"
   FUNC_PHB_DELETE_USIM "[PHB] delete usim handler"
   FUNC_PHB_DELETE_ERR "[PHB] delete error handler"
   FUNC_PHB_DELETE_CONT "phb_delete_continue"
   FUNC_PHB_DELETE_CNF "[PHB] delete result: %02X, total: %2X, src_id: %2X"

   FUNC_PHB_SEARCH "[PHB] search handler"
   FUNC_PHB_SEARCH_ERR "[PHB] search error handler"
   FUNC_PHB_SEARCH_CONT "[PHB] search continue handler"
   FUNC_PHB_SEARCH_CNF "[PHB] search result: %02X, total: %02X, src_id: %02X, msg_id: %04X"
   FUNC_PHB_SEARCH_FAKE "[PHB] search fake"

   FUNC_PHB_APPROVE "[PHB] approve handler"
   FUNC_PHB_APPROVE_ERR "[PHB] approve error handler"
   FUNC_PHB_APPROVE_CONT "[PHB] approvecontinue handler"
   FUNC_PHB_APPROVE_CNF "[PHB] approve result: %02X, type: %02X, src_id: %2X"
   FUNC_PHB_APPROVE_ECC_LENGTH_ONE "[PHB] approve ecc length equal 1, false"
   FUNC_PHB_APPROVE_ECC_NW_ECC "[PHB] approve ecc, enter nw ecc"
   FUNC_PHB_APPROVE_ECC_NW_ECC_LEN_COMP "[PHB] approve ecc, enter nw ecc, nw_ecc_len[%d] = %d, dialing_number = %d"
   FUNC_PHB_APPROVE_ECC_NW_ECC_LEN_COMP_TRUE "[PHB] approve ecc, nw ecc, compare_n_bcd: TRUE [%d]"
   FUNC_PHB_APPROVE_ECC_NW_ECC_LEN_COMP_EQUAL "[PHB] approve ecc, nw ecc, len = len2 [%d]"
   FUNC_PHB_APPROVE_ECC_IS_NW_ECC "[PHB] approve ecc, is nw ecc, [%d]-th, esc = %d"
   FUNC_PHB_APPROVE_ECC_NOT_NW_ECC "[PHB] approve ecc, not nw ecc"
   FUNC_PHB_UPDATE_NW_ECC_LIST "[PHB] update nw ecc list handler"
   FUNC_PHB_UPDATE_NW_ECC_LIST_NUM "[PHB] update nw ecc list handler, num: %d"
   FUNC_PHB_UPDATE_NW_ECC_LIST_CATEGORY "[PHB] update nw ecc list handler, nw_ecc_esc[%d] = %d"

   FUNC_PHB_SAT_FILE_CHANGE "[PHB] SAT file change handler"
   FUNC_PHB_SAT_FILE_CHANGE_CNF "[PHB] SAT file change result: %02X, src_id: %2X"

   FUNC_PHB_IO_RETURN "[PHB] phb_IO_return"
   FUNC_PHB_IS_TYPE_VALID "[PHB] phb_is_type_valid"
   FUNC_PHB_ISSUE_IO_DELETE "[PHB] phb_issue_IO_delete"
   FUNC_PHB_ISSUE_IO_READ "[PHB] phb_issue_IO_read"
   FUNC_PHB_ISSUE_IO_WRITE "[PHB] phb_issue_IO_write"
   FUNC_PHB_PREPARE_DATA_TO_WRITE "[PHB] phb_prepare_data_to_write"
   FUNC_PHB_DATA_DESC_ENTRY_NEW "[PHB] phb_data_desc_entry_new"
   FUNC_PHB_DATA_DESC_ENTRY_RESET "[PHB] phb_data_desc_entry_reset"
   FUNC_PHB_DATA_DESC_FIND_NEXT_FREE "[PHB] phb_data_desc_find_next_free"
   FUNC_PHB_DATA_DESC_GET_FREE_COUNT "[PHB] phb_data_desc_get_free_count"
   FUNC_PHB_DATA_DESC_GET_DESC_BY_ID "[PHB] phb_data_desc_get_desc_by_ID"
   FUNC_PHB_DATA_DESC_GET_ID_BY_DESC "[PHB] phb_data_desc_get_ID_by_desc"
   FUNC_PHB_DATA_DESC_GET_RECORD_NUM "[PHB] phb_data_desc_get_record_num"
   FUNC_PHB_DATA_DESC_GET_RECORD_SIZE "[PHB] phb_data_desc_get_record_size"
   FUNC_PHB_DATA_DESC_IS_FREE "[PHB] phb_data_desc_is_free:%d -type: %d, record_index: %d-"
   PHB_TRC_DESC_MARK_FREE "[PHB] phb_data_desc_mark_free: desc_bytes[%d]:%d, --pos:%d, rec_num:%d, is_free:%d"
   PHB_TRC_DESC_MARK_FREE_RESULT "________data_desc_entry->free_count:%d, line:%d"
   FUNC_PHB_DATA_DESC_NEW "[PHB] phb_data_desc_new"
   FUNC_PHB_DATA_DESC_RESET "[PHB] phb_data_desc_reset"
   FUNC_PHB_DATA_DESC_RESET_FREE_COUNT "[PHB] phb_data_desc_reset_free_count"
   FUNC_PHB_DATA_DESC_SET "[PHB] phb_data_desc_set"
   FUNC_PHB_DATA_DESC_SET_IS_SUPPORT "[PHB] phb_data_desc_set_is_support"
   FUNC_PHB_DET_APPEND "[PHB] phb_det_append: det->used_count=%d, det->slots=%d"
   FUNC_PHB_DET_DELETE "[PHB] phb_det_delete: position=%d, det->used_count=%d"
   FUNC_PHB_DET_GET "[PHB] phb_det_get"
   FUNC_PHB_DET_GET_SIZE "[PHB] phb_det_get_size"
   FUNC_PHB_DET_NEW "[PHB] phb_det_new"
   FUNC_PHB_DET_RESET "[PHB] phb_det_reset"
   FUNC_PHB_DET_SET "[PHB] phb_det_set"
   PHB_TRC_DET_SET_DETAILS "________det->table[%d]: storage=%d, rec_index=%d, sig=%d, num=%d, ext_idx=%d"
   FUNC_PHB_DET_GET_POS_BY_RECORD_INDEX "[PHB]phb_det_get_pos_by_record_index"
   FUNC_PHB_SEND_ILM "[PHB] phb_send_ilm"
   FUNC_PHB_ISTRING_ICMP "[PHB] phb_istring_icmp"
   FUNC_PHB_BINARY_SEARCH "[PHB] phb_binary_search"
   FUNC_PHB_COMPARE_BY_ALPHA_ID "[PHB] phb_compare_by_alpha_id"
   FUNC_PHB_COMPARE_BY_ALPHA_ID_FOR_SORT "[PHB] phb_compare_by_alpha_id_for_sort"
   FUNC_PHB_COMPARE_BY_ALPHA_ID_STORAGE "[PHB] phb_compare_by_alpha_id_storage"
   FUNC_PHB_COMPARE_BY_ALPHA_ID_STORAGE_FOR_SORT "[PHB] phb_compare_by_alpha_id_storage_for_sort"
   FUNC_PHB_COMPARE_BY_KEY_ALPHA_ID "[PHB] phb_compare_by_key_alpha_id"
   FUNC_PHB_COMPARE_BY_TEL_NUM_SIG "[PHB] phb_compare_by_tel_num_sig"
   FUNC_PHB_COMPARE_BY_TEL_NUM_SIG_FOR_SORT "[PHB] phb_compare_by_tel_num_sig_for_sort"
   FUNC_PHB_FAST_QUICKSORT "[PHB] phb_fast_quicksort"
   FUNC_PHB_INSERTION_SORT "[PHB] phb_insertion_sort"
   FUNC_PHB_NAME_NUM_INDEX_APPEND "[PHB] phb_name_num_index_append"
   FUNC_PHB_NAME_NUM_INDEX_DELETE "[PHB] phb_name_num_index_delete: index=%d"
   FUNC_PHB_NAME_NUM_INDEX_FIND_INDEX_BY_ALPHA_ID "[PHB] phb_name_num_index_find_index_by_alpha_id"
   FUNC_PHB_NAME_NUM_INDEX_FIND_INDEX_BY_ALPHA_ID_STORAGE "[PHB] phb_name_num_index_find_index_by_alpha_id_storage"
   FUNC_PHB_NAME_NUM_INDEX_FIND_INDEX_BY_NUM_SIG "[PHB] phb_name_num_index_find_index_by_num_sig"
   FUNC_PHB_NAME_NUM_INDEX_FIND_INDEX_BY_NUM_SIG_EXACT_MATCH "[PHB] phb_name_num_index_find_index_by_num_sig_exact_match"
   FUNC_PHB_NAME_NUM_INDEX_GET_DATA_ENTRY "[PHB] phb_name_num_index_get_data_entry"
   FUNC_PHB_NAME_NUM_INDEX_GET_SIZE "[PHB] phb_name_num_index_get_size"
   FUNC_PHB_NAME_NUM_INDEX_NEW "[PHB] phb_name_num_index_new"
   FUNC_PHB_NAME_NUM_INDEX_RESET "[PHB] phb_name_num_index_reset"
   FUNC_PHB_NAME_NUM_INDEX_SORT "[PHB] phb_name_num_index_sort"
   FUNC_PHB_NAME_NUM_INDEX_UPDATE "[PHB] phb_name_num_index_update"
   FUNC_PHB_QUICKSORT "[PHB] phb_quicksort"
   FUNC_PHB_SWAP "[PHB] phb_swap"
   FUNC_PHB_NVRAM_DELETE "[PHB] phb_nvram_delete"
   FUNC_PHB_NVRAM_DELETE_CNF "[PHB] phb_nvram_delete_cnf"
   FUNC_PHB_NVRAM_READ "[PHB] phb_nvram_read"
   FUNC_PHB_NVRAM_READ_CNF "[PHB] phb_nvram_read_cnf"
   FUNC_PHB_NVRAM_READ_RECORD "[PHB] phb_nvram_read_record"
   FUNC_PHB_NVRAM_WRITE "[PHB] phb_nvram_write"
   FUNC_PHB_NVRAM_WRITE_CNF "[PHB] phb_nvram_write_cnf"
   FUNC_PHB_NVRAM_WRITE_RECORD "[PHB] phb_nvram_write_record"
   FUNC_PHB_PINDEX_APPEND "[PHB] phb_pindex_append"
   FUNC_PHB_PINDEX_DELETE "[PHB] phb_pindex_delete: index=%d, pindex->used_count=%d"
   FUNC_PHB_PINDEX_GET_POS "[PHB] phb_pindex_get_pos:%d "
   FUNC_PHB_PINDEX_GET_SIZE "[PHB] phb_pindex_get_size"
   FUNC_PHB_PINDEX_INSERT "[PHB] phb_pindex_insert"
   FUNC_PHB_PINDEX_NEW "[PHB] phb_pindex_new"
   FUNC_PHB_PINDEX_RELINK "[PHB] phb_pindex_relink"
   FUNC_PHB_PINDEX_RESET "[PHB] phb_pindex_reset"
   FUNC_PHB_PINDEX_UPDATE "[PHB] phb_pindex_update"
   FUNC_PHB_PINDEX_GET_INDEX_BY_POSITION "[PHB] phb_pindex_get_index_by_position"
   FUNC_L4CPHB_MODE_REQ "[L4CPHB] l4cphb_mode_req"
   FUNC_L4CPHB_STATUS_REQ "[L4CPHB] l4cphb_status_req"
   FUNC_L4CPHB_GET_FILE_INFO "[L4CPHB] l4c_phb_get_file_info, type = %d, storage = %d"
   FUNC_L4CPHB_GET_FILE_INFO_DETAIL "[L4CPHB] l4c_phb_get_file_info, name_len = %d, num_len = %d, free_num = %d, total_num = %d, ext_free_num = %d"
   FUNC_L4CPHB_TEST_INDEX "[L4CPHB] l4cphb_test_index"
   FUNC_L4CPHB_TEST_STORAGE "[L4CPHB] l4cphb_test_storage"
   FUNC_L4CPHB_TEST_TEXT "[L4CPHB] l4cphb_test_text"
   FUNC_L4CPHB_TEST_WRITE_PARAMETER "[L4CPHB] l4cphb_test_write_parameter"
   FUNC_L4CPHB_ALLOC_PEER_BUF "[L4CPHB] l4cphb_alloc_peer_buf"
   FUNC_PHB_BINARY_SEARCH_COUNTRY_CODE "[PHB] phb_binary_search_country_code"
   FUNC_PHB_COMPARE_COUNTRY_CODE "[PHB] phb_compare_country_code"
   FUNC_PHB_SE_APPEND "[PHB] phb_se_append"
   FUNC_PHB_SE_CAL_SIGNATURE_NUM "[PHB] phb_se_cal_signature_num"
   FUNC_PHB_SE_DELETE "[PHB] phb_se_delete"
   FUNC_PHB_SE_FINISH_BUILD "[PHB] phb_se_finish_build"
   FUNC_PHB_SE_GET_DIFFERNTIABLE_DIGITS "[PHB] phb_se_get_differntiable_digits"
   FUNC_PHB_SE_GET_INDEX_VALUES "[PHB] phb_se_get_index_values"
   FUNC_PHB_SE_GET_RECORD_INDEX "[PHB] phb_se_get_record_index"
   FUNC_PHB_SE_GET_TOTAL_OF_TYPE "[PHB] phb_se_get_total_of_type"
   FUNC_PHB_SE_IS_IN_RANGE "[PHB] phb_se_is_in_range:%d type = %d, index = %d, total = %d"
   FUNC_PHB_SE_IS_NEXT_ALSO_CANDIDATE "[PHB] phb_se_is_next_also_candidate"
   FUNC_PHB_SE_NEW "[PHB] phb_se_new"
   FUNC_PHB_SE_RESET "[PHB] phb_se_reset"
   FUNC_PHB_SE_SEARCH_BY_NAME "[PHB] phb_se_search_by_name"
   FUNC_PHB_SE_SEARCH_BY_RECORD_INDEX_NAME "[PHB] phb_se_search_by_record_index_name"
   FUNC_PHB_SE_SEARCH_BY_TEL_NUM "[PHB] phb_se_search_by_tel_num"
   FUNC_PHB_SE_SET_CONTROL_BLOCK "[PHB] phb_se_set_control_block: op = %d, storage = %d, record_index = %d"
   FUNC_PHB_SE_SET_CONTROL_BLOCK_TRANSLATE_INDEX "[PHB] phb_se_set_index: primary_ID = %d, secondary_ID = %d, storage = %d, index = %d"
   PHB_TRC_SE_SET_INDEX "[PHB] phb_se_set_index:%d primary_ID = %d, storage = %d, index = %d, record_index = %d"
   PHB_TRC_SE_SET_INDEX_DEL "[PHB] phb_se_set_index_delete"
   FUNC_PHB_SE_UPDATE "[PHB] phb_se_update"
   FUNC_PHB_SE_BUILD_INDEX "[PHB] phb_se_build_index"
   FUNC_PHB_SIM_DELETE "[PHB] phb_sim_delete"
   FUNC_PHB_SIM_DELETE_CNF "[PHB] phb_IO_sim_delete_cnf"
   FUNC_PHB_SIM_FILE_INFO "[PHB] phb_sim_file_info"
   FUNC_PHB_SIM_FILE_INFO_CNF "[PHB] phb_sim_file_info_cnf"
   FUNC_PHB_SIM_SEARCH_RECORD "[PHB] phb_sim_search_record"
   FUNC_PHB_SIM_SEARCH_RECORD_CNF "[PHB] phb_sim_search_record_cnf"
   FUNC_PHB_SIM_SEARCH_ADN_RECORD_CNF "[PHB] phb_search_adn_record_cnf, phb_seek_adn_bitmap[%d] = %x"
   FUNC_PHB_SIM_SEARCH_RECORD_READ_ADN "[PHB] phb_search_record_read_adn, phb_seek_done: %d, record_index: %d"
   FUNC_PHB_SIM_SEARCH_IAP_RECORD_CNF "[PHB] phb_search_iap_record_cnf, phb_seek_iap_bitmap[%d] = %x"
   FUNC_PHB_SIM_SEARCH_RECORD_READ_IAP "[PHB] phb_search_record_read_iap, phb_seek_done: %d, record_index: %d"
   FUNC_PHB_SIM_SEARCH_PBC_RECORD_CNF "[PHB] phb_search_pbc_record_cnf, phb_seek_pbc_bitmap[%d] = %x"
   FUNC_PHB_SIM_SEARCH_RECORD_READ_PBC "[PHB] phb_search_record_read_pbc, phb_seek_done: %d, record_index: %d"
   FUNC_PHB_SIM_READ "[PHB] phb_sim_read"
   FUNC_PHB_SIM_READ_CNF "[PHB] phb_IO_sim_read_cnf"
   FUNC_PHB_SIM_READ_RECORD "[PHB] phb_sim_read_record: %Msim_file_index_enum, rec:%d"
   FUNC_PHB_SIM_REASSEMBLE_TEL_NUM "[PHB] phb_sim_reassemble_tel_num"
   FUNC_PHB_SIM_WRITE "[PHB] phb_sim_write"
   PHB_TRC_SIM_WRT_EXT_REC "________type = %Mdata_desc_enum, ext rec#=%d"
   FUNC_PHB_SIM_WRITE_CNF "[PHB] phb_IO_sim_write_cnf"
   FUNC_PHB_SIM_WRITE_FIRST_RECORD "[PHB] phb_sim_write_first_record"
   FUNC_PHB_SIM_WRITE_RECORD "[PHB] phb_sim_write_record"
   PHB_TRC_SIM_WRT_REC "[PHB] phb_sim_write_record: %Msim_file_index_enum, rec:%d"
   PHB_TRC_SIM_WRT_REC_MULTI "[PHB] phb_sim_write_record: %Msim_file_index_enum, rec:%d"
   FUNC_PHB_SIM_WRITE_SEGMENTED_RECORD "[PHB] phb_sim_write_segmented_record"
   FUNC_PHB_CONTEXT_SELECTION "[PHB] phb_context_selection, SIM: %d"
   FUNC_PHB_WHICH_SIM_EX "[PHB] phb_which_sim_ex, PHB_MOD: %d"
   PHB_TRC_SIM_MULTI_EF "________EF#: %d, record: %d"

   FUNC_PHB_SIM_IO_CHECK "[PHB] phb_IO_index_check: file_idx = %d, occurrence = %d, record_index = %d"


   STATE_PHB_NULL "[PHB] State: NULL."
   STATE_PHB_LN_NOT_READY "[LN] State: Ln not ready."
   STATE_PHB_NOT_READY "[PHB] State: Not ready."
   STATE_PHB_READY "[PHB] State: Ready."

   STATE_PHB_DEFINE_RECORD_LN_TYPE_SEQ "[LN] Define ln type seq."
   STATE_PHB_NOT_DEFINE_RECORD_LN_TYPE_SEQ "[LN] Not define ln type seq."



   INFO_PHB_STARTUP_MODE "[PHB] Startup dialing mode: %02X"
   INFO_PHB_FILE_INFO_BEGIN "________ Get information for all EF's."
   INFO_PHB_FILE_INFO_GOT "________Information for all EF's got!"
   PHB_TRC_GET_INFO "[PHB] phb_get_info: %Msim_file_index_enum"
   PHB_TRC_GET_INFO_NOT_SUPPORT "________Not supportted: line = %d"
   PHB_TRC_GET_INFO_ADN "[PHB] ADN records: Project support = %d, SIM = %d, result = %d"

   INFO_PHB_INDICES_BEGIN "[PHB] Scanning for building indices."
   INFO_PHB_INDICES_BUILT "[PHB] Indices built!"
   INFO_PHB_APPROVE_ECC_SIM_CARD_STATUS "[PHB] approve ecc sim status : %02X"

   INFO_PHB_STARTUP_SYNC_LN_TYPE_SEQ_SIM_STATUS "[LN] phb_startup_sync_ln_type_seq, sim_status: %02X"
   INFO_PHB_STARTUP_ERASE_SIM_STATUS "[LN] phb_startup_erase_ln, sim_status: %02X"

   INFO_PHB_WRONG_RES_IF_CB "[PHB] Wrong RES if CB created ID = %d, res_msg_id = %d, IO_cnf_receive = %x"
   INFO_PHB_WRONG_RES_IF_NOT_CB "[PHB] Wrong RES if CB not created access_id = %d, ilm_msg_id = %d"
   INFO_PHB_NEW_CB_OCCUPIED "[PHB] new control block occupied value = %d, CB ID = %x"


   WARNING_PHB "[PHB] Warning"


   ERROR_PHB_SIM_IO_STATE_FILE_INFO "[PHB] Not waiting this primitive. What's up?"
   ERROR_PHB_SIM_IO_STATE_READ "[PHB] Not waiting this primitive. What's up?"
   ERROR_PHB_SIM_IO_STATE_WRITE "[PHB] Not waiting this primitive. What's up?"
   ERROR_PHB_SIM_IO_STATE_DELETE "[PHB] Not waiting this primitive. What's up?"

   ERROR_PHB_NVRAM_IO_STATE_READ "[PHB] Not waiting this primitive. What's up?"
   ERROR_PHB_NVRAM_IO_STATE_WRITE "[PHB] Not waiting this primitive. What's up?"
   ERROR_PHB_NVRAM_IO_STATE_DELETE "[PHB] Not waiting this primitive. What's up?"

   ERROR_PHB_ABNORMAL "[PHB] NOTICE: ABNORMAL CASE!"
   ERROR_PHB_STATE "[PHB] State error"


   FUNC_PHB_SAT_FILE_CHANGE_CONTROL_BLOCK "[PHB] phb_sat_file_change_handler, control_block: %d"



   FUNC_PHB_ISSUE_IO_WRITE_LN "[LN] phb_issue_IO_write_ln"
   FUNC_PHB_ISSUE_IO_READ_LN "[LN] phb_issue_IO_read_ln"


   FUNC_PHB_DELETE_SIM_LN "[LN] phb_delete_sim_ln_handler"
   FUNC_PHB_DELETE_SIM_LN_ERR "[LN] phb_delete_sim_ln_err_handler"


   FUNC_PHB_READ_SIM_LN "[LN] phb_read_sim_ln_handler"
   FUNC_PHB_READ_SIM_LN_ERR "[LN] phb_read_sim_ln_err_handler"


   FUNC_PHB_IS_LN_SIM_FILE_SUPPORT "[LN] phb_is_ln_sim_file_support"
   FUNC_PHB_GET_LN_INFO_SET_VALUE "[LN] phb_get_ln_info_set_value"
   FUNC_PHB_GET_LN_INFO_ERR "[LN] phb_get_ln_info_err_handler"
   FUNC_PHB_GET_LN_INFO "[LN] phb_get_ln_info"
   FUNC_PHB_NO_CALL_LOG_INIT_LN "[LN] phb_no_call_log_init_ln_handler"


   FUNC_PHB_WRITE_SIM_LN_ERR "[LN] phb_write_sim_ln_err_handler"
   FUNC_PHB_WRITE_SIM_LN "[LN] phb_write_sim_ln_handler"


   FUNC_L4CPHB_GET_LN_FILE_INFO "[LN] l4c_phb_get_ln_file_info"


   FUNC_PHB_SE_SET_LN_CONTROL_BLOCK "[LN] phb_se_set_ln_control_block, record_index: %d"


   FUNC_PHB_SIM_PREPARE_LN_DATA_TO_WRITE "[LN] phb_sim_prepare_ln_data_to_write"
   FUNC_PHB_SIM_WRITE_LN_CNF "[LN] phb_sim_write_ln_cnf"
   FUNC_PHB_SIM_WRITE_LN_FIRST_RECORD "[LN] phb_sim_write_ln_first_record"
   FUNC_PHB_SIM_WRITE_LN "[LN] phb_sim_write_ln"
   FUNC_PHB_SIM_READ_LN_CNF "[LN] phb_sim_read_ln_cnf"
   FUNC_PHB_SIM_READ_LN "[LN] phb_sim_read_ln"


   FUNC_PHB_COMPARE_BCD_FOR_WILD_CHAR "[PHB] phb_compare_bcd_for_wild_char"

   PHB_TRC_DEL_FIND_NEXT "[PHB] phb_delete_find_next_deleted: %d"
   PHB_TRC_DEL_CONT_MSISDN "________continue MSISDN: candidate = %d, index = %d, seg_idx = %d"
   PHB_TRC_DEL_CONT_TOTAL "________actual_count = %d, total = %d, index = %d"

   PHB_TRC_SE_GET_IDX "[PHB] phb_se_get_index_by_storage: %d"
   PHB_TRC_SIM_DEL_CNF "[PHB] phb_sim_delete_cnf: IO_stage = %d, secondary_ID = %d"

   PHB_TRC_READ_CONT "[PHB] phb_read_continue: actual_count = %d, total = %d, index = %d, record_index = %d"
   PHB_TRC_CB_SET_STATE "________proc_stage[%d]-> %d"
   PHB_TRC_CB_GET_STATE "________proc_stage[%d] : %d"
   PHB_SE_SET_INDEX_TRACE "[PHB] phb_se_set_index:%d"
   PHB_TRC_SE_C "________phb_se.c: %d"

END_MODULE_MSG
# 5 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./modem/l4/smu/include/smu_trc.h" 1
# 190 "./modem/l4/smu/include/smu_trc.h"
START_MODULE_MSG MOD_SMU 20


    SAVE_SECURITY_TO_NVRAM "save_security_to_nvram"
    SMU_SEND_SECURITY_CNF "smu_send_security_cnf"
    SMU_SEND_SECURITY_REQ "smu_send_security_req"
    SMU_APP_SEND_SECURITY_REQ "smu_app_send_security_req"
    SMU_CHECK_PERSONALIZATION "smu_check_personalization"
    CONVERT_PUCT_STR_TO_SIM "convert_puct_str_to_sim"
    CONVERT_PUCT_SIM_TO_STR "convert_puct_sim_to_str"
    LOCK_FIRST_INSERTED_SIM_PROCEDURE "lock_first_inserted_sim_procedure"
    L4CSMU_START_REQ_HANDLER "l4csmu_start_req_handler"
    L4CSMU_APP_START_REQ_HANDLER "l4csmu_app_start_req_handler"
    NVRAM_WRITE_CNF_HANDLER "nvram_write_cnf_handler"
    SMU_START_CNF_HANDLER "smu_start_cnf_handler"
    SMU_APP_START_CNF_HANDLER "smu_app_start_cnf_handler"
    SMU_MMI_SECURITY_IND_HANDLER "smu_mmi_security_ind_handler"
    SMU_MMI_READY_IND_HANDLER "smu_mmi_ready_ind_handler"
    SMU_APP_READY_IND_HANDLER "smu_app_ready_ind_handler"
    L4CSMU_SECURITY_REQ_HANDLER "l4csmu_security_req_handler"
    L4CSMU_APP_SECURITY_REQ_HANDLER "l4csmu_app_security_req_handler"
    L4CSMU_SIM_ACCESS_REQ_HANDLER "l4csmu_sim_access_req_handler"
    SMU_SIM_READ_CNF_HANDLER "smu_sim_read_cnf_handler"
    SMU_SIM_WRITE_CNF_HANDLER "smu_sim_write_cnf_handler"
    SMU_STATUS_CNF_HANDLER "smu_status_cnf_handler"
    L4CSMU_PLMN_SEL_WRITE_REQ_HANDLER "l4csmu_plmn_sel_write_req_handler"
    L4CSMU_PUCT_WRITE_REQ_HANDLER "l4csmu_puct_write_req_handler"
    L4CSMU_DIAL_MODE_REQ_HANDLER "l4csmu_dial_mode_req_handler"
    SMU_DIAL_MODE_CNF_HANDLER "smu_dial_mode_cnf_handler"
    L4CSMU_READ_PLMN_SEL "l4csmu_read_plmn_sel"
    L4CSMU_GET_CHV_STATUS "l4csmu_get_chv_status"
    L4CSMU_PUCT_READ_REQ_HANDLER "l4csmu_puct_read_req_handler"
    L4CSMU_GET_PREFERRED_LANGUAGE "l4csmu_get_preferred_language"

    L4CSMU_GET_IMSI "l4csmu_get_imsi"
    L4CSMU_GET_SIM_ACCESS_INFO "l4csmu_get_sim_access_info"
    L4CSMU_GET_PUCT_VALUE "l4csmu_get_puct_value"
    SMU_FILE_CHANGE_IND_HANDLER "smu_file_change_ind_handler"
    L4CSMU_SMS_DEPERSONALIZATION_REQ_HANDLER "l4csmu_sms_depersonalization_req_handler"
   SMU_NVRAM_RESET "smu_nvram_reset"
   SMU_NVRAM_RESET_CNF_HANDLER "smu_nvram_reset_cnf_handler"


    SMU_TC01_WARNING "Warning: %x, %d"


    SAT_OPEN_CSD_CHANNEL_IND_HANDLER "sat_open_csd_channel_ind_handler"
    SAT_OPEN_GPRS_CHANNEL_IND_HANDLER "sat_open_gprs_channel_ind_handler"
    SAT_OPEN_SERVER_MODE_CHANNEL_IND_HANDLER "sat_open_server_mode_channel_ind_handler"
    L4CSMU_SAT_OPEN_CHANNEL_REQ_HANDLER "l4csmu_sat_open_channel_req_handler"
    SAT_SET_ACCOUNT_PROFILE "sat_set_account_profile"
    TIMER_EXPIRY_CALL_BACK_FUNCTION "timer_expiry_call_back_fun"
    SMU_START_TIMER "smu_start_timer"
    SMU_STOP_TIMER "smu_stop_timer"
   SMU_START_SML_TIMER "smu_start_sml_timer"
   SMU_STOP_SML_TIMER "smu_stop_sml_timer"
    SMU_TIMER_EXPIRY_HANDLER "smu_timer_expiry_handler"
    ATTEMP_SETUP_TCP_LINK "attemp_setup_tcp_link"
    ATTEMP_SETUP_UDP_LINK "attemp_setup_udp_link"
    ATTEMP_SETUP_RAW_SOCKET "attemp_setup_raw_socket"
    CHECK_RETRY_ALLOWED "check_retry_allowed"
    L4CSMU_SAT_SET_CSD_PROF_RES_HANDLER "l4csmu_sat_set_csd_prof_res_handler"
    L4CSMU_SAT_SET_GPRS_PROF_RES_HANDLER "l4csmu_sat_set_gprs_prof_res_handler"
    SAT_APP_SOC_NOTIFY_IND_HANDLER "sat_app_soc_notify_ind_handler"
    SAT_CLOSE_CHANNEL_IND_HANDLER "sat_close_channel_ind_handler"
    CREATE_LINK_TO_SEND_DATA "create_link_to_send_data"
    SAT_SEND_DATA_IND_HANDLER "sat_send_data_ind_handler"
    SAT_RECV_DATA_IND_HANDLER "sat_recv_data_ind_handler"
    L4CSMU_SAT_SEND_DATA_REQ_HANDLER "l4csmu_sat_send_data_req_handler"
    L4CSMU_SAT_RECV_DATA_REQ_HANDLER "l4csmu_sat_recv_data_req_handler"
    SAT_CH_STATUS_IND_HANDLER "sat_ch_status_ind_handler"
    SAT_APP_SOC_DEACTIVATE_CNF_HANDLER "sat_app_soc_deactivate_cnf_handler"
    SAT_APP_BEARER_INFO_IND_REQ_HANDLER "sat_app_bearer_info_ind_req_handler"
    SMU_FREE_ACCOUNT "smu_free_account"
    L4CSMU_SAT_BEARER_PARA_REQ_HANDLER "l4csmu_sat_bearer_para_req_handler"
    SAT_OPEN_SERVER_MODE_CHANNEL_HANDLER "sat_open_server_mode_channel_handler"


    CSD_CHANNEL_AVAILABLE "CSD_channel_available"
    CSD_CHANNEL_NOT_AVAILABLE "CSD_channel_not_available"
    GPRS_CHANNEL_AVAILABLE "GPRS_channel_available"
    GPRS_CHANNEL_NOT_AVAILABLE "GPRS_channel_not_available"
    SERVER_MODE_CHANNEL_AVAILABLE "SERVER_MODE_channel_available"
    SERVER_MODE_CHANNEL_NOT_AVAILABLE "SERVER_MODE_channel_not_available"
    USER_DENIED_PROACTIVE_CMD "User_denied_proactive_cmd"
    SOC_CREATE_FAILED "soc_create_failed"
    SETSOCKOPT_NBIO_FAILED "setsockopt_NBIO_failed"
    SETSOCKOPT_ASYNC_FAILED "setsockopt_ASYNC_failed"
    SOCKET_BIND_FAILED "socket_bind_failed"
    SOCKET_LISTEN_FAILED "socket_listen_failed"
    AUTO_DISC_TIMER_SETUP_FAILED "auto_disc_timer_setup_failed"
    SETSOCKOPT_SOC_IP_HDRINCL_FAILED "setsockopt_SOC_IP_HDRINCL_failed"
    RETRY_ALLOWED "retry_allowed"
    RETRY_NOT_ALLOWED "retry_not_allowed"
    IMMEDIATE_LINK "Immediate_Link"
    CREATE_CSD_SOCKET_FAILED "create_CSD_socket_failed"
    SOCKET_GREATER_ZERO "socket>0"
    WAIT_CSD_SOCK_NOTIFY "wait_CSD_sock_notify"
    ONDEMAND_LINK "OnDemand_Link"
    CREATE_GPRS_SOCKET_FAILED "create_GPRS_socket_failed"
    WAIT_GPRS_SOCK_NOTIFY "wait_GPRS_sock_notify"
    NOTHING_TO_SEND "Nothing_to_send"
    SENT_SUCCESS "sent_success_and_complete"
    SAT_SEND_DATA_WB "SAT_Send_Data:WB"
    SAT_SEND_DATA_OTHERS "SAT_Send_Data:Others"
    CSD_BEARER_CONNECT_FAILED "CSD_bearer_connect_fail"
    RAW_SOCKET_CONNECT "Raw_Socket_connection"
    LINK_DROP "Link_Drop"
    CHANNEL_ID_FOUND "Channel_ID_found"
    LINK_EXISTED "link_existed"
    CHV_ID_STATUS_NOT_SYNC "channl_id_status_not_sync_channel_status"
    INVALID_CHV_ID "Invalid_Channel_ID"
    START_TO_SEND "start_send_data"
    REMAIN_DATA_LEN_ZERO_SOC_RECV_AGAIN "remain_data_len=0_soc_recv_again"
    DATA_AVAILABLE_IN_RX_BUFF "data_available_in_Rx_Buff_from SOC"
    NO_DATA_IN_SOC "No_data_in_SOC"
    CLOSE_CHV_RES "close_channel_response"
    DISC_EVENT_DOWNLOAD "disconnet_event_download"
    CSD_SOC_ACTIVATE_UDP "CSD_SOC_ACTIVATED_UDP"
    GPRS_SOC_ACTIVATE_UDP "GPRS_SOC_ACTIVATED_UDP"
    BEARER_PARA_MODIFIED "bearer_para_modified"
    BEARER_PARA_NOT_MODIFIED "bearer_para_not_modified"
    NO_SOC_MAP "no_soc_map"


    L4CSMU_GET_PENDING_PASSWORD_ID "PENDING_PASSWORD_ID: %02X"
    L4CSMU_GET_PENDING_PASSWORD_ID_EXT "PENDING_PASSWORD_ID_EXT:%hd, %02X"
    L4CSMU_APP_GET_PENDING_PASSWORD_ID "APP_PENDING_PASSWORD_ID: %d, %02X"
    INFO_LINK_SML_SUPER_VERFY "[linkSML]: Super unlock"
    L4CSMU_GET_DIAL_MODE "GET_DIAL_MODE: %02X "

    UPDATE_IS_SIMCARD_REPLACED "UPDATE_IS_SIMCARD_REPLACED: %d "

    IS_SIM_INSERTED "IS_SIM_INSERTED: %Msmu_sim_inserted_enum "
    UPDATE_IS_SIM_REPLACED "UPDATE_IS_SIM_REPLACED: %Msmu_sim_status_enum "
    CHECK_SIM_STATUS "CHECK_SIM_STATUS: %Msmu_sim_status_enum "
    QUERY_SML_STATE "QUERY_SML_STATE: cat = %d, state = %d "
    INFO_SML_LOAD "SML: Load!"
    INFO_SML_OTA_N "SML OTA: N category unlocked!"
    INFO_SML_OTA_NS "SML OTA: NS category unlocked!"
    INFO_SML_OTA_SP "SML OTA: SP category unlocked!"
    INFO_SML_OTA_C "SML OTA: C category unlocked!"
    INFO_SML_TEST_SIM "Test SIM Inserted!"
    INFO_SML_NORMAL_SIM "Normal SIM Inserted!"
    INFO_SML_BY_PASS_TEST_SIM "SML: By-Pass TEST SIM"
    INFO_SML_MASTERKEY "SML: Masterkey Unlocked!"
    INFO_SML_BLOCK_LIST "SML: Find in Block List"
    INFO_SML_N_GID1 "SML: N code matched, check GID1 now!"
    INFO_SML_OTA_UNLOCKED "SML OTA: unlocked!"
    INFO_SML_OTA_DISABLED "SML OTA: disabled!"
    INFO_SML_OTA_LOCKED "SML OTA: locked!"
    INFO_SML_OTA_SMS_DEP_UNLOCKED "SML OTA: N category unlocked by OTA ME-specific!"
    INFO_SML_OTA_SMS_DEP_LOCKED "SML OTA: N category remain locked!"
    INFO_SMU_SIM_REPLACED "SIM Card replaced!"
   INFO_SML_NW_TIME_EXPIRED "Time Expired from NITZ"
   INFO_SML_TEMP_UNLOCK_TIME "sml_tmo_UpdateNwTimeAndCheckTempLock: start: %d, duration: %d, current: %d"
   INFO_SML_CHECK_TEMP_UNLOCK "sml_tmo_CheckTempUnlock: sml_tmo_seconds_to_expire = %d, duration: %d"
   INFO_SMU_FIRST_LOAD "smu_nvram_read_cnf_handler: First load! Write back to nvram"
   INFO_SMU_GET_COUNT "sml_GetCount: %x, %x, %d"
   INFO_SMU_CHECK_LENGTH "sml_Check: code length = %d, compare length = %d, mnc length = %d"
   INFO_SMU_CHECK_IGNORE_PID1 "Permanent lock ignore gid1 in: %2x, %2x, %2x, %2x"
   INFO_SMU_GET_UNLOCK_TIME_LEFT "sml_GetUnlockTimeLeft: end time = %d, unlock time = %d"


    CHANNEL_ID "CHANNEL_ID: %02X "
    BEFORE_BUFF_SIZE "BEFORE_BUFF_SIZE: %02X "
    AFTER_BUFF_SIZE "AFTER_BUFF_SIZE: %02X "
    SOC_RETURN "SOC_RETURN: %02X "
    NUM_DATA "NUM_DATA: %02X "
    REMAIN_DATA_LEN "REMAIN_DATA_LEN: %02X "
    BUFF_HEAD "BUFF_HEAD: %02X "
    SOCTABLE "CH:%02X SOC:%02X SON:%02X"


    WARNING_SML_UPDATE "SML: update fail!"
    WARNING_SML_UPDATE_OTA "SML: update fail(OTA)!"
    WARNING_SML_PERSONALIZE_WHILE_REFRESH "SML: SML is refreshing! Please try again!"
    WARNING_SMU_PLMN_SIZE_EXCEED "PLMN file size exceed MAX_SUPPORT_PLMN_DATA_SIZE!"
    WARNING_SML_LOAD_CHECK_VALIDITY_FAILED "sml_Load: Check validity failed!"
    WARNING_SML_CHECK_VALIDITY_FAILED "sml_Check: Check validity failed!"
    WARNING_PERSO_SIMLOCK_STATE_WHEN_SIM_INTERFACE_WRONG "Wrong SIM ID"


    ERROR_SML_SAVE "SML:Fatal Error!"

END_MODULE_MSG
# 6 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./interface/modem/upcm/upcm_trc.h" 1
# 82 "./interface/modem/upcm/upcm_trc.h"
START_MODULE_MSG MOD_UPCM 20

UPCM_UL_RAW_DATA "[UPCM] UL RAW"
UPCM_DL_RAW_DATA "[UPCM] DL RAW"
UPCM_IMS_UL_RAW_DATA "[UPCM] IMS UL RAW"
UPCM_IMS_DL_RAW_DATA "[UPCM] IMS DL RAW"

END_MODULE_MSG
# 7 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./modem/interface/l4misc/l4_trc.h" 1
# 821 "./modem/interface/l4misc/l4_trc.h"
START_MODULE_MSG MOD_L4C 20


   FUNC_L4C_CC_HANDFREE_CALLHELD_RIND "l4c_cc_handfree_callheld_rind()"


   FUNC_L4C_ROOT_GET_PENDING_PASSWORD_ID_ENTRY "l4c_root_get_pending_password_id(),sim:%hd,%02X"


   FUNC_L4C_MAIN_ENTRY "l4c_main()"
   FUNC_NVRAM_STARTUP_CNF_HDLR_ENTRY "nvram_startup_cnf_hdlr()"
   FUNC_NVRAM_READ_CNF_HDLR_ENTRY "nvram_read_cnf_hdlr()"
   FUNC_NVRAM_WRITE_CNF_HDLR_ENTRY "nvram_write_cnf_hdlr()"
   FUNC_SIM_READ_CNF_HDLR_ENTRY "sim_read_cnf_hdlr()"
   FUNC_SIM_WRITE_CNF_HDLR_ENTRY "sim_write_cnf_hdlr()"
   FUNC_L4C_SEND_MSG_TO_CSM_ENTRY "l4c_send_msg_to_csm()"
   FUNC_L4C_SEND_MSG_TO_CSM_CISS_ENTRY "l4c_send_msg_to_csm_ciss()"
   FUNC_L4C_SEND_MSG_TO_SMU_ENTRY "l4c_send_msg_to_smu()"
   FUNC_L4C_SEND_MSG_TO_RAC_ENTRY "l4c_send_msg_to_rac()"
   FUNC_L4C_SEND_MSG_TO_PSDM_ENTRY "l4c_send_msg_to_psdm()"
   FUNC_L4C_SEND_MSG_TO_SMSAL_ENTRY "l4c_send_msg_to_smsal()"
   FUNC_L4C_SEND_MSG_TO_UEM_ENTRY "l4c_send_msg_to_uem()"
   FUNC_L4C_SEND_MSG_TO_PHB_ENTRY "l4c_send_msg_to_phb()"
   FUNC_L4C_SEND_MSG_TO_TCM_ENTRY "l4c_send_msg_to_tcm()"
   FUNC_L4C_SEND_MSG_TO_DHL_ENTRY "l4c_send_msg_to_dhl()"
   FUNC_L4C_SEND_MSG_TO_SM_ENTRY "l4c_send_msg_to_sm()"
   FUNC_L4C_SEND_MSG_TO_EVAL_ENTRY "l4c_send_msg_to_eval()"
   FUNC_L4C_SEND_MSG_TO_PPP_ENTRY "l4c_send_msg_to_ppp()"
   FUNC_L4C_SEND_MSG_TO_WAP_ENTRY "l4c_send_msg_to_wap()"
   FUNC_L4C_SEND_MSG_TO_NVM_ENTRY "l4c_send_msg_to_nvm()"
   FUNC_L4C_SEND_MSG_TO_SIM_ENTRY "l4c_send_msg_to_sim()"
   FUNC_L4C_SEND_MSG_TO_RSVAS_ENTRY "l4c_send_msg_to_rsvas()"
   FUNC_L4C_SEND_MSG_TO_MED_ENTRY "l4c_send_msg_to_med()"
   FUNC_L4C_FD_CHECK_PDP_STATISTICS_ENTRY "[FD]l4c_fd_check_pdp_statistics()"
   FUNC_L4C_NW_END_PS_DATA_SESSION_REQ_ENTRY "[FD]l4c_nw_end_ps_data_session_req()"

   FUNC_L4C_PS_SET_TFT_REQ "l4c_ps_set_tft_req(): %Mkal_bool"
   FUNC_L4C_PS_GET_TFT_REQ "l4c_ps_get_tft_req(): %Mkal_bool"


   FUNC_L4C_SEND_MSG_TO_T30_ENTRY "l4c_send_msg_to_t30()"


   FUNC_L4C_SEND_MSG_TO_IRDA_ENTRY "l4c_send_msg_to_irda()"

   FUNC_L4C_SS_STRING_PARSING_ENTRY "l4c_ss_string_parsing()"
   FUNC_IS_SIM_STRING_ENTRY "is_sim_string()"
   FUNC_SETUP_SIM_STRUCT_ENTRY "setup_sim_struct()"
   FUNC_IS_GPRS_STRING_ENTRY "is_gprs_string()"
   FUNC_SETUP_PDP_ACT_STRUCT_ENTRY "setup_pdp_act_struct()"
   FUNC_SETUP_IP_PDP_ACT_STRUCT_ENTRY "setup_ip_pdp_act_struct()"
   FUNC_IS_CC_STRING_ENTRY "is_cc_string()"
   FUNC_SETUP_NUMBER_STRUCT_ENTRY "setup_number_struct()"
   FUNC_GET_INT_BEFORE_STAR_ENTRY "get_int_before_star()"
   FUNC_GET_UINT32_BEFORE_STAR_ENTRY "get_uint32_before_star()"
   FUNC_GET_STRING_BEFORE_STAR_ENTRY "get_string_before_star()"
   FUNC_GET_DN_BEFORE_STAR_ENTRY "get_dn_before_star()"
   FUNC_CONVERT_TO_BCD_ENTRY "convert_to_bcd()"
   FUNC_CONVERT_TO_BCD_WILD_ENTRY "L4C: convert_to_bcd_wild()"
   FUNC_CONVERT_TO_DIGIT_ENTRY "L4C: convert_to_digit()"
   FUNC_CONVERT_TO_DIGIT_EXT_ENTRY "L4C: convert_to_digit_ext()"
   FUNC_CONVERT_TO_DIGIT_24008_ENTRY "L4C: convert_to_digit_24008()"
   FUNC_CONVERT_TO_DIGIT_WILD_ENTRY "L4C: convert_to_wild()"
   FUNC_PLMN_CONVERT_TO_BCD_ENTRY "plmn_convert_to_bcd()"
   FUNC_PLMN_CONVERT_TO_STRUCT_ENTRY "plmn_convert_to_struct()"
   FUNC_PLMN_CONVERT_TO_DIGIT_ENTRY "plmn_convert_to_digit()"
   FUNC_IS_CMD_CONFLICT_ENTRY "is_cmd_conflict()"
   FUNC_TST_INJECT_STRING_HDLR_ENTRY "tst_injext_string_hdlr()"
   FUNC_L4C_EQ_FS_FILELIST_REQ_ENTRY "l4c_eq_fs_filelist_req()"
   FUNC_L4C_EQ_FS_ACCESS_REQ_ENTRY "l4c_eq_fs_access_req()"
   FUNC_L4C_EQ_FS_FOLDER_ACTION_REQ_ENTRY "l4c_eq_fs_folder_action_req()"
   FUNC_L4C_EQ_FS_AV_DISK_SIZE_REQ_ENTRY "l4c_eq_fs_av_disk_size_req()"


   FUNC_L4C_C2K_PDN_ESTABLISH_RESULT_HDLR "l4c_c2k_pdn_establish_result_hdlr : cid %d , is_success %Mkal_bool"
   FUNC_C2K_SEND_MSG_TO_VAL "l4c_send_msg_to_val()"
   FUNC_C2K_EGCONTRDP_RIND "l4c_egcontrdp_report_rind(), cid: %d"


   INFO_ATH_NO_CALL_HANGUP "ath: no call to hangup"
   INFO_ATH_REQ_ATD_ABORT "ath_req: ATD aborted!"
   INFO_L4C_LOCAL_DISCONNECT "L4C local disconnect call:%hd"
   INFO_UCM_END_CSD_CALL_DISC "UCM might end all while previous CSD call disconnection is processing"
   INFO_CHLD_CLEAR_RETRY "CHLD clear retry call,orignal cc_action[%Ml4c_source_id_enum]= %Ml4c_action_enum,further action=%hd"
   INFO_NO_CALL_EXIST "ath_req: no call exist!!"
   INFO_CLEAR_QUEUED_CHLD "Clear queued chld if force release is received"
   INFO_NOT_PRINT_NO_CARRIER "We don't have to print URC NO_CARRIER when ATH or +chld to hangup call"
   INFO_UPDATE_MMI_CALL_ID "To update MMI call_id byl DIAL_IND with call_id =%d"
   INFO_RETRY_FLAG "retry_cc=%hd, retry_ss=%hd, retry_count=%hd, retry_src_id=%Ml4c_source_id_enum"
   INFO_STOP_RETRY "stop retry & clear msg!, current_action=%Ml4c_action_enum"
   INFO_CELL_LOCK_CALL "is_cell_lock_call= %hd"
   INFO_SHORT_STRING_IS_ECC_NUMBER "This short string is a ECC number"
   INFO_CUSTOM_SHORT_STRING_AS_CALL_RETURN_TRUE "custom_short_string_as_call() return TRUE!"
   INFO_CUSTOM_IDLE_STRING_AS_CALL_RETURN_TRUE "custom_idle_string_as_call() return TRUE!"
   INFO_RETRY "retry!, src_id=%Ml4c_source_id_enum, current_action=%Ml4c_action_enum, retry_cc=%hd, retry_ss=%hd, retry_count=%hd"
   INFO_L4C_START_CHANGE_PHASE_RETRY_TIMER_HDLR_START_TIMER "l4c_start_change_phase_retry_timer_hdlr() start a timer with 2 sec"
   INFO_L4C_START_SAT_REDIAL_DURATION_TIMER "L4C start sat redial duration timer!"
   INFO_L4C_SET_SAT_REDIAL_FLAG "L4C set sat_redial_flag =%hd"
   INFO_ATD_MEMORY_DIAL "ATD memory dial : PHB return entry with empty number"
   INFO_CONTINGOUS_CALL_DISC_REQUEST "Contingous disconnect request,call_id = %hd"
   INFO_SWITCH_CSM_CONTEXT "Switch CSM context to SIM:%hd"
   INFO_MT_CALL_APPROVAL "mt_call_approval =%hd"
   INFO_ENABLE_MT_CALL_APPROVAL "MT call approval mechanism is activated"
   INFO_CLEAR_ROUTE_THRU_LMMI "Clear route_thru_lmmi"
   INFO_ECALL_TYPE "eCall Type =%Mecall_type_enum"



   INFO_PURE_ASCII "l4c_ss_exe_ussd_req(): pure_ascii=%hd"
   INFO_CLEAR_SAT_USSR_FLAG "clear  L4C_PTR->sat_ussr_flag"
   INFO_ALPHABET_TYPE "SAT USSD: alphabet_type=%hd"
   INFO_SET_SAT_USSR_FLAG "set L4C_PTR->sat_ussr_flag=%hd"
   INFO_USSD_CONTAINS_SS "USSD req but contains SS string"
   INFO_SAT_USSD "SAT USSR"


   L4C_PS_EXE_SEND_DATA "%Ml4c_tcm_em_pdp_cid_enum, cid=%hd, poolid=%d, size=%d, src_id=%Ml4c_source_id_enum"
   L4C_PS_GET_MAX_HSPA_SUPPORT_MODE "l4c_nw_get_max_hspa_support_mode(), UL1_dpa_cat=%MFDD_HSDPA_CATEGORY_E, UL1_upa_cat=%MFDD_HSUPA_CATEGORY_E, return=%Ml4c_hspa_preference_enum"
   INFO_L4C_GPRS_NDIS_FDN_CHECK_RESULT_AND_ENABLE "PHB approve result=%hd; custom_l4c_ndis_fdn_enable()=%d"
   INFO_L4C_GPRS_IPV4V6_ALREADY_1_ONGOING_ACTIVATION "[IPV4V6] already 1 ongoing IPV4V6 activation: cid=%hd, src_id=%hd"
   INFO_L4C_GPRS_IPV4V6_ACT_TABLE_SRC_CID_CAUSE "[IPV4V6][ACT TABLE] src_id=%hd, init_cid=%hd, cause=%Mps_cause_enum"
   INFO_L4C_GPRS_IPV4V6_ACT_TABLE_ENTRY "[IPV4V6][ACT TABLE][%d] Type=%Mpdp_addr_type_enum, Cid=%hd, State=%Ml4c_ipv4v6_state_enum"
   INFO_L4C_GPRS_IPV4V6_ACT_TABLE_CONSTRUCTION "[IPV4V6] l4c_gprs_ipv4v6_act_table_construct(), init_cid=%hd, src_id=%hd, v4_first=%hd"
   INFO_L4C_GPRS_IPV4V6_ACT_TABLE_FREE "[IPV4V6] l4c_gprs_ipv4v6_act_table_free(), init_cid=%hd"
   INFO_L4C_GPRS_IPV4V6_CHECK_CID_IN_ACT_TABLE "[IPV4V6] l4c_gprs_ipv4v6_check_cid_existence(), cid=%hd, return %hd"
   INFO_L4C_GPRS_IPV4V6_GET_THE_OTHER_CID "[IPV4V6] l4c_gprs_ipv4v6_get_the_other_cid(), cid=%hd, result cid=%hd"
   INFO_L4C_GPRS_IPV4V6_UPDATE_STATE_BY_PDP_TYPE "[IPV4V6] l4c_gprs_ipv4v6_update_state_by_type(), type=%Mpdp_addr_type_enum, new_state=%Ml4c_ipv4v6_state_enum"
   INFO_L4C_GPRS_IPV4V6_UPDATE_CID_BY_PDP_TYPE "[IPV4V6] l4c_gprs_ipv4v6_update_cid_by_type(), type=%Mpdp_addr_type_enum, new_cid=%hd"
   INFO_L4C_GPRS_IPV4V6_PREPARE_NEW_CID_ENTRY "[IPV4V6] l4c_gprs_ipv4v6_prepare_new_cid() for %Mpdp_addr_type_enum, init_cid=%hd"
   INFO_L4C_GPRS_IPV4V6_PREPARE_NEW_CID_COMPLETE "[IPV4V6] l4c_gprs_ipv4v6_prepare_new_cid() completes, new_cid=%hd"
   INFO_L4C_GPRS_IPV4V6_RUN_ACTIVATION "[IPV4V6] l4c_gprs_ipv4v6_run_activation(), init_cid=%hd, max_activation_count=%hd"
   INFO_L4C_GPRS_IPV4V6_FALLBACK_OFF "[IPV4V6] fallback is disabled!!"
   INFO_L4C_GPRS_IPV4V6_CHECK_IF_IPV4V6_FALLBACK_NEEDED "[IPV4V6] l4c_check_if_ipv4v6_fallback_needed(tcm_act_rej_cause:%Mps_cause_enum), result: %Mkal_bool"

   INFO_L4C_GPRS_DEBUG_SET_7_SEGMENT_LED "[TCM H Icon] Status:%Ml4c_rac_response_enum, FromRAC:%Ml4c_data_speed_support_enum, FromTCM:%Ml4c_data_bearer_capablility_enum"
   INFO_L4C_PS_SWITCH_ONGOING "[IPV4V6] Fallback disabled due to PS switch ongoing."
   INFO_L4C_GPRS_CHANGE_REQ_TYPE "Reset cid %d request_type from %Mtcm_request_type_enum to REQUEST_TYPE_INITIAL_REQUEST"



   INFO_C2K_TRANSFER_INIT_ATTACH_PDN_CID "Transfer initial_attach PDN cid from %d to 0"
   INFO_C2K_TRANSFER_SECONDARY_LINKED_PDP_CID "Transfer secondary PDP[cid:%d]'s primary_context_id cid to 0"
   INFO_C2K_CONFIG_DEACT_RETRY "l4c_c2k_config_deact_retry() deact_retry[%d] old %Mkal_bool -> new %Mkal_bool"
   INFO_C2K_CONFIG_WAIT_EI3GPPIRAT "l4c_c2k_config_waiting_ei3gppirat() old %d -> new %d"
   INFO_C2K_CONFIG_TO_LTE_SRC_RAT "l4c_c2k_config_c2k_to_lte_src_rat() old %Mirat_ps_type_enum -> new %Mirat_ps_type_enum"
   INFO_C2K_CONFIG_IRAT_STATE "l4c_c2k_config_irat_state() old %Ml4c_c2k_irat_state_enum -> new %Ml4c_c2k_irat_state_enum"
   INFO_C2K_CONFIG_PDN_ESTABLISH_STATUS "l4c_c2k_config_pdn_establishing_status(),action %Ml4c_c2k_func_action_enum, cid %d, c2k_irat_pdn_establishing_status %d"
   INFO_C2K_NORMAL_CONFLICT_CONDITION "[No Prolbem] under C2K to LTE inter-RAT initial attach procedure, we pass this conflict "

   INFO_CAL_DATA_DL_STATUS "cal_data_valid:%hd"
   INFO_TX_POWER "[Thermal]tx_pwr:%hd"


   INFO_PS_CONF_TEST_MODE "[Current Test Mode] %Mps_conf_test_mode_enum, [Special Setting] 0x%x"






   INFO_FD_START_MONITOR "[FD]start FD monitor"
   INFO_FD_PDP_STATISTICS_CHANGE "[FD]PDP statistics changed, reset fd_timer:%d"
   INFO_FD_INACTIVITY_TIMEOUT "[FD]Inactivity time-out, fd_mode:%hd, scri_sent:%hd, fd_counter:%d, pdp:%hd, bearer:%hd"
   INFO_FD_BEARER_CAPABILITY_IND "[FD]bearer capability, status:%hd, fd:%hd, pre:%hd, next:%hd"
   INFO_BLOCK_PLMN_LIST_WHEN_RRC_STATE "PLMN list fail due to rrc state:%Mumts_rrc_state_enum"
   INFO_CHECK_MODEM_CAPABILITY "supported capability:0x%x , check capability:%Ml4c_modem_capability_enum"
   INFO_EF_RAT_MODE "[L4C][NW] EF RAT valid:%d, ef_rat_mode:%d, rat_mode:%Ml4c_rat_enum"
   INFO_DUAL_PS_ATTACH_CONFLICT "Dual ps attach conflict"
   INFO_DUAL_ALWAYS_ATTACH_CONFLICT "Dual always attach conflict"






   INFO_L4C_EPOF_AUDIO_WAITING "L4C power off done and wait for audio's ACK"
   INFO_L4C_EPOF_AUDIO_ACK "AUDIO ACK for audio power-off done"


   INFO_PARA "parameter[%Ml4c_source_id_enum].length=%hd"
   INFO_L4C_UART_CTRLDCD "UART_CtrlDCD(), port =%hd,value=%hd"
   INFO_NO_GPRS_DIALUP_EXIST "Already no GPRS dialup exist"
   INFO_RETURN_DUE_TO_UART_IN_DATA_MODE "rmmi_write_to_uart(): return due to uart in data mode"
   INFO_CANCEL_EVENT "cancel L4C timer!, event_id=%d"
   INFO_L4C_STARTUP "poweron, current action=%Ml4c_action_enum, smu_activated=%hd, rac_activated= %x"
   RMMI_PROCESS_MULTI_CMD_AFTER_PROCESS_MMI_MSG "Check multi-cmd after processing MMI message,is_ucm_action = %hd"

   INFO_NOT_SEND_CIEV_DEFAULT "do not send +ciev:2,0 when crss_cnf, due to there is still hold call exist"
   INFO_CALL_DISC_CNF_HDLR_ATD_ABORT "call_disc_cnf_hdlr: ATD aborted!"
   INFO_ATH_FOR_DATA_CALL "call_disc_cnf_hdlr: ATH for data call!"
   INFO_RETURN_NO_CARRIER "retrun NO CARRIER for ata when answering data call fail"
   INFO_RETURN_OK_FOR_ATA "retrun OK for ata when answering data call"
   INFO_NOT_SEND_CIEV_STATUS "+ciev status should not be sent before final result of ATH or CHLD is given"
   INFO_CLEAR_FD "Clear previous fd[2]"
   INFO_EIMG_EMDY_RETURN_OK "EIMG/EMDY return OK directly"
   INFO_CLEAR_PREVIOUS_PATH "clear previous path"
   INFO_DISK "disk=%x,%c"
   INFO_L4C_EQ_USBUART_SWITCH_PORT_REQ_CALL_UART_SWITCHPORT "l4c_eq_usbuart_switch_port_req() call UART_SwitchPort():PS_UART_PORT=%d"
   INFO_L4C_EQ_USBUART2_TST_USAGE "TST_PORT=%d, TST_PORT_L1=%d"
   INFO_L4C_FREE_CHANNEL_IS_FOUND "Free rmmi channel is found, cid=%d"
   INFO_L4C_USBUART2_IS_FOUND_OR_NOT "uart_port_usb2 is found=%d, cid=%d"
   INFO_POWER_ON_ALARM "POWER_ON_ALARM"
   INFO_USB_CABLE_PLUGOUT "USB cable plugout when eimg/emdy"
   INFO_SET_PENDING_ATTACH_SETTING "Set pending attach setting=%d"
   INFO_SMS_FDN_CHECK_DA_ADDRESS "SMS FDN check DA address only"
   INFO_DISALLOW_DIALUP_DUT_TO_CAMERA_RUNUNG "Disallow dialup service due to camera runing,temp_src=%d"
   INFO_CPHS_LOCK_BLOCKED "CPHS lock blocked!!"
   INFO_IN_L4CSMSAL_DELETE_CNF_HDLR "ERROR:In l4csmsal_delete_cnf_hdlr ,index =%d"
   INFO_IN_L4CSMSAL_STATUS_CNF_HDLR "ERROR:In l4csmsal_set_status_cnf_hdlr ,index =%d"
   INFO_L4C_OBTAIN_UART_CONTROL_CALL_UART_SWITCHPORT "l4c_obtain_uart_control() call UART_SwitchPort():PS_UART_PORT=%d,uart_port_value=%d"
   INFO_DUAL_SIM_TO_FLIGHT_MODE "dual SIM to fligt mode when SIM2 is doing %Ml4c_action_enum"
   INFO_PLMN_SELECTION_FOR_ECC_CALL_RETRY "PLMN SELECTION for ECC call retry"
   INFO_RAC_CURRENT_ACTION_IS_COPS_TEST "l4c_previous_rac_action_rsp(), rac_current_action=COPS_TEST,rac_user=%hd"
   INFO_DEVICE_AND_ON_OFF "device=%d, on_off=%d"
   INFO_UPDATE_CALL_ID "To update call_id=%d for mo data call"
   INFO_FC "FC = %d"
   INFO_TEMP_VALUE "temp_value=%d"
   INFO_NO_LENGH_INPUT "no length input"
   INFO_INVALID_LENGH_INPUT "invalid length input"
   INFO_FINDCLOSE "FindClose"
   INFO_FINDFIRST "FindFirst"
   INFO_ONLINE_STATE "online state"
   INFO_CLRTXBUFFER "ClrTxBuffer"
   INFO_SEND_SEL_IND "send sel_ind"
   INFO_LMMI_STATE_AND_CURRENT_ACTION "LMMI: state = %hd, current_action = %hd\n"
   INFO_STATE_AND_CURRENT_ACTION "RMMMI: state = %hd, current_action = %hd\n"
   INFO_RMMI_KEYPRESS "key press, keycode=%d, keycode idx = %d, windex = %d"
   INFO_RMMI_KEYRELEASE "key release, keycode=%d, keycode idx = %d, windex = %d"
   INFO_RMMI_KEYLONGPRESS "key long press, keycode=%d, keycode idx = %d, windex = %d"
   INFO_RMMI_KEYREPEAT "key repeat, keycode=%d, keycode idx = %d, windex = %d"
   INFO_L4C_KBDGETKEY "l4c_kbd_getkeydata(), keyevent = %Mkbd_event, keycode=%d, rindex = %d"
   INFO_ABORT_PLMN_SEL "abort plmn sel!, opcode=%d, plmn_id=%d%d%d%d%d%d"
   INFO_PREVENT_SEND_CPI_FOR_RETRY_CALL "Prevent to send CPI related to retry call(call_id=%d)"
   INFO_L4CUEM_USBDETECT_IND "l4cuem_usbdetect_ind() ,action=%d"
   INFO_USBUART_SWITCH_PORT "l4c_eq_usbuart_switch_port_req() ,src_id=%d,app=%d,new_port=%d"
   INFO_L4C_UART_PORT "PS_UART_PORT = %MUART_PORT, SIM = %d"
   INFO_L4C_START_SAT_REDIAL "L4C start sat redial!"
   INFO_L4C_ROOT_EFUN_STATE "desired:%d, efun_state:%d, sim_status:%d"
   INFO_L4C_CURRENT_SIM_MAPPING_FOR_3G_SWITCH "cur_sim_map: %Msim_interface_enum"
   INFO_L4C_ROOT_PENDING_PASSWD "[linkSML]pending_passwd[%hd]:%hd, need_unlock_table:%hd"
   INFO_L4C_PREFER_PLMN_FILE "PLMN file: %Msim_file_index_enum"
   INFO_L4C_ACTIVE_RAT "Active RAT: %Mrat_enum"
   INFO_L4C_ROOT_CURRENT_ROOT_SRC_ID "Current root_src_id = %d, interrupt scr_id =%d"
   INFO_SEND_IPC_MSG "Send IPC msg_id=%x"
   INFO_REC_IPC_MSG "Receive IPC msg_id=%x"
   INFO_MCCMNC "[Regional Phone]mcc_mnc: %x %x %x %x"
   INFO_REGIONAL_PHONE_MODE "[Regional Phone]mode:%d"
   INFO_DISALLOW_IRAT "Disallow IRAT due to RSVA suspend or abort service"
   INFO_SBP_ID "SBP ID = %d, MD CCCI SBP = %d, OLD_SBP_ID = %d, IMS op_code = %d"
   INFO_SBP_FEATURE "[SBP]%Msbp_md_feature_enum:%hd"
   INFO_SBP_DATA "[SBP data]%Msbp_md_feature_data_enum:%hd"
   INFO_L4C_RESEND_AFR "Start to retry AFR"
   INFO_PWS_IGNORE_IN_HPLMN "[PWS] Ignore PWS messages in HPLMN"
   INFO_PWS_IGNORE_IN_VPLMN "[PWS] Ignore PWS messages in VPLMN"


   STATE_L4C_CC_ACTION "l4c_cc: src_id=%Ml4c_source_id_enum, state=%Ml4c_state_enum, cc_current_action=%Ml4c_action_enum"
   STATE_L4C_SS_ACTION "l4c_ss: ss_user=%Ml4c_source_id_enum, ss_current_action=%Ml4c_action_enum"
   STATE_L4C_SMS "l4c_sms: src_id=%Ml4c_source_id_enum, sms_current_action=%Ml4c_action_enum"
   STATE_L4C_PS_ABM "l4c_ps_abm: current_action=%Ml4c_action_enum"
   STATE_L4C_EQ_ACTION "l4c_eq: eq_user=%Ml4c_source_id_enum, eq_current_action=%Ml4c_action_enum"
   STATE_L4C_RAC_ACTION "l4c_rac: rac_user=%Ml4c_source_id_enum, rac_current_action=%Ml4c_action_enum"
   STATE_L4C_SMU_ACTION "l4c_smu: smu_user=%Ml4c_source_id_enum, smu_current_action=%Ml4c_action_enum"
   STATE_L4C_TCM_ACTION "l4c_tcm: tcm_user=%Ml4c_source_id_enum, tcm_current_action=%Ml4c_action_enum"
   STATE_L4C_TCM_CONTEXT_ACTION "l4c_tcm: context_id=%d, tcm_current_action=%Ml4c_action_enum"
   STATE_L4C_PHB_ACTION "l4c_phb: phb_user=%Ml4c_source_id_enum, phb_current_action=%Ml4c_action_enum"
   STATE_L4C_CFUN_STATE "cfun_state: %d"
   STATE_ATH_DISC "ath disc"
   STATE_CLEAR_IS_UCM_ACTION "clear is_ucm_action"



   WARNING_INVALID_NUMBER "number containing invalid char %c"
   WARNING_L4C_ERROR_OUTGOING_CALL_FAIL "Warning: get_outgoing_call fail in l4c_cc_exe_ath_req"
   WARNING_MO_CALL_FAIL_DUE_TO_IN_CALL "Warning: MO call fail due to in call"
   WARNING_CALLSETUP_FAIL_DUE_TO_PRESENT_CALL "Warning: MO callsetup fail due to a existing MT present call,call_id=%d"
   WARNING_ATA_NOT_ALLOW_BEFORE_SEND_SETUP_IND "alerting~"
   WARNING_USSD_USED_USSR_STAGE "Warning: USSD with dcs=UCS2 can only be used when USSR stage"
   WARNING_CMD_CONFLICT "Error: cmd conflict error, current_action=%Ml4c_action_enum, new_action= %Ml4c_action_enum"
   WARNING_SS_CMD_CONFLICT "Warning: ss cmd conflict when action=PARSE_SS_EXE and src_id=RMMI_SRC !!"
   WARNING_SS_COMMAND_CONFLICT "Warning: ss cmd conflict !!"
   WARNING_CMD_CONFLICT_INCLUDE_ACTION_AND_IS_CTM_CONNECTED "Warning: comand conflict : action = ATD_APP , is_ctm_connected= TRUE"
   WARNING_CMD_CONFLICT_INCLUDE_ACTION_AND_ACTIVE_CALL_TYPE "Warning: comand conflict : action = CHLD_EXE , active call type=CSMCC_CSD_CALL"
   WARNING_CMD_CONFLICT_INCLUDE_ACTION_AND_RETRY_FLAG "Warning: comand conflict : action = ATD_APP , retry_flag= TRUE"
   WARNING_MUTUAL_CMD_CONFLICT "Warning: comand conflict : mutual conflict"
   WARNING_CMD_CONFLICT_CGDATA_DURING_CHANGE_RAT_RETRY "Warning: comand conflict : CGDATA_EXE during ECC change RAT Retry"
   WARNING_NO_ECALL_NUMBER_AVAILABLE "Warning: SIM Ecall number not available use ATEMSDTNUM or ATEMSDRNUM to set number"
   WARNING_PHB_APPROVE_FAIL "Warning: Phone book approve fail because %d"




   WARNING_TCM_CMD_CONFLICT_DUE_TO_CFUN_STATE "Warning: tcm cmd conflict due to cfun_state!!"
   WARNING_TCM_CMD_CONFLICT_DUE_TO_SET_RAT_MODE_DETACH "Warning: tcm cmd conflict due to SET_RAT_MODE_DETACH!!"
   WARNING_TCM_CMD_CONFLICT "Warning: tcm cmd conflict !!"
   WARNING_ABORT_PDP_ACTIVATION_WITH_CID "cid(%d) is activating, let CGACT=0 pass to abort it!"
   WARNING_ABORT_PDP_ACTIVATION_STATE "cid(%d): ext_pdp_activating[]=%d, ext_pdp_src_id[]=%d"
   WARNING_GPRS_STRING_VALID_CMD_NOT_ALLOWED "Warning: gprs string valid ,but cmd not allowed"
   WARNING_L4CUPS_PORT_ACTIVATE_CNF_FAILURE "l4cups_port_activate_cnf_hdlr - fail!!!"
   WARNING_L4CUPS_PORT_MAYBE_NOT_AVALIABLE "port=%d is not owned by L4C, real_owner=%Mmodule_type, rmmi_current=%Mmodule_type, PS_UART_PORT=%d"
   WARNING_PHB_APPROVE_BY_MMI_FAILURE "custom_phb_xmgnt_approve_fdn(l4c_operation=d, cause=%d) return KAL_FALSE"
   WARNING_SPECIAL_CAUSE_HDLR "SPECIAL CAUSE HANDLER : cid:%d, cause: %Mps_cause_enum"
   WARNING_INVALID_BINDING_ID "[WARNING] INVALID binding_id"

   WARNING_C2K_NON_INIT_ATT_PDN_RSP "[WARNING] Non-initial attach PDN response in C2K to LTE inter-RAT state"
   WARNING_C2K_INVALID_IRAT_RESULT "[WARNING] INVALID I-RAT Result %Mirat_result_enum"
   WARNING_C2K_INVALID_CONTEXT_TYPE "[WARNING] C2K bring wrong context_type"
   WARNING_C2K_WRONG_IP_ADDR_LEN "[WARNING] wrong IP_ADDR_LEN"
   WARNING_C2K_EI3GPPIRAT_IN_WORNG_STATE "[WARNING] EI3GPPIRAT in non-iRAT state"
   WARNING_C2K_GET_NW_APPLIED_PDP_ADDR_FAIL "[WARNING] l4ctcm_get_nw_applied_pdp_addr fail"
   WARNING_C2K_GET_BINDING_CH_FAIL "[WARNING] l4ctcm_get_binding_channel fail"
   WARNING_C2K_INVALID_CONTEXT_ID "[WARNING] L4C_CONTEXT_ID_IS_INVALID"
   WARNING_CMD_CONFLICT_C2K_IRAT "[WARNING] C2K <-> LTE inter-RAT ongoing "

   WARNING_L4C_EQ_FS_RETURN_ERROR "Warning: EQ fs action: %d return: %d"




   WARNING_SMSAL_UNEXPECTED_MTI "Warning: the MTI is not the expected value"




   WARNING_FD_INVALID_INACTIVITY_TIMER_ID "[FD]Warning: Invalid Inactivity TID: %d"
   WARNING_RF_ON_FAIL "[L4C][NW]Warning: RF on fail, RAC RAT: %Mrat_enum"






   WARNING_CGDATA_GPRS_DIALUP_IS_NOT_ALLOWED "Warning: l4c cmd_conflict: CGDATA GPRS dialup is not allowed when RFOFF/RAT_MODE_DETACH"
   WARNING_CGDATA_CMD_CONFLICT "Warning: l4c cmd_conflict: CGDATA tcm or rac cmd conflict"
   WARNING_NO_GPRS_DIALUP_CAN_BE_DICONNECTED "Warning: No GPRS dialup can be disconnected from RMMI!"
   WARNING_L4C_ERROR "Warning: error"
   WARNING_L4C_USBUART2_IS_ALREADY_OPENED "uart_port_usb2 is already opened by AT, cid=%d"
   WARNING_L4C_NO_FREE_CHANNEL "No free rmmi channel is found!!"
   WARNING_L4C_MMS_FOLDER_STATUS_OUTPUT_REQ_DROP_RESULT_CODE "Warning: l4c_mms_folder_status_output_req drop result code"
   WARNING_L4C_MMS_UPLOAD_MSG_OUTPUT_REQ_DROP_RESULT_CODE "Warning: l4c_mms_upload_msg_output_req drop result code"
   WARNING_L4C_MMS_DELETE_MSG_REQ_DROP_RESULT_CODE "Warning: l4c_mms_delete_msg_output_req drop result code"
   WARNING_L4C_MMS_READ_MSG_PATH_REQ_DROP_RESULT_CODE "Warning: l4c_mms_read_msg_path_res_req drop result code"
   WARNING_L4C_MMI_JAVA_LOCAL_INSTALL_RES_REQ_DROP_RESULT_CODE "Warning: l4c_mmi_java_local_install_res_req drop result code"
   WARNING_SOMETHING_STILL_IN_L4C_KBD_BUFFER "Warning: Something still in l4c_kbd_buffer. windex=%d ,rindex=%d"
   WARNING_UART_OWNER_IS_NOT_L4C "Warning: l4c_eq_usbuart_switch_port_req(): ERROR!! UART owner is not L4C ,owner is %d"
   WARNING_INVALID_KEY "Warning: invalid key"
   WARNING_ABORT_PLMN_LIST_REQ_CMD_CONFLICT "Warning: abort_plmn_list_req cmd conflict"
   WARNING_EFPUCT_IS_NOT_VALID "Warning: EFpuct is not valid"
   WARNING_NOT_VALID_SIM_OPERATION_STRING "Warning: not a valid sim operation string"
   WARNING_PHB_CMD_CONFLICT "Warning: phb cmd conflict !!"
   WARNING_SMS_CMD_CONFLICT "Warning: sms_cmd_conflict"
   WARNING_SMS_CMD_CONFLICT_SMS_ACTION_IS_NOT_ALLOWED "Warning: sms_cmd_conflict , sms action is not allowed while background action"
   WARNING_SMS_CMD_CONFLICT_CUFN_STATE_IS_NOT_EQUAL_TO_1 "Warning: sms cmd conflict : cufn_state is not equal to 1"
   WARNING_RAC_CMD_CONFLICT_DUE_TO_CFUN_STATE "Warning: rac cmd conflict due to cfun_state!!"
   WARNING_RAC_CMD_CONFLICT_DUE_TO_CALL_EXIST "Warning: rac cmd conflict due to call exist!!"
   WARNING_RAC_CMD_CONFLICT_DUE_TO_IMS_CALL_EXIST "Warning: rac cmd conflict due to IMS call exist!!"
   WARNING_RAC_CMD_CONFLICT "Warning: rac cmd conflict !!"
   WARNING_SMU_CMD_CONFLICT "Warning: smu cmd conflict !!"
   WARNING_CMD_CONFLICT_INCLUDE_ACTION_AND_RAC_CURRENT_ACTION "Warning: comand conflict : action = ABM_ACT_APP , rac_current_action= PWROFF_DETACH"
   WARNING_CMD_CONFLICT_INCLUDE_ACFUN_STATE "Warning: comand conflict : cfun_state=%hd"
   WARNING_CMD_CONFLICT_INCLUDE_SIM_REFRESH "Warning: comand conflict : sim_refresh= TRUE"
   WARNING_CMD_CONFLICT_INCLUDE_CRSS_OPCODE_AND_SIM_REFRESH "Warning: command conlict : L4C_PTR->crss_opcode=%Mcsmcc_crss_req_enum , L4C_PTR->sim_refresh=%hd"
   WARNING_FILE_ERROR "Warning: file error"
   WARNING_WRONG_FUNCTION "Warning: WRONG FUNCTION !!\n"
   WARNING_WRITE_FILE_FAIL "Warning: Write FILE Fail!"
   WARNING_UART_INPUT_QUEUE_FULL "Warning: RMMI uart_input_queue Full!"
   WARNING_CMUX_NOT_ENABLE_CURRENT_SRC_SHOULD_BE_RMMI_SRC "Warning: CMUX not enable, current_src should be RMMI_SRC"
   WARNING_LG_DB_OPEN_FAIL "Warning: log.db open fail"
   WARNING_TST_LOST_ONE_CMD "Warning: tst lost one command !!"
   WARNING_DATA_CALL_INVALID_CID "Warning: data call cid is invalid"
   WARNING_EQ_CMD_CONFLICT "Warning: EQ cmd conflict! "
   WARNING_EQ_SRNTCH_FAILED "Warning: EQ screen touch return: %d"
   WARNING_EQ_SCRN_PARA_GET_FAILED "Warning: EQ screen parameter query return: %d"
   WARNING_PLUGOUT_SRCID_IS_NOT_MATCH "Warning: plugout_srcid(%d) is not match cid(%d) "
   WARNING_L4C_ATCI_STATE_WRONG "Warning: state wrong, ATCI state=%d"
   WARNING_L4C_ATCI2_STATE_WRONG "Warning: state wrong, ATCI2 state=%d"
   WARNING_L4C_SCRI_REQ_NOT_SENT "Warning: End PS data senssion req not sent (debug idx: %d, AFR retry: %d)"
   WARNING_L4C_CELL_INFO_UNREG "Warning: dereg non-reg module: %d"
   WARNING_L4C_POWERON_HAS_COMMAND_CONFLICT "Warning: comand conflict with power on procedure(PWRON_ATTACH)"
   WARNING_L4C_NULL_POINTER_CHECK "Warning: get NULL pointer"


   ERROR_PHB_APPROVE_STRING_EXCEEDING "Error: Construct PHB approve string=%hd"




   ERROR_L4C_SET_PS_DIALUP_PORT_WITH_INVALID_CID "L4C ERROR!! l4c_ps_dialup_set_port2cid() with invalid cid=%hd"
   ERROR_L4C_GET_PS_DIALUP_PORT_WITH_INVALID_CID "L4C ERROR!! l4c_ps_dialup_get_port() with invalid cid=%hd"
   ERROR_L4C_FREE_PDP_CONTEXT_WITH_INVALID_CID "L4C ERROR!! l4c_free_pdp_context() with invalid cid=%hd"
# 1227 "./modem/interface/l4misc/l4_trc.h"
   ERROR_L4C_INVALID_PORT "Invalid port !"




   ERROR_NVRAM_STATE "Error: State error"
   ERROR_RMMI_CC_NOT_STARTUP "Error: CSMCC not startup yet"
   ERROR_CKPD_INPUT_FORMAT_ERROR "There are something wrong in the AT+CKPD input string"
   ERROR_CMGL_NOT_END_BUT_ERROR "Error: cmgl not end but error"


   L4C_CC_PARA "cc_parameter[%Ml4c_source_id_enum].length=%hd"
   L4C_SS_PARA "ss_parameter.length=%hd"
   CC_PEER_BUF "cc_peer_buf.length=%hd"
   FAX_SRC_ID_INFO "L4C_PTR->fax_src_id = %hd"
   CPI_INFO_TYPE "+ECPI: %Mcsmcc_cpi_msg_type_enum ,call_id=%hd,retry_cc=%hd,retry_ongoing_flag=%hd,mo_call_id=%hd"
   CTM_CURRENT "[CTM current] ctm_current_action = %Ml4c_action_enum, ctm_user = %Ml4c_source_id_enum"
   CTM_CONTEXT "[CTM context] is_ctm_connected = %d, connected_src_id = %Ml4c_source_id_enum, is_gpio_plug = %d"
   L4C_MMI_UCM_HF_CIEV_REQ "l4c_mmi_ucm_hf_ciev_req(),ind_type=%Mrmmi_cind_enum,event=%d"
   L4C_MMI_UCM_RCODE_REQ "l4c_mmi_ucm_rcode_req(),source_id=%Ml4c_source_id_enum,type=%Mrmmi_rcode_type_enum,call_id=%d"
   L4C_MMI_UCM_AT_RES_REQ "l4c_mmi_ucm_at_res_req(),source_id=%Ml4c_source_id_enum,result=%d,cause=%Mrmmi_ucm_cause_enum"


   ATD_GPRS_DIALUP_ATTEMPT_BUT_FAIL "ATD gprs dialup attempt but fail,src_id =%hd,port=%hd"
# 1260 "./modem/interface/l4misc/l4_trc.h"
   HZ_STATE "[HZ state] hz_sim_status = %Mhz_sim_status_enum, is_dedicated_mode = %d, is_is_pkt_transfer_mode = %d"
   HZ_CURRENT "[HZ current] current_lac[0] = %d, current_lac[1] = %d,  current_cell_id = %d, current_gsm_status = %d, current_hz_number = %d"
   HZ_PARA "[HZ para %d] a_flag = %d, is_cz = %d, xh= %d, yh = %d, r2h = %d, sim_c_size = %d"
   HZ_CACHE "[HZ cache %d] sim_cache[%d].lac[0] = %d, lac[1] = %d, cell_id = %d"
   HZ_OTHER "[HZ other] dynamic_cache_lastest = %d, dynamic_cache_size = %d, queue_cb = %d, queue_xc = %d, queue_yc = %d"
   GPS_DESENSE_INFO_REQ "[GPS Desense] set mode=%hd"


   EM_ADD_UPDATE_LIST "Add mod_id:%d in the update_list"
   EM_EVENT_FOUND_IN_MAPPING_TABLE "Event found in em_info_req_mod_tbl[%d],mod_id=%d,event=%d"
   EM_NO_MODULE_MAP_TO_EVENT "No module mapped to em event :%d"


   RMMI_CID_PORT_INFO "CID: %hd, port = %MUART_PORT, source = %Ml4c_source_id_enum, simId=%Msim_interface_enum"



   INFO_ALARM_RECURR "rmmi_cala_hdlr(), alarm.recurr= 0x%X"
   ANY_CMD_AFTER_CKPD_IN_MULTI_CMD_IS_NOT_ALLOWED "RMMI ERROR: Any command coming after +CKPD in a multiple command line is not allowed"


   RMMI_CB_INFO "rmmi_cb_info, cb_on_off = %d, mid_num = %d, mir_num = %d, dcs_num = %d"

END_MODULE_MSG
# 8 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./modem/l4/uem/include/uem_trc.h" 1
# 137 "./modem/l4/uem/include/uem_trc.h"
START_MODULE_MSG MOD_UEM 20



    FUNC_UEM_KEYPAD_POWER_ON_IND "uemdrv_keypad_power_on_ind_hdlr"
    FUNC_UEM_ALARM_POWER_ON_IND "uemdrv_alarm_power_on_ind_hdlr"
    FUNC_UEMRTC_PERIOD_IND "uemdrv_rtc_period_ind_hdlr"
    FUNC_UEM_PMIC_IND "uemdrv_pmic_ind_hdlr"
    FUNC_UEM_WRITE_DATA_CNF "uemnvm_write_data_cnf_hdlr"
    FUNC_UEM_READ_DATA_CNF "uemnvm_read_data_cnf_hdlr"
    FUNC_UEM_SET_PROFILE_REQ "ueml4c_set_profile_req_hdlr"
    FUNC_UEM_STARTUP_REQ "ueml4c_startup_req_hdlr"
    FUNC_UEM_LANGUAGE_REQ "uemsat_language_req_hdlr"
    FUNC_UEM_CURRENT_TIME_REQ "uemsat_current_time_req_hdlr"
    FUNC_UEM_EM_REQ "ueml4c_em_req_hdlr"
    FUNC_UEMDRV_CCCI_EM_REQ_HDLR "uemdrv_ccci_em_req_hdlr"
    FUNC_UEMDRV_CCCI_EM_REQ_HDLR_INFO "uemdrv_ccci_em_req_hdlr, event_type=%d param_1=%d param_2=%d"


    FUNC_UEM_AUDIO_PLAY "l4cuem_audio_play_req"
    FUNC_UEM_AUDIO_STOP "l4cuem_audio_stop_req"
    FUNC_UEM_DEMO_EXT_IMELODY_RING "l4cuem_demo_ext_imelody_ring_req"
    FUNC_UEM_POEWR_OFF "l4cuem_power_off_req"
    FUNC_UEM_RTC_GET_TIME "l4cuem_rtc_get_time_req"
    FUNC_UEM_RTC_SET_TIME "l4cuem_rtc_set_time_req"
    FUNC_UEM_ALARM_GET_TIME "l4cuem_alarm_get_time_req"
    FUNC_UEM_RTC_CNFG_FORMAT "l4cuem_rtc_cnfg_format_req"
    FUNC_UEM_RTC_DELETE_DATE_TIME "l4cuem_rtc_delete_date_time_req"
    FUNC_UEM_SET_MUTE "l4cuem_set_mute_req"

    FUNC_UEM_GPIO_SET_LEVEL "l4cuem_gpio_set_level_req(%d,%d)"
    FUNC_UEM_GET_EQUIP_ID "l4cuem_get_equip_id_req"
    FUNC_UEM_GET_BATTERY_STATUS "l4cuem_get_battery_status_req"
    FUNC_UEM_SET_SILENT_MODE "l4cuem_set_silent_mode_req"
    FUNC_UEM_GET_SILENT_MODE "l4cuem_get_silent_mode_req"
    FUNC_UEM_SET_ALERT_MODE "l4cuem_set_alert_mode_req"

    FUNC_UEM_SET_GREETING_TEXT "l4cuem_set_greeting_text_req"

    FUNC_UEM_GPIO_GET_LEVEL "l4cuem_gpio_get_level_req"
    FUNC_UEM_EQUIP_SET_CC "l4cuem_equip_set_cc_req"

    FUNC_UEM_SET_LANG "l4cuem_set_lang_req"
    FUNC_UEM_GET_LANG "l4cuem_get_lang_req"
    FUNC_UEM_SET_DATE_TIME_FORMAT "l4cuem_set_date_time_format_req"
    FUNC_UEM_GET_DATE_TIME_FORMAT "l4cuem_get_date_time_format_req"
    FUNC_UEM_POWER_RESET "l4cuem_power_reset"


    FUNC_UEM_ALARM_DETECT "uemdrv_alarm_detect_ind"
    FUNC_UEM_RTC_PERIOD "uemdrv_rtc_period_ind"
    FUNC_UEM_KEYPAD_POWER_ON "uemdrv_keypad_power_on_ind"
    FUNC_UEM_PMIC_DETECT "uemdrv_pmic_ind"
    FUNC_UEM_GPIO_DETECT "uemdrv_gpio_detect_ind"

    FUNC_UEM_CCCI_ACK_CALLBACK "uem_ccci_ack_callback"
    FUNC_UEM_CCCI_ACK_CAlLBACK_INFO "uem_ccci_ack_callback, ccciMsg=%d"
    FUNC_UEM_CCCI_EM_REQ_HDLR "uem_ccci_em_req_hdlr, event_type:%d"
    FUNC_UEM_CCCI_EM_REQ_GET_SLEEP_INFO "uem_ccci_em_req_hdlr (get_sleep), param_2=%d"
    FUNC_UEM_CCCI_EM_REQ_SLEEP_INFO "uem_ccci_em_req_hdlr (set_sleep), param_2=%d"
    FUNC_UEM_CCCI_EM_REQ_GET_DCM_INFO "uem_ccci_em_req_hdlr (get_dcm), param_2=%d"
    FUNC_UEM_CCCI_EM_REQ_DCM_INFO "uem_ccci_em_req_hdlr (set_dcm), param_2=%d"
    FUNC_UEM_CCCI_EM_REQ_GET_MEMDUMP_INFO "uem_ccci_em_req_hdlr (get memdump), param_2=%d"
    FUNC_UEM_CCCI_EM_REQ_MEMDUMP_INFO "uem_ccci_em_req_hdlr (set memdump), param_2=%d"
    FUNC_UEM_CCCI_EM_REQ_GETUART_INFO "uem_ccci_em_req_hdlr (get uart), uart_port=%d uart_baud:=%d"
    FUNC_UEM_CCCI_EM_REQ_GETUART_INFO2 "uem_ccci_em_req_hdlr (get uart), buff_id=%d uart_baud:=%d"
    FUNC_UEM_CCCI_EM_REQ_SETUART_INFO "uem_ccci_em_req_hdlr (set uart), uart_port=%d uart_baud:=%d"
    FUNC_UEM_CCCI_EM_UART_PORT_SETTING_INFO "uem_ccci_em_uart_port_setting_hdlr: event type=%d"
    FUNC_UEM_CCCI_EM_UART_PORT_READ_INFO "uem_ccci_em_uart_port_setting_hdlr: (READ) ps_trace_uart=%d   tst_ps_uart=%d  tst_baudrate=%d"
    FUNC_UEM_CCCI_EM_UART_PORT_WRITE_INFO "uem_ccci_em_uart_port_setting_hdlr: (WRITE) result:%d"
    FUNC_UEM_CCCI_EM_UART_PORT_CONFLICT_INFO "uem_ccci_em_uart_port_setting_hdlr: (WRITE conflict) PS_UART_PORT:%d  g_uem_ccci_tst_port:%d"


    FUNC_UEM_SEND_MSG_TO_L4C "uem_send_msg_to_l4c"
    FUNC_UEM_SEND_MSG_TO_NVRAM "uem_send_msg_to_nvram"
    FUNC_UEM_SEND_MSG_TO_SAT "uem_send_msg_to_sat"
    FUNC_UEM_SEND_MSG_TO_AUD "uem_send_msg_to_aud"
    FUNC_UEM_SEND_MSG_TO_BMT "uem_send_msg_to_bmt"
    FUNC_UEM_SEND_MSG_TO_UEM "uem_send_msg_to_uem"



    INFO_UEM_SPEECH_SET_MODE "l4cuem_speech_set_mode_req =%d"






    WARNING_UEM_OUT_OF_RANGE "out of range!"



    ERROR_UEM_NVRAM_DATA_LEN "nvram read data not match, original=%d nvram=%d data!"


    FUNC_UEM_AT_EF_PORT_SETTING "[UEMAT]l4cuem_at_ef_port_setting(%d, %d), %d"
    FUNC_UEM_AT_EF_PORT_SETTING_READ_CNF_HDLR "[UEMAT]l4cuem_at_ef_port_setting_read_cnf_hdlr, %d"
    FUNC_UEM_AT_EF_PORT_SETTING_WRITE_CNF_HDLR "[UEMAT]l4cuem_at_ef_port_setting_write_cnf_hdlr, result=%d"
    FUNC_UEM_PLAY_PATTERN "[UEM] uem_play_pattern(%d, %d)"
    FUNC_UEM_VIB "[UEM] vib"
    FUNC_UEM_CHECK_VIB_PTN_ID "[UEM] feedback ptn(%d==%d?),  vib on(%d)"
    FUNC_UEM_OTHER_VIB_PTN "[UEM] other"
    FUNC_UEM_CONTINUE_PLAY_VIB "[UEM] continue"
    FUNC_UEM_STOP_PATTERN "[UEM] uem_stop_pattern(%d)"
    FUNC_UEM_PLAY_VIB_PATTERN_CALLBACK "[UEM] uem_play_vib_pattern_callback, %d"
    FUNC_UEM_PLAY_VIB_PATTERN "[UEM] uem_play_vib_pattern"
    FUNC_UEM_SET_VIB_LEVEL "[UEM] uem_set_vib_level(%d, %d)"
    FUNC_UEM_SET_LED_BACKLIGHT_OFF "[UEM] uem_set_led_backlight_off"
    FUNC_UEM_PROCESSING "[UEM] Processing"
    FUNC_UEM_VIB_TIMER_DUR "[UEM] timer dur=%d"
    FUNC_UEM_STOP_LED_BACKLIGHT_OFF "[UEM] uem_stop_led_backlight_off, %d"
    FUNC_UEM_START_LED_BACKLIGHT_OFF "[UEM] uem_start_led_backlight_off"
    FUNC_UEM_PROCESS_LED_BACKLIGHT_OFF "[UEM] uem_process_led_backlight_off, %d"
    FUNC_UEM_LED_BACKLIGHT_OFF_TIMER_HDLR "[UEM] uem_led_backlight_off_timer_hdlr, %d"
    FUNC_UEM_ADC_MEASURE_DONE_CNF_HDLR "[UEM] uembmt_adc_measure_done_cnf_hdlr, cur=%d"
    FUNC_UEM_CUR_VOL "[UEM] cur vol=%d"

    FUNC_UEM_CUST_SET_LEVEL "[UEM] custom_uem_gpio_set_level(%d,%d)"


END_MODULE_MSG
# 9 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./modem/l4/rac/common/include/rac_trc.h" 1
# 360 "./modem/l4/rac/common/include/rac_trc.h"
# 1 "interface/service/dhl/dhl_trace.h" 1
# 361 "./modem/l4/rac/common/include/rac_trc.h" 2
# 398 "./modem/l4/rac/common/include/rac_trc.h"
START_MODULE_MSG MOD_RAC 20


RAC_FN_rac_handle_class_change "[RAC] RAC_FN_rac_handle_class_change"
RAC_FN_rac_ug_ims_config_req "[RAC] rac_ug_ims_config_req"

RAC_TRC_rac_em_update_req_msg_handler "[RAC] rac_em_update_req_msg_handler()"
RAC_TRC_rac_send_em_msg "[RAC] rac_send_em_msg()"
RAC_TRC_rac_send_em_abnormal_no_service_msg "[RAC] rac_send_em_abnormal_no_service_msg()"



RAC_TRC_rac_e_reset "[RAC] rac_e_reset()"
RAC_TRC_rac_e_send_set_rat_mode_req "[RAC] rac_e_send_set_rat_mode_req()"
RAC_TRC_rac_e_send_attach_req "[RAC] rac_e_send_attach_req()"
RAC_TRC_rac_e_send_detach_req "[RAC] rac_e_send_detach_req()"
RAC_TRC_rac_e_send_rfoff_req "[RAC] rac_e_send_rfoff_req()"
RAC_TRC_rac_e_update_emm_state "[RAC] rac_e_update_emm_state()"
RAC_TRC_rac_e_get_service_domain "[RAC] rac_e_get_service_domain()"
RAC_TRC_rac_e_is_cell_info_equal "[RAC] rac_e_is_cell_info_equal()"
RAC_TRC_rac_e_update_ue_mode "[RAC] rac_e_update_ue_mode()"
RAC_TRC_rac_e_sync_ps_state "[RAC] rac_e_sync_ps_state()"
RAC_TRC_rac_e_sync_ps_cause "[RAC] rac_e_sync_ps_cause()"
RAC_TRC_rac_get_cs_state_in_lte "[RAC] rac_get_cs_state_in_lte()"
RAC_TRC_rac_get_eps_state "[RAC] rac_get_eps_state()"
RAC_TRC_rac_get_eps_status "[RAC] rac_get_eps_status()"
RAC_TRC_is_rac_emm_state_null_dereg "[RAC] is_rac_emm_state_null_dereg()"
RAC_TRC_is_rac_emm_state_reg "[RAC] is_rac_emm_state_reg()"
RAC_TRC_is_rac_emm_state_att_req "[RAC] is_rac_emm_state_att_req()"
RAC_TRC_is_cs_domain_accessible "[RAC] is_cs_domain_accessible()"
RAC_TRC_convert_vdp_from_l4_to_nas "[RAC] convert_vdp_from_l4_to_nas()"

RAC_TRC_rac_e_set_ims_voice_domain_preference_req "[RAC] rac_e_set_ims_voice_domain_preference_req()"
RAC_TRC_rac_e_ims_reg_status_update_req "[RAC] rac_e_ims_reg_status_update_req()"
RAC_TRC_rac_e_set_ims_voice_availability_req "[RAC] rac_e_set_ims_voice_availability_req()"
RAC_TRC_rac_e_ims_config_req "[RAC] rac_e_ims_config_req()"


RAC_TRC_rac_e_emc_attach_ind_msg_handler "[RAC] rac_e_emc_attach_ind_msg_handler()"
RAC_TRC_rac_e_emc_attach_cnf_msg_handler "[RAC] rac_e_emc_attach_cnf_msg_handler()"
RAC_TRC_rac_e_emc_detach_ind_msg_handler "[RAC] rac_e_emc_detach_ind_msg_handler()"


RAC_TRC_rac_e_nw_feature_ind_msg_handler "[RAC] rac_e_nw_feature_ind_msg_handler()"


RAC_TRC_rac_e_get_em_info "[RAC] rac_e_get_em_info()"


RAC_TRC_rac_e_set_ue_mode_req_msg_handler "[RAC] rac_e_set_ue_mode_req_msg_handler()"
RAC_TRC_rac_e_sim_ready_ind_msg_handler "[RAC] rac_e_sim_ready_ind_msg_handler()"
RAC_TRC_rac_e_sim_error_ind_msg_handler "[RAC] rac_e_sim_error_ind_msg_handler()"



RAC_TRC_rac_e_get_sat_location_info "[RAC] rac_e_get_sat_location_info()"




RAC_TRC_rac_update_last_domain "[RAC] rac_update_last_domain()"


RAC_TRC_rac_e_get_detach_domain_by_rat_mode "rac_e_get_detach_domain_by_rat_mode()"
RAC_TRC_rac_e_change_usage_setting_by_sim "rac_e_change_usage_setting_by_sim"



RAC_INFO_BEFORE_MAIN "[RAC] RAC info before main: current_action: %Mrac_action_enum, mm_state: %Mrac_mm_state_enum"
RAC_INFO_BEFORE_MAIN_GMM_STATE "[RAC] RAC info before main: gmm_state: %Mrac_gmm_state_enum"
RAC_INFO "[RAC] current_action: %Mrac_action_enum, mm_state: %Mrac_mm_state_enum"
RAC_INFO_GMM_STATE "[RAC] RAC info: gmm_state: %Mrac_gmm_state_enum"
RAC_INFO_GET_SEL_MOD "[RAC] RAC get NW sel mode = %d"
RAC_INFO_TST_INJECT_CMD_STRING "[RAC] rac_atoi(&tst_inject->string[0])=%d, \n Inject command Reference=%d"
RAC_ABNORMAL_ASSERT "[RAC] rac_abnormal_assert"
RAC_CHANGE_MS_CLASS "[RAC] MS class change from %Mms_mobile_class_enum to %Mms_mobile_class_enum"
RAC_RECEIVE_DETACH_IND "[RAC] TB_reg=%Mmm_user_regn_type_enum, TB_dereg=%Mmm_user_regn_type_enum, detach type=%Mmm_user_regn_type_enum, detach cause=%Mmm_cause_enum"
RAC_ACTIVATING_IGNORE "[RAC] RAC warnning: ignore the request due to rac is activating"
RAC_GPRS_CONN_TYPE "[RAC] GPRS Connection Type = %Ml4c_gprs_connect_type_enum"

RAC_TRC_READ_EF_RAC_PREFERENCE "[RAC] read NVRAM_EF_RAC_PREFERENCE_LID back"
RAC_DEFAULT_RAT_MODE "[RAC] default RAT mode = %Mrat_enum"
RAC_SET_RAT "[RAC] Set RAT mode = %Mrat_enum"
RAC_PLMN_SEL_MODE "[RAC] PLMN selection mode = %Mplmn_selection_mode_enum"
RAC_CURRENT_ACTIVE_RAT "[RAC] step %d, current_active_rat: %Mrat_enum"
RAC_MULTIMODE_ACTIVE_RAT "[RAC] RAT active: %Mrat_enum, L4: %Mrat_enum"

RAC_TRC_UG_SYNC_PS_CAUSE "[RAC] rac_ug_sync_ps_cause()"
RAC_GET_SERVICE_DOMAIN "[RAC] rac_ug_get_service_domain from auto_attach: %Mkal_bool, mobile_class: %Mms_mobile_class_enum, search_type: %Mmm_user_search_type_enum, tmp_requested_service: %Mdomain_id_enum"


RAC_TRC_BEFORE_MAIN_EMM_STATE "[RAC] RAC info before main: emm_state: %Mrac_emm_state_enum"
RAC_TRC_EMM_STATE "[RAC] RAC info: emm_state: %Mrac_emm_state_enum"
RAC_TRC_ON_A_CAUSE18_PLMN "[RAC] on a PLMN with cause18 - CS domain not available"
RAC_TRC_READ_EF_EPSLOCI_EPSNSC_TIN "[RAC] read NVRAM_EF_EPSLOCI_EPSNSC_TIN_LID back"
RAC_TRC_READ_EF_LTE_PREFERENCE "[RAC] read NVRAM_EF_LTE_PREFERENCE_LID back"
RAC_TRC_EMM_DETACH_IND "[RAC] TB_reg=%Mmm_user_regn_type_enum, TB_dereg=%Mmm_user_regn_type_enum, detach type=%Mmm_user_regn_type_enum, detach cause=%Memm_cause_enum"
RAC_TRC_UE_USAGE_SETTING "[RAC] UE Usage Setting = %Mue_usage_setting_enum"
RAC_TRC_VOICE_DOMAIN_PREFERENCE_EUTRAN "[RAC] Voice Domain Preference for EUTRAN = %Ml4_voice_domain_preference_enum"
RAC_TRC_SMS_OVER_IP_SGS "[RAC] SMS over IP = %Mkal_bool, SMS over SGS = %Mkal_bool"
RAC_TRC_TIN "[RAC] TIN = %Mtin_enum"
RAC_TRC_UE_MODE "[RAC] UE Mode = %Mue_mode_enum"
RAC_TRC_VDP_CHANGE_DUE_TO_IMS_ONOFF "[RAC] VDP Change to %Ml4_voice_domain_preference_enum because of IMS on/off"
RAC_TRC_SET_RUNTIME_UE_MODE "[RAC] set runtime UE Mode from %Mue_mode_enum to %Mue_mode_enum"
RAC_TRC_NVRAM_UE_MODE "[RAC] NVRAM UE Mode = %Mue_mode_enum"
RAC_TRC_NOT_SEND_UE_MODE_UPDATE_REQ "[RAC] UE Mode parameters are the same, do not send UE_MODE_PARAM_UPDATE_REQ"

RAC_TRC_IMS_REG_STATUS_CHANGED "[RAC] IMS reg. status is changed from %Mims_reg_status_enum to %Mims_reg_status_enum"

RAC_TRC_SET_UE_MODE_FAIL "[RAC] Set UE Mode failed, invalid UE Mode = %Mue_mode_enum"
RAC_TRC_UNHANDLED_SIM_ERROR_CAUSE "[RAC] unhandled SIM ERROR cause = %Msim_error_cause_enum"
RAC_TRC_CONSECUTIVE_SIM_ERROR "[RAC] receive consecutive SIM_ERROR_IND with cause = %Msim_error_cause_enum"
RAC_TRC_NOT_SEND_UEMODE_UPDATE_REQ_SIM_REMOVED "[RAC] do not send UE_MODE_PARAM_UPDATE_REQ due to SIM removed"
RAC_TRC_UE_USAGE_SETTING_UNSYNC "[RAC] UE usage setting %Mue_usage_setting_enum is different from UE mode %Mue_mode_enum !"
RAC_TRC_REMAIN_CS_PS_DOMAIN "[RAC] remains request_service as CS/PS domain when %Mrac_sim_status_enum for CS emergency call !"
RAC_TRC_UNHANDLED_EMM_STATE "[RAC] unhandled EMM state %Mrac_emm_state_enum !"
RAC_TRC_LAST_ATTACH_DOMAIN "[RAC] last attach domain %Mdomain_id_enum"
RAC_TRC_SET_LAST_ATTACH_DOMAIN "[RAC] set last attach domain as %Mdomain_id_enum"
RAC_TRC_UPDATE_NEW_ATTACH_DOMAIN "[RAC] update attach domain by sending ATTACH_REQ"
RAC_TRC_TO_UPDATE_LAST_ATTACH_DOMAIN "[RAC] update last attach domain when detach = %Mkal_bool, service = %Mdomain_id_enum"
RAC_TRC_DISABLE_CS_DETACH_FOR_SET_MULTIRAT "[RAC] not notify MM to detach CS domain for setting as multi-RAT"




RAC_CURRENT_ACTION "[RAC] current action: %Mrac_action_enum"
UNEXPECTED_MESSAGE "[RAC] Unexpected message for RAC in state: %d"
PLMN_LIST_FLAG_ERROR "[RAC] PLMN LIST flag inconsistent: %d"
RAC_RECV_PS_DETACH_WHEN_PLMN_SEL "[RAC] recv PS Detach when PLMN SEL(ignore):%d, %d"
RAC_L4C_GET_ATTACH_STATUS "[RAC] gsm_state:%Mreg_state_enum,gsm_status:%Ml4c_rac_response_enum,gprs_state:%Mreg_state_enum,gprs_status:%Ml4c_rac_gprs_status_enum"
RAC_GET_STATE_STATUS_INFO "[RAC] gsm_state:%Mreg_state_enum,gsm_status:%Ml4c_rac_response_enum,gprs_state:%Mreg_state_enum,gprs_status:%Ml4c_rac_gprs_status_enum"
RAC_GET_LAST_STATE_STATUS_INFO "[RAC] LAST gsm_state:%Mreg_state_enum,gsm_status:%Ml4c_rac_response_enum,gprs_state:%Mreg_state_enum,gprs_status:%Ml4c_rac_gprs_status_enum,is_on_hplmn:%Mkal_bool"
RAC_GET_CURRENT_STATE_STATUS_INFO "[RAC] CURRENT gsm_state:%Mreg_state_enum,gsm_status:%Ml4c_rac_response_enum,gprs_state:%Mreg_state_enum,gprs_status:%Ml4c_rac_gprs_status_enum,is_on_hplmn:%Mkal_bool"
RAC_NVRAM_WRITE_COUNT "[RAC] nvram_write_counter:%d, when:%d"
RAC_PLMN_LIST_SEL_OR_BAND_X_WHEN_OTHER_ACTIONS "[RAC] PLMN List,Sel,Band Change when rac_action:%Mrac_action_enum"
RAC_NOT_SEND_ATTACH_REQ_WHEN_RECV_PS_REG_REQ "[RAC] Not send Attach Req to GMM gprs_state:%Mreg_state_enum,gprs_status:%Ml4c_rac_gprs_status_enum"
RAC_SAME_SEND_REG_IND "[RAC] Same rac_send_reg_ind. Not send to L4C"
RAC_SEND_ATTACH_UNEXPECTEDLY "[RAC] Send ATTACH, while gsm_state:%Mreg_state_enum, gprs_state:%Mreg_state_enum"

SAT_LOCATION_INFO_MM_STATUS "[RAC][SAT] location info mm_status: %Msat_mm_status_enum"
SAT_EQUAL_LAST_LOCATION_INFO "[RAC][SAT] equal last location info : %d"

RAC_RECEIVE_MM_SAME_LAI_IMSI_ATTACHING "[RAC] receive attach cause MM_SAME_LAI_IMSI_ATTACHING "
RAC_AUTO_ATTACH "[RAC] l4crac_set_auto_attach_setting(): original = %d, new = %d"

RAC_START_TIMER "[RAC] rac_start_timer_hdlr: %Mrac_timer_id_enum"
RAC_CANCEL_TIMER "[RAC] rac_cancel_timer: %Mrac_timer_id_enum"
RAC_TIMEOUT "[RAC] %Mrac_timer_id_enum expiry when current action is %Mrac_action_enum"



RAC_GPRS_TRANSFER_PREFERENCE "[RAC] gprs_transfer_preference = %Mgprs_transfer_preference_enum"



RAC_PLMN_LIST_PREFERENCE "[RAC] plmn_list_preference = %Mplmn_list_preference_enum"



RAC_HSPA_PREFERENCE "[RAC] hspa_preference = %Mhspa_preference_enum"






RAC_INTERNATIONAL_ROAMING_SUPPORT_SETTING "[RAC] disable_international_roaming_support: %Mkal_bool"
RAC_NATIONAL_ROAMING_SUPPORT_SETTING "[RAC] disable_national_roaming_support: %Mkal_bool"
RAC_DISABLE_HPPLMN_SEARCH_SETTING "[RAC] disable_hhplmn_search_support: %Mkal_bool"
RAC_ROAMING_BROKER_SETTING "[RAC] roaming_broker_support: %Mkal_bool"

RAC_DISABLE_INTEGRITY_CHECK_SETTING "[RAC] is_disable_integrity_check: %Mkal_bool"


RAC_PEER_GPRS_TRANSFER_PREFERENCE "[RAC] peer_gprs_transfer_preference = %Mkal_bool"


RAC_IRAT_PREFERENCE "[RAC] AS prefer rat: %Mrat_enum"

RAC_SET_FOR_FLAG "[RAC] Set next GPRS follow on request: %Mkal_bool"

RAC_CSG_AUTO_SEARCH_PREFERENCE "[RAC] csg_auto_search_preferenc = %Mkal_bool"

RAC_CELL_SUPPORT_R8FD "[RAC] cell network feature support R8 FD"

RAC_RECV_INACTIVE_DETACH_IND "[RAC] receive invalid DETACH_IND when active RAT is %Mrat_enum"
RAC_RECV_INACTIVE_ATTACH_CNF "[RAC] receive invalid ATTACH_CNF when active RAT is %Mrat_enum"

RAC_TRC_CS_SIM_STATUS "[RAC] current CS SIM status = %Mrac_sim_status_enum"
RAC_IRAT_SYNC_CS_PS "[RAC] Set %Mdomain_id_enum to UNKNOWN"

RAC_SIM_REPLACED_CLEAN_EPSLOCI_NSC_TIN "[RAC] SIM%d replaced! Clean EPS LOCI/NSC/TIN in the NVRAM"
RAC_CHANGE_USAGE_SETTING_BY_SIM "[RAC] Change usage setting by sim to %Mue_usage_setting_enum"


RAC_TRC_UNEXPECTED_RAT_MODE "[RAC] unexpected RAT mode: %d"
RAC_TRC_UNEXPECTED_ACTIVE_RAT_MODE "[RAC] unexpected active RAT mode: %d"
RAC_TRC_UNEXPECTED_REPORTED_RAT_MODE "[RAC] unexpected reported RAT mode: %d"

RAC_TRC_UNEXPECTED_VOICE_DOMAIN_PREFERENCE_FOR_EUTRAN "[RAC] unexpected Voice Domain Preference for E-UTRAN: %Ml4_voice_domain_preference_enum"



RAC_TRC_UXPECTED_EM_SOURCE "[RAC] unexpected EM source %Mem_source_enum !"



RAC_TRC_MM_IVT "[RAC] mobility management IVT: %Mmm_ims_voice_termination"


RAC_TRC_VOICE_DOMAIN_PREFERENCE_UTRAN "[RAC] Voice Domain Preference for UTRAN = %Ml4_voice_domain_preference_enum"
RAC_TRC_UNEXPECTED_VOICE_DOMAIN_PREFERENCE_FOR_UTRAN "[RAC] unexpected Voice Domain Preference for UTRAN: %Ml4_voice_domain_preference_enum"



RAC_TRC_UNEXPECTED_RAT_FOR_SAT "[RAC] unexpected %Mrat_enum for SAT location information !!!"
RAC_TRC_WAITING_FOR_SAT_RSP "[RAC] Waiting for SAT to respond for previous SAT LOCATION INFO"



RAC_CHECK_NOT_TO_SEND "[RAC] Display optimization. %s skip this reg_ind"


RAC_TRC_ERROR_ACTION_CONFLICT "[RAC]ori: %Mrac_action_enum, new: %Mrac_action_enum"
RAC_TRC_ERROR_SEPARATE_DOMAIN "[RAC]Should separate domain"

END_MODULE_MSG
# 10 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./modem/l4/tcm/rat_tcm/inc/rat_tcm_trc.h" 1
# 121 "./modem/l4/tcm/rat_tcm/inc/rat_tcm_trc.h"
START_MODULE_MSG MOD_RAT_TCM 20


TRC_RAT_TCM_MAIN_FUNCTION "rat_tcm_main()"


RAT_TCM_CHANGE_RAT_STATE "rat_tcm_rat_state change from %Mrat_tcm_rat_state_enum to %Mrat_tcm_rat_state_enum"
RAT_TCM_CHANGE_DURING_PROCESSING_EMBED_MESSAGE_STATE "during_processing_embed_message change from %Mkal_bool to %Mkal_bool"
RAT_TCM_CHANGE_SIB_ACT_REQ_PROGRESS_STATE "context id [%d].act_req_progress change from %Mrat_tcm_req_progress_enum to %Mrat_tcm_req_progress_enum"
RAT_TCM_CHANGE_SIB_DEACT_REQ_PROGRESS_STATE "context id [%hd].deact_req_progress change from %Mrat_tcm_req_progress_enum to %Mrat_tcm_req_progress_enum"
RAT_TCM_CHANGE_SIB_MOD_REQ_PROGRESS_STATE "context id [%hd].mod_req_progress change from %Mrat_tcm_req_progress_enum to %Mrat_tcm_req_progress_enum"
RAT_TCM_CHANGE_SIB_CONTEXT_USER_VIEW_STATE "context id [%hd].context_user_view_state change from %Mrat_tcm_context_user_view_enum to %Mrat_tcm_context_user_view_enum"
RAT_TCM_CHANGE_SIB_CONTEXT_DEACT_REQ_TRIGGERER "context id [%hd].deact_req_triggerer change from %Mrat_tcm_deact_triggerer_enum to %Mrat_tcm_deact_triggerer_enum"
RAT_TCM_CHANGE_SIB_CONTEXT_USER "context id [%hd].context_user change from %Mrat_tcm_context_user_enum to %Mrat_tcm_context_user_enum"
RAT_TCM_CHANGE_SIB_THIS_IS_23G_MT_PDP_AND_DURING_ACTIVATING "context id [%hd].this_is_23g_mt_pdp_and_during_activating change from %Mkal_bool to %Mkal_bool"
RAT_TCM_CHECK_IS_VALID_RAT_STATE_CHANGE "rat_tcm_is_valid_rat_state_change() orig:%Mrat_tcm_rat_state_enum new:%Mrat_tcm_rat_state_enum"
RAT_TCM_CHECK_GET_CURRENT_RAT_WHEN_RAT_UNKNOWN "rat_tcm_get_current_rat_when_rat_unknown():%Mrat_tcm_rat_state_enum"
RAT_TCM_CHECK_GET_CURRENT_RAT_TCM "tcm_rat_tcm_get_current_rat():%Mrat_tcm_rat_state_enum"


RAT_TCM_DEACT_TRIGGERED_FLAG_USER_DEACT_STATE "context id [%hd].deact_triggered_flag.is_deact_by_user_deact %Mkal_bool >> %Mkal_bool"
RAT_TCM_DEACT_TRIGGERED_FLAG_TFT_CONFLICT_STATE "context id [%hd].deact_triggered_flag.is_deact_by_tft_conflict %Mkal_bool >> %Mkal_bool"
RAT_TCM_DEACT_TRIGGERED_FLAG_ENSA_TRIGGER_STATE "context id [%hd].deact_triggered_flag.is_deact_by_enas_trigger %Mkal_bool >> %Mkal_bool"
RAT_TCM_DEACT_TRIGGERED_FLAG_TFT_VALIDATE_FAIL_STATE "context id [%hd].deact_triggered_flag.is_deact_by_tft_validate_fail %Mkal_bool >> %Mkal_bool"
RAT_TCM_DEACT_TRIGGERED_FLAG_ALL_STATE "context id [%hd].deact_triggered_flag => user_deact:%Mkal_bool, tft_conflict:%Mkal_bool, enas_trigger:%Mkal_bool, tft_validate_fail:%Mkal_bool"
RAT_TCM_PRINT_CURRENT_DEACT_REASON "context id [%hd] deact_reason:%Mkal_bool, tft_conflict:%Mtcm_pdp_deact_reason_enum"
RAT_TCM_PRINT_NEED_RETRY_FLAG_FOR_IRAT "cid: %d, need_retry_act: %d, need_retry_deact: %d, need_retry_mod: %d"




RAT_TCM_IGNORE_TAF_EXT_DEACT_REQ_BECAUSE_CONTEXT_IS_INACTIVE "context id [%hd] MSG_ID_TAF_EXT_PDP_DEACTIVATE_REQ is ignored because this context was already INACTIVE"
RAT_TCM_IGNORE_TCM_PDP_DEACT_IND_BECAUSE_CONTEXT_IS_INACTIVE "context id [%hd] MSG_ID_TCM_PDP_DEACTIVATE_IND is ignored because this context was already INACTIVE"
RAT_TCM_DO_NOT_SEND_DEACT_IND_BECAUSE_CONTEXT_IS_INACTIVE "context id [%hd] DEACT_IND (TAF_EXT_PDP_DEACTIVATE_REQ or TCM_PDP_DEACTIVATE_IND) is ignored because this context was already INACTIVE"
RAT_TCM_SEE_UNKNOWN_EMBEDDED_MESSAGE_ID "rat_tcm see unknown embed msg id: %Mmsg_type"
# 167 "./modem/l4/tcm/rat_tcm/inc/rat_tcm_trc.h"
RAT_TCM_HANDLER_FOR_PDP_FSM_MSGS "rat_tcm_handler_for_pdp_fsm_msgs(ilm_type: %Mrat_tcm_incomming_ilm_type_enum)"
RAT_TCM_HANDLER_FOR_RELAY_MSGS "rat_tcm_handler_for_relay_msgs(ilm_type: %Mrat_tcm_incomming_ilm_type_enum)"
RAT_TCM_HANDLER_FOR_INTER_RAT_MSGS "rat_tcm_handler_for_inter_rat_msgs(ilm_type: %Mrat_tcm_incomming_ilm_type_enum)"







RAT_TCM_HANDLER_FOR_MT_PRIMARY_PDP_INITIALIZATION_MSGS "rat_tcm_handler_for_mt_primary_pdp_initialization_msgs(ilm_type: %Mrat_tcm_incomming_ilm_type_enum)"
RAT_TCM_HANDLER_FOR_START_UP_MSGS "rat_tcm_handler_for_start_up_msgs(ilm_type: %Mrat_tcm_incomming_ilm_type_enum)"
RAT_TCM_HANDLER_FOR_RAT_CHANGE_START "rat_tcm_handler_for_rat_change_start()"
RAT_TCM_HANDLER_FOR_RAT_CHANGE_FINISH "rat_tcm_handler_for_rat_change_finish()"
RAT_TCM_HANDLER_FOR_RAT_CHANGE_COMPLETE "rat_tcm_handler_for_rat_change_complete()"
RAT_TCM_RETRY_FAILED_REQ_DURING_IRAT "rat_tcm_retry_failed_req_during_irat()"
RAT_TCM_RETRY_FAILED_DEACT_REQ_DURING_PS_SWITCH "rat_tcm_retry_failed_deact_req_during_ps_switch()"
RAT_TCM_PROCESS_QUEUED_REQ_DURING_IRAT "rat_tcm_process_queued_req_during_irat()"
RAT_TCM_HANDLER_FOR_ILM_TYPE_ACT_REQ "rat_tcm_handler_for_ilm_type_act_req()"
RAT_TCM_HANDLER_FOR_ILM_TYPE_DEACT_REQ "rat_tcm_handler_for_ilm_type_deact_req()"
RAT_TCM_HANDLER_FOR_ILM_TYPE_MOD_REQ "rat_tcm_handler_for_ilm_type_mod_req()"
RAT_TCM_HANDLER_FOR_ILM_TYPE_ACT_SUCCESS "rat_tcm_handler_for_ilm_type_act_success()"
RAT_TCM_HANDLER_FOR_ILM_TYPE_DEACT_SUCCESS "rat_tcm_handler_for_ilm_type_deact_success()"
RAT_TCM_HANDLER_FOR_ILM_TYPE_MOD_SUCCESS "rat_tcm_handler_for_ilm_type_mod_success()"
RAT_TCM_HANDLER_FOR_ILM_TYPE_ACT_FAIL "rat_tcm_handler_for_ilm_type_act_fail()"
RAT_TCM_HANDLER_FOR_ILM_TYPE_DEACT_FAIL "rat_tcm_handler_for_ilm_type_deact_fail()"
RAT_TCM_HANDLER_FOR_ILM_TYPE_MOD_FAIL "rat_tcm_handler_for_ilm_type_mod_fail()"
RAT_TCM_HANDLER_FOR_ILM_TYPE_DEACT_IND "rat_tcm_handler_for_ilm_type_deact_ind()"
RAT_TCM_HANDLER_FOR_ILM_TYPE_SECONDARY_ACT_IND "rat_tcm_handler_for_ilm_type_secondary_act_ind()"
RAT_TCM_HANDLER_FOR_ILM_TYPE_MOD_IND "rat_tcm_handler_for_ilm_type_mod_ind()"
RAT_TCM_RESET "rat_tcm_reset()"
RAT_TCM_QUEUE_AN_ILM "rat_tcm_queue_an_ilm(context_num: %d, ilm_type: %Mrat_tcm_incomming_ilm_type_enum, ilm_ptr: %x)"
RAT_TCM_PRINT_ALL_QUEUED_ILM_FOR_A_CID " rat_tcm_print_all_queued_ilm(context_num: %hd)"
RAT_TCM_PRINT_AN_QUEUED_ILM "  currently queued ilm: msg_id: %Mmsg_type, local_para_ptr: %x (ref_count:%d), peer_buff_ptr: %x (ref_count:%d)"
RAT_TCM_PRINT_POSSIBLE_MEMORY_LEAK_WARNING "possible memory leak for msg_id: %Mmsg_type, local_para_ptr: %x (ref_count:%d), peer_buff_ptr: %x (ref_count:%d)"
RAT_TCM_DROP_QUEUED_ILM "rat_tcm_drop_queued_ilm() msg_id: %Mmsg_type, local_para_ptr: %x (ref_count:%d), peer_buff_ptr: %x (ref_count:%d)"
RAT_TCM_DEREFERENCE_ILM_LOCAL "rat_tcm_deference_ilm_local_para_and_peer_buffer(): local_para_ptr: %x"
RAT_TCM_DEREFERENCE_ILM_PEER "rat_tcm_deference_ilm_local_para_and_peer_buffer(): peer_buff_ptr: %x"
RAT_TCM_JUDGE_RELAY_ILM_TYPE "rat_tcm_judge_relay_ilm_type(%Mmsg_type, %Mmodule_type) result: %Mrat_tcm_incomming_ilm_type_enum"




END_MODULE_MSG
# 11 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./middleware/media/common/include/med_trc.h" 1
# 12 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./driver/peripheral/inc/bmt_trc.h" 1
# 214 "./driver/peripheral/inc/bmt_trc.h"
START_MODULE_MSG MOD_BMT 20

    BMT_CTRL_CHARGE_TRC "BMT: BMT_CtrlCharge = %d."
    BMT_CHARGING_ALREADY_ON_TRC "BMT: Charging is already on"
    BMT_CALL_STATE_TRC "BMT_CallState: callState = %d."
    BMT_INVALID_CHARGER_TRC "Invalid Charger."
    BMT_ICHARGE_OVER_TRC "ICHARGE too high."
    BMT_ICHARGE_LOW_TRC "ICHARGE too low."
    BMT_VBAT_OVER_TRC "VBAT too high."
    BMT_VTEMP_OVER_TRC "BATTMP too high."
    BMT_VTEMP_LOW_TRC "BATTMP too low."
    BMT_CHR_HOLD_TRC "CHR_HOLD."
    BMT_VBAT_TRC "VBAT = %d."
    BMT_VBATTMP_TRC "VBATTMP = %d."
    BMT_BATTMP_TRC "BATTMP = %d."
    BMT_ICHARGE_TRC "ICHARGE = %d."
    BMT_VSENSE_TRC "VSENSE = %d."
    BMT_VSENSE_VBAT_OFFSET_TRC "VSENSE - VBAT(OFFSET) = %d."
    BMT_VCHARGER_TRC "VCHARGER = %d."
    BMT_CHRPRE_ON_STATE_TRC "STATE = BMT_CHRPRE_ON."
    BMT_CHRPRE_OFF_STATE_TRC "STATE = BMT_CHRPRE_OFF."
    BMT_FAST_CHARGE_CHANGE_TRC "Chage state to FAST_CHARGE."
    BMT_FAST_ON_STATE_TRC "STATE = BMT_CHRFAST_ON."
    BMT_FAST_OFF_STATE_TRC "STATE = BMT_CHRFAST_OFF."
    BMT_PMU_PULSECHR_TRC "STATE = BMT_PMU_PULSECHR."
    BMT_CHR_POSTFULL_CHANGE_TRC "Chage state to CHR_POSTFULL."
    BMT_CHR_BATFULL_CHANGE_TRC "Chage state to CHR_BATFULL."
    BMT_CHR_UNDER_EXTREMETMP_TRC "Now it's under extreme temperature."
    BMT_CHR_EXTREMETMP_BATFULL_CHANGE_TRC "Chage state to CHR_BATFULL because of extreme temperature."
    BMT_CHR_EXTREMETMP_CHARGE_RECHARGE_TRC "Restart charging because of the voltage drop under extreme temperature."
    BMT_CHR_TOPOFF_CHANGE_TRC "Chage state to CHR_TOPOFF."
    BMT_CHRTOPOFF_ON_STATE_TRC "STATE = BMT_CHRTOPOFF_ON."
    BMT_CHR_FAST_CHANGE_TRC "Chage state to CHR_FAST."
    BMT_CHRTOPOFF_OFF_STATE_TRC "STATE = BMT_CHRTOPOFF_OFF."
    BMT_CHRBATPOSTFULL_ON_STATE_TRC "STATE = CHR_POSTFULL_ON."
    BMT_CHRBATPOSTFULL_OFF_STATE_TRC "STATE = CHR_POSTFULL_OFF."
    BMT_CHRBATFULL_ON_STATE_TRC "STATE = BMT_CHRBATFULL_ON."
    BMT_CHRBATFULL_OFF_STATE_TRC "STATE = BMT_CHRBATFULL_OFF."
    BMT_CHRHOLD_STATE_TRC "STATE = BMT_CHRHOLD."
    BMT_HIGH_BAT_FULL_TRC "High Battery Full."
    BMT_MEASURE_STOP_TRC "BMT_MeasureStop."
    BMT_PWRON_TRC "BMT.PWRon = %d."
    BMT_TASK_MAIN_TRC "=====================BMT_task_main=====================."
    BMT_CHARGE_GUARD_TIMER_EXPIRE_TRC "Charging guard timer(%d minutes) expired."
    BMT_SAFETY_TIMER_EXPIRE_TRC "Safety timer(%d minutes) expired."
    BMT_SAFETY_TIMER_START_TRC "Safety timer(%d minutes) starts."
    BMT_SAFETY_AND_GUARD_TIMER_START_TRC "Safety timer(%d minutes) and charging guard timer (%d minutes) starts."
    BMT_SAFETY_TIMER_STOP_TRC "Safety timer(%d minutes) stops."
    BMT_STOP_TIMER_EXPIRE_TRC "Stop timer(30 min) expired."
    BMT_STOP_TIMER_START_TRC "Stop timer(30 min) starts."
    BMT_STOP_TIMER_STOP_TRC "Stop timer(30 min) stops."
    BMT_ERROR_CHECK_TRC "BMT_CHRERRORCHECK."
    BMT_ULC_SW_PLUGOUT_TRC "Ultra Low Cost S/W Plug Out Detected."
    BMT_OBTAIN_PHY_STAT_TRC "BMT_ObtainBMTPHYSTAT."
 BMT_CHARGE_ENABLE_TRC "BMT_Charge = %d."


 BMT_PMU_DO_NOT_SUPPORT_TRC "PMU does not support this cmds = %d."
 BMT_ERRORCHECK_AT_CHARGE_ON_TRC "Error Check at Charge On."
 BMT_ERRORCHECK_AT_CHARGE_OFF_TRC "Error Check at Charge Off."
 BMT_ERRORCHECK_ON_COUNT_TRC "Current Error Check On Count = %d."
 BMT_ERRORCHECK_OFF_COUNT_TRC "Current Error Check Off Count = %d."
 BMT_SW_WORKAROUND_FLAG_TRUE_TRC "SW_Workaround_Flag = TRUE."
 BMT_SW_WORKAROUND_FLAG_FALSE_TRC "SW_Workaround_Flag = FALSE."
 BMT_INSIDE_SW_WORKAROUND_RANGE_TRC "Inside SW Workaround Range."
 BMT_OUTSIDE_SW_WORKAROUND_RANGE_TRC "Outside SW Workaround Range."
 BMT_MISSING_HW_PLUG_OUT_TRC "Missing HW Plug Out."
 BMT_SW_PLUG_OUT_TRC "SW Plug Out."
 BMT_PLUG_OUT_FALSE_ALARM_TRC "Disable charge but hasn't detect plug out -> Plug out false alarm."
 BMT_ENABLE_CHARGE_AT_CHARGE_ON_TRC "Enable Charge @ ON State."
 BMT_DISABLE_CHARGE_AT_CHARGE_ON_TRC "Disable Charge @ ON State."
 BMT_POSSIBLE_PLUG_OUT_TRC "Possible plug out, need disable charge if we are at charge on state."
 BMT_LOW_CHARGE_CURRENT_AT_CHARGE_OFF_TRC "Low charge current is due to charge off state."
 BMT_SW_POLLING_CHARGER_OV_TRC "Charger OV by SW polling."


 BMT_SET_CUSTOMIZED_CURRENT_TRC "bmt_set_customized_current."
 BMT_SET_AC_CHARGE_CURRENT_TRC "Set AC Charge Current."
 BMT_SET_USB_CHARGE_CURRENT_TRC "Set USB Charge Current."
 BMT_FIND_AND_SET_THE_NEAREST_CURRENT_TRC "The nearest charge current = %d."
 BMT_CHARGE_CURRENT_AND_LEVEL_TRC "Charge current = %d, Charge Level = %d."
 BMT_TOTAL_CHARGE_CURRENT_LEVEL_TRC "Total charge current level = %d."
 BMT_MIN_CHARGE_CURRENT_TRC "Min charge current = %d."
 BMT_MAX_CHARGE_CURRENT_TRC "Max charge current = %d."
 BMT_CURRENT_CHARGE_CURRENT_TRC "Current charge current = %d."

 BMT_PHY_CHECK_OVER_CHARGER_COUNT_TRC "over_charger_count = %d."
 BMT_PHY_CHECK_OVER_CURRENT_COUNT_TRC "over_current_count = %d."
 BMT_PHY_CHECK_LOW_CURRENT_COUNT_TRC "low_current_count = %d."
 BMT_PHY_CHECK_LOW_TRMPER_COUNT_TRC "low_temper_count = %d."
 BMT_PHY_CHECK_OVER_TEMPER_COUNT_TRC "over_temper_count = %d."


 BMT_ADC_MEASURE_WARNING_TRC "ADC measure warning: Phy id: %d, pre measured volt: %d, curr measured volt: %d"
 BMT_ILLEGAL_PHY_ADC_CHANNEL_TRC "Warning, ADC phy id is illegal, return value 0 only"
 BMT_ADC_CALIBRATION_FAIL_TRC "ADC Calinration FAIL, when charge off, ICharger = %d"
 BMT_ADC_NO_CALIBRATION_TRC "Warning, ADC using Default slope = %d and offset = %d "
 BMT_ADC_CALLBACK_INFO_TRC "ADC phyid=%d, period=%d, evlcount=%d"
 BMT_ADC_GET_ADC_INFO_TRC "status=%d, channel=%d"


 BMT_CABLE_IN_TRC "Cable in"
 BMT_AC_IN_TRC "AC in"
 BMT_NON_AC_IN_TRC "Non Standard AC in"
 BMT_CABLE_OUT_TRC "Cable out"
 BMT_INV_AC_IN_TRC "INV AC in"
 BMT_AC_OUT_TRC "AC out"
 BMT_USB_IN_TRC "USB in"
 BMT_USB_CHARGING_HOST_IN_TRC "USB Charging host in"
 BMT_USB_IN_WAIT_500_TRC "USB in and wait for 500"
 BMT_USB_OUT_TRC "USB out"
 BMT_USB_100_TRC "USB 100"
 BMT_USB_500_TRC "USB 500"
 BMT_CHR_STATUS_CHARGE_IN_TRC "Charge Status = bmt_chr_in"
 BMT_CHR_STATUS_CHARGE_OUT_TRC "Charge Status = bmt_chr_out"
 BMT_USB_STATE_TRC "Usb State = %d."
 BMT_HW_PLUG_OUT_INSIDE_SW_WORKAROUND_RANGE_TRC "H/W plug out detected inside S/W workaround range -> return use S/W to check."


 BMT_CHARGING_START_TRC "Charging start"
 BMT_CHARGING_END_TRC "Charging end"
 BMT_CHARGING_CURRENT_NOT_SUPPORTED_STOP_CHARGING_TRC "Charging current NOT supported, stop charging"
 BMT_CHARGING_WDT_CLR_TRC "Charging WDT clear"

 BMT_AC_IN_AND_START_CHARGE_TRC "AC in and start charging"
 BMT_INV_AC_IN_AND_START_CHARGE_TRC "Invalid AC in and start charging"
 BMT_USB_IN_AND_START_CHARGE_TRC "USB in and start charging"
 BMT_USB_500_AND_START_CHARGE_TRC "USB 500 waited and start charging"
 BMT_AC_OUT_AND_STOP_CHARGE_TRC "AC out and stop charging"
 BMT_USB_OUT_AND_STOP_CHARGE_TRC "USB out and stop charging"
 BMT_USB_500_OUT_AND_STOP_CHARGE_TRC "USB 500 out and stop charging"
 BMT_USB_100_OUT_AND_STOP_CHARGE_TRC "USB 100 out and stop charging"
 BMT_USB_100_OUT_TRC "USB 100 out"
 BMT_AC_OUT_USB_STILL_IN_KEEP_CHARGING_TRC "AC out, USB still in, keep charging"
 BMT_AC_OUT_USB_500_STILL_IN_KEEP_CHARGING_TRC "AC out, USB 500 still in, keep charging"
 BMT_USB_OUT_AC_STILL_IN_KEEP_CHARGING_TRC "USB out, AC still in, keep charging"
 BMT_USB_IN_AC_ALREAY_IN_TRC "USB in, AC already in"
 BMT_USB_500_AC_ALREAY_IN_TRC "USB 500 waited, AC already in"



 BMT_MSG_TIMER_EXPIRE_TRC "MSG_ID_TIMER_EXPIRY"
 BMT_MSG_CHARGER_TRC "MSG_ID_BMT_CHARGER_IND"
 BMT_MSG_USB_B_OUT "MSG_ID_USB_B_PLUGOUT_IND"
 BMT_MSG_USB_B_IN "MSG_ID_USB_B_PLUGIN_IND"
 BMT_MSG_USB "MSG_ID_BMT_USB_IND"

 BMT_MSG_ADC_ADD "MSG_ID_BMT_ADC_ADD_ITEM_REQ"
 BMT_MSG_ADC_REMOVE "MSG_ID_BMT_ADC_REMOVE_ITEM_REQ"
 BMT_MSG_ADC_PARAM "MSG_ID_BMT_ADC_MODIFY_PARAMETERS_REQ"
 BMT_MSG_ADC_NVRAM_READ_CNF "MSG_ID_NVRAM_READ_CNF"
 BMT_MSG_ADC_NVRAM_SLOPE_OFFSET "MSG_ID_NVRAM_READ_CNF slope: %d offset: %d"

 BMT_MSG_ADC_EFUSE "MSG_ID_EFUSE_READ"
 BMT_MSG_ADC_EFUSE_SLOPE_OFFSET "MSG_ID_EFUSE_READ slope: %d  offset: %d"
 BMT_MSG_ADC_EFUSE_AB "MSG_ID_EFUSE_READ EFUSE_A: %d  EFUSE_B: %d"
 BMT_MSG_ADC_EFUSE_ADC_SLOPE_OFFSET "MSG_ID_EFUSE_READ_ADC slope: %d  offset: %d"
 BMT_MSG_ADC_EFUSE_ADC_CALIBRATION_SLOPE_OFFSET "MSG_ID_EFUSE_READ_ADC slope%d: %d  offset%d: %d"
 BMT_MSG_BATT_ON_DET "BMT_MSG_BATT_ON_DET Batt detection timer timeout, batt state: %d"
 BMT_MSG_BATT_OFF_BLOCK "BMT_MSG_BATT_ON_DET Batt NOT on, block all BMT messages except TIMER EXPIRATION"



 BMT_MSG_EXT_CABLE_INTR_ENABLE "Ext cable det: intr enable(%d)"
 BMT_MSG_EXT_CABLE_IN "Ext cable det: Cable in"
 BMT_MSG_EXT_CABLE_OUT "Ext cable det: Cable out"
 BMT_MSG_EXT_CABLE_DBG_1 "Ext cable det: Debug: reg1: %x"
 BMT_MSG_EXT_CABLE_DBG_2 "Ext cable det: Debug: reg1: %x, reg2: %x"
 BMT_MSG_EXT_CABLE_DBG_3 "Ext cable det: Debug: reg1: %x, reg2: %x, reg3"
 BMT_MSG_EXT_CABLE_DBG_4 "Ext cable det: Debug: reg1: %x, reg2: %x, reg3: %x, reg4: %x"
 BMT_MSG_EXT_CABLE_REPEATED_IN "Ext cable det: Repeated cable in"
 BMT_MSG_EXT_CABLE_REPEATED_OUT "Ext cable det: Repeated cable out"
 BMT_MSG_EXT_CABLE_USB_IN "Ext cable det: USB cable in"
 BMT_MSG_EXT_CABLE_USB_OUT "Ext cable det: USB cable out"
 BMT_MSG_EXT_CABLE_AC_IN "Ext cable det: AC cable in"
 BMT_MSG_EXT_CABLE_AC_OUT "Ext cable det: AC cable out"
 BMT_MSG_EXT_CABLE_LGTA_IN "Ext cable det: LGTA cable in"
 BMT_MSG_EXT_CABLE_LGTA_OUT "Ext cable det: LGTA cable out"
 BMT_MSG_EXT_CABLE_FAC_USB_IN "Ext cable det: Factory USB cable in"
 BMT_MSG_EXT_CABLE_FAC_USB_OUT "Ext cable det: Factory USB cable out"
 BMT_MSG_EXT_CABLE_FAC_UART_IN "Ext cable det: Factory UART cable in"
 BMT_MSG_EXT_CABLE_FAC_UART_OUT "Ext cable det: Factory UART cable out"
 BMT_MSG_EXT_CABLE_EARPHONE_IN "Ext cable det: Earphone cable in"
 BMT_MSG_EXT_CABLE_EARPHONE_OUT "Ext cable det: Earphone cable out"
 BMT_MSG_EXT_CABLE_KEY_PRESSED "Ext cable det: Earphone key pressed"
 BMT_MSG_EXT_CABLE_KEY_RELEASED "Ext cable det: Earphone key released"
 BMT_MSG_EXT_CABLE_VIDEO_IN "Ext cable det: Video cable in"
 BMT_MSG_EXT_CABLE_VIDEO_OUT "Ext cable det: Video cable out"
 BMT_MSG_EXT_CABLE_OTG_IN "Ext cable det: OTG cable in"
 BMT_MSG_EXT_CABLE_OTG_OUT "Ext cable det: OTG cable out"
 BMT_MSG_EXT_CABLE_UNKNOWN_IN "Ext cable det: Unknown cable in"
 BMT_MSG_EXT_CABLE_UNKNOWN_OUT "Ext cable det: Unknown cable out"
 BMT_MSG_EXT_CABLE_FAC_MODE "Ext cable det: In FAC mode"
 BMT_MSG_EXT_CABLE_FAC_MODE_AC_IN "Ext cable det: FAC mode AC in"
 BMT_MSG_EXT_CABLE_FAC_MODE_AC_OUT "Ext cable det: FAC mode AC out"
 BMT_MSG_EXT_CABLE_REPEATED_IN_HISR "Ext cable det: Repeated cable in HISR"
 BMT_MSG_EXT_CABLE_FAC_MODE_DIS_SLEEP "Ext cable det: FAC mode disable sleep mode"
 BMT_MSG_EXT_CABLE_FAC_MODE_EN_SLEEP "Ext cable det: FAC mode enable sleep mode"
 BMT_MSG_EXT_CABLE_EXT_AUDIO_WA_TURN_OFF_EARPHONE_REQ "Ext cable det: Ext Audio IC WA: Turn off Earphone path request"
 BMT_MSG_EXT_CABLE_EXT_AUDIO_WA_TURN_ON_EARPHONE_REQ "Ext cable det: Ext Audio IC WA: Turn on Earphone path request"
 BMT_MSG_EXT_CABLE_EXT_AUDIO_WA_TURN_OFF_EARPHONE "Ext cable det: Ext Audio IC WA: Turn off earphone path"
 BMT_MSG_EXT_CABLE_EXT_AUDIO_WA_TURN_ON_EARPHONE "Ext cable det: Ext Audio IC WA: Turn on earphone path"


 BMT_HIGH_VCHG_FIRST_TIME_VCHG_TRC "First Time VCharge_AVG = %d."
 BMT_HIGH_VCHG_FIRST_TIME_CHARGER_ON_TRC "First Time Charge ON."
 BMT_HIGH_VCHG_CURRENT_VCHG_TRC "Cur_VCHG = %d."
 BMT_HIGH_VCHG_AVERAGE_TRC "Average VCHG = %d."
 BMT_HIGH_VCHG_TOO_HIGH_TRC "VCHARGER too high."
 BMT_HIGH_VCHG_LOWEST_THRESHOLD_TRC "bmt_high_vchg_para->HIGH_VCHG_TABLE[0][0] = %d."
 BMT_HIGH_VCHG_UPPER_THRESHOLD_TRC "Upper Threshold: HIGH_VCHG_TABLE[i][0] = %d."
 BMT_HIGH_VCHG_LOWER_THRESHOLD_TRC "Lower Threshold: HIGH_VCHG_TABLE[i-1][0] = %d."
 BMT_HIGH_VCHG_TABLE_INDEX_TRC "Table Index = %d."
 BMT_HIGH_VCHG_SET_USB_CHARGE_CURRENT_TRC "Set USB Current  = %d for CHARGER_PRESENT_NON"
 BMT_HIGH_VCHG_USB_IN_USE_CUSTOM_CHARGE_CURRENT_TRC "USB In->Use Custom Setting in pmu_custom.c."
 BMT_HIGH_VCHG_CHARGE_CURRENT_TRC "Set High VCHG Charge Current = %d."
 BMT_HIGH_VCHG_RUNTIME_APPLY_CHARGE_CURRENT_TRC "Runtime Apply High VCHG Charge Current = %d."
 BMT_HIGH_VCHG_MAX_RESET_TO_ZERO_TRC "Cur_VCharge_MAX Reset to 0."
 BMT_HIGH_VCHG_CUR_VCHG_MAX_TRC "Cur_VCharge_MAX = %d."
 BMT_HIGH_VCHG_VCHG_DIFF_TRC "Current VCharger - Pre_VCharge_AVG = %d."
 BMT_HIGH_VCHG_TOTAL_VCHG_TRC "Accumate Total VCharger = %d."
 BMT_HIGH_VCHG_CS_VTH_TRC "Register: Charge Current = %d."


 BMT_HIGH_VCHG_PRE_CURRENT_LEVEL_TRC "Previous Current Level = %d."
 BMT_HIGH_VCHG_CUR_CURRENT_LEVEL_TRC "Current Current Level = %d."
 BMT_HIGH_VCHG_HYSTERESIS_UPPER_BOUND_TRC "Hysteresis Upper Bound = %d."
 BMT_HIGH_VCHG_HYSTERESIS_LOWER_BOUND_TRC "Hysteresis Lower Bound = %d."

 BMT_CURRENT_PMIC_STATE_TRC "BMT.pmictrl_state = %d."



 BMT_EXT_INVALID_CHARGER_TRC "Ext charger: Invalid Charger."
 BMT_EXT_ICHARGE_OVER_TRC "Ext charger: ICHARGE too high."
 BMT_EXT_ICHARGE_LOW_TRC "Ext charger: ICHARGE too low."
 BMT_EXT_VBAT_OVER_TRC "Ext charger: VBAT too high."
 BMT_EXT_VTEMP_OVER_TRC "Ext charger: BATTMP too high."
 BMT_EXT_VTEMP_LOW_TRC "Ext charger: BATTMP too low."
 BMT_EXT_CHR_HOLD_TRC "Ext charger: CHR_HOLD."
 BMT_EXT_VBAT_TRC "Ext charger: VBAT = %d."
 BMT_EXT_BATTMP_TRC "Ext charger: BATTMP = %d."
 BMT_EXT_ICHARGE_TRC "Ext charger: ICHARGE = %d."
 BMT_EXT_VCHARGER_TRC "Ext charger: VCHARGER = %d."


 BMT_SOFT_START_CURRENT_LEVEL "BMT soft start get current level: %d"

END_MODULE_MSG
# 13 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./service/sst/include/ex_trc.h" 1
# 218 "./service/sst/include/ex_trc.h"
START_MODULE_MSG MOD_EX_LOG 20




    EX_LOG_TYPE_UND "Exception type: undefined instruction"
    EX_LOG_TYPE_SWI "Exception type: SWI"
    EX_LOG_TYPE_PABT "Exception type: prefetch abort"
    EX_LOG_TYPE_DABT "Exception type: data abort"
    EX_LOG_TYPE_ASSERT "Exception type: assert"
    EX_LOG_TYPE_FATALERR_TASK "Exception type: fatal error(task)"
    EX_LOG_TYPE_FATALERR_BUFF "Exception type: fatal error(buff)"
    EX_LOG_TYPE_FATALERR_CC_C2K "Exception type: C2K invoked"
    EX_LOG_TYPE_INTERNAL_USE "Exception type: internal use"


    EX_LOG_SW_VER "software version: %c%c%c%c%c%c%c%c%c%c%c%c"
    EX_LOG_SW_PROJECT "software project: %s(%s)"
    EX_LOG_SW_BUILDTIME "build time: %s"


    EX_LOG_ENVINFO_FACTORY_BOOT "boot mode: factory mode"
    EX_LOG_ENVINFO_NORMAL_BOOT "boot mode: normal mode"
    EX_LOG_ENVINFO_USBMS_BOOT "boot mode: USBMS mode"
    EX_LOG_ENVINFO_UNKNOWN_BOOT_MODE "boot mode: unknown mode"
    EX_LOG_ENVINFO_RTC1 "rtc sec = %u, rtc min = %u, rtc hour = %u"
    EX_LOG_ENVINFO_RTC2 "rtc day = %u, rtc mon = %u, rtc wday = %u, rtc year = %u"
    EX_LOG_ENVINFO_TIMESTAMP "exception timestamp: USCNT = %u, FrameNo = %u"
    EX_LOG_ENVINFO_EXECUTIONUNIT "execution unit: %c%c%c%c%c%c%c%c"
    EX_LOG_ENVINFO_STATUS "status: 0x%08X"
    EX_LOG_ENVINFO_ELM_STATUS "ELM status: %s"
    EX_LOG_ENVINFO_STACIPOINTER "stack pointer: 0x%08X"
    EX_LOG_ENVINFO_STACKDUMP_TITLE "stack dump:"
    EX_LOG_ENVINFO_STACKDUMP "    0x%08X"
    EX_LOG_ENVINFO_EXT_Q_PENDING_CNT "number of messages in the external queue: %u"
    EX_LOG_ENVINFO_EXT_Q_PENDING_TITLE "messages in the external queue:"
    EX_LOG_ENVINFO_EXT_Q_PENDING "    %Mmsg_type"

    EX_LOG_ENVINFO_INTERRUPT_MASK "interrupt mask: 0x%08X 0x%08X"
    EX_LOG_ENVINFO_PROCESSING_LISR "processing_lisr: 0x%08X"
    EX_LOG_ENVINFO_LR "lr: 0x%08X"


    EX_LOG_DIAGINFO_DIAGNOSIS_HEALTHY "diagnosis: healthy"
    EX_LOG_DIAGINFO_DIAGNOSIS_INTSRAMCORRUPT "diagnosis: internal SRAM corrupted"
    EX_LOG_DIAGINFO_DIAGNOSIS_SYSSTACKCORRUPT "diagnosis: system stack corrupted"
    EX_LOG_DIAGINFO_DIAGNOSIS_TASKSTACKCORRUPT "diagnosis: task stack corrupted"
    EX_LOG_DIAGINFO_DIAGNOSIS_HISRSTACKCORRUPT "diagnosis: HISR stack corrupted"
    EX_LOG_DIAGINFO_DIAGNOSIS_VECTORTABLECORRUPT "diagnosis: Vector 0x0--0x140 corrupted"

    EX_LOG_DIAGINFO_DIAGNOSIS_OWNER "owner: %c%c%c%c%c%c%c%c"
    EX_LOG_DIAGINFO_DIAGNOSIS_TIMEING_CHECK "timing check: %u %u %u %u %u %u"


    EX_LOG_ASSERT_FILENAME "filename: %c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c"
    EX_LOG_ASSERT_LINE "line: %u"
    EX_LOG_ASSERT_EXT1 "ext1: 0x%08X"
    EX_LOG_ASSERT_EXT2 "ext2: 0x%08X"
    EX_LOG_ASSERT_EXT3 "ext3: 0x%08X"
    EX_LOG_ASSERT_DUMP_TITLE "dump:"
    EX_LOG_ASSERT_DUMP "    0x%08X 0x%08X 0x%08X 0x%08X"


    EX_LOG_FATALERR_MSG "[%d] fatal error (%x): %Mkal_error_str - %c%c%c%c%c%c%c%c"
    EX_LOG_FATALERR_ERROR_CODE1 "fatal error code 1: 0x%08X"
    EX_LOG_FATALERR_ERROR_CODE2 "fatal error code 2: 0x%08X"


    EX_LOG_CTRLBUF_SIZE "ctrl buff size = %u"
    EX_LOG_CTRLBUF_NUM "# of ctrl buff entries = %u"
    EX_LOG_CTRLBUF_TOP "top occupier"
    EX_LOG_CTRLBUF_PREV "previous buffer pointer"
    EX_LOG_CTRLBUF_COMMON_RTOS_HEADER1 "    RTOS header 1 = 0x%08X"
    EX_LOG_CTRLBUF_COMMON_RTOS_HEADER2 "    RTOS header 2 = 0x%08X"
    EX_LOG_CTRLBUF_COMMON_KAL_HEADER1 "    KAL header 1 = 0x%08X"
    EX_LOG_CTRLBUF_COMMON_KAL_HEADER2 "    KAL header 2 = 0x%08X"
    EX_LOG_CTRLBUF_COMMON_KAL_HEADER3 "    KAL header 3 = 0x%08X"
    EX_LOG_CTRLBUF_COMMON_BUFF_POOLID "    buffer pool id = 0x%08X"
    EX_LOG_CTRLBUF_COMMON_KAL_FOOTER1 "    kal footer 1 = 0x%08X"
    EX_LOG_CTRLBUF_COMMON_KAL_FOOTER2 "    kal footer 2 = 0x%08X"
    EX_LOG_CTRLBUF_COMMON_FILENAME "    source = %c%c%c%c%c%c%c%c%c%c%c%c"
    EX_LOG_CTRLBUF_COMMON_LR "    Caller Address = 0x%08X"
    EX_LOG_CTRLBUF_COMMON_LINE "    line = %u"
    EX_LOG_CTRLBUF_HISTORY_OWNER "    owner = %c%c%c%c%c%c%c%c"
    EX_LOG_CTRLBUF_HISTORY_FILENAME "    filename = %c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c"
    EX_LOG_CTRLBUF_HISTORY_LINE "    line = %u"
    EX_LOG_CTRLBUF_HISTORY_LR "    Caller Address = 0x%08X"
    EX_LOG_CTRLBUF_HISTORY_COUNT "    count = %u"
    EX_LOG_CTRLBUF_SECOND "second occupier"
    EX_LOG_CTRLBUF_CURR "current buffer pointer"
    EX_LOG_CTRLBUF_THIRD "third occupier"
    EX_LOG_CTRLBUF_NEXT "next buffer pointer"


    EX_LOG_ESBUF_SIZE "es buff size = %u"
    EX_LOG_ESBUF_NUM "# of es buff entries = %u"
    EX_LOG_ESBUF_HISTORY_TIMERNAME "    event scheduler name = %c%c%c%c%c%c%c%c"
    EX_LOG_ESBUF_HISTORY_MODULEID "    dest module id = %Mmodule_type"
    EX_LOG_ESBUF_HISTORY_HANDLEFUNC "    handler function address = 0x%08X"
    EX_LOG_ESBUF_HISTORY_COUNT "    count = %u"
    EX_LOG_ESBUF_TOP "top occupier"
    EX_LOG_ESBUF_SECOND "second occupier"
    EX_LOG_ESBUF_THIRD "third occupier"


    EX_LOG_TASK_INFO_NAME "TaskName = %c%c%c%c%c%c%c%c"
    EX_LOG_TASK_INFO_STACK_GP "TaskStackGuardPattern = %c%c%c%c%c%c%c%c"
    EX_LOG_TASK_INFO_STATUS "task current status = 0x%08X"
    EX_LOG_TASK_INFO_EXTQ "task external queue"
    EX_LOG_TASK_INFO_Q_SRC_MOD_ID "    src mod id = 0x%08X"
    EX_LOG_TASK_INFO_Q_QCOUNT "    # of identical msg = 0x%08X"
    EX_LOG_TASK_INFO_Q_MSG_ID "    msg id = 0x%08X"
    EX_LOG_TASK_INFO_Q_CUR_MSG_NO "    # of pending msg = 0x%08X"
    EX_LOG_TASK_INFO_Q_CONFIG_ENTRY "    # of queue entries = 0x%08X"
    EX_LOG_TASK_INFO_INTQ "task internal queue"


    EX_LOG_CPU_REG_CPSR "CPSR = 0x%08X"
    EX_LOG_CPU_REG_R0 "R0 = 0x%08X"
    EX_LOG_CPU_REG_R1 "R1 = 0x%08X"
    EX_LOG_CPU_REG_R2 "R2 = 0x%08X"
    EX_LOG_CPU_REG_R3 "R3 = 0x%08X"
    EX_LOG_CPU_REG_R4 "R4 = 0x%08X"
    EX_LOG_CPU_REG_R5 "R5 = 0x%08X"
    EX_LOG_CPU_REG_R6 "R6 = 0x%08X"
    EX_LOG_CPU_REG_R7 "R7 = 0x%08X"
    EX_LOG_CPU_REG_R8 "R8 = 0x%08X"
    EX_LOG_CPU_REG_R9 "R9 = 0x%08X"
    EX_LOG_CPU_REG_R10 "R10 = 0x%08X"
    EX_LOG_CPU_REG_R11 "R11 = 0x%08X"
    EX_LOG_CPU_REG_R12 "R12 = 0x%08X"
    EX_LOG_CPU_REG_R13 "R13(SP) = 0x%08X"
    EX_LOG_CPU_REG_R14 "R14(LR) = 0x%08X"
    EX_LOG_CPU_REG_R15 "R15(PC) = 0x%08X"


    EX_LOG_CP15_REG_IFSR "IFSR = 0x%08X"
    EX_LOG_CP15_REG_DFSR "DFSR = 0x%08X"
    EX_LOG_CP15_REG_FAR "FAR = 0x%08X"
    EX_LOG_CP15_REG_IFAR "IFAR = 0x%08X"


    EX_LOG_REG_DUMP_MED "BB register of multimedia:"
    EX_LOG_REG_DUMP_TITLE "address        content"
    EX_LOG_REG_DUMP "0x%08X     0x%08X 0x%08X 0x%08X 0x%08X"
    EX_LOG_REG_DUMP_PPP "BB register of PPP:"
    EX_LOG_REG_DUMP_MSDC "BB register of MSDC:"
    EX_LOG_REG_DUMP_SIM "BB register of SIM:"
    EX_LOG_REG_DUMP_CHE "BB register of CHE:"
    EX_LOG_REG_DUMP_PDN "BB register of PDN:"
    EX_LOG_REG_DUMP_I2C "BB register of I2C:"
    EX_LOG_REG_DUMP_LCD "BB register of LCD:"


    EX_LOG_L1_TIMING_CHECK_ASSERT1 "L1 timing check fail."
    EX_LOG_L1_TIMING_CHECK_ASSERT2 "Use the stack dump to find out who disables IRQ"


    MDDBG_HIT_BP "BreakPoint(0x%08X) is hit"
    MDDBG_HIT_WP_TBC "WritePoint(Unknown) is hit at address 0x%08X"
    MDDBG_HIT_WP "WritePoint(0x%08X) is hit at address 0x%08X"
    MDDBG_HIT_Debug "[%d]0x%08X, 0x%08X, 0x%08X"

    MDDBG_API_UT_ENABLE "mddbg_enable(%d) : %d"
    MDDBG_API_UT_DISABLE "mddbg_disable() : %d"
    MDDBG_API_UT_QUERY "mddbg_query() : %d, bp_cnt = %d, wp_cnt = %d"
    MDDBG_API_UT_ENABLE_BPS "mddbg_enable_bps() : %d"
    MDDBG_API_UT_DISABLE_BPS "mddbg_disable_bps() : %d"
    MDDBG_API_UT_SET_BP "mddbg_set_bp(0x%08X, %d) : %d"
    MDDBG_API_UT_ENABLE_WPS "mddbg_enable_wps() : %d"
    MDDBG_API_UT_DISABlE_WPS "mddbg_disable_wps() : %d"
    MDDBG_API_UT_SET_WP "mddbg_set_wp(0x%08X, %d, %d, %d) : %d"
    MDDBG_API_UT_SET_WP_RANGE "mddbg_set_wp_range(0x%08X, 0x%08X, %d, %d) : %d"
    MDDBG_API_UT_READ_MEM "Read Memory (0x%08X, %d) = %d"
    MDDBG_API_UT_SET_BP_PARAM "ctrl_addr = 0x%08X, ctrl_value = 0x%08X, found_idx = %d, found_is_set = %d, not_used_idx = %d, set_idx = %d"
    MDDBG_API_UT_SET_BP_IDX "set_idx = %d"


    EX_LOG_DUMMY ""

END_MODULE_MSG
# 14 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./service/sst/include/SST_trc.h" 1
# 105 "./service/sst/include/SST_trc.h"
START_MODULE_MSG MOD_SST_COMMON 20


# 1 "./service/sst/include/SST_common_trc.h" 1
# 139 "./service/sst/include/SST_common_trc.h"
 SST_NEWLINE ""
 SST_NO "[%d]:"
 SST_4_HEX_VALUES "0x%X << 0x%X << 0x%X << 0x%X <<"
 SST_3_HEX_VALUES "0x%X << 0x%X << 0x%X"
 SST_2_HEX_VALUES "0x%X << 0x%X"
 SST_1_HEX_VALUES "0x%X"
 SST_NAME "%c%c%c%c%c%c%c%c"

 SST_TITLE1 "System Stability Tracker (SST) V0.00 "
 SST_TITLE2 "====================================="

 SST_ENDING1 "End of SST!"
 SST_ENDING2 "============!!!!!!!!!!!!"

 SST_DESCRIPTION "<<Descriptions>>"

 SST_BOOTMODE_FACTORY_BOOT "Oh dear! system exception under META/FACTORY mode,"
 SST_BOOTMODE_NORMAL "Oh dear! system exception under NORMAL mode,"
 SST_BOOTMODE_USBMS_BOOT "Oh dear! system exception under USB BOOT mode,"

 SST_RUNNING_TASK "while processing TASK %c%c%c%c%c%c%c%c"
 SST_RUNNING_HISR "while processing HISR %c%c%c%c%c%c%c%c"
 SST_RUNNING_LISR "while processing LISR %%MLISR_IRQ_NO"
 SST_RUNNING_INITIAL "while in initial stage."
 SST_RUNNING_UNKNOWN "at the mean time, system is processing neither task, HISR nor LISR, unknown state!"

 SST_EXCEPTION_ANALYSIS "<<Detailed Information and Analysis>>"
 SST_EXCEPTION_GUIDELINE "<<Guideline>>"

 SST_MEMORY_CORRUPTION "Memory corruption!"
 SST_LOOKS_GOOD "Everything looks good!"

 SST_CPU_EXCEPTIONS "This is the CPU triggered exception, type %Mexception_type!"
 SST_UPDATE_OWNER "SST_UpdateOwner %c%c%c%c%c%c%c%c, caller=0x%X"


 SST_PHASE1_UNDEFINED "Error code 0x%X and 0x%X are not defined in SST engine, Quit the SST engine. Bye-bye!"
 SST_PHASE1_CONSTRUCTION "Error code 0x%X and 0x%X are under construction now! Quit the SST engine. Bye-bye!"
 SST_PHASE1_UNDEFINED_ERROR_CODE "Undefined fatal error code of class %c%c%c%c%c, error code 1=0x%X, error code 2=0x%X"


 SST_DUMP_STACK "Active call path from given stack pointer (0x%X) as above."
 SST_DUMP_PROBLEM_STACK "Call path of problematic task %c%c%c%c%c%c%c%c as below."
 SST_DUMP_STACK_FAILED "No reasonable call path retreivable from given stack pointer!"
 SST_IRREGULAR_STACK_POINTER "The stack pointer was out of bounded range!"
 SST_IRREGULAR_STACK_POINTER_PRINT "SST sp(0x%X) sp_start(0x%X) sp_end(0x%X)!"
 SST_SUSPEND_DISALLOWED_P1 "Not allowed to suspend because of no active task"
 SST_REFER_TO_ERROR_CODE "Error code returned by NUCLEUS PLUS %d"
 SST_DUMP_RECEIVER_STACK "Call path of receiver task as below."
 SST_DUMP_SENDER_STACK "Call path of sender task %c%c%c%c%c%c%c%c as below."


 SST_PHASE3_JTAG_WB "Please reproduce on JTAG, and set the write breakpoint at address 0x%X."
 SST_PHASE3_JTAG_WBS "Please reproduce on JTAG, and set the write breakpoint at any of the above error addresses!"
 SST_PHASE3_OWNER "Please contact people in-charge of %c%c%c%c%c%c%c%c to resolve the problem!"
 SST_PHASE3_OWNER_MSGID "Please contact people in-charge of %Mmsg_type to resolve the problem!"
 SST_PHASE3_OWNER_MOD "Please contact people in-charge of %c%c%c%c%c%c%c%c module %Mmodule_type to resolve the problem!"
 SST_PHASE3_OWNER_FILE "Please contact people in-charge of file %c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c to resolve the problem!"
 SST_PHASE3_OWNER_LR "Please contact people in-charge of caller address 0x%08X to resolve the problem!"
 SST_PHASE3_OWNER_TASK "Please contact people in-charge of task %c%c%c%c%c%c%c%c to resolve the problem!"
 SST_PHASE3_MAKE_SURE "Please contact owner of %c%c%c%c%c%c%c%c to make sure the procedure is correct!"
 SST_PHASE3_CALL_SST "Please dump memory and let system service member to give you a hand!"
 SST_PHASE3_DUMP_MEMORY "Serious error, please dump memory and let system service member to give you a hand!"
 SST_PHASE3_DUMP_MEMORY_PR "Serious error, please dump memory!"
 SST_PHASE3_REMIND_DUMP_MEMORY "Remember to dump memory!"
 SST_PHASE3_FOLLOW_RULE_CUSTOMIZATION "Please stricly follow the rule for customization!"
 SST_PHASE3_SENDER_IS_OFFENDER "Sender is offender, please saw above call path!"





 SST_PHASE2_TASK_INFO "Content of task_info_g[%03d] as below:"
 SST_PHASE2_TASK_INFO_G1 "       task_name_ptr = %c%c%c%c%c%c"
 SST_PHASE2_TASK_INFO_G2 "       task_qname_ptr = %c%c%c%c%c%c"
 SST_PHASE2_TASK_INFO_G3 "       task_priority = %d"
 SST_PHASE2_TASK_INFO_G4 "       task_stack_size = %d"
 SST_PHASE2_TASK_INFO_G5 "       task_entry_func = 0x%X"
 SST_PHASE2_TASK_INFO_G6 "       task_ext_qsize = %d"
 SST_PHASE2_TASK_INFO_G7 "       task_int_qsize = %d"
 SST_PHASE2_TASK_INFO_G8_1 "       task_internal_ram_stack = KAL_TRUE"
 SST_PHASE2_TASK_INFO_G8_2 "       task_internal_ram_stack = KAL_FALSE"
 SST_PHASE2_TASK_INFO_G9 "       task_id = 0x%X"
 SST_PHASE2_TASK_INFO_G10 "      task_ext_qid = 0x%X"
 SST_PHASE2_TASK_INFO_G11 "      task_int_qid_ptr = 0x%X"

 SST_PHASE2_TASK_INFO_STACK_ERROR "       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Error (Address=0x%X)! Should not be 0!"
 SST_PHASE2_TASK_INFO_ENTRY_ERROR "       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Error (Address=0x%X)! Should not be NULL!"



 SST_ILM_STRUCT "Content of ILM structure relative to %Mmodule_type as below"
 SST_ILM_STRUCT_SOURCE "   src_mod_id: %Mmodule_type"
 SST_ILM_STRUCT_DESTINATION "   dest_mod_id: %Mmodule_type"
 SST_ILM_STRUCT_SAP "   sap_id: %Msap_type"
 SST_ILM_STRUCT_MESSID "   msg_id: %Mmsg_type"
 SST_ILM_STRUCT_LOCAL "   local_para_ptr: 0x%X"
 SST_ILM_STRUCT_PEER "   peer_buff_ptr: 0x%X"
# 109 "./service/sst/include/SST_trc.h" 2
# 1 "./service/sst/include/SST_init_trc.h" 1
# 91 "./service/sst/include/SST_init_trc.h"
 SST_INIT ""
# 110 "./service/sst/include/SST_trc.h" 2
# 1 "./service/sst/include/SST_task_trc.h" 1
# 104 "./service/sst/include/SST_task_trc.h"
 SST_PHASE1_201_01 "In kal_create_task( ), dynamic memory allocation failed for task stack."
 SST_PHASE1_201_02 "In kal_create_task( ), dynamic memory allocation failed for kal_task_type."
 SST_PHASE1_201_04 "In kal_create_task( ), dynamic debug memory allocation failed for kal_task_stat_type."
 SST_PHASE1_201_07 "In kal_create_task( ), dynamic internal memory allocation failed for task stack."

 SST_PHASE1_203_01 "Zero stack size is provided in task creation."
 SST_PHASE1_203_02 "NULL entry function is provided in task creation."
 SST_PHASE1_203_22_ "In kal_create_task(), failure due to insufficient stack size (less than 240Bytes)."
 SST_PHASE1_203_25_ "In kal_create_task(), failure due to duplicated creation."

 SST_PHASE1_207_TASKID_P1 "In kal_deque_msg (), stack overflow is detected at TCC_Suspend_Task(),"
   SST_PHASE1_207_TASKID_P2 "where stack guard pattern 'STACKEND' had been corrupted, it becomes 0x%X 0x%X."
   SST_PHASE1_209_TASKID_P1 "stack overflow is detected by MPU, please check ex_cp15_log"

   SST_PHASE1_211_01 "In kal_create_hisr( ), dynamic memory allocation failed for HISR's stack."
 SST_PHASE1_211_02 "In kal_create_hisr( ), dynamic memory allocation failed for kal_hisr_type."
 SST_PHASE1_211_04 "In kal_create_hisr( ), dynamic debug memory allocation failed for kal_hisr_stat_type."
 SST_PHASE1_211_07 "In kal_create_hisr( ), dynamic internal memory allocation failed for HISR's stack!"

   SST_PHASE1_213_01 "In kal_create_hisr( ), zero stack size is provided!"
   SST_PHASE1_213_02 "In kal_create_hisr( ), HISR entry function is NULL!"
   SST_PHASE1_213_03 "In kal_create_hisr( ), illegal priority value is provided, only 0, 1 and 2 are valid!"
   SST_PHASE1_213_04 "In kal_create_hisr( ), priority 0 is assigned to an HISR other than L1_HISR!"
   SST_PHASE1_213_05 "In kal_create_hisr( ), number of HISR exceeding maximal boundary %d!"

   SST_PHASE1_216_9__P1 "In kal_activate_hisr(), HISR control block corrupted or incorrect"


   SST_PHASE2_203_01 "Notice that, stack size is referenced from array task_info_g, its content as below:"
   SST_PHASE2_203_02 "Notice that, task's entry function is referenced from array task_info_g, its content as below:"

   SST_PHASE2_207_TASKID_SUB1_P1 "No reasonable call path within 128words started from stack guard pattern"
   SST_PHASE2_207_TASKID_SUB1_P2 "pattern, perhaps unintentional corruption from somewhere."

   SST_PHASE2_207_TASKID_SUB2_P1 "Task %c%c%c%c%c%c%c%c sufferes from stack overflow, and its stack size is %dBytes."
 SST_PHASE2_207_TASKID_SUB2_P2 "Possible call path traced back from stack guard pattern as above (max %d words)."

 SST_PHASE2_TASK_INFO_G_CORRUPTED_P1 "Serious error, memory corruption at address 0x%X, and please refer"
   SST_PHASE2_TASK_INFO_G_CORRUPTED_P2 "to task_info_g[ ] below for more detailed."

   SST_PHASE2_216_9_1_P1 "My dear, pointer used in activating HISR is corrupted, where tc_id is no longer 0x48495352!"
 SST_PHASE2_216_9_1_P2 "Content of HISR as below;"

 SST_PHASE2_216_9_2 "HISR ID 0x48495352 is found, may fail at somewhere!"


   SST_PHASE3_203_22__P1 "Please contact people in charge of task %c%c%c%c%c "
   SST_PHASE3_203_22__P2 "to provide stack size larger than 240B."

   SST_PHASE3_203_25__P1 "Please contact people in charge of task %c%c%c%c%c for bug fixing. And, control"
   SST_PHASE3_203_25__P2 "block of relative task control block as below,"

   SST_PHASE3_207_TASKID "In case of reproducing, please set the write breakpoint at address 0x%X."



   SST_TC_HCB_CREATED "tc_created : 0x%X"
 SST_TC_HCB_ID "tc_id : 0x%X"
 SST_TC_HCB_NAME "tc_name : %c%c%c%c%c%c%c%c"
 SST_TC_HCB_PRIORITY "tc_priority : %d"
 SST_TC_HCB_SCHEDULED "tc_scheduled : %d"
 SST_TC_HCB_TIMESLICE "tc_cur_time_slice : %d"
 SST_TC_HCB_STACK_START "tc_stack_start : 0x%X"
 SST_TC_HCB_STACK_END "tc_stack_end : 0x%X"
 SST_TC_HCB_SP "tc_stack_pointer : 0x%X"
 SST_TC_HCB_STACK_SIZE "tc_stack_size : %d"
 SST_TC_HCB_STACK_MIN "tc_stack_minimum : %d"
 SST_TC_HCB_CURR_PROTECT "tc_current_protect : 0x%X"
 SST_TC_HCB_ACTIVE_NEXT "tc_active_next : 0x%X"
 SST_TC_HCB_ACTIVATION "tc_activation_count : %d"
 SST_TC_HCB_ENTRY "tc_entry : 0x%X"


 SST_TASK_READY "%c%c%c%c%c%c%c%c is in ready state, it is ready to execute or running!"
 SST_TASK_PURE_SUSPEND "%c%c%c%c%c%c%c%c is in pure suspend state!"
 SST_TASK_SLEEP_SUSPEND "%c%c%c%c%c%c%c%c is in sleep suspend state!"
 SST_TASK_QUEUE_SUSPEND "%c%c%c%c%c%c%c%c is waiting for queue message!"
 SST_TASK_SEMAPHORE_SUSPEND "%c%c%c%c%c%c%c%c is waiting for semaphore or mutex!"
 SST_TASK_ENH_MUTEX_SUSPEND "%c%c%c%c%c%c%c%c is waiting for enh_mutex!"
 SST_TASK_EVENT_SUSPEND "%c%c%c%c%c%c%c%c is waiting for event!"
 SST_TASK_PARTITION_SUSPEND "%c%c%c%c%c%c%c%c is in waiting for available partitoned pool!"
 SST_TASK_FINISH "%c%c%c%c%c%c%c%c is in finished state!"
 SST_TASK_TERMINATED "%c%c%c%c%c%c%c%c is in terminated state!"
 SST_TASK_UNKOWN "%c%c%c%c%c%c%c%c is in unknown state (%d)!"
# 111 "./service/sst/include/SST_trc.h" 2
# 1 "./service/sst/include/SST_itc_trc.h" 1
# 123 "./service/sst/include/SST_itc_trc.h"
 SST_ITC_COMMON_ILM1 "Content of ILM* being processed as below:"
 SST_ITC_COMMON_ILM2 "Content of ILM retrieved from module_ilm_g[%Mmodule_type] as below:"


 SST_PHASE1_301_01 "In kal_create_msg_q( ), dynamic memory allocation failed for kal_queue_type.."
 SST_PHASE1_301_03 "In kal_create_msg_q( ), dynamic memory allocation failed for queue buffer."
 SST_PHASE1_301_04 "In kal_create_msg_q( ), dynamic debug memory allocation failed for kal_queue_stat_type."

 SST_PHASE1_303_9999_P1 "NULL internal queue pointer is provided in msg_send_int_queue"

 SST_PHASE1_303_6666_P1 "NULL external queue pointer is provided in stack_send_2_ext_q"

 SST_PHASE1_305_01 "While calling kal_enque_msg( ), NULL external queue is provided."
 SST_PHASE1_305_02 "While calling kal_enque_msg( ), source buffer pointer is NULL."
 SST_PHASE1_305_19__P1 "In kal_enque_msg(), control block of destination queue was damaged, "
 SST_PHASE1_305_19__P2 "which is no longer 0x51554555"
 SST_PHASE1_305_24_ "In kal_enque_msg(), suspension style is expected, but there is no running task currently."

 SST_PHASE1_305_8888 "External queue full is encountered while message delivery."
 SST_PHASE1_305_7777 "Internal queue full is encountered while message delivery."

 SST_PHASE1_305_FF "In kal_enque_msg(), operation failed!"

 SST_PHASE1_307_0 "In kal_enque_msg(), queue ID should not be NULL."
 SST_PHASE1_307_1 "In kal_enque_msg(), destination buffer pointer should not be NULL."
 SST_PHASE1_307_19_ "In kal_enque_msg(), control block of destination queue was damaged,which is no longer 0x51554555."
 SST_PHASE1_307_24_ "In kal_enque_msg(), suspension style is expected, but there is no running task currently."

 SST_PHASE1_30A_1 "In msg_receive_extq() or msg_receive_extq_for_stack(), the current task index is INDX_NIL."
 SST_PHASE1_30A_2 "In msg_receive_extq() or msg_receive_extq_for_stack(), external queue ID fo current task should not be NULL."
 SST_PHASE1_30A_3 "In msg_receive_intq(), the current task index is INDX_NIL."
 SST_PHASE1_30A_4 "In msg_receive_intq(), internal queue ID fo current task should not be NULL."
 SST_PHASE1_30A_6 "In msg_get_task_extq_messages() or msg_get_task_extq_capacity(), external queue ID fo current task should not be NULL."
 SST_PHASE1_30A_7 "In kal_deque_msg() or kal_deque_msg_for_stack(), external queue ID fo current task should not be NULL."
 SST_PHASE1_30A_8 "In kal_deque_msg() or kal_deque_msg_for_stack(), destination buffer pointer should not be NULL"

 SST_PHASE1_401_1 "In kal_create_mutex ( ), system memory allocation failed for data type kal_mutex_type."
 SST_PHASE1_401_4 "In kal_create_mutex ( ), dynamic debug memory allocation failed for kal_internal_mutex_statistics."

 SST_PHASE1_403_FF "In kal_create_mutex ( ), NU_Create_Semaphore does not return NU_SUCCESS."

 SST_PHASE1_404_0 "In kal_take_mutex ( ), NULL pointer is provided for obtaining mutex"
 SST_PHASE1_404_1 "In kal_take_mutex ( ), current task (mutex owner) takes mutex twice"
 SST_PHASE1_404_21_ "In kal_take_mutex ( ),control block of semaphore may be corrupted or it is an illegal pointer."
 SST_PHASE1_404_24_ "In kal_take_mutex(), suspension style is expected, but there is no running task currently."

 SST_PHASE1_405_0 "In kal_give_mutex ( ), NULL pointer is provided for giving mutex."
 SST_PHASE1_405_MUID "A MUTEX must be obtained and given by the same task."
 SST_PHASE1_405_FF "In kal_give_mutex ( ),control block of mutex may be corrupted or it is an illegal pointer."

 SST_PHASE1_411_1 "In kal_create_sem ( ), dynamic memory allocation failed for data type kal_sem_type."
 SST_PHASE1_411_4 "In kal_create_sem ( ), dynamic debug memory allocation failed for kal_internal_sem_statistics."

 SST_PHASE1_413_FF "In kal_create_sem ( ), NU_Create_Semaphore not return NU_SUCCESS."

 SST_PHASE1_414_0 "In kal_take_sem ( ),NULL pointer is provid."
 SST_PHASE1_414_21_ "In kal_take_sem ( ),control block of semaphore may be corrupted or it is an illegal pointer."
 SST_PHASE1_414_24_ "In kal_take_sem(), suspension style is expected, but there is no running task currently."

 SST_PHASE1_415_0 "In kal_give_sem ( ), NULL pointer is provided for giving mutex."
 SST_PHASE1_415_FF "In kal_give_sem ( ),control block of semaphore may be corrupted or it is an illegal pointer."

 SST_PHASE1_421_1 "In kal_create_event_group ( ), dynamic memory allocation failed for data type kal_eventgrp_type."

 SST_PHASE1_423_FF "In kal_create_event_group ( ), NU_Create_Event_Group not return NU_SUCCESS."

 SST_PHASE1_424_21_ "In kal_set_eg_events ( ),control block of event group may be corrupted or it is an illegal pointer."
 SST_PHASE1_424_13_ "In kal_set_eg_events (), event group operation is undefined, it is neither NU_AND nor NU_OR."

 SST_PHASE1_425_13_ "In kal_retrieve_eg_events ( ), operation is not supported, they are nether NU_AND, NU_AND_CONSUME, NU_OR nor NU_OR_CONSUME."
 SST_PHASE1_425_24_ "In kal_retrieve_eg_events (), suspension style is expected, but there is no running task currently."

 SST_PHASE1_431 "In allocate_ilm(), module ILM %Mmodule_type has not yet been delivered or duplicated!"

 SST_PHASE1_432 "In msg_send_ext_queue(), %c%c%c%c%c%c%c%c is going to send an ILM without calling allocate_ilm() !"

 SST_PHASE1_441 "In stack_check_msgid_range(), message ID overflow is detected at %Mmsg_type!"

 SST_PHASE1_451_1 "In kal_create_enh_mutex ( ), system memory allocation failed for data type kal_int_enhmutex."

 SST_PHASE1_454_1 "In kal_take_enh_mutex (), NULL pointer is provided for obtaining mutex."
 SST_PHASE1_454_2 "In kal_take_enh_mutex (), control block of enhanced mutex may be corrupted."
 SST_PHASE1_454_3 "In kal_take_enh_mutex (), caller context in HISR."
 SST_PHASE1_454_4 "In kal_take_enh_mutex (), current task (enhanced mutex owner) takes enhanced mutex twice."
 SST_PHASE1_454_24_ "In kal_take_enh_mutex (), suspension style is expected, but there is no running task currently."

 SST_PHASE1_455_1 "In kal_give_enh_mutex (), NULL pointer is provided for giving mutex."
 SST_PHASE1_455_2 "In kal_give_enh_mutex (), control block of enhanced mutex may be corrupted."
 SST_PHASE1_455_MUID "In kal_give_enh_mutex (), enhanced mutex must be obtained and given by the same task."
 SST_PHASE1_455_FF "In kal_give_enh_mutex (), unexpected error happened in OS, please check the error code 2."


 SST_PHASE2_303_9999_P1 "My dear, %c%c%c%c%c%c%c%c is giving an illegal destination module ID for message delivery"
 SST_PHASE2_303_9999_P2 "destination module ID %d is out of range (max:%d)."

 SST_PHASE2_303_9999_P3 "My dear, %c%c%c%c%c%c%c%c is sending message via module ID, who has no internal queue."
 SST_PHASE2_303_9999_P4 "Please refer to information above for debugging!"

 SST_PHASE2_303_9999_P5 "My dear, %c%c%c%c%c%c%c%c is sending message via module ID, whose relative task is not existed"
 SST_PHASE2_303_9999_P6 "in current boot mode. Please refer to information above for debugging!"

 SST_PHASE2_303_QUEUE_ID "Illegal or may be corrupted pointer used to enqueue message!"

 SST_PHASE2_303_8888_P1 "While sending message to %c%c%c%c%c%c%c%c, %c%c%c%c%c%c%c%c found that,"
 SST_PHASE2_303_8888_P2 "external queue of %c%c%c%c%c%c%c%c is full!"
 SST_PHASE2_303_8888_P3 "Following is its complete content:"
 SST_PHASE2_303_8888_P4 "Task %c%c%c%c%c%c%c%c is in busy waiting, until fails to process message in external queue;"
 SST_PHASE2_303_8888_P5 "Following is its complete content:"
 SST_PHASE2_303_8888_P6 "My dear, Task %c%c%c%c%c%c%c%c may be blocked by thread listed below:"
 SST_PHASE2_303_8888_P7 "Task %c%c%c%c%c%c%c%c Task may be blocked by this enhanced mutex"
 SST_PHASE2_303_8888_P8 "The call stack of enhanced mutex owner: %c%c%c%c%c%c%c%c"
 SST_PHASE2_303_8888_P9 "Task %c%c%c%c%c%c%c%c Task may be blocked by this mutex"
 SST_PHASE2_303_8888_P10 "The call stack of mutex owner: %c%c%c%c%c%c%c%c"
 SST_PHASE2_303_8888_P11 "Task %c%c%c%c%c%c%c%c Task may be blocked by this semaphore"

 SST_PHASE2_QUEUE_LARGE_COUNT "The Qneue size is larger than %d. We only parsing %d ILM in queue. Please reduce the queue size"
 SST_PHASE2_QUEUE_MESS_COUNT "There are totally %d entries with same content,"

   SST_PHASE2_303_7777_P1 "While %c%c%c%c%c%c%c%c is running, %Mmodule_type sends msg to %Mmodule_type"

 SST_PHASE2_305_QUEUE_TIME_STAMP_0 "The exception frame No: %d"
 SST_PHASE2_305_QUEUE_TIME_STAMP_1 "The last 3 ILM taken frame No: %d, %d, %d"
 SST_PHASE2_305_QUEUE_TIME_STAMP_2 "The last queue empty frame No %d"
 SST_PHASE2_305_QUEUE_TIME_STAMP_3 "Receiver External Queue Size %d "
 SST_PHASE2_305_QUEUE_TIME_STAMP_4 "The last frame No when Queue Contains %d, %d, %d ILMs  %d, %d, %d"


 SST_PHASE2_305_QUEUE_CASE_I "fatal 0x305 case I: blocked by high priority thread, %c%c%c%c%c%c%c%c"
 SST_PHASE2_305_QUEUE_CASE_II "fatal 0x305 case II: receiver is suspended"
 SST_PHASE2_305_QUEUE_CASE_III "fatal 0x305 case III: sender sent too many ILMs in short time"
 SST_PHASE2_305_QUEUE_CASE_III_Offender "Offender %d"
 SST_PHASE2_305_QUEUE_CASE_IV "fatal 0x305 case IV: receiver traps in infinite loops"
 SST_PHASE2_305_QUEUE_CASE_V "fatal 0x305 case V: starvation of receiver "
 SST_PHASE2_305_QUEUE_CASE_UNDEF "fatal 0x305 case X: Complicated and can not be defined by Online SST"

 SST_PHASE2_405_MUID "Note that, mutex is now owned by %c%c%c%c%c%c%c%c, and could not be given by task %c%c%c%c%c%c%c%c."

 SST_PHASE2_455_MUID "Note that, enhanced mutex is now owned by %c%c%c%c%c%c%c%c, and could not be given by task %c%c%c%c%c%c%c%c."





 SST_QU_QCB "Content of queue control block as below:"
   SST_QU_QCB_CREATED "   qu_created : 0x%X"
 SST_QU_QCB_ID "   qu_id : 0x%X"
 SST_QU_QCB_NAME "   qu_name : %c%c%c%c%c%c%c%c"
 SST_QU_QCB_FIXED_SIZE "   qu_fixed_size : %d"
 SST_QU_QCB_SUSP_F "   qu_fifo_suspend : %d"
 SST_QU_QCB_SIZE "   qu_queue_size : %d"
 SST_QU_QCB_MESS_COUNT "   qu_messages : %d"
 SST_QU_QCB_MESS_SIZE "   qu_message_size : %d"
 SST_QU_QCB_AVAIL "   qu_available : %d"
 SST_QU_QCB_START_ADDR "   qu_start : 0x%X"
 SST_QU_QCB_END_ADDR "   qu_end : 0x%X"
 SST_QU_QCB_READ_PTR "   qu_read : 0x%X"
 SST_QU_QCB_WRITE_PTR "   qu_write : 0x%X"
 SST_QU_QCB_TASK_WAITING "   qu_tasks_waiting : %d"
 SST_QU_QCB_URGENT_LIST "   qu_urgent_list : 0x%X"
 SST_QU_QCB_SUSP_LIST "   qu_suspension_list : 0x%X"


 SST_SM_SCB "Content of semaphore control block as below:"
   SST_SM_SCB_CREATED "   sm_created : 0x%X"
 SST_SM_SCB_ID "   sm_id : 0x%X"
 SST_SM_SCB_NAME "   sm_name : %c%c%c%c%c%c%c%c"
 SST_SM_SCB_COUNT "   sm_semaphore_count : %d"
 SST_SM_SCB_FIFO_SUS "   sm_fifo_suspend : %d"
 SST_SM_SCB_TASKS_WAIT "   sm_tasks_waiting : %d"
 SST_SM_SCB_SUSP_LIST "   sm_suspension_list : 0x%X"


 SST_EV_GCB "Content of event group control block as below:"
   SST_EV_GCB_CREATED "   ev_created : 0x%X"
 SST_EV_GCB_ID "   ev_id : 0x%X"
 SST_EV_GCB_NAME "   ev_name : %c%c%c%c%c%c%c%c"
 SST_EV_GCB_CUR_EVENTS "   ev_current_events : %d"
 SST_EV_GCB_TASKS_WAIT "   ev_tasks_waiting : %d"
 SST_EV_GCB_SUSP_LIST "   ev_suspension_list : 0x%X"



 SST_EMTX_EMCB "Content of enhanced mutex control block as below:"
 SST_EMTX_EMCB_MAX_PRIO "   emtx_max_wprio : %d"
 SST_EMTX_EMCB_SUSPEND_COUNT "   emtx_suspension_count : %d"
 SST_EMTX_EMCB_OWNER_TASK_NAME "   owner task name : %c%c%c%c%c%c%c%c"
 SST_EMTX_EMCB_EMTX_NAME "   emtx_name : %c%c%c%c%c%c%c%c"
# 112 "./service/sst/include/SST_trc.h" 2
# 1 "./service/sst/include/SST_mem_trc.h" 1
# 101 "./service/sst/include/SST_mem_trc.h"
   SST_PHASE2_SYSTEM_MEMORY "Insufficient system memory, balanced free space is %dB!"
   SST_PHASE2_INTERNAL_SYSTEM_MEMORY "Insufficient internal system memory, balanced free space is %dB!"
   SST_PHASE2_DEBUG__MEMORY "Insufficient debug memory, balanced free space is %dB!"


   SST_PHASE3_INSUFFICEINT__MEMORY "Please enlarge the memory size by %dB!"
# 113 "./service/sst/include/SST_trc.h" 2
# 1 "./service/sst/include/SST_buff_trc.h" 1
# 129 "./service/sst/include/SST_buff_trc.h"
   SST_PHASE1_800_01 "In kal_create_buff_pool( ) failed to create a partitioned memory pool with zero Bytes buffer entry."
   SST_PHASE1_800_02 "In kal_create_buff_pool( ) failed to create a partitioned memory pool with zero entry. "
   SST_PHASE1_800_03 "In kal_create_buff_pool( ) failed to add entry in pool_info_g[]. "


   SST_PHASE1_801_01 "In kal_create_buff_pool( ), dynamic memory allocation failed for data type kal_internal_poolid of a partitioned memory"
   SST_PHASE1_801_02 "In kal_create_buff_pool( ), dynamic memory allocation failed for data buffer of a partitioned memory"
   SST_PHASE1_801_03 "In kal_create_buff_pool( ), dynamic memory allocation failed for statistical pool of a partitioned memory."
   SST_PHASE1_801_04 "In kal_create_buff_pool( ), failed to allocate  history buffer from debug memory."
   SST_PHASE1_801_08 "In kal_create_buff_pool( ), temporary memory allocation failed while initializing buffer header and footer."


   SST_PHASE1_820_01 "In get_int_ctrl_buffer(), the buffer size to be allocated should not be zero."
   SST_PHASE1_820_02 "In kal_get_buffer(), the filename of buffer allocator should not be NULL."


   SST_PHASE1_821_SIZE "In get_int_ctrl_buffer(), the desired buffer size is too large."
   SST_PHASE1_821_01 "%c%c%c%c%c%c%c%c wanna get a large buffer with size =0x%X ."


   SST_PHASE1_822_SIZE "In get_int_ctrl_buffer(), the pool ID of the desired buffer may be corrupted."


   SST_PHASE1_823_SIZE "In kal_get_buffer(), buffer entries have been fully allocated, run-out of free space."


   SST_PHASE1_830_01 "In kal_release_buffer(), the filename of buffer allocator should not be NULL."


   SST_PHASE1_840_PTR_P1 "In kal_release_buffer(), it is detected that the buffer footer is corrupted, it is no longer ((buff_number << 16) | 0xF2F2)."


   SST_PHASE1_841_PTR "In kal_release_buffer(), it is detected that buffer header is corrupted, it is no longer 0xF1F1F1F1."


   SST_PHASE1_842_PTR_P1 "In kal_get_buffer(), it is detected that buffer footer is no longer ((buff_number << 16) | 0xF2F2). It was previously"
   SST_PHASE1_842_PTR_P2 "successfully released and is now regarded as free entry.  It may be corrupted during the free period."


   SST_PHASE1_843_PTR_P1 "In kal_get_buffer(), it is detected that buffer header is no longer 0xF1F1F1F1. It was previously "
   SST_PHASE1_843_PTR_P2 "successfully released and is now regarded as free entry.  It may be corrupted during the free period."


   SST_PHASE1_844_PTR_P1 "In kal_release_buffer(), it is detected that the extended buffer footer is corrupted "
   SST_PHASE1_844_PTR_P2 "(appended at end of buffer size being requested), it is no longer 0xF2F2F2F2."


   SST_PHASE1_852_01 "%c%c%c%c%c%c%c%c gets a buffer by a NULL pointer along the call path."


   SST_PHASE1_853_01 "%c%c%c%c%c%c%c%c releases a buffer by a NULL pointer along the call path."


   SST_PHASE1_880_PTR_P1 "In kal_release_buffer(), buffer pointer to be released belongs to neither of the partitioned memory pool,"
   SST_PHASE1_880_PTR_P2 "indexed by pool ID retrieved from KAL header or by address range."


   SST_PHASE1_882_PTR_P0 "control buffer possible leakage, file name ptr=0x%X,\n"
   SST_PHASE1_882_PTR_P1 "                  owner_task = %c%c%c%c%c%c, module_id =%d, file_name =%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c"
   SST_PHASE1_882_PTR_P2 "                , user_ptr =0x%X, line =%d, size=%d, allocate_time=%d"
   SST_PHASE1_882_PTR_P3 "possible leakage: "
   SST_PHASE1_882_PTR_P4 "whitelist in-used buffer: "


   SST_PHASE1_890_01 "In kal_create_buff_pool( ), NU_Create_Partition_Pool() does not return NU_SUCCESS."


   SST_PHASE1_892_01 "In kal_create_buff_pool()/kal_get_buffer, NU_Allocate_Partition() does not return NU_SUCCESS."


   SST_PHASE1_893_PTR "a de-allocated, corrupted or illegal pointer in kal_release_buffer()"


   SST_PHASE2_BUFF_UNKNOWN "It may be a corrupted or illegal pointer!"
   SST_PHASE2_NOT_MONITOR "Control buffer is not monitored!"
   SST_PHASE2_NOT_ALIGNMENT "User is processing with  a non-alignment %dB buffer pointer, it is absolutely prohibited"
   SST_PHASE2_INVALID_POINTER "User is providing an illegal pointer 0x%08X, which is absolutely prohibited!"
   SST_PHASE2_POOL_INFO_G_CORRUPTED "Data structure pool_info_g corrupted!"
   SST_PHASE2_BUFFER_CORRUPT_REASONS "Buffer mya be corrupted by the owner of current, previous or next buffer entry!"


   SST_PHASE2_800_OVERFLOW "Partitioned memory pool runs out of free space!"


   SST_PHASE2_823_SIZE_NOT_MONITOR_P1 "My dear, buffer monitoring is not turned on at size %d,"
   SST_PHASE2_823_SIZE_NOT_MONITOR_P2 "system has no idea about history on buffer transaction!"
   SST_PHASE2_823_SIZE_MONITOR_P1 "There are totally %d entries at control buffer size %d (Bytes)."
   SST_PHASE2_823_SIZE_MONITOR_P2 "Owners distribution as below:"
   SST_PHASE2_823_SIZE_MONITOR_P3 "%c%c%c%c%c%c%c%c: Allocate %d entries at %c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c line %d"
   SST_PHASE2_823_SIZE_MONITOR_P4 "Caller Address: 0x%08X Allocate %d entries"


   SST_PHASE2_840_PTR "Please refer to buffer header listed above, KAL footer 0xF2F2F2F2 is missing!"


   SST_PHASE2_841_PTR "Please refer to buffer header listed above, KAL header 0xF1F1F1F1 is missing!"


   SST_PHASE2_844_PTR "Please refer to buffer header listed above, KAL extended footer corrupted!"


   SST_PHASE2_880_PTR "Please refer to buffer header listed above, KAL header pool ID corrupted!"


   SST_PHASE2_893_PTR_MONITOR_P1 "Task %c%c%c%c%c%c%c%c is releasing a %dB buffer pointer 0x%X from file %c%c%c%c%c%c%c%c%c%c%c%c"
   SST_PHASE2_893_PTR_MONITOR_P2 "line %d, but it had been deallocated!"
   SST_PHASE2_893_PTR_MONITOR_P3 "Please refer to history records for more detailed!"
   SST_PHASE2_893_PTR_UNMONITOR_P1 "Task %c%c%c%c%c%c%c%c is releasing a %dB buffer pointer 0x%X,"
   SST_PHASE2_893_PTR_UNMONITOR_P2 "but it had been deallocated!"


   SST_PHASE3_823_SIZE_NOT_MONITOR_P1 "Please turn on buffer monitoring and reproduce again!"
   SST_PHASE3_823_SIZE_NOT_MONITOR_P2 "Input string *035670766*001*65535# via MMI; as long as"
   SST_PHASE3_823_SIZE_NOT_MONITOR_P3 "the value won't be saved to NVRAM, re-input is required"
   SST_PHASE3_823_SIZE_NOT_MONITOR_P4 "each time power-on!"




   SST_PM_PCB "Full content of partitioned memory control block as below:"
 SST_PM_PCB_CREATED "   pm_created : 0x%08X"
 SST_PM_PCB_ID "   pm_id : 0x%08X"
 SST_PM_PCB_NAME "   pm_name : %c%c%c%c%c%c%c%c"
 SST_PM_PCB_START_ADDR "   pm_start_address : 0x%08X"
 SST_PM_PCB_POOL_SIZE "   pm_pool_size : %d"
 SST_PM_PCB_PART_SIZE "   pm_partition_size : %d"
 SST_PM_PCB_AVAIL "   pm_available : %d"
 SST_PM_PCB_ALLOCATED "   pm_allocated : %d"
 SST_PM_PCB_AVAIL_LIST "   pm_available_list : 0x%08X"
 SST_PM_PCB_FIFO_SUSPEND "   pm_fifo_suspend : 0x%08X"
 SST_PM_PCB_TASK_WAIT "   pm_tasks_waiting : 0x%08X"
 SST_PM_PCB_SUSP_LIST "   pm_suspension_list : 0x%08X"



 SST_HISTORY "Complete history nodes of current buffer pointer [%d]:"
 SST_HISTORY_STATE "   buffer_state : %Mkal_buff_state"
 SST_HISTORY_TASK "   owner_task : %c%c%c%c%c%c%c%c"
 SST_HISTORY_FILE "   file_name : %c%c%c%c%c%c%c%c%c%c%c%c"
 SST_HISTORY_LINE "   line : %d"
 SST_HISTORY_SIZE "   size : %d"
 SST_HISTORY_LR "Buffer Allocator Caller Address : 0x%08X"



 SST_CURRENT_BUFFER_HEADER "Header and footer of current buffer pointer as below :"
 SST_PREV_BUFFER_HEADER "Header and footer of previous buffer pointer as below :"
 SST_NEXT_BUFFER_HEADER "Header and footer of next buffer pointer as below :"

 SST_BUFFER_HEADER_RTOS1 "    RTOS header 1 = 0x%08X"
 SST_BUFFER_HEADER_RTOS2 "    RTOS header 2 = 0x%08X"
 SST_BUFFER_HEADER_KAL1 "    KAL header 1 (0xF1F1F1F1 originaly) = 0x%08X"
 SST_BUFFER_HEADER_KAL2 "    KAL header 2 (task ID) = 0x%08X"
 SST_BUFFER_FOOTER_KAL_EXT "    KAL extended footer (0xF2F2F2F2 if monitoring) = 0x%02X%02X%02X%02X"
 SST_BUFFER_FOOTER_KAL_EXT_UNKNOWN "    KAL extended footer (0xF2F2F2F2 if monitoring) : unknown"
 SST_BUFFER_FOOTER_KAL2 "    KAL footer (0xF2F2F2F2 originally) = 0x%08X"



 SST_POOL_INFO_G "Full content of pool_info_g as below:"
 SST_POOL_INFO_G_NO "   pool_info_g[%d]"
 SST_POOL_INFO_G_ID "      pool_id : 0x%08X"
 SST_POOL_INFO_G_START "      start_address : 0x%08X"
 SST_POOL_INFO_G_END "      end_address : 0x%08X"
# 114 "./service/sst/include/SST_trc.h" 2
# 1 "./service/sst/include/SST_timer_trc.h" 1
# 100 "./service/sst/include/SST_timer_trc.h"
 SST_PHASE1_601_01 "In kal_create_timer ( ), dynamic memory allocation failed for data type kal_timer_type."
 SST_PHASE1_601_02 "In stack_create_timer ( ), dynamic memory allocation failed for data type stack_timer_struct."
 SST_PHASE1_601_04 "In kal_create_timer ( ), dynamic debug memory allocation failed for kal_timer_stat_type."
 SST_PHASE1_602_FF "Create timer failed!"
 SST_PHASE1_604_01 "Hi dear, system fails to set a NULL timer pointer."
 SST_PHASE1_604_02 "Hi dear, system fails to recover the clock at Timer HISR."
 SST_PHASE1_604_FF "In kal_set_timer (), timer reset is not success; please refer to timer control block if corruption."
 SST_PHASE1_605_01 "Hi dear, system fails to cancel a NULL timer pointer."
 SST_PHASE1_605_FF "In kal_cancel_timer (), timer control block may be corrupted."
 SST_PHASE1_609_26_ "In kal_set_timer (), timer disable failed, please refer to timer control block if corruption."
 SST_PHASE1_60A_FF "In kal_timer_routine_wraper (), timer hisr callback function 0x%08X executes too long."
 SST_PHASE1_60B_FF "System fails for timer hisr executes too long, and longest callback function ptr is 0x%08X."



 SST_PHASE1_TIMER_FF_1 "Timer to be created is existed, could not duplicate it!"
 SST_PHASE1_TIMER_FF_2 "Timer control block is corrupted!"
 SST_PHASE2_60A_CALLBACK_EXECUTE_TIME_P11 "Callback execution time: %d, preempted time: %d"
 SST_PHASE2_60A_CALLBACK_EXECUTE_TIME_P12 "Callback execution time: %d"
 SST_PHASE2_60B_CALLBACK_EXECUTE_TIME_P1 "Callback execution time are as following (from latest to oldest):"
 SST_PHASE2_60B_CALLBACK_EXECUTE_TIME_P21 "Callback ptr: 0x%08X, execution time: %d, preempted time: %d"
 SST_PHASE2_60B_CALLBACK_EXECUTE_TIME_P22 "Callback ptr: 0x%08X, execution time: %d"


 SST_TM_APP_TCB "Content of timer control block as below:"
   SST_TM_APP_TCB_CREATED "   tm_created : 0x%X"
   SST_TM_APP_TCB_ID "   tm_id : 0x%X"
   SST_TM_APP_TCB_NAME "   tm_name : %c%c%c%c%c%c%c%c"
   SST_TM_APP_TCB_FUNC "   tm_expiration_routine : 0x%X"
   SST_TM_APP_TCB_EXP_ID "   tm_expiration_id : %d"
   SST_TM_APP_TCB_ENABLED "   tm_enabled : %d"
   SST_TM_APP_TCB_EXP_COUNT "   tm_expirations : %d"
   SST_TM_APP_TCB_INIT_TIME "   tm_initial_time : %d"
   SST_TM_APP_TCB_RESCHEDULE "   tm_reschedule_time : %d"
   SST_TM_APP_TCB_ACTUAL_LIST "   tm_actual_timer : 0x%X"
# 115 "./service/sst/include/SST_trc.h" 2
# 1 "./service/sst/include/SST_misc_trc.h" 1
# 123 "./service/sst/include/SST_misc_trc.h"
   SST_PHASE1_c01_00 "In kal_evshed_create_pool(), malloc failed for total memory required by evshed pool."
   SST_PHASE1_c01_01 "In evshed_create(), malloc failed for a stack timer required by an event scheduler."
   SST_PHASE1_c01_02 "In evshed_create(), malloc failed for an event scheduler."
   SST_PHASE1_c01_03 "In evshed_enable_protect_property(), malloc failed for an event scheduler protect."
   SST_PHASE1_c02_FF "In kal_evshed_create_pool(), system fails to create partitioned-memory pool for an event scheduler."
   SST_PHASE1_c03_00 "In kal_evshed_get_mem(), memory size being requested is larger than partitioned size."
   SST_PHASE1_c03_FF "In kal_evshed_get_mem(), system fails to get buffer from evshed_pool_id"
   SST_PHASE1_c04_FF "In kal_evshed_free_mem(), system fails to free buffer to evshed_pool_id, ptr=0x%X."
   SST_PHASE1_c05_ID "In evshed_cancel_event(), canceling event scheduler owned by others is absolutely prohibited, eventid=0x%X."
   SST_PHASE1_c06_FF "In evshed_cancel_event(), parameter eventid is a null pointer."

   SST_PHASE1_b02 "Dividend is zero now!"
   SST_PHASE1_b03 "Oh No! Software abnormal reset is encountered."
   SST_PHASE1_b04 "MCU is now servicing an unregistered IRQ."
   SST_PHASE1_b31 "IRQ is disabled over 60 QBs !"
   SST_PHASE1_b60 "HMU detected MD long time no response."

   SST_PHASE1_1501 "Customer had defined %d task IDs, violates the default value %d!"
   SST_PHASE1_1502 "Customer had defined %d module IDs, violates the default value %d!"
   SST_PHASE1_1503 "Customer had defined %d message IDs, violates the default value %d!"
   SST_PHASE1_1504 "Customer had defined %d SAP IDs, violates the default value %d!"

   SST_PHASE1_3000_00 "MD3 C2K exception, please find C2K 1st line support!"


   SST_PHASE1_b04_OutOfRange "IRQ number being serviced is out of range; it is an illegal IRQ!"
   SST_PHASE1_b04_NOT_REG "IRQ number %d is an un-registered interrupt!"
   SST_PHASE1_b04_MEMORY_CORRUPTION "Memory corruption at lisr_dispatch_tbl[%d]!"

   SST_PHASE2_b04_LISR_DISPATCH_TBL "Content of lisr_dispatch_tbl[%d]:"
   SST_PHASE2_b04_LISR_DISPATCH_TBL_V "   lisr_dispatch_tbl.vector : %d"
   SST_PHASE2_b04_LISR_DISPATCH_TBL_H "   lisr_dispatch_tbl.lisr_handler : 0x%X"
   SST_PHASE2_b04_LISR_DISPATCH_TBL_D "   lisr_dispatch_tbl.description : %c%c%c%c%c%c%c%c"
   SST_PHASE2_c03_POOL_MONITOR_P1 "There are totally %d entries with event scheduler buffer size %d (Bytes)."
   SST_PHASE2_c03_POOL_MONITOR_P2 "Owners distribution as below:"
   SST_PHASE2_c03_POOL_MONITOR_P3 "There are %d events which handler func addr is 0x%08X in event scheduler %c%c%c%c%c%c%c%c"
   SST_PHASE2_c03_POOL_MONITOR_P4 "which dest module is %Mmodule_type (task: %c%c%c%c%c%c%c%c)."
   SST_PHASE1_b31_irq_disabled_duration "IRQ is disabled %d QBs: locked by caller address 0x%08X, unlocked by caller address 0x%08X!!"
   SST_swla "SWLA entry %d: %s started at %u, exececuted for %uus"
   SST_swla_current "SWLA entry 0: %s started at %u, exececuting currently"
   SST_PHASE2_b60_swla_toprunner "During the %uus before exception, %s exececuted for %uus"
# 116 "./service/sst/include/SST_trc.h" 2
# 1 "./service/sst/include/SST_adm_trc.h" 1
# 78 "./service/sst/include/SST_adm_trc.h"
   SST_PHASE1_1700_01 "In kal_adm_create2(), the given flag set is invalid."
   SST_PHASE1_1700_02 "In kal_adm_create2(), the given sub-pool size array is invalid."


   SST_PHASE1_1710_01 "In kal_adm_delete(), the ADM pool to be deleted is invalid: the ADM pool is set as clean deletion, and there are still occupied ADM buffer."


   SST_PHASE1_1720_01 "In __kal_adm_alloc(), allocation failed because there is no enough MTK cache channel."
   SST_PHASE1_1720_04 "In __kal_adm_alloc_core(), allocation failed because the given alignment value is not 4B aligned."


   SST_PHASE1_1726_01 "In __kal_adm_alloc_c(), allocation failed because the ADM pool is not cacheability switchable."
   SST_PHASE1_1726_02 "In __kal_adm_alloc_nc(), allocation failed because the ADM pool is not cacheability switchable."


   SST_PHASE1_172C_01 "In __kal_adm_realloc(), re-allocation failed and the flag indicating fatal is set."
   SST_PHASE1_172C_04 "In __kal_adm_realloc(), re-allocation failed because the given alignment is not 4B aligned."


   SST_PHASE1_1730_01 "In __kal_adm_free(), de-allocation failed because the memory block to be freed does not belong to the ADM pool."
   SST_PHASE1_1730_02 "In __kal_adm_free(), de-allocation failed because prev or next pointers of the memory block to be freed is invalid; corruption may occurs."


   SST_PHASE1_1732_ADDR "In __kal_adm_free(), de-allocation failed because the given memory block is freed before; it's a double free problem."


   SST_PHASE1_1740_ADDR "In __kal_adm_free(), de-allocation failed because the footer stamp of the memory block to be freed is corrupted."


   SST_PHASE1_1741_ADDR "In __kal_adm_free(), de-allocation failed because the header stamp of the memory block to be freed is corrupted."


   SST_PHASE1_1750_00 "The given ADM control block pointer is NULL."


   SST_PHASE1_1751_00 "In __kal_adm_delete(), the given ADM control block pointer is NULL."


   SST_PHASE1_1752_00 "In __kal_adm_alloc_core(), the given ADM control block pointer is NULL."


   SST_PHASE1_1753_00 "In __kal_adm_free(),the given ADM control block pointer is NULL."


   SST_PHASE1_1754_00 "In __kal_adm_realloc(), the given ADM control block pointer is NULL."


   SST_PHASE1_1760_ID "The ADM ID of the given ADM control block is not valid (0x20101027)."


   SST_PHASE1_1761_ID "In __kal_adm_delete(), the ADM ID of the given ADM control block is not valid (0x20101027)."


   SST_PHASE1_1762_ID "In __kal_adm_alloc_core(), the ADM ID of the given ADM control block is not valid (0x20101027)."


   SST_PHASE1_1763_ID "In __kal_adm_free (), the ADM ID of the given ADM control block is not valid (0x20101027)."


   SST_PHASE1_1764_ID "In __kal_adm_realloc (), the ADM ID of the given ADM control block is not valid (0x20101027)."


   SST_PHASE1_1770_TASK "Fatal occurs because somebody is using the ADM pool at the same time; concurrency usage is forbidden."


   SST_PHASE1_1771_PTR "In kal_adm_get_prev_block_ptr()/kal_adm_get_next_block_ptr(), the given ADM buffer pointer is not inside the ADM pool."


   SST_PHASE1_1781_ADDR "In kal_adm_get_extheader(), it failed to get ext-header because the ADM pool is not configured as ext-header embedded."


   SST_PHASE1_1790_01 "In adm_mb_check(), first block is corrupt because its state is not ADM_INUSE or previous block is not NULL."
   SST_PHASE1_1790_02 "In adm_mb_check(), check failed because prev or next pointers of the memory block to be freed is invalid; corruption may occurs."
   SST_PHASE1_1790_03 "In adm_mb_check(), last block is corrupt because its state is not ADM_INUSE or next block is not NULL."





   SST_PHASE3_1700_01 "Invalidate flags in kal_adm_create2, please use KAL_ADM_*_FLAG"
   SST_PHASE3_1700_02_P1 "The subpool_size in kal_adm_create/kal_adm_create2 is invalid."
   SST_PHASE3_1700_02_P2 "Please check if it is NULL, or the elemnts are monotone increasing and end with {0xffffffff, 0}"


   SST_PHASE3_1710_01 "Some buffers in the ADM pool are not freed when deleting ADM."


   SST_PHASE3_1720_01_P1 "There's insufficient MTKL1Cache channle for cache memory setting."
   SST_PHASE3_1720_01_P2 "Please check no memory leakage for MTKL1Cache buffer."
   SST_PHASE3_1720_04 "Alignment is not a multiple of 4, and please check your alignment requirement."


   SST_PHASE3_1726_01_P1 "The ADM pool is non-cacheable by default and its cacheability is not dynamic switchable."
   SST_PHASE3_1726_01_P2 "You cannot allocate a cacheable buffer from it. "
   SST_PHASE3_1726_02_P1 "The ADM pool is cacheable default and its cacheability is not dynamic switchable."
   SST_PHASE3_1726_02_P2 "You cannot allocate a non-cacheable buffer from it. "


   SST_PHASE3_172C_01_P1 "It's unable realloc new memory block for data."
   SST_PHASE3_172C_01_P2 "The behavior is controlled by KAL_ADM_REALLOCFAIL_FATAL_FLAG specified on kal_adm_create2."
   SST_PHASE3_172C_01_P3 "Please ensure you have enough memory when realloc new memory block,"
   SST_PHASE3_172C_01_P4 "maybe you need to read ADM_public_api.ppt about how to handle realloc failure"
   SST_PHASE3_172C_04 "Alignment is not a multiple of 4, and please check your alignment requirement."


   SST_PHASE3_1730_01_P1 "In kal_adm_free(this_adm, ptr), the ptr is not in the range of this_adm pool."
   SST_PHASE3_1730_01_P2 "Please check your input."
   SST_PHASE3_1730_02_P1 "In kal_adm_free(this_adm, ptr), the ADM internal header previous to ptr is corrupted."
   SST_PHASE3_1730_02_P2 "Please check memory blocks around it, especially the previous one."


   SST_PHASE3_1732_ADDR "Double free, or dangling pointer? Please check the last free."


   SST_PHASE3_1740_ADDR_P1 "In kal_adm_free(this_adm, ptr), the footer guard pattern is corrupted."
   SST_PHASE3_1740_ADDR_P2 "Please check memory blocks around it, especially the previous one."


   SST_PHASE3_1741_ADDR_P1 "In kal_adm_free(this_adm, ptr), the header guard pattern is corrupted."
   SST_PHASE3_1741_ADDR_P2 "Please check memory blocks around, especially the previous block."


   SST_PHASE3_1750_00 "You past a NULL ADM ID to ADM functions. Please check your input."


   SST_PHASE3_1751_00 "You past a NULL ADM ID to kal_adm_delete. Please check your input."


   SST_PHASE3_1752_00 "You past a NULL ADM ID to kal_adm_alloc_*. Please check your input."


   SST_PHASE3_1753_00 "You past a NULL ADM ID to kal_adm_realloc. Please check your input."


   SST_PHASE3_1754_00 "You past a NULL ADM ID to ADM functions. Please check your input."


   SST_PHASE3_1760_ID_P1 "No signature is found; the first word pointed by ADM ID should be 0x20101027."
   SST_PHASE3_1760_ID_P2 "Please check whether the pointer is valid or corrupted"


   SST_PHASE3_1761_ID_P1 "No signature is found in kal_adm_delete(); the first word pointed by ADM ID should be 0x20101027, "
   SST_PHASE3_1761_ID_P2 "but now it is 0x%X. Please check whether the pointer is valid or corrupted"


   SST_PHASE3_1762_ID_P1 "No signature is found in kal_adm_alloc_*(); the first word pointed by ADM ID should be 0x20101027, "
   SST_PHASE3_1762_ID_P2 "but now it is 0x%X. Please check whether the pointer is valid or corrupted"


   SST_PHASE3_1763_ID_P1 "No signature is found in kal_adm_free(); the first word pointed by ADM ID should be 0x20101027, "
   SST_PHASE3_1763_ID_P2 "but now it is 0x%X. Please check whether the pointer is valid or corrupted"


   SST_PHASE3_1764_ID_P1 "No signature is found in kal_adm_realloc(); the first word pointed by ADM ID should be 0x20101027, "
   SST_PHASE3_1764_ID_P2 "but now it is 0x%X. Please check whether the pointer is valid or corrupted"


   SST_PHASE3_1770_TASK_P1 "Two or more tasks are operating at the same ADM pool (the other task index is %d)."
   SST_PHASE3_1770_TASK_P2 "Please check current task & task %d activities."


   SST_PHASE3_1771_PTR "The given pinter is invalid. Please check your input ADM buffer pointer."


   SST_PHASE3_1781_ADDR_P1 "This ADM pool has no extheader."
   SST_PHASE3_1781_ADDR_P2 "Please specify KAL_ADM_EXTHEADER_FLAG in kal_adm_create2 if you want an extheader."
# 117 "./service/sst/include/SST_trc.h" 2
# 1 "./service/sst/include/SST_afm_trc.h" 1
# 78 "./service/sst/include/SST_afm_trc.h"
   SST_PHASE1_1800_01 "In kal_afm_create(), AFM pool creation failed because the configuration is un-recognizable."
   SST_PHASE1_1800_02 "In kal_afm_create(), AFM pool creation failed because the given array of sub-pool size or number is illegal."
   SST_PHASE1_1800_03 "In kal_afm_create(), AFM pool creation failed because the given pool size is not large enough to create required sub-pools."




   SST_PHASE1_1820_05 "In kal_afm_internal_alloc_dbg(), allocation failed because users wrongly call _c/_nc API on non-cache-aligned creation AFM pool."


   SST_PHASE1_1826_01 "In kal_afm_internal_alloc_cacheable(),allocation failed because the AFM pool is not cacheability switchable."
   SST_PHASE1_1826_02 "In kal_afm_internal_alloc_noncacheable(),allocation failed because the AFM pool is not cacheability switchable."




   SST_PHASE1_1831_ADDR "In kal_afm_free(), de-allocation failed because the given memory block is freed before; it's a double free problem."


   SST_PHASE1_1840_ADDR "In kal_afm_free()/kal_afm_check_integrity(), fatal occurs because the footer stamp of the memory block is corrupted."


   SST_PHASE1_1841_ADDR "In kal_afm_free()/kal_afm_check_integrity(), fatal occurs because the header stamp of the memory block is corrupted."


   SST_PHASE1_1842_ADDR "In kal_afm_internal_alloc_dbg(), allocation failed because the footer stamp of the memory block is corrupted."


   SST_PHASE1_1843_ADDR "In kal_afm_internal_alloc_dbg(), allocation failed because the header stamp of the memory block is corrupted."


   SST_PHASE1_1850_00 "In AFM function,the given AFM control block pointer is NULL."


   SST_PHASE1_1851_00 "In kal_afm_delete(), the given AFM control block pointer is NULL."


   SST_PHASE1_1852_00 "In kal_afm_internal_alloc_dbg(),the given AFM control block pointer is NULL."


   SST_PHASE1_1853_00 "In kal_afm_free(),the given AFM control block pointer is NULL."


   SST_PHASE1_1860_ID "In AFM function, the AFM ID of the given AFM control block is not valid (0x20100104)."


   SST_PHASE1_1861_ID "In kal_afm_delete(), the AFM ID of the given AFM control block is not valid (0x20100104)."


   SST_PHASE1_1862_ID "In kal_afm_internal_alloc_dbg(), the AFM ID of the given AFM control block is not valid (0x20100104)."


   SST_PHASE1_1863_ID "In kal_afm_free(), the AFM ID of the given AFM control block is not valid (0x20100104)."







   SST_PHASE3_1800_01 "Unknow options are supplied. Please check every bit in options is defined as AFM_OPT_*."
   SST_PHASE3_1800_02 "The subpool_size or subpool_nr is NULL, and you must supply correct subpool settings."
   SST_PHASE3_1800_03 "There's no enough memory to create AFM pool. Please give a bigger memory to this AFM pool."




   SST_PHASE3_1820_05_P1 "Don't request a cache-line aligned memory from non-cache-line aligned AFM pool,"
   SST_PHASE3_1820_05_P2 "or you need to change to cache-line aligned pool."


   SST_PHASE3_1826_01_P1 "The AFM pool is non-cacheable by default and its cacheability is not dynamic switchable, "
   SST_PHASE3_1826_01_P2 "and thus you can't allocate a cacheable buffer from it."
   SST_PHASE3_1826_01_P3 "Please put your AFM pool in cachebility dynamic switchable region, or don't require cacheable memory from it."
   SST_PHASE3_1826_02_P1 "The AFM pool is cacheable by default and its cacheability is not dynamic switchable, "
   SST_PHASE3_1826_02_P2 "and thus you can't allocate a non-cacheable buffer from it."
   SST_PHASE3_1826_02_P3 "Please put your AFM pool in cachebility dynamic switchable region, or don't require non-cacheable memory from it."




   SST_PHASE3_1831_ADDR "double free or dangling pointer? Please check where the previous free operation locates."


   SST_PHASE3_1840_ADDR_P1 "In kal_afm_free(this_afm, ptr), the AFM guard pattern after ptr is corrupted."
   SST_PHASE3_1840_ADDR_P2 "Please check memory blocks around, especially the case ptr overwritten."


   SST_PHASE3_1841_ADDR_P1 "In kal_afm_free(this_afm, ptr), the AFM guard pattern before ptr is corrupted."
   SST_PHASE3_1841_ADDR_P2 "Please check memory blocks around, especially the case previous block corrupts ptr's header."


   SST_PHASE3_1842_ADDR_P1 "In kal_afm_alloc_*(this_afm, size), the AFM head guard pattern at 0x%X is corrupted (it should be 0x03F3F3F3)."
   SST_PHASE3_1842_ADDR_P2 "Please check users of memory blocks around 0x%X."


   SST_PHASE3_1843_ADDR_P1 "In kal_afm_alloc_*(this_afm, size), the AFM foot guard pattern at 0x%X is corrupted (it should be 0x04F4F4F4)."
   SST_PHASE3_1843_ADDR_P2 "Please check users of memory blocks around 0x%X."


   SST_PHASE3_1850_00 "You past a NULL AFM ID to AFM function, Please check your input."


   SST_PHASE3_1851_00 "You past a NULL AFM ID to kal_afm_delete(). Please check your input."


   SST_PHASE3_1852_00 "You past a NULL AFM ID to kal_afm_alloc_*(). Please check your input."


   SST_PHASE3_1853_00 "You past a NULL AFM ID to kal_afm_free(), Please check your input."


   SST_PHASE3_1860_ID_P1 "No valid signature is found in AFM funciton; the first word pointed by AFM ID should be 0x20100104, "
   SST_PHASE3_1860_ID_P2 "but now it is 0x%X, Please check the pointer is valid or corrupted."


   SST_PHASE3_1861_ID_P1 "No valid signature is found in kal_afm_delete(); the first word pointed by AFM ID should be 0x20100104, "
   SST_PHASE3_1861_ID_P2 "but now it is 0x%X, Please check the pointer is valid or corrupted."


   SST_PHASE3_1862_ID_P1 "No valid signature is found in kal_afm_alloc_*(); the first word pointed by AFM ID should be 0x20100104, "
   SST_PHASE3_1862_ID_P2 "but now it is 0x%X, Please check the pointer is valid or corrupted."


   SST_PHASE3_1863_ID_P1 "No valid signature is found in kal_afm_free(); the first word pointed by AFM ID should be 0x20100104, "
   SST_PHASE3_1863_ID_P2 "but now it is 0x%X, Please check the pointer is valid or corrupted."
# 118 "./service/sst/include/SST_trc.h" 2


# 1 "./service/sst/include/ex_handler_trc.h" 1
# 139 "./service/sst/include/ex_handler_trc.h"
    SST_EXC_WATCHDOG_RESET_ENTER "[EXC][COMMON] Enter Watchdog reset"
    SST_EXC_WATCHDOG_RESET_EXIT "[EXC][COMMON] Exit Watchdog reset"

    SST_EXC_WATCHDOG_DISABLE_ENTER "[EXC][COMMON] Enter Watchdog disable"
    SST_EXC_WATCHDOG_DISABLE_EXIT "[EXC][COMMON] Exit Watchdog disable"

    SST_EXC_OPEN_LOGGING_PORT_ENTER "[EXC][COMMON] Enter tst_assert_open_logging_port_for_exception()"
    SST_EXC_OPEN_LOGGING_PORT_EXIT "[EXC][COMMON] Exit tst_assert_open_logging_port_for_exception()"

    SST_EXC_FLUSH_LOGGING_PORT_ENTER "[EXC][COMMON] Enter dhl_flush_logging_port_for_exception()"
    SST_EXC_FLUSH_LOGGING_PORT_EXIT "[EXC][COMMON] Exit dhl_flush_logging_port_for_exception()"

    SST_EXC_UST_GET_TIME_ENTER "[EXC][COMMON] Enter ust_get_current_time()"
    SST_EXC_UST_GET_TIME_EXIT "[EXC][COMMON] Exit ust_get_current_time()"

    SST_EXC_USC_GET_TIME_ENTER "[EXC][COMMON] Enter USC_Get_TimeStamp()"
    SST_EXC_USC_GET_TIME_EXIT "[EXC][COMMON] Exit USC_Get_TimeStamp()"

    SST_EXC_NOTIFY_DSP_ENTER "[EXC][COMMON] Enter dmdsp_ex_notify_dsp()"
    SST_EXC_NOTIFY_DSP_EXIT "[EXC][COMMON] Exit dmdsp_ex_notify_dsp()"

    SST_EXC_CCCI_HANDSHAKING_ENTER "[EXC][COMMON] Enter ccci_exception_handshake()"
    SST_EXC_CCCI_HANDSHAKING_EXIT "[EXC][COMMON] Exit ccci_exception_handshake()"

    SST_EXC_TOPSM_ENABLE_FRC_ENTER "[EXC][COMMON] Enter MD_TOPSM_EnableFRC()"
    SST_EXC_TOPSM_ENABLE_FRC_EXIT "[EXC][COMMON] Exit MD_TOPSM_EnableFRC()"

    SST_EXC_RESET_HARDWARE_ENTER "[EXC][COMMON] Enter ex_reset_hw()"
    SST_EXC_RESET_HARDWARE_EXIT "[EXC][COMMON] Exit ex_reset_hw()"

    SST_EXC_INIT_EXCEPTION_RECORD_ENTER "[EXC][COMMON] Enter ex_init_log()"
    SST_EXC_INIT_EXCEPTION_RECORD_EXIT "[EXC][COMMON] Exit ex_init_log()"

    SST_EXC_VFP_REGISTER_DUMP_ENTER "[EXC][COMMON] Enter vfp_register_dump()"
    SST_EXC_VFP_REGISTER_DUMP_EXIT "[EXC][COMMON] Exit vfp_register_dump()"

    SST_EXC_CLEAR_PENDING_LOG_ENTER "[EXC][COMMON] Enter tst_dump_as_fatal_error()"
    SST_EXC_CLEAR_PENDING_LOG_EXIT "[EXC][COMMON] Exit tst_dump_as_fatal_error()"

    SST_EXC_OUTPUT_EXC_MSG_ENTER "[EXC][COMMON] Enter ex_output_exc_msg()"
    SST_EXC_OUTPUT_EXC_MSG_EXIT "[EXC][COMMON] Exit ex_output_exc_msg()"

    SST_EXC_INVOKE_SST_ENGINE_ENTER "[EXC][COMMON] Enter INT_InvokeSSTEngine()"
    SST_EXC_INVOKE_SST_ENGINE_EXIT "[EXC][COMMON] Exit INT_InvokeSSTEngine()"

    SST_EXC_EMM_WRITE_EX_RECORD_ENTER "[EXC][COMMON] Enter EMM_Write_ExceptRecord()"
    SST_EXC_EMM_WRITE_EX_RECORD_EXIT "[EXC][COMMON] Exit EMM_Write_ExceptRecord()"

    SST_EXC_SWLA_PRINT_LOWRAM_ENTER "[EXC][COMMON] Enter SLA_Print_low_RAM_SWLA()"
    SST_EXC_SWLA_PRINT_LOWRAM_EXIT "[EXC][COMMON] Exit SLA_Print_low_RAM_SWLA()"

    SST_EXC_OUTPUT_EXCEPTION_RECORD_ENTER "[EXC][COMMON] Enter ex_output_log()"
    SST_EXC_OUTPUT_EXCEPTION_RECORD_EXIT "[EXC][COMMON] Exit ex_output_log()"

    SST_EXC_PASS_CCCI_EXCINFO_ENTER "[EXC][COMMON] Enter ccci_exception_info_passed()"
    SST_EXC_PASS_CCCI_EXCINFO_EXIT "[EXC][COMMON] Exit ccci_exception_info_passed()"

    SST_EXC_FLC_DEBUG_INFO_ENTER "[EXC][COMMON] Enter flc2_debug_assert_callback()"
    SST_EXC_FLC_DEBUG_INFO_EXIT "[EXC][COMMON] Exit flc2_debug_assert_callback()"

    SST_EXC_INIT_FDD_TABLE_ENTER "[EXC][COMMON] Enter Initialize_FDD_tables()"
    SST_EXC_INIT_FDD_TABLE_EXIT "[EXC][COMMON] Exit Initialize_FDD_tables()"

    SST_EXC_SAVE_EXCEPTION_RECORD_ENTER "[EXC][COMMON] Enter ex_save_log()"
    SST_EXC_SAVE_EXCEPTION_RECORD_EXIT "[EXC][COMMON] Exit ex_save_log()"

    SST_EXC_FS_UNLOCK_ALL_ENTER "[EXC][COMMON] Enter FS_UnlockAll()"
    SST_EXC_FS_UNLOCK_ALL_EXIT "[EXC][COMMON] Exit FS_UnlockAll()"

    SST_EXC_FS_SHUTDOWN_ENTER "[EXC][COMMON] Enter FS_ShutDown()"
    SST_EXC_FS_SHUTDOWN_EXIT "[EXC][COMMON] Exit FS_ShutDown()"

    SST_EXC_NVRAM_WRITE_EXC_ENTER "[EXC][COMMON] Enter nvram_write_exception()"
    SST_EXC_NVRAM_WRITE_EXC_EXIT "[EXC][COMMON] Exit nvram_write_exception()"

    SST_EXC_TST_DUMP2FILE_ENTER "[EXC][COMMON] Enter tst_dump_to_file_for_crash()"
    SST_EXC_TST_DUMP2FILE_EXIT "[EXC][COMMON] Exit tst_dump_to_file_for_crash()"

    SST_EXC_DUMP_USB_DEBUG_DATA_ENTER "[EXC][COMMON] Enter USB_DSPIRDBG_Flush_Data()"
    SST_EXC_DUMP_USB_DEBUG_DATA_EXIT "[EXC][COMMON] Exit USB_DSPIRDBG_Flush_Data()"

    SST_EXC_RESET_EXCSP_ENTER "[EXC][COMMON] Enter INT_ExceptionResetExcSP()"
    SST_EXC_RESET_EXCSP_EXIT "[EXC][COMMON] Exit INT_ExceptionResetExcSP()"

    SST_EXC_MINILOG_DUMP_ENTER "[EXC][COMMON] Enter tst_mini_log_dump()"
    SST_EXC_MINILOG_DUMP_EXIT "[EXC][COMMON] Exit tst_mini_log_dump()"

    SST_EXC_CLEAN_RES_PROT_ENTER "[EXC][COMMON] Enter ex_clean_res_prot()"
    SST_EXC_CLEAN_RES_PROT_EXIT "[EXC][COMMON] Exit ex_clean_res_prot()"

    SST_EXC_UNGUARD_STACKSPACE_ENTER "[EXC][COMMON] Enter kal_unguard_stack_space()"
    SST_EXC_UNGUARD_STACKSPACE_EXIT "[EXC][COMMON] Exit kal_unguard_stack_space()"

    SST_EXC_INIT_DUMP_ENTER "[EXC][COMMON] Enter ex_init_dump()"
    SST_EXC_INIT_DUMP_EXIT "[EXC][COMMON] Exit ex_init_dump()"

    SST_EXC_CORESONIC_DSP_DUMP_DEBUGINFO_ENTER "[EXC][COMMON] Enter coresonic: dspfnc_dump_dsp_debug_information()"
    SST_EXC_CORESONIC_DSP_DUMP_DEBUGINFO_EXIT "[EXC][COMMON] Exit coresonic: dspfnc_dump_dsp_debug_information()"

    SST_EXC_SYSMEM_TO_BE_DUMPED "[EXC][COMMON] sys_mem_xxx.bin to be dumped [%d]: (0x%x, 0x%x)"

    SST_EXC_HANDOVER2TST "[EXC][COMMON] Handover to TST exception handler"

    SST_EXC_READY2REBOOT "[EXC][COMMON] Ready to silent reboot"

 SST_EXC_CORESONIC_DSP_WAKEUP_SUCCEEDED "[EXC][COMMON] Wake up LTE DSP succeeded"
 SST_EXC_CORESONIC_DSP_WAKEUP_FAILED "[EXC][COMMON] Wake up LTE DSP failed"

    SST_EXC_BBREG_DUMP_COUNT "[EXC][COMMON] BB register dump count: %d"
    SST_EXC_BBREG_DUMP_OWNER "[EXC][COMMON] BB register dump onwer: %c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c"
    SST_EXC_BBREG_DUMP_CALLBACK_FUNC_ENTER "[EXC][COMMON] Enter BB register dump callback, address: 0x%x"
    SST_EXC_BBREG_DUMP_CALLBACK_FUNC_EXIT "[EXC][COMMON] Exit BB register dump callback, address: 0x%x"
    SST_EXC_BBREG_DUMP_SKIP "[EXC][COMMON] Skip this dump"
    SST_EXC_BBREG_DUMP_TO_BE_DUMPED "[EXC][COMMON] bb_mem_xxx.bin to be dumped [%d]: (0x%x, 0x%x, %d)"
# 121 "./service/sst/include/SST_trc.h" 2



# 1 "interface/service/dhl/tst_ex_handler_trc.h" 1
# 70 "interface/service/dhl/tst_ex_handler_trc.h"
TST_EX_MSG_DUMP_UART_RING_BUFFER_START "[EXC][COMMON] Dump UART ring buffer data start (port:%MDCL_DEV_T)!"
TST_EX_MSG_DUMP_UART_RING_BUFFER_END "[EXC][COMMON] Dump UART ring buffer data end (port:%MDCL_DEV_T)!"
TST_EX_MSG_DISABLE_LGA_BUF_UNDER_SS_START "[EXC][COMMON] Disable Lga buffer start!"
TST_EX_MSG_DISABLE_LGA_BUF_UNDER_SS_END "[EXC][COMMON] Disable Lga buffer end!"
TST_EX_MSG_CLEAN_UART_UNDER_SS_START "[EXC][COMMON] Clean up UART channel start (port:%MDCL_DEV_T)!"
TST_EX_MSG_CLEAN_UART_UNDER_SS_END "[EXC][COMMON] Clean up UART channel end (port:%MDCL_DEV_T)!"
TST_EX_MSG_DUMP_PS_BUF_START "[EXC][COMMON] Dump PS Buf start!"
TST_EX_MSG_DUMP_PS_BUF_END "[EXC][COMMON] Dump PS Buf end!"
TST_EX_MSG_DISABLE_LGA_BUF_START "[EXC][ELT] Disable Lga buffer start!"
TST_EX_MSG_DISABLE_LGA_BUF_END "[EXC][ELT] Disable Lga buffer end!"
TST_EX_MSG_REOPEN_PORT_START "[EXC][ELT] Reopen logging ports start!"
TST_EX_MSG_REOPEN_PORT_END "[EXC][ELT] Reopen logging ports end!"
TST_EX_MSG_OPEN_PORT_START "[EXC][ELT] open logging ports start! (Port:%MDCL_DEV_T)"
TST_EX_MSG_OPEN_PORT_END "[EXC][ELT] open logging ports end! (Port:%MDCL_DEV_T)"
TST_EX_MSG_CLEAN_UART_START "[EXC][ELT] Clean up UART channel start! (Port:%MDCL_DEV_T)"
TST_EX_MSG_CLEAN_UART_END "[EXC][ELT] Clean up UART channel end! (Port:%MDCL_DEV_T)"
TST_EX_MSG_CLOSE_PORT_START "[EXC][ELT] close logging ports start! (Port:%MDCL_DEV_T)"
TST_EX_MSG_CLOSE_PORT_END "[EXC][ELT] close logging ports end! (Port:%MDCL_DEV_T)"
TST_EX_MSG_CHANGE_L1_PORT "[EXC][ELT] Change L1 logging port from %MDCL_DEV_T to %MDCL_DEV_T !"
TST_EX_MSG_NESTED_EX_DETECTED "[EXC][ELT] Detect nested exception! (times:%d)"
TST_EX_MSG_DUMP_SST_LOG_START "[EXC][ELT] Redump exception log start!"
TST_EX_MSG_DUMP_SST_LOG_END "[EXC][ELT] Redump exception log end!"
TST_EX_MSG_DRV_EX_HANDLER_START "[EXC][ELT] Drv ex handler start!"
TST_EX_MSG_DRV_EX_HANDLER_END "[EXC][ELT] Drv ex handler end!"
TST_EX_MSG_DUMP_LGA_BUF_START "[EXC][ELT] Dump Lga buffer start!"
TST_EX_MSG_DUMP_LGA_BUF_END "[EXC][ELT] Dump Lga buffer end!"
TST_EX_MSG_REDUMP_PS_BUF_START "[EXC][ELT] Redump PS buffer start!"
TST_EX_MSG_REDUMP_PS_BUF_END "[EXC][ELT] Redump PS buffer end!"
TST_EX_MSG_REDUMP_L1_BUF_START "[EXC][ELT] Redump L1 buffer start!"
TST_EX_MSG_REDUMP_L1_BUF_END "[EXC][ELT] Redump L1 buffer end!"
TST_EX_MSG_GET_ELT_CMD "[EXC][ELT] Get one PC exception command:%Mdhl_command_type !"
TST_EX_MSG_GET_ELT_CMD_CHECKSUM_ERROR "[EXC][ELT] Get one PC exception command:%Mdhl_command_type, but the checksum is incorrect! Expected checksum: %x, Got checksum: %x"
# 125 "./service/sst/include/SST_trc.h" 2


END_MODULE_MSG
# 15 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./modem/l4/include/atci_trc.h" 1
# 365 "./modem/l4/include/atci_trc.h"
START_MODULE_MSG MOD_ATCI 20




   FUNC_GATI_DATA_REQ_HDLR "gati_data_req_hdlr()"
   FUNC_GATI_DATA_RSP_HDLR "gati_data_rsp_hdlr"
   FUNC_GATI_CTRL_REQ_HDLR "gati_ctrl_req_hdlr()"
   FUNC_GATI_SWITCH_MODE_REQ_HDLR "gati_switch_mode_req_hdlr()"
   FUNC_GATI_SUSPEND_READ_FROM_UART "gati_suspend_read_from_uart()"
   FUNC_GATI_SEND_DATA_CNF "gati_send_data_cnf()"
   FUNC_GATI_REGISTER_MODULE "gati_register_module()"
   FUNC_GATI_SEND_DATA_IND "gati_send_data_ind()"
   FUNC_GATI_SEND_RTW_IND "gati_send_rtw_ind()"
   FUNC_GATI_SEND_ILM "gati_send_ilm()"
   FUNC_GATI_FLUSH_BUFFER "gati_flush_buffer()"
   FUNC_GATI_INSERT_DATA_TO_BUFFER "gati_insert_data_to_buffer()"
   FUNC_GATI_SEARCH_MOD_INDEX "gati_search_mod_index()"
   FUNC_GATI_SEARCH_COMMAND "gati_search_command()"
   FUNC_GATI_COMMAND_HDLR "gati_command_hdlr()"
   FUNC_GATI_SEND_CTRL_CNF "gati_send_ctrl_cnf()"
   FUNC_GATI_SEND_SWITCH_MODE_CNF "gati_send_switch_mode_cnf()"
   FUNC_RMMI_NVRAM_READ_CNF_HDLR_ENTRY "rmmi_nvram_read_cnf_hdlr()"
   FUNC_GAS_REGISTER_MODULE "gas_register_module()"
   FUNC_GAS_SEND_DATA_IND "gas_send_data_ind()"
   FUNC_GAS_SEND_ILM "gas_send_ilm()"
   FUNC_GAS_SEARCH_MOD_INDEX "gas_search_mod_index()"
   FUNC_GAS_SEARCH_COMMAND "gas_search_command()"
   FUNC_GAS_COMMAND_HDLR "gas_command_hdlr()"
   FUNC_GAS_DATA_REQ_HDLR "gas_data_req_hdlr()"
   FUNC_GAS_DATA_RSP_HDLR "gas_data_rsp_hdlr"


   FUNC_RMMI_CMD_PROCESSOR_ENTRY "rmmi_cmd_processor()"
   FUNC_RMMI_PROCESS_MULTI_CMD_ENTRY "rmmi_process_multi_cmd()"
   FUNC_RMMI_FIND_CMD_CLASS_ENTRY "rmmi_find_cmd_class()"
   FUNC_RMMI_BASIC_CMD_PROCESSOR_ENTRY "rmmi_basic_cmd_processor()"
   FUNC_RMMI_EXTENDED_CMD_PROCESSOR_ENTRY "rmmi_extended_cmd_processor()"
   FUNC_RMMI_EXTENDED_COMMAND_ANALYZER_ENTRY "rmmi_extended_command_analyzer()"
   FUNC_RMMI_BASIC_COMMAND_ANALYZER_ENTRY "rmmi_basic_command_analyzer()"
   FUNC_RMMI_PROCESS_ONE_CMD_ENTRY "rmmi_process_one_cmd()"
   FUNC_RMMI_AGPS_COMMAND_ANALYZER_ENTRY "rmmi_agps_command_analyzer()"


   FUNC_L4C_CC_CALL_METER_RIND_ENTRY "l4c_cc_call_meter_rind()"
   FUNC_L4C_CC_CALL_WAIT_RIND_ENTRY "l4c_cc_call_wait_rind()"
   FUNC_L4C_CC_CALL_RING_RIND_ENTRY "l4c_cc_call_ring_rind()"
   FUNC_L4C_CC_CALL_RELEASE_RIND_ENTRY "l4c_cc_call_release_rind()"
   FUNC_L4C_CC_CALL_MODIFY_RIND_ENTRY "l4c_cc_call_modify_rind()"
   FUNC_L4C_CC_CALL_CONNECT_RIND_ENTRY "l4c_cc_call_connect_rind()"
   FUNC_L4C_SS_USSR_RIND_ENTRY "l4c_ss_ussr_rind()"
   FUNC_L4C_SS_USSN_RIND_ENTRY "l4c_ss_ussn_rind()"
   FUNC_L4C_PS_CONNECT_RIND_ENTRY "l4c_ps_connect_rind()"
   FUNC_L4C_PS_ACTIVATE_RIND_ENTRY "l4c_ps_activate_rind()"
   FUNC_L4C_NW_REG_STATE_RIND_ENTRY "l4c_nw_reg_state_rind()"
   FUNC_L4C_NW_TIME_ZONE_RIND_ENTRY "l4c_nw_time_zone_rind()"
   FUNC_L4C_SMS_NEW_MSG_INDEX_RIND_ENTRY "l4c_sms_new_msg_index_rind()"
   FUNC_L4C_SMS_NEW_MSG_TEXT_RIND_ENTRY "l4c_sms_new_msg_text_rind()"
   FUNC_L4C_SMS_NEW_MSG_PDU_RIND_ENTRY "l4c_sms_new_msg_pdu_rind()"
   FUNC_L4C_GENERAL_RRSP_ENTRY "l4c_general_rrsp()"
   FUNC_L4C_CC_EXE_HANGUP_ACTIVE_CALL_RRSP_ENTRY "l4c_cc_exe_hangup_active_call_rrsp()"
   FUNC_L4C_CC_GET_CALL_LIST_RRSP_ENTRY "l4c_cc_get_call_list_rrsp()"
   FUNC_L4C_CC_EXE_CALL_ACCEPT_RRSP_ENTRY "l4c_cc_exe_call_accept_rrsp()"
   FUNC_L4C_CC_EXE_CALL_SETUP_RRSP_ENTRY "l4c_cc_exe_call_setup_rrsp()"
   FUNC_L4C_CC_EXE_CALL_MODIFY_RRSP_ENTRY "l4c_cc_exe_call_modify_rrsp()"
   FUNC_L4C_DF_EXE_BACK_DATA_STATE_RRSP_ENTRY "l4c_df_exe_back_data_state_rrsp()"
   FUNC_L4C_SS_EXE_EMLPP_RRSP_ENTRY "l4c_ss_exe_emlpp_rrsp()"
   FUNC_L4C_SS_EXE_CALL_FORWARD_RRSP_ENTRY "l4c_ss_exe_call_forward_rrsp()"
   FUNC_L4C_SS_EXE_CALL_WAIT_RRSP_ENTRY "l4c_ss_exe_call_wait_rrsp()"
   FUNC_L4C_SS_EXE_CDIP_INTERROGATE_RRSP_ENTRY "l4c_ss_exe_cdip_interrogate_rrsp()"
   FUNC_L4C_SS_EXE_CLIP_INTERROGATE_RRSP_ENTRY "l4c_ss_exe_clip_interrogate_rrsp()"
   FUNC_L4C_SS_EXE_CLIR_INTERROGATE_RRSP_ENTRY "l4c_ss_exe_clir_interrogate_rrsp()"
   FUNC_L4C_SS_EXE_CNAP_INTERROGATE_RRSP_ENTRY "l4c_ss_exe_cnap_interrogate_rrsp()"
   FUNC_L4C_SS_EXE_COLP_INTERROGATE_RRSP_ENTRY "l4c_ss_exe_colp_interrogate_rrsp()"
   FUNC_L4C_SS_EXE_CALL_BARRING_RRSP_ENTRY "l4c_ss_exe_call_barring_rrsp()"
   FUNC_L4C_NW_GET_PLMN_LIST_RRSP_ENTRY "l4c_nw_get_plmn_list_rrsp()"
   FUNC_L4C_PHB_GET_ENTRY_RRSP_ENTRY "l4c_phb_get_entry_rrsp()"
   FUNC_L4C_SMU_EXE_RESTRICTED_ACCESS_RRSP_ENTRY "l4c_smu_exe_restricted_access_rrsp()"
   FUNC_L4C_SMU_WRITE_SIM_RRSP_ENTRY "l4c_smu_write_sim_rrsp()"
   FUNC_L4C_SMU_EXE_DIAL_MODE_RRSP_ENTRY "l4c_smu_exe_dial_mode_rrsp()"
   FUNC_L4C_SMU_GET_SHARED_KEY_RRSP_ENTRY "l4c_smu_get_shared_key_rrsp()"
   FUNC_L4C_SMU_GET_SLB_VERSION_RRSP_ENTRY "l4c_smu_get_slb_version_rrsp()"
   FUNC_L4C_SMU_GET_SIM_LOCK_STATUS_RRSP_ENTRY "l4c_smu_get_sim_lock_status_rrsp()"
   FUNC_L4C_SMU_SML_STATUS_RRSP_ENTRY "l4c_smu_sml_status_rrsp()"
   FUNC_L4C_SMS_EXE_SEND_RRSP_ENTRY "l4c_sms_exe_send_rrsp()"
   FUNC_L4C_SMS_EXE_READ_MSG_LIST_RRSP_ENTRY "l4c_sms_exe_read_msg_list_rrsp()"
   FUNC_L4C_SMS_EXE_READ_MSG_RRSP_ENTRY "l4c_sms_exe_read_msg_rrsp()"
   FUNC_L4C_SMS_EXE_READ_MSG_LIST_PDU_RRSP_ENTRY "l4c_sms_exe_read_msg_list_pdu_rrsp()"
   FUNC_L4C_SMS_EXE_EMGL_LIST_RRSP_ENTRY "l4c_sms_exe_emgl_list_rrsp()"
   FUNC_L4C_SMS_EXE_READ_MSG_PDU_RRSP_ENTRY "l4c_sms_exe_read_msg_pdu_rrsp()"
   FUNC_L4C_SMS_EXE_WRITE_MSG_RRSP_ENTRY "l4c_sms_exe_write_msg_rrsp()"
   FUNC_L4C_SMS_SET_PREFERRED_MEM_RRSP_ENTRY "l4c_sms_set_preferred_mem_rrsp()"
   FUNC_L4C_EQ_WRITE_NVRAM_RRSP_ENTRY "l4c_eq_write_nvram_rrsp()"
   FUNC_L4C_EQ_READ_NVRM_RRSP_ENTRY "l4c_eq_read_nvram_rrsp()"
   FUNC_L4C_SMS_EXE_IMS_SEND_RRSP_ENTRY "l4c_sms_exe_ims_send_rrsp()"

   FUNC_RMMI_CSIM_ERROR_RSP_FMTTR_ENTRY "rmmi_csim_error_rsp_fmttr()"
   FUNC_RMMI_CNVRM_ERROR_RSP_FMTTR_ENTRY "rmmi_cnvrm_error_rsp_fmttr()"
   FUNC_RMMI_RESULT_CODE_FMTTR_ENTRY "rmmi_result_code_fmttr()"
   FUNC_RMMI_CLCC_READ_RSP_FMTTR_ENTRY "rmmi_clcc_read_rsp_fmttr()"
   FUNC_RMMI_CAEMLPP_READ_RSP_FMTTR_ENTRY "rmmi_caemlpp_read_rsp_fmttr()"
   FUNC_RMMI_CCFC_INTERROGATE_RSP_FMTTR_ENTRY "rmmi_ccfc_interrogate_rsp_fmttr()"
   FUNC_RMMI_CCWA_INTERROGATE_RSP_FMTTR_ENTRY "rmmi_ccwa_interrogate_rsp_fmttr()"
   FUNC_RMMI_CDIP_READ_RSP_FMTTR_ENTRY "rmmi_cdip_read_rsp_fmttr()"
   FUNC_RMMI_CLIP_READ_RSP_FMTTR_ENTRY "rmmi_clip_read_rsp_fmttr()"
   FUNC_RMMI_CLIR_READ_RSP_FMTTR_ENTRY "rmmi_clir_read_rsp_fmttr()"
   FUNC_RMMI_CNAP_READ_RSP_FMTTR_ENTRY "rmmi_cnap_read_rsp_fmttr()"
   FUNC_RMMI_COLP_READ_RSP_FMTTR_ENTRY "rmmi_colp_read_rsp_fmttr()"
   FUNC_RMMI_CLCK_INTERROGATE_RSP_FMTTR_ENTRY "rmmi_clck_interrogate_rsp_fmttr()"
   FUNC_RMMI_CRSM_EXE_RSP_FMTTR_ENTRY "rmmi_crsm_exe_rsp_fmttr()"
   FUNC_RMMI_COPS_TEST_RSP_FMTTR_ENTRY "rmmi_cops_test_rsp_fmttr()"
   FUNC_RMMI_PHB_ENTRY_RSP_FMTTR_ENTRY "rmmi_phb_entry_rsp_fmttr()"
   FUNC_RMMI_PHB_MSISDN_RSP_FMTTR_ENTRY "rmmi_phb_msisdn_rsp_fmttr()"
   FUNC_RMMI_SMS_SEND_RSP_FMTTR_ENTRY "rmmi_sms_send_rsp_fmttr()"
   FUNC_RMMI_SMS_LIST_RSP_FMTTR_ENTRY "rmmi_sms_list_rsp_fmttr()"
   FUNC_RMMI_SMS_READ_RSP_FMTTR_ENTRY "rmmi_sms_read_rsp_fmttr()"
   FUNC_RMMI_SMS_WRITE_RSP_FMTTR_ENTRY "rmmi_sms_write_rsp_fmttr()"
   FUNC_RMMI_SMS_STORAGE_RSP_FMTTR_ENTRY "rmmi_sms_storage_rsp_fmttr()"
   FUNC_RMMI_FAST_STRING_PRINT_ENTRY "rmmi_fast_string_print()"
   FUNC_RMMI_SMS_IMS_SEND_RSP_FMTTR_ENTRY "rmmi_sms_ims_send_rsp_fmttr()"
   FUNC_RMMI_SMS_IMS_RECV_IND_FMTTR_ENTRY "rmmi_sms_ims_recv_ind_fmttr()"
   FUNC_RMMI_SMS_IMS_SMMA_RSP_FMTTR_ENTRY "rmmi_sms_ims_smma_rsp_fmttr()"
   FUNC_RMMI_SMS_IMS_SMMA_IND_FMTTR_ENTRY "rmmi_sms_ims_smma_ind_fmttr()"


   FUNC_RMMI_INT_TO_ASCII_CONVERTER_ENTRY "rmmi_int_to_ascii_converter()"
   FUNC_RMMI_INT_VALIDATOR_ENTRY "rmmi_int_validator()"
   FUNC_CHECK_CHLD_OPCODE_ENTRY "check_chld_opcode()"
   FUNC_CHECK_PHB_STORAGE_NAME_ENTRY "check_phb_storage_name()"
   FUNC_CHECK_PHB_STORAGE_CODE_ENTRY "check_phb_storage_code()"
   FUNC_CHECK_DCS_TOGSM7BIT_ENTRY "check_dcs_toGsm7bit()"
   FUNC_CHECK_DCS_TOCSCS_ENTRY "check_dcs_toCscs()"
   FUNC_CHECK_SMS_STORAGE_NAME_ENTRY "check_sms_storage_name()"
   FUNC_CHECK_SMS_STORAGE_CODE_ENTRY "check_sms_storage_code()"
   FUNC_CHECK_SMS_SCTS_ENTRY "check_sms_scts()"
   FUNC_CHECK_FACILITY_TYPE_ENTRY "check_facility_type()"
   FUNC_CHECK_PIN_NAME_ENTRY "check_pin_name()"
   FUNC_CHECK_PPU_VALUE_ENTRY "check_ppu_value()"
   FUNC_CHECK_PPU_STRING_ENTRY "check_ppu_string()"
   FUNC_PARSE_INT_LIST_ENTRY "parse_int_list()"
   FUNC_CHECK_CHAR_SET_NAME_ENTRY "check_char_set_name()"
   FUNC_CHECK_CHAR_SET_CODE_ENTRY "check_char_set_code()"
   FUNC_CHECK_KEYPAD_CODE_ENTRY "check_keypad_code()"
   FUNC_CHECK_PDP_TYPE_NAME_ENTRY "check_pdp_type_name()"
   FUNC_CHECK_PDP_TYPE_CODE_ENTRY "check_pdp_type_code()"
   FUNC_CHECK_DOTTED_VALUE8_ENTRY "check_dotted_value8()"
   FUNC_CHECK_DOTTED_VALUE16_ENTRY "check_dotted_value16()"
   FUNC_CHECK_DOTTED_STRING8_ENTRY "check_dotted_string8()"
   FUNC_CHECK_DOTTED_STRING16_ENTRY "check_dotted_string16()"
   FUNC_CHECK_HEX_VALUE_ENTRY "check_hex_value()"
   FUNC_CHECK_SMS_PDU_STRING_ENTRY "check_sms_pdu_string()"
   FUNC_RMMI_FIND_CMD_MODE_ENTRY "rmmi_find_cmd_mode()"
   FUNC_RMMI_STRING_VALIDATOR_ENTRY "rmmi_string_validator()"
   FUNC_RMMI_SMS_TEXT_VALIDATOR_ENTRY "rmmi_sms_text_validator()"
   FUNC_EXTRACT_NUMBER_ENTRY "extract_number()"
   FUNC_RMMI_SKIP_LEADING_CHARS_ENTRY "rmmi_skip_leading_chars()"
   FUNC_EXTRACT_NUMBER_STRING_ENTRY "extract_number_string()"
   FUNC_IS_SMS_MSG_CMD_ENTRY "is_sms_msg_cmd()"
   FUNC_IS_SMS_STD_CMD_ENTRY "is_sms_standard_command()"
   FUNC_IS_SMS_MODE_CORRECT_ENTRY "is_sms_mode_correct()"
   FUNC_RTC_TO_STRING_FORMAT_ENTRY "rtc_to_string_format()"
   FUNC_STRING_TO_RTC_FORMAT_ENTRY "string_to_rtc_format()"
   FUNC_TOUPPER_ENTRY "toUpper()"
   FUNC_PRINT_HEX_VALUE_ENTRY "print_hex_value()"
   FUNC_RMMI_EINT0_HDLR_ENTRY "[DUAL TALK] rmmi_eint0_hdlr()"
   FUNC_RMMI_WAKEUP_TIMEOUT_HDLR "[DUAL TALK] rmmi_wakeup_timeout_hdlr(),type:%Mrmmi_wakeup_type_enum"
   FUNC_L4C_SAT_PROFILE_WRITE_RRSP_ENTRY "l4c_sat_profile_write_rrsp()"


   FUNC_RMMI_UART_RTW_IND_HDLR_ENTRY "rmmi_uart_rtw_ind_hdlr()"
   FUNC_RMMI_UART_RTR_IND_HDLR_ENTRY "rmmi_uart_rtr_ind_hdlr()"
   FUNC_RMMI_UART_SEND_DATA_ENTRY "rmmi_uart_send_data()"
   FUNC_RMMI_UART_READ_DATA_ENTRY "rmmi_uart_read_data()"
   FUNC_RMMI_READ_FROM_UART_ENTRY "rmmi_read_from_uart()"
   FUNC_RMMI_WRITE_TO_UART_ENTRY "rmmi_write_to_uart()"


   FUNC_RMMI_SEND_TO_SAT_ENTRY "rmmi_rsp_to_SAT()"
   FUNC_L4C_SAT_ENVELOPE_RRSP_ENTRY "l4c_sat_envelope_rrsp()"


   FUNC_RMMI_START_ATH_FOR_DIALUP_ENTRY "rmmi_start_ath_for_dialup_hdlr()"
   FUNC_RMMI_CLEAR_ATH_FOR_DIALUP_ENTRY "rmmi_clear_ath_for_dialup_hdlr()"


   FUNC_IRCOMM_CONNECT_IND_HDLR_ENTRY "ircomm_connect_ind_hdlr()"
   FUNC_IRCOMM_DISCONNECT_IND_HDLR_ENTRY "ircomm_disconnect_ind_hdlr()"


   FUNC_RMMI_ATA_HDLR_ENTRY "rmmi_ata_hdlr()"
   FUNC_RMMI_ATD_HDLR_ENTRY "rmmi_atd_hdlr()"
   FUNC_RMMI_ATE_HDLR_ENTRY "rmmi_ate_hdlr()"
   FUNC_RMMI_ATH_HDLR_ENTRY "rmmi_ath_hdlr()"
   FUNC_RMMI_ATS_HDLR_ENTRY "rmmi_ats_hdlr()"
   FUNC_RMMI_ATV_HDLR_ENTRY "rmmi_atv_hdlr()"
   FUNC_RMMI_ATQ_HDLR_ENTRY "rmmi_atq_hdlr()"
   FUNC_RMMI_ATI_HDLR_ENTRY "rmmi_ati_hdlr()"
   FUNC_RMMI_ATL_HDLR_ENTRY "rmmi_atl_hdlr()"
   FUNC_RMMI_ATO_HDLR_ENTRY "rmmi_ato_hdlr()"
   FUNC_RMMI_ATAMP_HDLR_ENTRY "rmmi_atamp_hdlr()"
   FUNC_RMMI_CACM_HDLR_ENTRY "rmmi_cacm_hdlr()"
   FUNC_RMMI_CAMM_HDLR_ENTRY "rmmi_camm_hdlr()"
   FUNC_RMMI_CAOC_HDLR_ENTRY "rmmi_caoc_hdlr()"
   FUNC_RMMI_CCWE_HDLR_ENTRY "rmmi_ccwe_hdlr()"
   FUNC_RMMI_CBST_HDLR_ENTRY "rmmi_cbst_hdlr()"
   FUNC_RMMI_CCUG_HDLR_ENTRY "rmmi_ccug_hdlr()"
   FUNC_RMMI_CHUP_HDLR_ENTRY "rmmi_chup_hdlr()"
   FUNC_RMMI_CHLD_HDLR_ENTRY "rmmi_chld_hdlr()"
   FUNC_RMMI_CLCC_HDLR_ENTRY "rmmi_clcc_hdlr()"
   FUNC_RMMI_CMOD_HDLR_ENTRY "rmmi_cmod_hdlr()"
   FUNC_RMMI_CSNS_HDLR_ENTRY "rmmi_csns_hdlr()"
   FUNC_RMMI_CTFR_HDLR_ENTRY "rmmi_ctfr_hdlr()"
   FUNC_RMMI_VTS_HDLR_ENTRY "rmmi_vts_hdlr()"
   FUNC_RMMI_CPAS_HDLR_ENTRY "rmmi_cpas_hdlr()"
   FUNC_RMMI_CAEMLPP_HDLR_ENTRY "rmmi_caemlpp_hdlr()"
   FUNC_RMMI_CCFC_HDLR_ENTRY "rmmi_ccfc_hdlr()"
   FUNC_RMMI_CCWA_HDLR_ENTRY "rmmi_ccwa_hdlr()"
   FUNC_RMMI_CDIP_HDLR_ENTRY "rmmi_cdip_hdlr()"
   FUNC_RMMI_CLCK_HDLR_ENTRY "rmmi_clck_hdlr()"
   FUNC_RMMI_CLIP_HDLR_ENTRY "rmmi_clip_hdlr()"
   FUNC_RMMI_CLIR_HDLR_ENTRY "rmmi_clir_hdlr()"
   FUNC_RMMI_COLP_HDLR_ENTRY "rmmi_colp_hdlr()"
   FUNC_RMMI_CNAP_HDLR_ENTRY "rmmi_cnap_hdlr()"
   FUNC_RMMI_CPWD_HDLR_ENTRY "rmmi_cpwd_hdlr()"
   FUNC_RMMI_CSSN_HDLR_ENTRY "rmmi_cssn_hdlr()"
   FUNC_RMMI_CUSD_HDLR_ENTRY "rmmi_cusd_hdlr()"
   FUNC_RMMI_CCBS_HDLR_ENTRY "rmmi_ccbs_hdlr()"
   FUNC_RMMI_CGATT_HDLR_ENTRY "rmmi_cgatt_hdlr()"
   FUNC_RMMI_COPS_HDLR_ENTRY "rmmi_cops_hdlr()"
   FUNC_RMMI_CGCLASS_HDLR_ENTRY "rmmi_cgclass_hdlr()"
   FUNC_RMMI_CSQ_HDLR_ENTRY "rmmi_csq_hdlr()"
   FUNC_RMMI_CGREG_HDLR_ENTRY "rmmi_cgreg_hdlr()"
   FUNC_RMMI_EPBSE_HDLR_ENTRY "rmmi_epbse_hdlr()"
   FUNC_RMMI_CEMS_HDLR_ENTRY "rmmi_cems_hdlr()"
   FUNC_RMMI_CFPS_HDLR_ENTRY "rmmi_cnmp_hdlr()"
   FUNC_RMMI_CAPL_HDLR_ENTRY "rmmi_capl_hdlr()"
   FUNC_RMMI_CMPI_HDLR_ENTRY "rmmi_cmpi_hdlr()"
   FUNC_RMMI_CSMA_HDLR_ENTRY "rmmi_csma_hdlr()"
   FUNC_RMMI_CSMN_HDLR_ENTRY "rmmi_csmn_hdlr()"
   FUNC_RMMI_CREG_HDLR_ENTRY "rmmi_creg_hdlr()"
   FUNC_RMMI_CIMI_HDLR_ENTRY "rmmi_cimi_hdlr()"
   FUNC_RMMI_CPIN_HDLR_ENTRY "rmmi_cpin_hdlr()"
   FUNC_RMMI_CPUC_HDLR_ENTRY "rmmi_cpuc_hdlr()"
   FUNC_RMMI_CPOL_HDLR_ENTRY "rmmi_cpol_hdlr()"
   FUNC_RMMI_EPOL_HDLR_ENTRY "rmmi_epol_hdlr()"
   FUNC_RMMI_CRSM_HDLR_ENTRY "rmmi_crsm_hdlr()"
   FUNC_RMMI_CSIM_HDLR_ENTRY "rmmi_csim_hdlr()"
   FUNC_RMMI_CGLA_HDLR_ENTRY "rmmi_cgla_hdlr()"
   FUNC_RMMI_CRLA_HDLR_ENTRY "rmmi_crla_hdlr()"
   FUNC_RMMI_CCHO_HDLR_ENTRY "rmmi_ccho_hdlr()"
   FUNC_RMMI_CCHC_HDLR_ENTRY "rmmi_cchc_hdlr()"
   FUNC_RMMI_CCSP_HDLR_ENTRY "rmmi_ccsp_hdlr()"
   FUNC_RMMI_CSIMD_HDLR_ENTRY "rmmi_csimd_hdlr()"
   FUNC_RMMI_CSRM_HDLR_ENTRY "rmmi_csrm_hdlr()"
   FUNC_RMMI_CALA_HDLR_ENTRY "rmmi_cala_hdlr()"
   FUNC_RMMI_CALD_HDLR_ENTRY "rmmi_cald_hdlr()"
   FUNC_RMMI_CCLK_HDLR_ENTRY "rmmi_cclk_hdlr()"
   FUNC_RMMI_CSDF_HDLR_ENTRY "rmmi_csdf_hdlr()"
   FUNC_RMMI_CSTF_HDLR_ENTRY "rmmi_cstf_hdlr()"
   FUNC_RMMI_CBC_HDLR_ENTRY "rmmi_cbc_hdlr()"
   FUNC_RMMI_CIND_HDLR_ENTRY "rmmi_cind_hdlr()"
   FUNC_RMMI_CKPD_HDLR_ENTRY "rmmi_ckpd_hdlr()"
   FUNC_RMMI_CLAC_HDLR_ENTRY "rmmi_clac_hdlr()"
   FUNC_RMMI_CMEC_HDLR_ENTRY "rmmi_cmec_hdlr()"
   FUNC_RMMI_CLAN_HDLR_ENTRY "rmmi_clan_hdlr()"
   FUNC_RMMI_CLAE_HDLR_ENTRY "rmmi_clae_hdlr()"
   FUNC_RMMI_CLVL_HDLR_ENTRY "rmmi_clvl_hdlr()"
   FUNC_RMMI_VGR_HDLR_ENTRY "rmmi_vgr_hdlr()"
   FUNC_RMMI_VGT_HDLR_ENTRY "rmmi_vgt_hdlr()"
   FUNC_RMMI_CRSL_HDLR_ENTRY "rmmi_crsl_hdlr()"
   FUNC_RMMI_CMUT_HDLR_ENTRY "rmmi_cmut_hdlr()"
   FUNC_RMMI_CSIL_HDLR_ENTRY "rmmi_csil_hdlr()"
   FUNC_RMMI_CTZR_HDLR_ENTRY "rmmi_ctzr_hdlr()"
   FUNC_RMMI_CTSA_HDLR_ENTRY "rmmi_ctsa_hdlr()"
   FUNC_RMMI_CSO_HDLR_ENTRY "rmmi_cso_hdlr()"
   FUNC_RMMI_CSS_HDLR_ENTRY "rmmi_css_hdlr()"
   FUNC_RMMI_ECSCN_HDLR_ENTRY "rmmi_ecscn_hdlr()"
   FUNC_RMMI_CVIB_HDLR_ENTRY "rmmi_cvib_hdlr()"
   FUNC_RMMI_CBKLT_HDLR_ENTRY "rmmi_cbklt_hdlr()"
   FUNC_RMMI_CSGT_HDLR_ENTRY "rmmi_csgt_hdlr()"
   FUNC_RMMI_CGMI_HDLR_ENTRY "rmmi_cgmi_hdlr()"
   FUNC_RMMI_CGMM_HDLR_ENTRY "rmmi_cgmm_hdlr()"
   FUNC_RMMI_CGMR_HDLR_ENTRY "rmmi_cgmr_hdlr()"
   FUNC_RMMI_CGSN_HDLR_ENTRY "rmmi_cgsn_hdlr()"
   FUNC_RMMI_ECAL_HDLR_ENTRY "rmmi_ecal_hdlr()"
   FUNC_RMMI_CASP_HDLR_ENTRY "rmmi_casp_hdlr()"
   FUNC_RMMI_DIAG_HDLR_ENTRY "rmmi_diag_hdlr()"
   FUNC_RMMI_CNUM_HDLR_ENTRY "rmmi_cnum_hdlr()"
   FUNC_RMMI_EPBUM_HDLR_ENTRY "rmmi_epbum_hdlr()"
   FUNC_RMMI_CPBF_HDLR_ENTRY "rmmi_cpbf_hdlr()"
   FUNC_RMMI_CPBR_HDLR_ENTRY "rmmi_cpbr_hdlr()"
   FUNC_RMMI_CPBS_HDLR_ENTRY "rmmi_cpbs_hdlr()"
   FUNC_RMMI_CPBW_HDLR_ENTRY "rmmi_cpbw_hdlr()"
   FUNC_RMMI_ESLN_HDLR_ENTRY "rmmi_esln_hdlr()"
   FUNC_RMMI_EAPPROVE_HDLR_ENTRY "rmmi_eapprove_hdlr()"
   FUNC_RMMI_CPBI_HDLR_ENTRY "rmmi_cpbi_hdlr()"
   FUNC_RMMI_CGSMS_HDLR_ENTRY "rmmi_cgsms_hdlr()"
   FUNC_RMMI_CSMS_HDLR_ENTRY "rmmi_csms_hdlr()"
   FUNC_RMMI_CMGC_HDLR_ENTRY "rmmi_cmgc_hdlr()"
   FUNC_RMMI_CMGD_HDLR_ENTRY "rmmi_cmgd_hdlr()"
   FUNC_RMMI_CMGF_HDLR_ENTRY "rmmi_cmgf_hdlr()"
   FUNC_RMMI_CMGL_HDLR_ENTRY "rmmi_cmgl_hdlr()"
   FUNC_RMMI_CMGR_HDLR_ENTRY "rmmi_cmgr_hdlr()"
   FUNC_RMMI_CMGS_HDLR_ENTRY "rmmi_cmgs_hdlr()"
   FUNC_RMMI_CMGW_HDLR_ENTRY "rmmi_cmgw_hdlr()"
   FUNC_RMMI_EMGC_HDLR_ENTRY "rmmi_emgc_hdlr()"
   FUNC_RMMI_ENMA_HDLR_ENTRY "rmmi_enma_hdlr()"
   FUNC_RMMI_EMGS_HDLR_ENTRY "rmmi_emgs_hdlr()"
   FUNC_RMMI_EMGW_HDLR_ENTRY "rmmi_emgw_hdlr()"
   FUNC_RMMI_EMGL_HDLR_ENTRY "rmmi_emgl_hdlr()"
   FUNC_RMMI_CMMS_HDLR_ENTRY "rmmi_cmms_hdlr()"
   FUNC_RMMI_CMSS_HDLR_ENTRY "rmmi_cmss_hdlr()"
   FUNC_RMMI_CPMS_HDLR_ENTRY "rmmi_cpms_hdlr()"
   FUNC_RMMI_CSCA_HDLR_ENTRY "rmmi_csca_hdlr()"
   FUNC_RMMI_CSCB_HDLR_ENTRY "rmmi_cscb_hdlr()"
   FUNC_RMMI_ECBMR_HDLR_ENTRY "rmmi_ecbmr_hdlr()"
   FUNC_RMMI_CSMP_HDLR_ENTRY "rmmi_csmp_hdlr()"
   FUNC_RMMI_CNMI_HDLR_ENTRY "rmmi_cnmi_hdlr()"
   FUNC_RMMI_CNMA_HDLR_ENTRY "rmmi_cnma_hdlr()"
   FUNC_RMMI_CSDH_HDLR_ENTRY "rmmi_csdh_hdlr()"
   FUNC_RMMI_ESMSMAIP_HDLR_ENTRY "rmmi_esmsmaip_hdlr()"
   FUNC_RMMI_ESMSMOIP_HDLR_ENTRY "rmmi_esmsmoip_hdlr()"
   FUNC_RMMI_ESMSMTIP_HDLR_ENTRY "rmmi_esmsmtip_hdlr()"
   FUNC_RMMI_STKSMSOIP_HDLR_ENTRY "rmmi_stksmsoip_hdlr()"
   FUNC_RMMI_ESMMA_HDLR_ENTRY "rmmi_esmma_hdlr()"
   FUNC_RMMI_CSCS_HDLR_ENTRY "rmmi_cscs_hdlr()"
   FUNC_RMMI_CFUN_HDLR_ENTRY "rmmi_cfun_hdlr()"
   FUNC_RMMI_CGACT_HDLR_ENTRY "rmmi_cgact_hdlr()"
   FUNC_RMMI_EGACT_HDLR_ENTRY "rmmi_egact_hdlr()"


   FUNC_RMMI_CGCONTRDP_HDLR_ENTRY "rmmi_cgcontrdp_hdlr()"
   FUNC_RMMI_CGSCONTRDP_HDLR_ENTRY "rmmi_cgscontrdp_hdlr()"
   FUNC_RMMI_CGEQOS_HDLR_ENTRY "rmmi_cgeqos_hdlr()"
   FUNC_RMMI_CGEQOSRDP_HDLR_ENTRY "rmmi_cgeqosrdp_hdlr()"
   FUNC_RMMI_CGTFTRDP_HDLR_ENTRY "rmmi_cgtftrdp_hdlr()"
   FUNC_RMMI_CEMODE_HDLR_ENTRY "rmmi_cemode_hdlr()"
   FUNC_RMMI_CEREG_HDLR_ENTRY "rmmi_cereg_hdlr()"
   FUNC_RMMI_CGDEL_HDLR_ENTRY "rmmi_cgdel_hdlr()"

   FUNC_RMMI_CGANS_HDLR_ENTRY "rmmi_cgans_hdlr()"
   FUNC_RMMI_CGAUTO_HDLR_ENTRY "rmmi_cgauto_hdlr()"
   FUNC_RMMI_CGCMOD_HDLR_ENTRY "rmmi_cgcmod_hdlr()"
   FUNC_RMMI_CGDATA_HDLR_ENTRY "rmmi_cgdata_hdlr()"
   FUNC_RMMI_EGLD_HDLR_ENTRY "rmmi_egld_hdlr()"
   FUNC_RMMI_CGPADDR_HDLR_ENTRY "rmmi_cgpaddr_hdlr()"
   FUNC_RMMI_CGDCONT_HDLR_ENTRY "rmmi_cgdcont_hdlr()"
   FUNC_RMMI_CGDSCONT_HDLR_ENTRY "rmmi_cgdscont_hdlr()"
   FUNC_RMMI_CGQMIN_HDLR_ENTRY "rmmi_cgqmin_hdlr()"
   FUNC_RMMI_CGQREQ_HDLR_ENTRY "rmmi_cgqreq_hdlr()"
   FUNC_RMMI_CGEQMIN_HDLR_ENTRY "rmmi_cgeqmin_hdlr()"
   FUNC_RMMI_CGEQREQ_HDLR_ENTRY "rmmi_cgeqreq_hdlr()"
   FUNC_RMMI_CGEQ_COMMON_HDLR_ENTRY "rmmi_cgeq_hdlr(), qos_type=%Matci_qos_enum"
   FUNC_RMMI_CGTFT_HDLR_ENTRY "rmmi_cgtft_hdlr()"
   FUNC_RMMI_EGDELPF_HDLR_ENTRY "rmmi_egdelpf_hdlr()"
   FUNC_RMMI_EGLNKPF_HDLR_ENTRY "rmmi_eglnkpf_hdlr()"
   FUNC_RMMI_CGSDATA_HDLR_ENTRY "rmmi_cgsdata_hdlr()"
   FUNC_RMMI_CGPRCO_HDLR_ENTRY "rmmi_cgprco_hdlr()"
   FUNC_RMMI_CGAUTH_HDLR_ENTRY "rmmi_cgauth_hdlr()"
   FUNC_RMMI_PSBEARER_HDLR_ENTRY "rmmi_psbearer_hdlr()"
   FUNC_RMMI_CRLP_HDLR_ENTRY "rmmi_crlp_hdlr()"
   FUNC_RMMI_FCLASS_HDLR_ENTRY "rmmi_fclass_hdlr()"
   FUNC_RMMI_ICF_HDLR_ENTRY "rmmi_icf_hdlr()"
   FUNC_RMMI_DS_HDLR_ENTRY "rmmi_ds_hdlr()"
   FUNC_RMMI_CR_HDLR_ENTRY "rmmi_cr_hdlr()"
   FUNC_RMMI_CR_RESULT_CODE_FMTTR_ENTRY "rmmi_cr_result_code_fmttr()"
   FUNC_RMMI_CEER_HDLR_ENTRY "rmmi_ceer_hdlr()"
   FUNC_RMMI_EPIN_HDLR_ENTRY "rmmi_epin_hdlr()"
   FUNC_RMMI_EPIN1_HDLR_ENTRY "rmmi_epin1_hdlr()"
   FUNC_RMMI_EPIN2_HDLR_ENTRY "rmmi_epin2_hdlr()"
   FUNC_RMMI_EPINC_HDLR_ENTRY "rmmi_cpinc_hdlr()"
   FUNC_RMMI_CSAS_HDLR_ENTRY "rmmi_csas_hdlr()"
   FUNC_RMMI_CRES_HDLR_ENTRY "rmmi_cres_hdlr()"
   FUNC_RMMI_EFSR_HDLR_ENTRY "rmmi_efsr_hdlr()"
   FUNC_RMMI_EFSW_HDLR_ENTRY "rmmi_efsw_hdlr()"
   FUNC_RMMI_EFSC_HDLR_ENTRY "rmmi_efsc_hdlr()"
   FUNC_RMMI_EFSL_HDLR_ENTRY "rmmi_efsl_hdlr()"
   FUNC_RMMI_EFSF_HDLR_ENTRY "rmmi_efsf_hdlr()"
   FUNC_RMMI_EFSD_HDLR_ENTRY "rmmi_efsd_hdlr()"
   FUNC_RMMI_EQUERY_HDLR_ENTRY "rmmi_equery_hdlr()"
   FUNC_RMMI_BLDN_HDLR_ENTRY "rmmi_bldn_hdlr()"
   FUNC_RMMI_EREG_HDLR_ENTRY "rmmi_ereg_hdlr()"
   FUNC_RMMI_EPMIC_HDLR_ENTRY "rmmi_epmic_hdlr()"
   FUNC_RMMI_EBTLB_HDLR_ENTRY "rmmi_ebtlb_hdlr()"
   FUNC_RMMI_BVRA_HDLR_ENTRY "rmmi_bvra_hdlr()"
   FUNC_RMMI_EVCARD_HDLR_ENTRY "rmmi_evcard_hdlr()"
   FUNC_RMMI_EMMISTR_HDLR_ENTRY "rmmi_emmistr_hdlr()"
   FUNC_RMMI_WS46_HDLR_ENTRY "rmmi_ws46_hdlr()"
   FUNC_RMMI_ECPU_HDLR_ENTRY "rmmi_ecpu_hdlr()"
   FUNC_RMMI_ERAM_HDLR_ENTRY "rmmi_eram_hdlr()"
   FUNC_RMMI_ELAUNCH_HDLR_ENTRY "rmmi_elaunch_hdlr()"
   FUNC_RMMI_ELOG_HDLR_ENTRY "rmmi_elog_hdlr()"
   FUNC_RMMI_ESUO_HDLR_ENTRY "rmmi_esuo_hdlr()"
   FUNC_RMMI_TRACE_HDLR_ENTRY "rmmi_trace_hdlr()"
   FUNC_RMMI_ESWM_HDLR_ENTRY "rmmi_eswm_hdlr()"
   FUNC_RMMI_EMSDMOD_HDLR_ENTRY "rmmi_emsdmod_hdlr()"
   FUNC_RMMI_EMSDTNUM_HDLR_ENTRY "rmmi_emsdtnum_hdlr()"
   FUNC_RMMI_EMSDRNUM_HDLR_ENTRY "rmmi_emsdrnum_hdlr()"
   FUNC_RMMI_EMSDSET_HDLR_ENTRY "rmmi_emsdset_hdlr()"
   FUNC_RMMI_EMSD_HDLR_ENTRY "rmmi_emsd_hdlr()"
   FUNC_RMMI_EMSDPUSH_HDLR_ENTRY "rmmi_emsdpush_hdlr()"
   FUNC_RMMI_ESPEECH_HDLR_ENTRY "rmmi_espeech_hdlr()"
   FUNC_RMMI_ESSTV_HDLR_ENTRY "rmmi_esstv_hdlr()"
   FUNC_RMMI_EDTP_HDLR_ENTRY "rmmi_edtp_hdlr()"
   FUNC_RMMI_EDTS_HDLR_ENTRY "rmmi_edts_hdlr()"
   FUNC_RMMI_EDSETDEV_HDLR_ENTRY "rmmi_esetdev_hdlr()"
   FUNC_RMMI_ESOV_HDLR_ENTRY "rmmi_esov_hdlr()"
   FUNC_RMMI_ESMV_HDLR_ENTRY "rmmi_esmv_hdlr()"
   FUNC_RMMI_ESSMA_HDLR_ENTRY "rmmi_essma_hdlr()"
   FUNC_RMMI_L1AUD_SPC_CALLBACK "rmmi_l1aud_spc_callback()"
   FUNC_RMMI_EPSAP_HDLR_ENTRY "rmmi_epsap_hdlr()"
   FUNC_RMMI_EPSAPPULL_HDLR_ENTRY "rmmi_epsappull_hdlr()"

   FUNC_RMMI_FMI_HDLR_ENTRY "rmmi_fmi_hdlr()"
   FUNC_RMMI_FMM_HDLR_ENTRY "rmmi_fmm_hdlr()"
   FUNC_RMMI_FMR_HDLR_ENTRY "rmmi_fmr_hdlr()"
   FUNC_RMMI_FPR_HDLR_ENTRY "rmmi_fpr_hdlr()"
   FUNC_RMMI_FLO_HDLR_ENTRY "rmmi_flo_hdlr()"
   FUNC_RMMI_FDT_HDLR_ENTRY "rmmi_fdt_hdlr()"
   FUNC_RMMI_FDR_HDLR_ENTRY "rmmi_fdr_hdlr()"
   FUNC_RMMI_FIP_HDLR_ENTRY "rmmi_fip_hdlr()"
   FUNC_RMMI_FKS_HDLR_ENTRY "rmmi_fks_hdlr()"
   FUNC_RMMI_FK_HDLR_ENTRY "rmmi_fk_hdlr()"
   FUNC_RMMI_FET_HDLR_ENTRY "rmmi_fet_hdlr()"
   FUNC_RMMI_FTM_HDLR_ENTRY "rmmi_ftm_hdlr()"
   FUNC_RMMI_FRM_HDLR_ENTRY "rmmi_frm_hdlr()"
   FUNC_RMMI_FTH_HDLR_ENTRY "rmmi_fth_hdlr()"
   FUNC_RMMI_FRH_HDLR_ENTRY "rmmi_frh_hdlr()"
   FUNC_RMMI_FTS_HDLR_ENTRY "rmmi_fts_hdlr()"
   FUNC_RMMI_FRS_HDLR_ENTRY "rmmi_frs_hdlr()"
   FUNC_RMMI_FCC_HDLR_ENTRY "rmmi_fcc_hdlr()"
   FUNC_RMMI_FDCC_HDLR_ENTRY "rmmi_fdcc_hdlr()"
   FUNC_RMMI_FIS_HDLR_ENTRY "rmmi_fis_hdlr()"
   FUNC_RMMI_FDIS_HDLR_ENTRY "rmmi_fdis_hdlr()"
   FUNC_RMMI_FCS_HDLR_ENTRY "rmmi_fcs_hdlr()"
   FUNC_RMMI_FDCS_HDLR_ENTRY "rmmi_fdcs_hdlr()"
   FUNC_RMMI_FLI_HDLR_ENTRY "rmmi_fli_hdlr()"
   FUNC_RMMI_FLID_HDLR_ENTRY "rmmi_flid_hdlr()"
   FUNC_RMMI_FPI_HDLR_ENTRY "rmmi_fli_hdlr()"
   FUNC_RMMI_FCIG_HDLR_ENTRY "rmmi_flid_hdlr()"
   FUNC_RMMI_FLP_HDLR_ENTRY "rmmi_flp_hdlr()"
   FUNC_RMMI_FLPL_HDLR_ENTRY "rmmi_flpl_hdlr()"
   FUNC_RMMI_FSP_HDLR_ENTRY "rmmi_fsp_hdlr()"
   FUNC_RMMI_FSPL_HDLR_ENTRY "rmmi_fspl_hdlr()"
   FUNC_RMMI_FNR_HDLR_ENTRY "rmmi_fnr_hdlr()"
   FUNC_RMMI_FIE_HDLR_ENTRY "rmmi_fie_hdlr()"
   FUNC_RMMI_FPS_HDLR_ENTRY "rmmi_fps_hdlr()"
   FUNC_RMMI_FPTS_HDLR_ENTRY "rmmi_fpts_hdlr()"
   FUNC_RMMI_FRQ_HDLR_ENTRY "rmmi_frq_hdlr()"
   FUNC_RMMI_FBADLIN_HDLR_ENTRY "rmmi_fbadlin_hdlr()"
   FUNC_RMMI_FBADMUL_HDLR_ENTRY "rmmi_fbadmul_hdlr()"
   FUNC_RMMI_FCQ_HDLR_ENTRY "rmmi_fcq_hdlr()"
   FUNC_RMMI_FIT_HDLR_ENTRY "rmmi_fit_hdlr()"
   FUNC_RMMI_FPP_HDLR_ENTRY "rmmi_fpp_hdlr()"
   FUNC_RMMI_FBO_HDLR_ENTRY "rmmi_fbo_hdlr()"
   FUNC_RMMI_FBOR_HDLR_ENTRY "rmmi_fbor_hdlr()"
   FUNC_RMMI_FEA_HDLR_ENTRY "rmmi_fea_hdlr()"
   FUNC_RMMI_FREL_HDLR_ENTRY "rmmi_frel_hdlr()"
   FUNC_RMMI_FNS_HDLR_ENTRY "rmmi_fns_hdlr()"
   FUNC_RMMI_FCR_HDLR_ENTRY "rmmi_fcr_hdlr()"
   FUNC_RMMI_FBU_HDLR_ENTRY "rmmi_fbu_hdlr()"
   FUNC_RMMI_FBUG_HDLR_ENTRY "rmmi_fbug_hdlr()"
   FUNC_RMMI_FAP_HDLR_ENTRY "rmmi_fap_hdlr()"
   FUNC_RMMI_FSA_HDLR_ENTRY "rmmi_fsa_hdlr()"
   FUNC_RMMI_FPA_HDLR_ENTRY "rmmi_fpa_hdlr()"
   FUNC_RMMI_FPW_HDLR_ENTRY "rmmi_fpw_hdlr()"
   FUNC_RMMI_FCT_HDLR_ENTRY "rmmi_fct_hdlr()"
   FUNC_RMMI_FPHCTO_HDLR_ENTRY "rmmi_fphcto_hdlr()"
   FUNC_RMMI_FHS_HDLR_ENTRY "rmmi_fhs_hdlr()"
   FUNC_RMMI_FMS_HDLR_ENTRY "rmmi_fms_hdlr()"
   FUNC_RMMI_FMINSP_HDLR_ENTRY "rmmi_fminsp_hdlr()"
   FUNC_RMMI_FRY_HDLR_ENTRY "rmmi_fry_hdlr()"
   FUNC_RMMI_FBS_HDLR_ENTRY "rmmi_fbs_hdlr()"
   FUNC_RMMI_FFC_HDLR_ENTRY "rmmi_ffc_hdlr()"
   FUNC_RMMI_FVRFC_HDLR_ENTRY "rmmi_fvrfc_hdlr()"
   FUNC_RMMI_FDFFC_HDLR_ENTRY "rmmi_fdffc_hdlr()"
   FUNC_RMMI_FLNFC_HDLR_ENTRY "rmmi_flnfc_hdlr()"
   FUNC_RMMI_FWDFC_HDLR_ENTRY "rmmi_fwdfc_hdlr()"

   FUNC_RMMI_CTMSET_HDLR_ENTRY "rmmi_ctmset_hdlr()"
   FUNC_RMMI_CTMOPEN_HDLR_ENTRY "rmmi_ctmopen_hdlr()"
   FUNC_RMMI_CTMCLOSE_HDLR_ENTRY "rmmi_ctmclose_hdlr()"
   FUNC_RMMI_CTMCONN_HDLR_ENTRY "rmmi_ctmconn_hdlr()"
   FUNC_RMMI_CTMS_HDLR_ENTRY "rmmi_ctms_hdlr()"
   FUNC_RMMI_CTMCFG_HDLR_ENTRY "rmmi_ctmcfg_hdlr()"
   FUNC_RMMI_CTMCALL_HDLR_ENTRY "rmmi_ctmcall_hdlr()"

   FUNC_RMMI_EMEMS_HDLR_ENTRY "rmmi_emems_hdlr()"
   FUNC_RMMI_EEMODE_HDLR_ENTRY "rmmi_eemode_hdlr()"
   FUNC_RMMI_EDE_HDLR_ENTRY "rmmi_ede_hdlr()"



   INFO_EXTCOMMAND_HASH_VALUE "rmmi_extended_cmd_processor(), hash_value1= %u, hash_value2= %u. cmd_index: %u/%u"
   RMMI_MULTI_CMD_RECEIVED "multi cmd received"
   BASIC_COMMAND_HASH_VALUE "rmmi_basic_cmd_processor(), hash_value = %u"
   AT_CMD_STRING "command: %c%c%c%c%c%c%c%c%c%c%c%c"
   CUSTOM_CMD_HDLR "CUSTOMER AT Cmd"
   RMMI_MULTI_CMD_NOT_FINISHED "multi cmd NOT finished"
   RMMI_PROCESS_MULTI_CMD_ACTION_EXIST "rmmi_process_multi_cmd: is_ucm_action = %d,route_through_mmi=%d"
   UCM_ACTION "It's a ucm action, OK will return by UCM"
   ROUTE_THRU_LMMI_FOR_BASIC_CMD "route through mmi in basic_cmd_hdlr ,OK will return later"
   RMMI_PROCESS_MULTI_CMD "process_multi_cmd"
   RMMI_MULTI_CMD_STRING_EXIST "multi cmd string exist"
   RMMI_MULTI_CMD_STRING_NOT_EXIST "multi cmd string NOT exist"
   RMMI_SRC_ID_AND_CID "current_src_id = %d, cid = %d"
   RMMI_RECEIVE_DATA_DURING_ATD "receiving data during ATD"
   RMMI_ABORT_ATD_OPERATION "abort ATD !!"
   INFO_RMMI_INPUT "read uart, que.len=%d, space=%d, read=%d, uart_empty=%d"
   RMMI_CMD_FROM_SAT "cmd from sat"
   RMMI_CMD_FROM_TST "cmd from tst"
   RMMI_CLEAR_OUTPUT_QUEUE "clear output queue!!"
   RMMI_RSP_ERROR_CAUSE "rmmi_rsp , rmmi_cause = %u"
   RMMI_RESULT_CODE_FMTTR "result code: %Mrmmi_rsp_type_enum"
   RMMI_RESULT_CODE_ERROR "result code: %Mrmmi_rsp_type_enum, cause: %Mps_cause_enum"
   RMMI_MULTI_CMD_ERROR "multi cmd error"
   INFO_RMMI_OBTAIN_UART_CONTROL "rmmi_obtain_uart_control() ,port=%d, owner:%Msim_interface_enum"
   INFO_CHECK_CMD_ALLOW_RETURN_FALSE "check_cmd_allow() return false"
   INFO_MSG_BASED_REGISTER "register msessage based channel: ch_num:%d"
   INFO_MSG_BASED_EXECUTION "execution message based AT: port:%d, src:%d, length:%d, pdu_length: %d"
   INFO_MSG_BASED_RESPONSE "send response message: len: %d, src: %d"
   INFO_MSG_BASED_URC "send urc message: len: %d"
   INFO_RMMI_SELECT_CONTEXT "[RMMI_ROOT] select context: cid:%d, %Msim_interface_enum"
   INFO_RMMI_INVALID_PORT "[RMMI_ROOT] INVALID: port:%d"
   INFO_RMMI_UART_PLUGIN "[RMMI_ROOT] UART plugin, src:%d, cid:%d, port:%d"
   INFO_RMMI_UART_PLUGOUT "[RMMI_ROOT] UART plugout, src:%d, cid:%d, port:%d"
   INFO_AT_ETSTLP "+ETSTLP: tst_port_ps: %hd, tst_port_l1: %hd"
   INFO_RMMI_USB_ACTIVE "Is UART active, port:%d, active: %d"
   INFO_WAKEUP "[DUAL TALK] Wake Up: %Mrmmi_wakeup_type_enum"
   INFO_PULL_GPIO "[DUAL TALK] Pull GPIO %d"
   INFO_DUMP_AGPS_MD_HEADER "agps md header : version = %d , type = %d , length = %d"
   INFO_WRITE_TO_AGPSD "write data to AGPSD via uart_port_gps_ccci, size : %d"


   RMMI_EXPLICT_SEND_CIEV "Explictly to send CIEV: %d, %d"
   INFO_HF_IS_NOT_READY_TO_RECIEVE_URC_REPORT "HF is not ready to receive URC report"
   INFO_CLEAR_HF_URC_REPORT_FLAG "Clear hf_urc_report_flag: cid =%d,src_id=%d"
   INFO_RMMI_CANCEL_EVENT "rmmi: cancel retry timer!, event_id=%d"
   INFO_RMMI_ATH_NO_CALL_HANGUP "ath: no call to hangup"
   ATH_REL_ACTIVE_AND_ACCEPT "ATH: REL_ACTIVE_AND_ACCEPT"
   ATH_REL_ACTIVE "ATH: REL_ACTIVE , active_call_id=%hd"
   ATH_REL_HELD "ATH: REL_HELD , hold_call_id =%hd"
   ATH_FOR_GPRS_DIALUP_FAILURE "ATH is for GPRS dialup failure,do nothing and return OK"
   FOR_BT_HFP_CHLD_EQUAL_1X "For BT HFP : chld=1x , shall also retrieve held call"
   ATDL_NO_LAST_NUMBER_DIALED "ATDL: No last number dialed"
   ATA_FOR_DATA_CALL "ATA for data call "
   ATD_HDLR_CALL_MODIFY_REQUEST "atd_hdlr: call modify request return %d"
   ATD_HDLR_PROCESSING_ATD_GPRS_DIALUP_OR_DATA_CALL "atd_hdlr: Processing ATD GPRS dial-up or data call"
   ATD_HDLR_ATD_DIAL_VT_CALL "atd_hdlr: atd to dial VT call"
   ATD_HDLR_IMS_NOT_SUPPORT_DATA_CALL "atd_hdlr: IMS not support data call"


   INFO_HFP_AUTH_FAIL "HFP connecting"
   INFO_HFP_CONNECTED "HFP connected,port= %d"
   INFO_HFP_RAND_NUM "rand number, rand=0x%08x"
   INFO_HFP_SEQ1 "Seq1 =0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x"
   INFO_HFP_SEQ2 "Seq2 =0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x"
   INFO_HFP_VERNO "verno, verno=%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c"
   INFO_HFP_OUTPUT "Output =0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x"
   INFO_SET_ATH_FOR_DIALUP "Set ath_for_dialup=%d"
   INFO_ATCI_ROOT_SWITCH_FOR_HF "ATCI Root switches to new_sim_id=%d"


   INFO_REQUEST_TYPE "request_type = %d"


   INFO_ALPH_ID_PRESENT_NO_TEL_NUMBER "Only alph_id is present, no tel number"


   RMMI_CURRENT_ACCESS_TECHNOLOGY "AcT:%hd <= Rat:%Mrat_enum, cell_data_speed:%Ml4c_data_speed_support_enum, max_data_bearer_capa:%Ml4c_data_bearer_capablility_enum"


   RMMI_PARAM_D "param = %d"
   RMMI_PARAM_DD "param1 = %d , param2 = %d"
   RMMI_PARAM_U "param = %u"
   RMMI_PARAM_UU "param1 = %u , param2 = %u"
   RMMI_RESPONSE_SUPPRESS_ON "response suppress on"
   INFO_STRING_IS_PURE_ASCII_STRING_IS_NOT_STRATING_WITH_0X00 "string_is_pure_ascii() : string is not strating with 0x00"
   INFO_STRING_IS_PURE_ASCII_RETURN_FALSE_DUE_TO_STR_2 "string_is_pure_ascii() return false due to str[%d+2]=%x"
   INFO_STRING_IS_PURE_ASCII_RETURN_FALSE_DUE_TO_STR_3 "string_is_pure_ascii() return false due to str[%d+3]=%x"
   INFO_RMMI_PURE_ASCII "pure_ascii=%d"
   RMMI_ATO_HDLR "RMMI ATO, state = %Ml4c_state_enum"





   WARNING_CANNOT_PROCESS_MULTI_CMD "Warning: cid == 0xff! cannot process multi cmd"
   WARNING_RMMI_CMD_NOT_ALLOWED "cmd NOT allowed, cause = %u"
   WARNING_RMMI_CMD_ALLOWED "cmd allowed"


   WARNING_RMMI_PORT_OWNER_ERROR "Warning: port=%d,owner=%d"
   WARNING_RMMI_ERROR "Warning: error"
   WARNING_RMMI_SET_UART_STOP_TO_SEND_FLAG "set stop_to_send_flag,cid=%d"
   WARNING_RMMI_UART_STOP_TO_SEND "Warning: rmmi_uart_write_data stop to send,cid=%d"
   WARNING_ORI_MODULE_ID_WRONG "Warning: ori_module_id wrong, ori_module_id=%d"
   WARNING_ORI_MODULE_ID_EQUAL_MODULE_ID "Warning: ori_module_id equal module_id, ori_module_id=%d"
   WARNING_CMUX_PORT_ERROR "AT+CMUX isn't allowed on USB2"


   WARNING_ATH_DISCONNECT_AT_INITIAL_CALL "ATH: can only disconnect AT-initial call"
   WARNING_CHUP_NO_CALL_TO_HANGUP "AT+CHUP: no call to hangup"
   WARNING_CHUP_DISCONNECT_AT_INITIAL_CALL "AT+CHUP: can only disconnect AT-initial call"
   CHLD_EQUAL_1X "chld = 1x , x is not a active call ,call_state = %d"
   BLDN_NO_LAST_NUMBER_DIALED_EXIST "BLDN: No last number dialed exist"
   BLDN_NO_SIM_INSERTED "BLDN: no SIM inserted"
   ATD_MEMORY_DIAL_INVALID_MEMORY_LOCATION "ATD memory dial , invalid memory location "
   ATD_HDLR_DIAL_NUMBER_LENGTH_ILLEGAL "atd_hdlr : atd dial number length is illegal"
   WARNING_DIALUP_NOT_ALLOWED_ON_1T1R "Warning: Dialup is not allowed on 1T1R port %d"
   FUNC_RMMI_NEED_SET_TEST_NUM "Need to set Ecall test num"
   FUNC_RMMI_NEED_SET_RECONFIGURATION_NUM "Need to set Ecall reconfiguration num"



   WARNING_DISALLOW_GPRS_DIALUP_WHEN_MS_BUSY "Warning: disallow gprs dialup when MS is busy"
   WARNING_RMMI_GPRS_STRING_VALID_CMD_NOT_ALLOWED "Warning: gprs string valid ,but cmd not allowed"


   WARNING_EQ_FS_RETURN_ERROR "Warning: EQ fs action: %d return: %d"
   WARNING_THERMAL_PROT_RETURN_ERROR "Warning: thermal_prot_set_threshold return error"


   READ_FROM_UART_INCORRECT_OWNER "read_from_uart .current owner=%d"
   READ_FROM_UART_INVALID_CHANNEL "read_from_uart invalid channel"
   ERROR_INVALID_PORT "Invalid port !"
   ERROR_CHECK_KEY_PAD "Error: The output from custom_check_keypad_code() is invalid"
   ERROR_EXTRACT_NUMBER_FUNCTION_ILLEGAL_CHARACTER_ERROR "Error: extract number function: illegal character  ERROR"
   ERROR_RMMI_INVALID_NUMBER "number containing invalid char %c"
   ERROR_RMMI_ROOT_FIND_SRC_PORT_MAPPING "[RMMI_ROOT] Could not find empty source/port mapping"


   RMMI_CIEV "CIEV: %d, %d"
   CTMI "+CTMI"
   TIYI "+TTYI: %d"
   CTMS "+CTMS: %d, %d"
   CTMSET "+CTMSET: %d, %d"
   CTMCFG "+CTMCFG: %u, %u, %u, %u, %u"
# 1016 "./modem/l4/include/atci_trc.h"
   GATI_RECEIVE_RTR_FROM_UART "GATI waits for the reply from the APP"
   GATI_NOT_WRITE_ALLOW "GATI NOT WRITE ALLOW current_src_id=%d"
   GATI_WRITE_RMMI_ALL_FAIL "GATI write RMMI_ALL fail, remain_size: %d, data size: %d, cid: %d"
   GATI_WRITE_INTEGRITY_FAIL "GATI write integrity(URC) data fail, remain_size: %d, data size: %d, cid: %d"
   GATI_INPUT_DATA_IN_BINARY_MODE "GATI input data in binary mode"
   GATI_OUTPUT_NON_GATI_DATA "GATI output non-GATI data"
   GATI_NEED_SEND_RTW_IND "GATI need to send RTW indication to the APP"
   GATI_BUFFER_FULL "GATI linked-list buffer is full"
   GATI_REGISTER_FAIL "GATI Can't not find an empty entry. Please increase GATI_MAX_MODULE_COUNT"







   WARNING_EPOF_WAIT_MD3_PWROFF "Warning: wait MD3 power off, pending EPOF"

END_MODULE_MSG
# 16 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./driver/devdrv/trace/devdrv_trace.h" 1
# 16 "./driver/devdrv/trace/devdrv_trace.h"
START_MODULE_MSG MOD_DEVDRV 20
    DEVDRV_HELLO_WORLD "Hello World!!!"
    DEVDRV_CURRENT_HISR_ID "DEVDRV_HISR:%d"


    DCM_COUNTER "[DCM] DCM_CNT:%d"
    DCM_ACTIVE_CYCLES "[DCM] HW_DCM_CYCLES:%d"
    LPM_L1 "[DCM] L1 LPM CON/TIME/L2H/HIDUR:%x, %x, %x, %x"
    LPM_L1_CON "[DCM] L1 LPM_CON:%x"
    LPM_L1_STATUS "[DCM] L1 LPM_TTL_TIME/L2H/HIDUR:%x, %x, %x"
    LPM_L2 "[DCM] L2 LPM CON/TIME/L2H/HIDUR:%x, %x, %x, %x"
    LPM_L2_CON "[DCM] L2 LPM_CON:%x"
    LPM_L2_STATUS "[DCM] L2 LPM_TTL_TIME/L2H/HIDUR:%x, %x, %x"

END_MODULE_MSG
# 17 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./interface/service/event_info/ul1_event_info_trc.h" 1
# 252 "./interface/service/event_info/ul1_event_info_trc.h"
START_RANGE_MODULE_MSG MOD_EVENT_INFO 20 1 100
# 266 "./interface/service/event_info/ul1_event_info_trc.h"
   EVENT_INFO_GROUP1_UMTS_RLF "%Msim_interface_enum, UMTS Radio Link Failure"
# 304 "./interface/service/event_info/ul1_event_info_trc.h"
   EVENT_INFO_TRACE_WARNING_PACKET_ACCESS_FAILURE "%Msim_interface_enum, [Packet Access Fail] : Cause = %d"
# 319 "./interface/service/event_info/ul1_event_info_trc.h"
   EVENT_INFO_TRACE_WARNING_TDD_RATCM_gets_LBM_msg "%Msim_interface_enum, [RATCM] gets LBM message"
# 332 "./interface/service/event_info/ul1_event_info_trc.h"
   EVENT_INFO_TRACE_INFO_UL1D_RARE_FT_EVENT "[UL1D] event id=%u, group=%u, record flag=0x%08X"
   EVENT_INFO_TRACE_INFO_UL1AC_RARE_FT_EVENT "[UL1AC] event id=%u, group=%u, record flag=0x%08X"


MOD_EVENT_INFO 1 100 END_RANGE_MODULE_MSG
# 18 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./interface/service/event_info/gas_event_info_trc.h" 1
# 272 "./interface/service/event_info/gas_event_info_trc.h"
START_RANGE_MODULE_MSG MOD_EVENT_INFO 20 101 600
# 286 "./interface/service/event_info/gas_event_info_trc.h"
   EVENT_INFO_GROUP1_PS_MTBF "%Msim_interface_enum, MTBF is supported by NW"
   EVENT_INFO_GROUP1_PS_HANDOVER "%Msim_interface_enum, PS Handover is supported by NW"
   EVENT_INFO_GROUP1_PS_RTTI_SUPPORT "%Msim_interface_enum, 2G R7 RTTI is supported by NW"
   EVENT_INFO_GROUP1_PS_RTTI_ASSIGN "%Msim_interface_enum, 2G R7 RTTI is triggered by NW"
   EVENT_INFO_GROUP1_PS_FANR_SUPPORT "%Msim_interface_enum, 2G R7 FANR is triggered by NW"
   EVENT_INFO_GROUP1_PS_DLDC_SUPPORT "%Msim_interface_enum, 2G R7 DLDC is triggered by NW"
   EVENT_INFO_GROUP1_PS_RLC_NON_PERSISTENT_MODE_SUPPORT "%Msim_interface_enum, 2G R7 RLC NON PERSISTENT MODE is triggered by NW"
   EVENT_INFO_GROUP1_PS_EGPRS2_SUPPORT "%Msim_interface_enum, 2G R7 EGPRS2 is triggered by NW"
   EVENT_INFO_GROUP1_PS_FLEXIBLE_TN_SUPPORT "%Msim_interface_enum, 2G R7 Flexible Timeslot is triggered by NW"


   EVENT_INFO_GROUP2_CELL_RESELECT "%Msim_interface_enum, Cell reselection [%d ->%d], Type[%d]"
   EVENT_INFO_GROUP2_MEASURE_3G_ALLOW "%Msim_interface_enum, 3G measurement allow in 2G dedicate"
   EVENT_INFO_GROUP2_CELL_SEL_TRIG_BY_RESEL_FAIL "Cell selection triggered by cell reselection failure"
   EVENT_INFO_GROUP2_CELL_SEL_TRIG_BY_REDIRECTION "Cell selection triggered by IR blind search"


   EVENT_INFO_GROUP3_HANDOVER_ATTEMPT "%Msim_interface_enum, Handover Attempt [%d ->%d], Type[%d]"
# 352 "./interface/service/event_info/gas_event_info_trc.h"
   EVENT_INFO_TRACE_WARNING_RLF "%Msim_interface_enum, Dropped Call"
   EVENT_INFO_TRACE_WARNING_HO_FAILURE "%Msim_interface_enum, Handover to %d failure, cause[%d]"
   EVENT_INFO_TRACE_WARNING_EGPRS_OUT_OF_MEMORY "%Msim_interface_enum, [EGPRS Out of Memory]"
   EVENT_INFO_TRACE_WARNING_T3168_TIMEOUT "%Msim_interface_enum, [T3168 Timeout]"
# 373 "./interface/service/event_info/gas_event_info_trc.h"
   EVENT_INFO_TRACE_FUNC_Repeated_ACCH_FOUND "%Msim_interface_enum, Repeated ACCH found"
   EVENT_INFO_TRACE_FUNC_G2U_IR_NACC "%Msim_interface_enum, [RR]PCCN sending for IR NACC, please infroma GAS owner!!"
   EVENT_INFO_TRACE_FUNC_IR_RESEL_CRITERIA3_NOT_SATISFIED "%Msim_interface_enum, [RR]IR resel criteria 3 not satisfied, please inform GAS owner!!"
   EVENT_INFO_TRACE_FUNC_FDD_REP_THR_2 "%Msim_interface_enum, [GAS][R5][MEAS] FDD_REPORTING_THRESHOLD_2 is present"
   EVENT_INFO_TRACE_FUNC_IR2G3_REDIRECTION "%Msim_interface_enum, IR2G3 Redirection found"

   EVENT_INFO_TRACE_FUNC_MAX_OUTPUT_CONTROL "%Msim_interface_enum, Enhanced control of max output found"
   EVENT_INFO_TRACE_FUNC_SI2N "%Msim_interface_enum, [GAS][R6][SI] System Inofrmation Type 2N (SI2N) received!!"
   EVENT_INFO_TRACE_FUNC_PSCS "%Msim_interface_enum, [GAS][R6][PSS/PPS] Packet Serving Cell SI (PSCS) received!!"

   EVENT_INFO_TRACE_FUNC_UTRAN_PRIORITY_RESELECTION "%Msim_interface_enum, [GAS][R8][UTRAN] Priority cell reselection is used!!"
   EVENT_INFO_TRACE_FUNC_EUTRAN_PRIORITY_RESELECTION "%Msim_interface_enum, [GAS][R8][EUTRAN] Priority cell reselection is used!!"
   EVENT_INFO_TRACE_FUNC_UTRAN_CSG "%Msim_interface_enum, [GAS][R8][UTRAN] Configuration of CSG cells found!!"
   EVENT_INFO_TRACE_FUNC_EUTRAN_CSG "%Msim_interface_enum, [GAS][R8][EUTRAN] Configuration of CSG cells found!!"
   EVENT_INFO_TRACE_FUNC_EUTRAN_MEAS_CONTROL "%Msim_interface_enum, [GAS][R8][EUTRAN] Configuration of meas control parameter found!!"
   EVENT_INFO_TRACE_FUNC_FAST_ACQUISITION "%Msim_interface_enum, [GAS][R8][SI] Fast acquisition is used!!"

   EVENT_INFO_TRACE_FUNC_UTRAN_CSG_REPORTING "%Msim_interface_enum, [GAS][R8][UTRAN] Configuration of CSG cells reporting found!!"
   EVENT_INFO_TRACE_FUNC_EUTRAN_CSG_REPORTING "%Msim_interface_enum, [GAS][R8][EUTRAN] Configuration of CSG cells reporting found!!"
   EVENT_INFO_TRACE_FUNC_IR2G4_REDIRECTION "%Msim_interface_enum, IR2G4 Redirection found"
# 429 "./interface/service/event_info/gas_event_info_trc.h"
MOD_EVENT_INFO 101 600 END_RANGE_MODULE_MSG
# 19 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./interface/service/event_info/ul2_event_info_trc.h" 1
# 260 "./interface/service/event_info/ul2_event_info_trc.h"
START_RANGE_MODULE_MSG MOD_EVENT_INFO 20 601 700
# 278 "./interface/service/event_info/ul2_event_info_trc.h"
   EVENT_INFO_GROUP3_ADJUST_ACTIVATION_CFN "%Msim_interface_enum, Adjust CFN to TTI Boundary : Original CFN = %d,  Adjusted CFN = %d, Max TTI Boundary = %u"
# 314 "./interface/service/event_info/ul2_event_info_trc.h"
   EVENT_INFO_TRACE_WARNING_TX_DCH_DELAY "%Msim_interface_enum, [DCH DELAY HAPPENS] : CFN = %u, Total occurence = %u"
   EVENT_INFO_TRACE_WARNING_Cipher_Activation_Time_Delayed "%Msim_interface_enum, [Cipher Activation Time is delayed !!] : Adjusted CFN = %u, HFN = %x"
# 343 "./interface/service/event_info/ul2_event_info_trc.h"
MOD_EVENT_INFO 601 700 END_RANGE_MODULE_MSG
# 20 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./interface/service/event_info/uas_event_info_trc.h" 1
# 280 "./interface/service/event_info/uas_event_info_trc.h"
START_RANGE_MODULE_MSG MOD_EVENT_INFO 20 701 1200
# 294 "./interface/service/event_info/uas_event_info_trc.h"
   EVENT_INFO_GROUP1_IRCR_TO_UTRAN "%Msim_interface_enum, Cell reselection to UTRAN"
   EVENT_INFO_GROUP1_SRNS_relocation "%Msim_interface_enum, SRNS relocation"
   EVENT_INFO_GROUP1_UMTS_HHO_revert "%Msim_interface_enum, UMTS HHO revert"
   EVENT_INFO_GROUP1_CELL_RESEL_FROM_UTRAN "%Msim_interface_enum, Cell Reselection From UTRAN"
   EVENT_INFO_GROUP1_INTER_FREQ_CELL_RESEL "%Msim_interface_enum, UMTS Inter-Frequency Cell Reselection"
   EVENT_INFO_GROUP1_CELL_RESEL_FAILURE "%Msim_interface_enum, UMTS Cell Reselection Failure"
   EVENT_INFO_GROUP1_PDCP_RFC2507 "%Msim_interface_enum, RFC2507 is supported by NW"


   EVENT_INFO_GROUP2_UMTS_HHO "%Msim_interface_enum, UMTS HHO"



   EVENT_INFO_GROUP2_SLCE_PS_RATE "%Msim_interface_enum, [PS_RATE] RAB_ID=%d, RB_ID=%u, ul_trch_id=%u, dl_trch_id=%u, ul_rate=%u, dl_rate=%u"
   EVENT_INFO_GROUP2_INTRA_FREQ_CELL_RESEL "%Msim_interface_enum, UMTS Intra-Frequency Cell Reselection"
# 358 "./interface/service/event_info/uas_event_info_trc.h"
   EVENT_INFO_TRACE_WARNING_RRCE_ABORT "%Msim_interface_enum, RRCE ABORT CONFIGURATION"
   EVENT_INFO_TRACE_WARNING_TGPS_OVERLAP_XD "%Msim_interface_enum, TGPS OVERLAP with [%d]"
   EVENT_INFO_TRACE_WARNING_OOS_during_SRNS_relocation "%Msim_interface_enum, OOS during SRNS relocation"
   EVENT_INFO_TRACE_WARNING_RLC_unrecoverable_during_SRNS_relocation "%Msim_interface_enum, RLC unrecoverable during SRNS relocation"
   EVENT_INFO_TRACE_WARNING_cell_reselection_during_SRNS_relocation "%Msim_interface_enum, cell reselection during SRNS relocation"
   EVENT_INFO_TRACE_WARNING_Inter_freq_SIB_collection_during_SRNS_relocation "%Msim_interface_enum, Inter freq SIB collection during SRNS relocation"
   EVENT_INFO_TRACE_WARNING_Integrity_Failed "%Msim_interface_enum, Integrity failed"
# 385 "./interface/service/event_info/uas_event_info_trc.h"
   EVENT_INFO_TRACE_FUNC_TFCC_received "%Msim_interface_enum, Transport Fortmat Combination Control"
   EVENT_INFO_TRACE_FUNC_FAST_DORMANCY "%Msim_interface_enum, Fast Dormancy is configured in cell(%d/%d), T323 = %MRRC_T_323."
   EVENT_INFO_TRACE_FUNC_START_BCH_TO_COLLECT_SIB "%Msim_interface_enum, Start BCH to collect SIB on cell(%d/%d)."

   EVENT_INFO_TRACE_FUNC_MAC_D_HFN_INITIAL_VALUE_IS_RECEIVED "%Msim_interface_enum, MAC-d HFN initial value is received"
   EVENT_INFO_TRACE_FUNC_ONE_SIDED_RLC_REESTABLISH_IS_CONFIGURED "%Msim_interface_enum, One sided RLC re-establishment is configured for RB %d"
   EVENT_INFO_TRACE_FUNC_PRECONFIGURED_CONNECTION_ESTABLISHMENT "%Msim_interface_enum, Preconfigured Connection Establishment"
   EVENT_INFO_TRACE_FUNC_RECEIVE_TM_TFCC "%Msim_interface_enum, TM TFCC is received"
   EVENT_INFO_TRACE_FUNC_LOSSLESS_DL_RLC_SIZE_CHANGE "%Msim_interface_enum, RB ID %d has lossless DL RLC PDU size change from %d to %d."
   EVENT_INFO_TRACE_FUNC_LOSSY_DL_RLC_SIZE_CHANGE "%Msim_interface_enum, RB ID %d has lossy DL RLC PDU size change from %d to %d."
   EVENT_INFO_TRACE_FUNC_3G2_IRNACC "%Msim_interface_enum, 3G2 IR NACC"


   EVENT_INFO_TRACE_FUNC_GROUP_URNTI "%Msim_interface_enum, Group URNTI"


   EVENT_INFO_TRACE_FUNC_DL_COMM_INFO_FDPCH "%Msim_interface_enum, F-DPCH is configured"
   EVENT_INFO_TRACE_FUNC_HS_DPCCH_ACK_NACK_WITH_PREAMBLE_POSTAMBLE "%Msim_interface_enum, HS-DPCCH ACK/NACK Enhancement with preamble/postamble"
   EVENT_INFO_TRACE_FUNC_POST_VERIFICATION_PERIOD_IS_USED "%Msim_interface_enum, Post verification period is used"
   EVENT_INFO_TRACE_FUNC_TMHHO_WITHOUT_SYNC_A "%Msim_interface_enum, TMHHO without sync A"
   EVENT_INFO_TRACE_FUNC_DELAY_RESTRICTION_FLAG_IS_CONFIGURED "%Msim_interface_enum, Delay restriction flag is configured."
   EVENT_INFO_TRACE_FUNC_3G2_PS_HO "%Msim_interface_enum, 3G2 IR PS HO"
   EVENT_INFO_TRACE_FUNC_DSAC_IS_CONFIGURED "%Msim_interface_enum, DSAC is configured."
   EVENT_INFO_TRACE_FUNC_NETWORK_SHARING_IS_CONFIGURED "%Msim_interface_enum, Network Sharing is configured."


   EVENT_INFO_TRACE_FUNC_DEFERRED_SIB11_12_18_19_READING "%Msim_interface_enum, Deferred SIB11/12/18/19 Reading is configured in cell(%d/%d)"
   EVENT_INFO_TRACE_FUNC_PLMN_SELECTION_PING_PONG_CONTROL "%Msim_interface_enum, PLMN Selection Ping-Pong Control is configured in cell(%d/%d), q_QualMin_Offset = %d, q_RxlevMin_Offset = %d"
   EVENT_INFO_TRACE_FUNC_ENHANCED_CELL_FACH_STATE "%Msim_interface_enum, Enhanced Cell FACH State is configured in cell(%d/%d)"
   EVENT_INFO_TRACE_FUNC_ENHANCED_CELL_PCH_STATE "%Msim_interface_enum, Enhanced Cell PCH State is configured in cell(%d/%d)"
   EVENT_INFO_TRACE_FUNC_TWODRX_IS_CONFIGURED "%Msim_interface_enum, TOW DRX in Cell_PCH/URA_PCH is configured [%d->%d]"


   EVENT_INFO_TRACE_FUNC_ABSOLUTE_PRIORITY_BASED_CELL_RESELECTION "%Msim_interface_enum, Absolute Priority Based Cell Re-selection is configured in cell(%d/%d): FDD=%Mkal_bool, TDD=%Mkal_bool, GSM=%Mkal_bool, E-UTRA=%Mkal_bool"
   EVENT_INFO_TRACE_FUNC_HOME_NODE_B_NAME "%Msim_interface_enum, Home Node-B Name is configured in cell(%d/%d)"
   EVENT_INFO_TRACE_FUNC_CSG_ID "%Msim_interface_enum, CSG ID is configured in SIB3 of cell(%d/%d)"
   EVENT_INFO_TRACE_FUNC_CSG_IND "%Msim_interface_enum, CSG Indicator is configured in MIB of cell(%d/%d)"
   EVENT_INFO_TRACE_FUNC_PPACR "%Msim_interface_enum, Paging Permission with Access Control is configured in cell(%d/%d)"
   EVENT_INFO_TRACE_FUNC_HS_DSCH_DRX_IN_CELL_FACH "%Msim_interface_enum, HS-DSCH DRX in CELL_FACH is configured in cell(%d/%d)"
   EVENT_INFO_TRACE_FUNC_COMMON_E_DCH "%Msim_interface_enum, Common E-DCH is configured in cell(%d/%d)"
   EVENT_INFO_TRACE_FUNC_MULTIPLE_PLMN_IN_SIB18 "%Msim_interface_enum, Multiple PLMN in SIB18 is configured in cell(%d/%d)"
   EVENT_INFO_TRACE_FUNC_PPACR_IS_CONFIGURED "%Msim_interface_enum, PPACR is configured."
   EVENT_INFO_TRACE_FUNC_APBCR_3G3_INTER_FREQ_RESELECTION "%Msim_interface_enum, [APBCR] 3G3 inter freq cell reselection in %MRRC_DB_RRC_StateType"
   EVENT_INFO_TRACE_FUNC_APBCR_3G2_INTER_RAT_RESELECTION "%Msim_interface_enum, [APBCR] 3G2 inter rat cell reselection in %MRRC_DB_RRC_StateType"
   EVENT_INFO_TRACE_FUNC_CELL_FACH_LTE_APBCR "%Msim_interface_enum, CELL FACH LTE APBCR is configured in cell(%d/%d) as HIGH(%d)/ALL(%d)"


   EVENT_INFO_TRACE_FUNC_APBCR_3G4_INTER_RAT_RESELECTION "%Msim_interface_enum, [APBCR] 3G4 inter rat cell reselection in %MRRC_DB_RRC_StateType"
   EVENT_INFO_TRACE_FUNC_3G4_CSG_AUTO_RESELECTION "%Msim_interface_enum, [CSG] 3G4 CSG AUTO cell reselection in %MRRC_DB_RRC_StateType"
# 500 "./interface/service/event_info/uas_event_info_trc.h"
MOD_EVENT_INFO 701 1200 END_RANGE_MODULE_MSG
# 21 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./interface/service/event_info/cc_event_info_trc.h" 1
# 260 "./interface/service/event_info/cc_event_info_trc.h"
START_RANGE_MODULE_MSG MOD_EVENT_INFO 20 1201 1300
# 309 "./interface/service/event_info/cc_event_info_trc.h"
   EVENT_INFO_TRACE_FUNC_CC_CCBS "%Msim_interface_enum, [CC]CCBS received, please inform CC owner!!"
   EVENT_INFO_TRACE_FUNC_CC_AOC "%Msim_interface_enum, [CC]AOC paramters received, please inform CC owner!!"
# 328 "./interface/service/event_info/cc_event_info_trc.h"
MOD_EVENT_INFO 1201 1300 END_RANGE_MODULE_MSG
# 22 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./interface/service/event_info/mm_event_info_trc.h" 1
# 252 "./interface/service/event_info/mm_event_info_trc.h"
START_RANGE_MODULE_MSG MOD_EVENT_INFO 20 1301 1400
# 266 "./interface/service/event_info/mm_event_info_trc.h"
   EVENT_INFO_GROUP1_MT_GPRS_DETACH "%Msim_interface_enum, MT GPRS Detach, Type: %d"
   EVENT_INFO_GROUP1_GMM_R7_T3319_DETECTION "%Msim_interface_enum, [GMM] R7 feature T3319 detected, Value: %d"
# 328 "./interface/service/event_info/mm_event_info_trc.h"
MOD_EVENT_INFO 1301 1400 END_RANGE_MODULE_MSG
# 23 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./interface/service/event_info/ratdm_event_info_trc.h" 1
# 252 "./interface/service/event_info/ratdm_event_info_trc.h"
START_RANGE_MODULE_MSG MOD_EVENT_INFO 20 1401 1500
# 330 "./interface/service/event_info/ratdm_event_info_trc.h"
MOD_EVENT_INFO 1401 1500 END_RANGE_MODULE_MSG
# 24 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./interface/service/event_info/sm_event_info_trc.h" 1
# 252 "./interface/service/event_info/sm_event_info_trc.h"
START_RANGE_MODULE_MSG MOD_EVENT_INFO 20 1501 1600
# 268 "./interface/service/event_info/sm_event_info_trc.h"
   EVENT_INFO_SM_TRACE_GROUP_3_PS_CALL_NW_ASSIGNED_IP "%Msim_interface_enum, PS Call NW assigned IP(%d.%d.%d.%d)"
# 294 "./interface/service/event_info/sm_event_info_trc.h"
   EVENT_INFO_SM_TRACE_GROUP_7_EXTERNAL_PS_CALL_ATTEMPT "%Msim_interface_enum, External PS Call Attempt"
   EVENT_INFO_SM_TRACE_GROUP_7_EXTERNAL_PS_CALL_SUCCESS "%Msim_interface_enum, External PS Call Success"
   EVENT_INFO_SM_TRACE_GROUP_7_EXTERNAL_PS_CALL_FAIL "%Msim_interface_enum, External PS Call Fail (%Mps_cause_enum)"
   EVENT_INFO_SM_TRACE_GROUP_7_MO_EXTERNAL_PS_CALL_DISCONNECT "%Msim_interface_enum, MO External PS Call Disconnect (%Mps_cause_enum)"
   EVENT_INFO_SM_TRACE_GROUP_7_MT_EXTERNAL_PS_CALL_DISCONNECT "%Msim_interface_enum, MT External PS Call Disconnect (%Mps_cause_enum)"
   EVENT_INFO_SM_TRACE_GROUP_7_INTERNAL_PS_CALL_ATTEMPT "%Msim_interface_enum, Internal PS Call Attempt"
   EVENT_INFO_SM_TRACE_GROUP_7_INTERNAL_PS_CALL_SUCCESS "%Msim_interface_enum, Internal PS Call Success"
   EVENT_INFO_SM_TRACE_GROUP_7_INTERNAL_PS_CALL_FAIL "%Msim_interface_enum, Internal PS Call Fail (%Mps_cause_enum)"
   EVENT_INFO_SM_TRACE_GROUP_7_MO_INTERNAL_PS_CALL_DISCONNECT "%Msim_interface_enum, MO Internal PS Call Disconnect (%Mps_cause_enum)"
   EVENT_INFO_SM_TRACE_GROUP_7_MT_INTERNAL_PS_CALL_DISCONNECT "%Msim_interface_enum, MT Internal PS Call Disconnect (%Mps_cause_enum)"

   EVENT_INFO_SM_TRACE_GROUP_7_MO_PS_CALL_PARAMETER_MODIFIED "%Msim_interface_enum, MO PS Call Parameter Modified"
   EVENT_INFO_SM_TRACE_GROUP_7_MT_PS_CALL_PARAMETER_MODIFIED "%Msim_interface_enum, MT PS Call Parameter Modified"

   EVENT_INFO_SM_TRACE_GROUP_7_PS_CALL_WITH_STATIC_IP_ADDRESS_REQUEST "%Msim_interface_enum, PS Call requesting Static IP Address (%d.%d.%d.%d)"
# 363 "./interface/service/event_info/sm_event_info_trc.h"
MOD_EVENT_INFO 1501 1600 END_RANGE_MODULE_MSG
# 25 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./interface/service/event_info/sms_event_info_trc.h" 1
# 260 "./interface/service/event_info/sms_event_info_trc.h"
START_RANGE_MODULE_MSG MOD_EVENT_INFO 20 1601 1700
# 274 "./interface/service/event_info/sms_event_info_trc.h"
   EVENT_INFO_GROUP1_SMS_RECEIVED "%Msim_interface_enum, SMS Received [%d]"
   EVENT_INFO_GROUP1_SMS_SENDING_ATTEMPT "%Msim_interface_enum, SMS Sending Attempt [%d]"
   EVENT_INFO_GROUP1_SMS_SENDING_COMPLETED "%Msim_interface_enum, SMS Sending Completed [%d]"
   EVENT_INFO_GROUP1_SMS_SENDING_FAILED "%Msim_interface_enum, SMS Sending Failed [%d]"
# 337 "./interface/service/event_info/sms_event_info_trc.h"
MOD_EVENT_INFO 1601 1700 END_RANGE_MODULE_MSG
# 26 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./interface/service/event_info/llc_event_info_trc.h" 1
# 259 "./interface/service/event_info/llc_event_info_trc.h"
START_RANGE_MODULE_MSG MOD_EVENT_INFO 20 1701 1800
# 273 "./interface/service/event_info/llc_event_info_trc.h"
   EVENT_INFO_GROUP1_LLC_ACK_MODE "%Msim_interface_enum, [LLC] ACK mode is activated on SAPI:%d"



   EVENT_INFO_GROUP3_LLC_CIPHER_STATUS "%Msim_interface_enum, [LLC] Cipher is ON. Algo:%d"
# 335 "./interface/service/event_info/llc_event_info_trc.h"
MOD_EVENT_INFO 1701 1800 END_RANGE_MODULE_MSG
# 27 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./interface/service/event_info/sndcp_event_info_trc.h" 1
# 259 "./interface/service/event_info/sndcp_event_info_trc.h"
START_RANGE_MODULE_MSG MOD_EVENT_INFO 20 1801 1900
# 274 "./interface/service/event_info/sndcp_event_info_trc.h"
   EVENT_INFO_GROUP2_SNDCP_RFC1144_SUPPORT "%Msim_interface_enum, [SNDCP] NW supports RFC1144 Header Compression"
   EVENT_INFO_GROUP2_SNDCP_HC_NOT_SUPPORT "%Msim_interface_enum, [SNDCP] NW NOT support Header Compression "
   EVENT_INFO_GROUP2_SNDCP_RFC2507_SUPPORT "%Msim_interface_enum, [SNDCP] NW supports RFC2507 Header Compression"
   EVENT_INFO_GROUP2_SNDCP_V42BIS_SUPPORT "%Msim_interface_enum, [SNDCP] NW supports V42bis Data Compression "
   EVENT_INFO_GROUP2_SNDCP_DC_NOT_SUPPORT "%Msim_interface_enum, [SNDCP] NW NOT support Data Compression "
# 339 "./interface/service/event_info/sndcp_event_info_trc.h"
MOD_EVENT_INFO 1801 1900 END_RANGE_MODULE_MSG
# 28 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./interface/service/event_info/l4_event_info_trc.h" 1
# 252 "./interface/service/event_info/l4_event_info_trc.h"
START_RANGE_MODULE_MSG MOD_EVENT_INFO 20 1901 2000
# 298 "./interface/service/event_info/l4_event_info_trc.h"
   EVENT_INFO_GROUP6_NORMAL_CALL_ATTEMPT "%Msim_interface_enum, Nomal Call Attempt"
   EVENT_INFO_GROUP6_ECC_CALL_ATTEMPT "%Msim_interface_enum, Emergency Call Attempt"
   EVENT_INFO_GROUP6_MT_CALL_RECEIVED "%Msim_interface_enum, Call Received"
   EVENT_INFO_GROUP6_CALL_DISCONNECTED "%Msim_interface_enum, Call Disconnected"
   EVENT_INFO_GROUP6_MO_CALL_RETRY "%Msim_interface_enum, MO CALL Retry"
   EVENT_INFO_GROUP6_MO_SS_RETRY "%Msim_interface_enum, MO SS Retry"
# 338 "./interface/service/event_info/l4_event_info_trc.h"
   EVENT_INFO_TRACE_FUNC_CC_CNAP "%Msim_interface_enum, [CC]CNAP received, please inform CC owner!!"
# 355 "./interface/service/event_info/l4_event_info_trc.h"
MOD_EVENT_INFO 1901 2000 END_RANGE_MODULE_MSG
# 29 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./interface/service/event_info/ppp_event_info_trc.h" 1
# 260 "./interface/service/event_info/ppp_event_info_trc.h"
START_RANGE_MODULE_MSG MOD_EVENT_INFO 20 2001 2100
# 277 "./interface/service/event_info/ppp_event_info_trc.h"
   EVENT_INFO_PPP_TRACE_GROUP_3_DIALUP_PC_GIVE_UP_REQUESTING_DNS "%Msim_interface_enum, Dialup PC give up requesting DNS"
# 333 "./interface/service/event_info/ppp_event_info_trc.h"
MOD_EVENT_INFO 2001 2100 END_RANGE_MODULE_MSG
# 30 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./driver/tty/inc/tty_trace.h" 1
# 12 "./driver/tty/inc/tty_trace.h"
# 1 "interface/service/dhl/dhl_def.h" 1
# 301 "interface/service/dhl/dhl_def.h"
# 1 "interface/service/kal/kal_public_api.h" 1
# 348 "interface/service/kal/kal_public_api.h"
# 1 "interface/service/kal/kal_public_defs.h" 1
# 349 "interface/service/kal/kal_public_api.h" 2
# 358 "interface/service/kal/kal_public_api.h"
static inline void * kal_mem_cpy(void* dest, const void* src, kal_uint32 size)
{
    return memcpy ( dest, src, size );
}

static inline void * kal_mem_set(void* dest, kal_int32 value, kal_uint32 size)
{
    return memset ( dest, value, size );
}

static inline kal_int32 kal_mem_cmp(const void* src1, const void* src2, kal_uint32 size)
{
    return memcmp ( src1, src2, size );
}

static inline void * kal_mem_bwcpy(void* dest, const void* src, kal_uint32 size)
{
    char *destaddr = (char*)dest+(size-1);
    char const *srcaddr = (char*)src+(size-1);
    while (size-- > 0) *destaddr-- = *srcaddr--;
    return destaddr;
}
# 407 "interface/service/kal/kal_public_api.h"
extern kal_char *kal_strtok_r(kal_char *string, const kal_char *seperators, kal_char **ppLast);
# 426 "interface/service/kal/kal_public_api.h"
extern char *kal_itoa(int value, char *str, int radix);




extern int kal_wstrlen(const WCHAR *wstr);
extern WCHAR *kal_wstrcpy(WCHAR *to, const WCHAR *from);
extern WCHAR *kal_wstrncpy(WCHAR *to, const WCHAR *from, int n);
extern int kal_wstrcmp(const WCHAR *s1, const WCHAR *s2);
extern int kal_wstrncmp(const WCHAR *s1, const WCHAR *s2, int n);
extern WCHAR *kal_wstrcat(WCHAR *s1, const WCHAR *s2);
extern WCHAR *kal_wstrncat(WCHAR *s1, const WCHAR *s2, int n);
extern WCHAR *kal_wstrchr(const WCHAR *s, int c);
extern WCHAR *kal_wstrrchr(const WCHAR *str, int ch);




extern int kal_dchar_strlen(const char *wstr);
extern char *kal_dchar_strcpy(char *to, const char *from);
extern char *kal_dchar_strncpy(char *to, const char *from, int n);
extern int kal_dchar_strcmp(const char *s1, const char *s2);
extern int kal_dchar_strncmp(const char *s1, const char *s2, int n);
extern char *kal_dchar_strcat(char *s1, const char *s2);
extern char *kal_dchar_strncat(char *s1, const char *s2, int n);
extern char *kal_dchar_strchr(const char *s, int c);
extern char *kal_dchar_strrchr(const char *str, int ch);
extern void kal_dchar2char(WCHAR *outstr, char* tostr);
extern void kal_wsprintf(WCHAR *outstr, char *fmt,...);
# 637 "interface/service/kal/kal_public_api.h"
kal_bool kal_query_systemInit(void);
# 651 "interface/service/kal/kal_public_api.h"
static inline boot_mode_type kal_query_boot_mode(void)
{
    extern boot_mode_type system_boot_mode;
    return system_boot_mode;
}
# 677 "interface/service/kal/kal_public_api.h"
void *kal_get_current_thread_ID(void);
# 695 "interface/service/kal/kal_public_api.h"
void kal_sleep_task(kal_uint32 time_in_ticks);
# 710 "interface/service/kal/kal_public_api.h"
kal_taskid kal_get_current_task(void);
# 723 "interface/service/kal/kal_public_api.h"
kal_uint32 kal_get_current_task_priority(void);
# 741 "interface/service/kal/kal_public_api.h"
kal_task_status kal_get_task_status(kal_taskid taskid);
# 760 "interface/service/kal/kal_public_api.h"
extern void kal_set_active_module_id(module_type module_id);
# 778 "interface/service/kal/kal_public_api.h"
extern module_type kal_get_active_module_id(void);
# 794 "interface/service/kal/kal_public_api.h"
extern kal_taskid kal_get_task_by_moduleID(module_type modele_id);
# 809 "interface/service/kal/kal_public_api.h"
extern kal_uint32 kal_get_task_total_number(void);
# 823 "interface/service/kal/kal_public_api.h"
 extern kal_uint32 kal_get_send_msg_module_id_total_number(void);
# 841 "interface/service/kal/kal_public_api.h"
extern kal_status kal_priority_transfer(kal_uint32 dest_mod_id);
# 856 "interface/service/kal/kal_public_api.h"
extern kal_status kal_priority_revoke(kal_uint32 dest_mod_id);
# 871 "interface/service/kal/kal_public_api.h"
 extern kal_status kal_task_mode_register(void);
# 888 "interface/service/kal/kal_public_api.h"
extern kal_status kal_task_mode_switch(kal_uint32 dest_mod_id,kal_uint32 mode);
# 905 "interface/service/kal/kal_public_api.h"
extern kal_uint32 kal_get_current_hisr_index(void);
# 924 "interface/service/kal/kal_public_api.h"
void kal_check_stack(void);
# 938 "interface/service/kal/kal_public_api.h"
void kal_activate_hisr(kal_hisrid ext_hisr_id);
# 953 "interface/service/kal/kal_public_api.h"
kal_bool kal_if_hisr(void);
# 968 "interface/service/kal/kal_public_api.h"
kal_bool kal_if_lisr(void);
# 977 "interface/service/kal/kal_public_api.h"
extern void* construct_int_local_para(kal_uint16 local_para_size, kal_uint32 auto_reset,
                                      const kal_char* file_ptr, kal_uint32 line);
extern void free_int_local_para(local_para_struct *local_para_ptr, const kal_char* file, kal_uint32 line);
extern void free_int_local_para_r(local_para_struct *local_para_ptr, const kal_char* file, kal_uint32 line);
extern void* construct_int_peer_buff(kal_uint16 pdu_len, kal_uint16 header_len, kal_uint16 tail_len,
                                     const kal_char* file_name_ptr, kal_uint32 line);
extern void free_int_peer_buff(peer_buff_struct *pdu_ptr, const kal_char* file, kal_uint32 line);
extern void free_int_peer_buff_r(peer_buff_struct *pdu_ptr, const kal_char* file, kal_uint32 line);
extern void destroy_int_ilm(ilm_struct *ilm_ptr, const kal_char* file_name, kal_uint32 line);
# 1179 "interface/service/kal/kal_public_api.h"
extern kal_bool hold_local_para( local_para_struct *local_para_ptr );
# 1199 "interface/service/kal/kal_public_api.h"
extern kal_bool hold_local_para_r(local_para_struct *local_para_ptr);
# 1218 "interface/service/kal/kal_public_api.h"
void* get_local_para_ptr(local_para_struct *local_para_ptr, kal_uint16 *local_para_len_ptr);
# 1236 "interface/service/kal/kal_public_api.h"
extern kal_bool hold_peer_buff( peer_buff_struct *peer_buff_ptr);
# 1255 "interface/service/kal/kal_public_api.h"
extern kal_bool hold_peer_buff_r(peer_buff_struct *peer_buff_ptr);
# 1272 "interface/service/kal/kal_public_api.h"
void* get_peer_buff_pdu(peer_buff_struct *peer_buff_ptr, kal_uint16 *length_ptr);
# 1293 "interface/service/kal/kal_public_api.h"
extern void prepend_to_peer_buff( peer_buff_struct *peer_buff_ptr,
                                  void *header_data_ptr,
                                  kal_uint16 header_len);
# 1316 "interface/service/kal/kal_public_api.h"
extern void append_to_peer_buff( peer_buff_struct *peer_buff_ptr,
                                 void *tail_data_ptr,
                                 kal_uint16 tail_len);
# 1340 "interface/service/kal/kal_public_api.h"
extern void remove_head_of_peer_buff(peer_buff_struct *peer_buff_ptr, kal_uint16 head_len);
# 1360 "interface/service/kal/kal_public_api.h"
extern void remove_tail_of_peer_buff( peer_buff_struct *peer_buff_ptr,
                                      kal_uint16 tail_len);
# 1382 "interface/service/kal/kal_public_api.h"
extern void update_peer_buff_header(peer_buff_struct *peer_buff_ptr, kal_uint16 new_head_len,
                                    kal_uint16 new_pdu_len, kal_uint16 new_tail_len);
# 1405 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_ext_queue(ilm_struct *ilm_ptr);
# 1430 "interface/service/kal/kal_public_api.h"
kal_bool msg_send(ilm_struct *ilm_ptr);
# 1468 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_adt(ilm_struct *ilm_ptr, translator_adt_enc_callback_t translator_cb, ilm_free_callback_t free_cb);
# 1494 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_to_int_head(ilm_struct *ilm_ptr);
# 1517 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_to_head(ilm_struct *ilm_ptr);
# 1540 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_to_int_head6(module_type _src_mod_id, module_type _dest_mod_id, sap_type _sap_id, msg_type _msg_id,
                           local_para_struct *_local_para_ptr, peer_buff_struct *_peer_buff_ptr);
# 1572 "interface/service/kal/kal_public_api.h"
kal_bool msg_send6(module_type _src_mod_id, module_type _dest_mod_id, sap_type _sap_id, msg_type _msg_id,
                   local_para_struct *_local_para_ptr, peer_buff_struct *_peer_buff_ptr);
# 1585 "interface/service/kal/kal_public_api.h"
kal_bool msg_send5(module_type _src_mod_id, module_type _dest_mod_id, sap_type _sap_id, msg_type _msg_id,
                   local_para_struct *_local_para_ptr);
# 1597 "interface/service/kal/kal_public_api.h"
kal_bool msg_send4(module_type _src_mod_id, module_type _dest_mod_id, sap_type _sap_id, msg_type _msg_id);
# 1626 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_to_head6(module_type _src_mod_id, module_type _dest_mod_id, sap_type _sap_id, msg_type _msg_id,
                           local_para_struct *_local_para_ptr, peer_buff_struct *_peer_buff_ptr);
# 1639 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_to_head5(module_type _src_mod_id, module_type _dest_mod_id, sap_type _sap_id, msg_type _msg_id,
                           local_para_struct *_local_para_ptr);
# 1652 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_to_head4(module_type _src_mod_id, module_type _dest_mod_id, sap_type _sap_id, msg_type _msg_id);
# 1689 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_inline6(module_type src_mod, module_type dest_mod, sap_type sap_id, msg_type msg_id, void *data, kal_uint32 datalen);
# 1725 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_inline_to_head6(module_type src_mod, module_type dest_mod, sap_type sap_id, msg_type msg_id, void *data, kal_uint32 datalen);
# 1834 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_8bytes_inline6(module_type src_mod, module_type dest_mod,sap_type sap_id, msg_type msg_id, kal_uint32 data1, kal_uint32 data2);
# 1870 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_8bytes_inline_to_head6(module_type src_mod, module_type dest_mod, sap_type sap_id, msg_type msg_id, kal_uint32 data1, kal_uint32 data2);
# 1896 "interface/service/kal/kal_public_api.h"
kal_uint32 msg_get_inline_4bytes_data1(ilm_struct *ilm_ptr);
# 1922 "interface/service/kal/kal_public_api.h"
kal_uint32 msg_get_inline_4bytes_data2(ilm_struct *ilm_ptr);
# 1972 "interface/service/kal/kal_public_api.h"
void *msg_get_inline_data(ilm_struct *ilm_ptr);
# 2022 "interface/service/kal/kal_public_api.h"
kal_bool msg_receive_extq(ilm_struct *ilm_ptr);
# 2042 "interface/service/kal/kal_public_api.h"
kal_bool msg_receive_extq_for_stack(ilm_struct *ilm_ptr);
# 2061 "interface/service/kal/kal_public_api.h"
kal_bool msg_receive_intq(ilm_struct *ilm_ptr);
# 2079 "interface/service/kal/kal_public_api.h"
kal_int32 msg_get_task_extq_messages(module_type module_id);
# 2094 "interface/service/kal/kal_public_api.h"
kal_int32 msg_get_extq_messages(void);
# 2112 "interface/service/kal/kal_public_api.h"
kal_int32 msg_get_task_extq_capacity(module_type tmod);
# 2127 "interface/service/kal/kal_public_api.h"
kal_int32 msg_get_extq_capacity(void);
# 2156 "interface/service/kal/kal_public_api.h"
kal_mutexid kal_create_mutex(kal_char* mutex_name);
# 2180 "interface/service/kal/kal_public_api.h"
void kal_take_mutex(kal_mutexid mutex_ptr);
# 2199 "interface/service/kal/kal_public_api.h"
void kal_give_mutex(kal_mutexid mutex_ptr);
# 2217 "interface/service/kal/kal_public_api.h"
void kal_mutex_waiting_count(kal_mutexid mutex_ptr, kal_uint32 *waiting_count);
# 2239 "interface/service/kal/kal_public_api.h"
kal_enhmutexid kal_create_enh_mutex(kal_char *mutex_name);
# 2265 "interface/service/kal/kal_public_api.h"
void kal_take_enh_mutex(kal_enhmutexid mutex_ptr);
# 2284 "interface/service/kal/kal_public_api.h"
void kal_give_enh_mutex(kal_enhmutexid mutex_ptr);
# 2307 "interface/service/kal/kal_public_api.h"
kal_semid kal_create_sem(kal_char *sem_name, kal_uint32 initial_count);
# 2330 "interface/service/kal/kal_public_api.h"
kal_status kal_take_sem(kal_semid sem_ptr, kal_wait_mode wait_mode);
# 2348 "interface/service/kal/kal_public_api.h"
void kal_give_sem(kal_semid sem_ptr);
# 2371 "interface/service/kal/kal_public_api.h"
kal_eventgrpid kal_create_event_group(kal_char *eventgrp_name);
# 2395 "interface/service/kal/kal_public_api.h"
kal_status kal_set_eg_events(kal_eventgrpid eg_ptr, kal_uint32 events, kal_uint8 operation);
# 2427 "interface/service/kal/kal_public_api.h"
kal_status kal_retrieve_eg_events(kal_eventgrpid eg_ptr, kal_uint32 requested_events, kal_uint8 operation,
                                  kal_uint32 *retrieved_events, kal_uint32 suspend);
# 2462 "interface/service/kal/kal_public_api.h"
kal_status kal_retrieve_eg_events_timeout(kal_eventgrpid eg_ptr, kal_uint32 requested_events, kal_uint8 operation,
                                          kal_uint32 *retrieved_events, kal_uint32 timeout);







extern KAL_ADM_ID (kal_adm_create)(void *mem_addr, kal_uint32 size, kal_uint32 *subpool_size, kal_bool islogging);
extern KAL_ADM_ID (kal_adm_create_and_profile)(void *mem_addr, kal_uint32 size, kal_uint32 *subpool_size, kal_bool islogging);
# 2511 "interface/service/kal/kal_public_api.h"
extern KAL_ADM_ID kal_adm_create2(void *mem_addr, kal_uint32 size, kal_uint32 *subpool_size, kal_uint32 flags, kal_int8 extheader_size_in_word);
# 2530 "interface/service/kal/kal_public_api.h"
extern kal_status kal_adm_delete(KAL_ADM_ID adm_id);

extern void *__kal_adm_alloc(KAL_ADM_ID adm_id, kal_uint32 size, kal_uint32 *actual_size, kal_uint32 opt, char *filename, kal_uint32 line);
extern void *__kal_adm_alloc_nc(KAL_ADM_ID adm_id, kal_uint32 size, kal_uint32 *actual_size, kal_uint32 option, char *filename, kal_uint32 line);
extern void *__kal_adm_alloc_c(KAL_ADM_ID adm_id, kal_uint32 size, kal_uint32 *actual_size, kal_uint32 option, char *filename, kal_uint32 line);

extern void *__kal_adm_realloc(KAL_ADM_ID adm_id, void *ptr, kal_uint32 size, kal_uint32 *actual_size, kal_uint32 opt, char *filename, kal_uint32 line);
extern void *__kal_adm_realloc_nc(KAL_ADM_ID adm_id, void *ptr, kal_uint32 size, kal_uint32 *actual_size, kal_uint32 opt, char *filename, kal_uint32 line);
extern void *__kal_adm_realloc_c(KAL_ADM_ID adm_id, void *ptr, kal_uint32 size, kal_uint32 *actual_size, kal_uint32 opt, char *filename, kal_uint32 line);
# 2757 "interface/service/kal/kal_public_api.h"
extern void kal_adm_free(KAL_ADM_ID adm_id, void *ptr);
# 2776 "interface/service/kal/kal_public_api.h"
extern void *kal_adm_get_extheader(KAL_ADM_ID adm_id, void *ptr);
# 2795 "interface/service/kal/kal_public_api.h"
extern kal_uint32 kal_adm_get_max_alloc_size(KAL_ADM_ID adm_id);
# 2812 "interface/service/kal/kal_public_api.h"
extern kal_uint32 kal_adm_get_total_left_size(KAL_ADM_ID adm_id);
# 2826 "interface/service/kal/kal_public_api.h"
extern void *kal_adm_check_integrity(KAL_ADM_ID adm_id);


extern void kal_adm_print_log(KAL_ADM_ID adm_id);
extern kal_uint32 kal_adm_calc_worst_alloc_size(KAL_ADM_ID adm_id, kal_uint32 size, kal_uint32 option);
extern void *kal_adm_get_prev_block_ptr(KAL_ADM_ID adm_id,void *mem_addr);
extern void *kal_adm_get_next_block_ptr(KAL_ADM_ID adm_id,void *mem_addr);
extern void *kal_adm_get_trans_ptr(KAL_ADM_ID adm_id,void *mem_addr);
# 2935 "interface/service/kal/kal_public_api.h"
extern KAL_AFM_ID kal_afm_create(void *mem_addr, kal_uint32 size, kal_uint32 *subpool_size,kal_uint32 *subpool_nr, kal_uint32 flags, kal_uint32 *left_mem);
# 2951 "interface/service/kal/kal_public_api.h"
extern kal_status kal_afm_delete(KAL_AFM_ID afm_id);

extern void *kal_afm_internal_alloc(KAL_AFM_ID afm_id, kal_uint32 size, kal_uint32 *actual_size, char *filename, kal_uint32 line);
# 2989 "interface/service/kal/kal_public_api.h"
extern void kal_afm_free(KAL_AFM_ID afm_id, void *ptr);
# 3003 "interface/service/kal/kal_public_api.h"
extern kal_int32 kal_afm_check_integrity(KAL_AFM_ID afm_id);

extern void *kal_afm_internal_alloc_cacheable(KAL_AFM_ID adm_id, kal_uint32 size, kal_uint32 *actual_size, char *filename, kal_uint32 line);
# 3038 "interface/service/kal/kal_public_api.h"
extern void *kal_afm_internal_alloc_noncacheable(KAL_AFM_ID afm_id, kal_uint32 size, kal_uint32 *actual_size, char *filename, kal_uint32 line);
# 3070 "interface/service/kal/kal_public_api.h"
extern kal_int32 kal_afm_print_log(KAL_AFM_ID afm_id);
extern kal_int32 kal_afm_get_subpool_num(KAL_AFM_ID afm_id);
extern kal_int32 kal_afm_info_get(KAL_AFM_ID afm_id, kal_uint32 *option, kal_uint32 *buff_size, kal_uint32 *buff_nr, kal_uint32 *left_buf_nr, kal_uint32 *total_left_mem_sz);
extern kal_int32 kal_afm_custom_performance_info_get(KAL_AFM_ID afm_id, kal_uint32 *option, kal_uint32 *buff_size, kal_uint32 *buff_nr, kal_uint32 *alloc_cnt, kal_uint32 *min_left_buf_nr);
extern kal_int32 kal_afm_set_cuslogging(KAL_AFM_ID afm_id, kal_uint32 cus_log_opt);
extern kal_int32 kal_afm_get_cuslogging(KAL_AFM_ID afm_id, kal_uint32 *cus_log_opt);
extern kal_int32 kal_afm_get_left_subpool_num(KAL_AFM_ID afm_id, kal_uint32 size);






extern void *get_ctrl_buffer_ext(kal_uint32 size, const kal_char *file_name, kal_uint32 line);
extern void free_ctrl_buffer_ext(void *buff_ptr, const kal_char *file_name, kal_uint32 line);
# 3161 "interface/service/kal/kal_public_api.h"
void kal_debug_cbs_leakage_check_start(void);
void kal_debug_cbs_leakage_check_stop(void);
# 3185 "interface/service/kal/kal_public_api.h"
kal_uint32 kal_get_systicks(void);
# 3203 "interface/service/kal/kal_public_api.h"
kal_uint32 kal_secs_to_ticks(kal_uint32 secs);
# 3221 "interface/service/kal/kal_public_api.h"
kal_uint32 kal_milli_secs_to_ticks(kal_uint32 milli_secs);
# 3239 "interface/service/kal/kal_public_api.h"
kal_uint32 kal_ticks_to_secs(kal_uint32 ticks);
# 3257 "interface/service/kal/kal_public_api.h"
kal_uint32 kal_ticks_to_milli_secs(kal_uint32 ticks);
# 3289 "interface/service/kal/kal_public_api.h"
kal_timerid kal_create_timer(kal_char* timer_name);
# 3314 "interface/service/kal/kal_public_api.h"
void kal_set_timer(kal_timerid timer_ptr,
                   kal_timer_func_ptr handler_func_ptr, void* handler_param_ptr,
                   kal_uint32 delay, kal_uint32 reschedule_time);
# 3334 "interface/service/kal/kal_public_api.h"
void kal_cancel_timer(kal_timerid timer_ptr);
# 3349 "interface/service/kal/kal_public_api.h"
kal_uint32 kal_get_remaining_time(kal_timerid timer_ptr);
# 3380 "interface/service/kal/kal_public_api.h"
extern void stack_init_timer(stack_timer_struct *stack_timer,
                            kal_char *timer_name,
                            module_type module_id);
# 3408 "interface/service/kal/kal_public_api.h"
extern stack_timer_struct *stack_create_timer(kal_char *timer_name, module_type module_id);
# 3433 "interface/service/kal/kal_public_api.h"
extern void stack_start_timer(stack_timer_struct *stack_timer,
                              kal_uint16 timer_indx,
                              kal_uint32 init_time);
# 3453 "interface/service/kal/kal_public_api.h"
extern stack_timer_status_type stack_stop_timer(stack_timer_struct *stack_timer);
# 3470 "interface/service/kal/kal_public_api.h"
extern stack_timer_status_type stack_timer_status(stack_timer_struct *stack_timer,
                                                    kal_uint32 *time_remaining);
# 3486 "interface/service/kal/kal_public_api.h"
static inline kal_uint32 stack_timer_get_remaining_time(stack_timer_struct *stack_timer)
{
    kal_uint32 remaining = 0;

    stack_timer_status(stack_timer, &remaining);

    return remaining;
}
# 3513 "interface/service/kal/kal_public_api.h"
extern kal_bool stack_is_time_out_valid(stack_timer_struct *stack_timer);
# 3531 "interface/service/kal/kal_public_api.h"
extern void stack_process_time_out(stack_timer_struct *stack_timer);

extern kal_uint8 stack_time_out_messages_in_queue(stack_timer_struct *stack_timer);

extern stack_timer_user_view_status_type
stack_timer_user_view_status(stack_timer_struct *stack_timer,
                              kal_uint32 *time_remaining);
# 3557 "interface/service/kal/kal_public_api.h"
typedef void * (*malloc_fp_t)(unsigned int size);
# 3572 "interface/service/kal/kal_public_api.h"
typedef void * (*realloc_fp_t)(void *ptr, unsigned int new_size);
# 3585 "interface/service/kal/kal_public_api.h"
typedef void (*free_fp_t)(void *ptr);
# 3638 "interface/service/kal/kal_public_api.h"
extern event_scheduler *evshed_create(kal_char *evshed_name, module_type module_id,
                                      kal_uint32 allowed_time_shift, kal_uint16 allowed_time_shift_sleep_mode);
# 3656 "interface/service/kal/kal_public_api.h"
extern void evshed_set_index(event_scheduler *es_usr, kal_uint16 timer_index);
# 3672 "interface/service/kal/kal_public_api.h"
extern kal_uint16 evshed_get_index(ilm_struct *expired_ilm);
# 3698 "interface/service/kal/kal_public_api.h"
extern eventid evshed_set_event(event_scheduler *es,
                                kal_timer_func_ptr event_hf,
                                void *event_hf_param,
                                kal_uint32 elapse_time);
# 3727 "interface/service/kal/kal_public_api.h"
extern eventid evshed_set_event_userid(event_scheduler *es,
                                kal_timer_func_ptr event_hf,
                                void *event_hf_param,
                                kal_uint32 elapse_time,
                                kal_uint32 event_user_id);
# 3749 "interface/service/kal/kal_public_api.h"
extern kal_uint32 evshed_get_event_userid(eventid user_eventid);
# 3770 "interface/service/kal/kal_public_api.h"
extern kal_int32 evshed_cancel_event(event_scheduler *es, eventid *eid);
# 3784 "interface/service/kal/kal_public_api.h"
extern kal_uint32 evshed_get_remaining_time(event_scheduler *es, eventid eid);
# 3800 "interface/service/kal/kal_public_api.h"
extern void evshed_delete_all_events(event_scheduler *es);
# 3823 "interface/service/kal/kal_public_api.h"
extern void evshed_timer_handler(event_scheduler *es);
# 3837 "interface/service/kal/kal_public_api.h"
extern kal_bool evshed_has_pending_events(event_scheduler *es);
# 3853 "interface/service/kal/kal_public_api.h"
extern void evshed_suspend_all_events(event_scheduler *es);
# 3868 "interface/service/kal/kal_public_api.h"
extern void evshed_resume_all_events(event_scheduler *es);
# 3891 "interface/service/kal/kal_public_api.h"
extern void evshed_enable_protect_property(event_scheduler *es);
# 3927 "interface/service/kal/kal_public_api.h"
extern void kal_assert_fail_line(char* expr, char* file, kal_uint32 line);
extern void kal_assert_fail_ext(char* expr, char* file, kal_uint32 line, kal_uint32 ex1, kal_uint32 ex2, kal_uint32 ex3);
extern void kal_assert_fail_dump(char* expr, char* file, kal_uint32 line, kal_uint32 ex1, kal_uint32 ex2, kal_uint32 ex3, ASSERT_DUMP_PARAM_T *dump_param);
# 4059 "interface/service/kal/kal_public_api.h"
void kal_profile_enable(void);
# 4074 "interface/service/kal/kal_public_api.h"
float kal_profile_get_cpu_usage(void);
# 4096 "interface/service/kal/kal_public_api.h"
extern kal_uint32 kal_lock_current_stack();
# 4112 "interface/service/kal/kal_public_api.h"
extern kal_uint32 kal_unlock_current_stack();
# 302 "interface/service/dhl/dhl_def.h" 2
# 1 "interface/sap/svc_sap.h" 1



# 1 "interface/sap/sap_range.h" 1



# 1 "interface/sap/cross_core/global_sap_range.h" 1
# 69 "interface/sap/cross_core/global_sap_range.h"
typedef enum {

    SAP_ID_GLOBAL_BEGIN = 0, SAP_ID_GLOBAL_NIL_CHECK_TAIL = SAP_ID_GLOBAL_BEGIN,
    SAP_ID_GLOBAL_MD1_BEGIN, SAP_ID_GLOBAL_MD1_TAIL = SAP_ID_GLOBAL_MD1_BEGIN + 31,
    SAP_ID_GLOBAL_MD2_BEGIN, SAP_ID_GLOBAL_MD2_TAIL = SAP_ID_GLOBAL_MD2_BEGIN + 31,
    SAP_ID_GLOBAL_MD3_BEGIN, SAP_ID_GLOBAL_MD3_TAIL = SAP_ID_GLOBAL_MD3_BEGIN + 31,
    SAP_ID_GLOBAL_TAIL,

}GLOBAL_SAP_ID_TYPE;

typedef unsigned int sap_global_id_boundary_check1[98 - SAP_ID_GLOBAL_TAIL];
# 5 "interface/sap/sap_range.h" 2

typedef enum {
 SAP_ID_XXX_CODE_BASE = 98,

 SAP_ID_SVC_CODE_BEGIN = SAP_ID_XXX_CODE_BASE, SAP_ID_SVC_CODE_TAIL = SAP_ID_SVC_CODE_BEGIN + 10,

 SAP_ID_MD_CODE_BEGIN, SAP_ID_MD_CODE_TAIL = SAP_ID_MD_CODE_BEGIN + 250 + 250,

 SAP_ID_MD_SVC_CODE_BEGIN, SAP_ID_MD_SVC_CODE_TAIL = SAP_ID_MD_SVC_CODE_BEGIN + 20,

 SAP_ID_MD_DRV_CODE_BEGIN, SAP_ID_MD_DRV_CODE_TAIL = SAP_ID_MD_DRV_CODE_BEGIN + 30,

 SAP_ID_MD_MMI_CODE_BEGIN, SAP_ID_MD_MMI_CODE_TAIL = SAP_ID_MD_MMI_CODE_BEGIN + 40,

 SAP_ID_MD_MW_CODE_BEGIN, SAP_ID_MD_MW_CODE_TAIL = SAP_ID_MD_MW_CODE_BEGIN + 100,

 SAP_ID_MW_CODE_BEGIN, SAP_ID_MW_CODE_TAIL = SAP_ID_MW_CODE_BEGIN + 50 + 100,

 SAP_ID_DRV_CODE_BEGIN, SAP_ID_DRV_CODE_TAIL = SAP_ID_DRV_CODE_BEGIN + 200,


 SAP_ID_SYSSERVICE_CODE_BEGIN, SAP_ID_SYSSERVICE_CODE_TAIL = SAP_ID_SYSSERVICE_CODE_BEGIN + 10,

 SAP_ID_CODE_END,
}SAP_ID_TYPE;



typedef unsigned int sap_id_boundary_check1[(0xFFF -1) - SAP_ID_CODE_END];
# 5 "interface/sap/svc_sap.h" 2
# 1 "interface/sap/cross_core/global_sap.h" 1
# 67 "interface/sap/cross_core/global_sap.h"
# 1 "interface/sap/cross_core/global_sap_range.h" 1
# 68 "interface/sap/cross_core/global_sap.h" 2

typedef enum __cgen_sap_type_id_SAP_ID_GLOBAL_BEGIN{SAP_TAG_SAP_ID_GLOBAL_BEGIN = SAP_ID_GLOBAL_BEGIN,

    INVALID_SAP = SAP_ID_GLOBAL_BEGIN,
SAP_ID_CGEN_PARSE_LAST_ID=SAP_ID_GLOBAL_NIL_CHECK_TAIL }_cgen_sap_type_id_SAP_ID_GLOBAL_NIL_CHECK_TAIL;

typedef enum __cgen_sap_type_id_SAP_ID_GLOBAL_MD1_BEGIN{SAP_TAG_SAP_ID_GLOBAL_MD1_BEGIN = SAP_ID_GLOBAL_MD1_BEGIN,
# 1 "interface/sap/cross_core/md1_sap.h" 1
# 76 "interface/sap/cross_core/global_sap.h" 2
    SAP_TAG_SAP_ID_GLOBAL_MD1_TAIL,
SAP_ID_CGEN_PARSE_LAST_ID=SAP_ID_GLOBAL_MD1_TAIL }_cgen_sap_type_id_SAP_ID_GLOBAL_MD1_TAIL;

typedef enum __cgen_sap_type_id_SAP_ID_GLOBAL_MD2_BEGIN{SAP_TAG_SAP_ID_GLOBAL_MD2_BEGIN = SAP_ID_GLOBAL_MD2_BEGIN,
# 1 "interface/sap/cross_core/md2_sap.h" 1
# 81 "interface/sap/cross_core/global_sap.h" 2
    SAP_TAG_SAP_ID_GLOBAL_MD2_TAIL,
SAP_ID_CGEN_PARSE_LAST_ID=SAP_ID_GLOBAL_MD2_TAIL }_cgen_sap_type_id_SAP_ID_GLOBAL_MD2_TAIL;

typedef enum __cgen_sap_type_id_SAP_ID_GLOBAL_MD3_BEGIN{SAP_TAG_SAP_ID_GLOBAL_MD3_BEGIN = SAP_ID_GLOBAL_MD3_BEGIN,
# 1 "interface/sap/cross_core/md3_sap.h" 1
# 71 "interface/sap/cross_core/md3_sap.h"
    SIM_UIM_SAP,
    UIM_SIM_SAP,
    C2K_LTE_SAP,
    GMSS_CSS_SAP,
    LTE_C2K_SAP,
    RAC_CPSDM_SAP,
    CLC_EAS_SAP,
    RRM_VAL_SAP,
    URR_VAL_SAP,
    ERRC_VAL_SAP,
# 86 "interface/sap/cross_core/global_sap.h" 2
    SAP_TAG_SAP_ID_GLOBAL_MD3_TAIL,
SAP_ID_CGEN_PARSE_LAST_ID=SAP_ID_GLOBAL_MD3_TAIL }_cgen_sap_type_id_SAP_ID_GLOBAL_MD3_TAIL;
# 6 "interface/sap/svc_sap.h" 2

typedef enum __cgen_sap_type_id_SAP_ID_SVC_CODE_BEGIN{SAP_TAG_SAP_ID_SVC_CODE_BEGIN = SAP_ID_SVC_CODE_BEGIN,
 INLINE_ILM_SAP,
 FS_SAP,
 FT_TST_SAP,
 PS_NVRAM_SAP,
 STACK_SIM_TIMER_SAP,
 STACK_TIMER_SAP,

 DHL_ETSTM_SAP,
 ETSTM_DHL_SAP,
 DHL_MDDBG_SAP,
 MDDBG_DHL_SAP,
SAP_ID_CGEN_PARSE_LAST_ID=SAP_ID_SVC_CODE_TAIL }_cgen_sap_type_id_SAP_ID_SVC_CODE_TAIL;

typedef enum __cgen_sap_type_id_SAP_ID_SYSSERVICE_CODE_BEGIN{SAP_TAG_SAP_ID_SYSSERVICE_CODE_BEGIN = SAP_ID_SYSSERVICE_CODE_BEGIN,
   LAST_SAP_CODE,
SAP_ID_CGEN_PARSE_LAST_ID=SAP_ID_SYSSERVICE_CODE_TAIL }_cgen_sap_type_id_SAP_ID_SYSSERVICE_CODE_TAIL;
# 303 "interface/service/dhl/dhl_def.h" 2



# 1 "interface/modem/general/em_struct.h" 1
# 354 "interface/modem/general/em_struct.h"
# 1 "interface/modem/general/ps_public_struct.h" 1
# 306 "interface/modem/general/ps_public_struct.h"
# 1 "interface/modem/general/ps_public_enum.h" 1
# 1419 "interface/modem/general/ps_public_enum.h"
# 1 "custom/service/nvram/custom_nvram_sec.h" 1
# 239 "custom/service/nvram/custom_nvram_sec.h"
typedef struct
{
    kal_uint8 security_indication;
    kal_uint8 phone_key[8];
    kal_uint8 last_imsi[9];
    kal_uint8 pin1[8];
    kal_uint8 pin1_valid;
    kal_uint8 phone_lock_verified;
    kal_uint8 iccid[10];
} smu_security_info_struct;
# 334 "custom/service/nvram/custom_nvram_sec.h"
# 1 "interface/service/sys_svc/cust_chl_interface.h" 1
# 11 "interface/service/sys_svc/cust_chl_interface.h"
# 1 "driver/regbase/inc/reg_base.h" 1
# 560 "driver/regbase/inc/reg_base.h"
# 1 "driver/regbase/inc/reg_base_mt6735_md1.h" 1
# 561 "driver/regbase/inc/reg_base.h" 2
# 12 "interface/service/sys_svc/cust_chl_interface.h" 2
# 26 "interface/service/sys_svc/cust_chl_interface.h"
typedef enum
{
 CUST_CHL_ERROR_NONE = 0x0000,
 CUST_CHL_ERROR_NULL_PTR = 0x0001,
 CUST_CHL_ERROR_INVALID_ALG = 0x0002,
 CUST_CHL_ERROR_MD_NOT_FOUND = 0x0003,
 CUST_CHL_ERROR_NO_SUCH_KEY = 0x0004,
 CUST_CHL_ERROR_HEXIFY_FAILED = 0x0005,
 CUST_CHL_ERROR_UNHEXIFY_FAILED = 0x0006,
 CUST_CHL_ERROR_RESULT_GUARD_PATTERN_CORRUPTED = 0x0007,
 CUST_CHL_ERROR_MEMORY_ALLOC_FAILED = 0x0008,

 CUST_CHL_ERROR_CHECK_RSA_PUB_FAILED = 0x0100,
 CUST_CHL_ERROR_CHECK_RSA_PRIV_FAILED = 0x0101,

 CUST_CHL_ERROR_READ_HRID_FAILED = 0x0200,
 CUST_CHL_ERROR_GET_CUST_KEY_FAILED = 0x0201,

 CUST_CHL_ERROR_VERIFY_MAC_FAILED = 0x0300,
 CUST_CHL_ERROR_VERIFY_SIG_FAILED = 0x0301,
 CUST_CHL_ERROR_CHECK_RSA_PUB_ENC_FAILED = 0x0302,
 CUST_CHL_ERROR_CHECK_RSA_PRIV_ENC_FAILED = 0x0303,
 CUST_CHL_ERROR_CHECK_RSA_PUB_DEC_FAILED = 0x0304,
 CUST_CHL_ERROR_CHECK_RSA_PRIV_DEC_FAILED = 0x0305,

 CUST_CHL_ERROR_UNDEFINED_FAILED = 0x0800,

 CUST_CHL_ERROR_END = 0xFFFF,

} TYPE_CUST_CHL_ERROR;

typedef enum
{

 CUST_CHL_ALG_BEGIN = 0x0000,


 CUST_CHL_ALG_SHA256 = 0x0001,


  CUST_CHL_ALG_RSA_PKCS1 = 0x1001,


 CUST_CHL_ALG_MAC_SHA256 = 0x2001,


 CUST_CHL_ALG_RSA_PSS_SHA256 = 0x3001,

 CUST_CHL_ALG_END = 0xFFFF

} TYPE_CUST_CHL_ALG;

typedef enum
{


  CUST_CHL_SYM_BEGIN = 0x0000,
  CUST_TM_SHARED_KEY2 = 0x0001,
  CUST_CHL_SYM_END = 0x7FFF,


  CUST_CHL_ASYM_BEGIN = 0x8000,
  CUST_TM_PUB_KEY1 = 0x8001,
  CUST_CHL_ASYM_END = 0xFFFF

} TYPE_CUST_CHL_KEY;


typedef struct t_cust_chl_hash_u
{
 kal_uint32 m_len;
 kal_uint8 m_u8[32];

} t_cust_chl_hash_u;


typedef struct t_cust_chl_mac_u
{
 kal_uint32 m_len;
 kal_uint8 m_u8[32];

} t_cust_chl_mac_u;

typedef struct t_cust_chl_sym_key
{

 kal_uint32 m_key_len;
 kal_uint8 m_key[32];

} t_cust_chl_sym_key;



typedef struct t_cust_chl_asym_key
{

 kal_uint32 m_E_D_len;
 kal_uint32 m_N_len;
 kal_uint8 m_E_D_key[256];
 kal_uint8 m_N_key[256];

} t_cust_chl_asym_key;
# 143 "interface/service/sys_svc/cust_chl_interface.h"
extern kal_uint32 CustCHL_Get_Sym_Key(TYPE_CUST_CHL_KEY key_type, t_cust_chl_sym_key * key);
# 158 "interface/service/sys_svc/cust_chl_interface.h"
extern kal_uint32 CustCHL_Get_Asym_Key(TYPE_CUST_CHL_KEY key_type, t_cust_chl_asym_key * key);
# 177 "interface/service/sys_svc/cust_chl_interface.h"
extern kal_uint32 CustCHL_RSA_PKCS1_Encrypt(TYPE_CUST_CHL_ALG alg_type,
                                           kal_uint32 mode,
                                           kal_uint32 input_len,
                                           kal_uint8 * input,
                                           kal_uint8 * output,
                                           t_cust_chl_asym_key * key);
# 202 "interface/service/sys_svc/cust_chl_interface.h"
extern kal_uint32 CustCHL_RSA_PKCS1_Decrypt(TYPE_CUST_CHL_ALG alg_type,
                                                kal_uint32 mode,
                                                kal_uint32 input_len,
                                           kal_uint8 * input,
                                           kal_uint32 * output_len,
                                           kal_uint8 * output,
                                           t_cust_chl_asym_key * key);
# 224 "interface/service/sys_svc/cust_chl_interface.h"
extern kal_uint32 CustCHL_Calculate_Hash(TYPE_CUST_CHL_ALG alg_type,
                                           kal_uint8 * data,
                                           kal_uint32 data_len,
                                           t_cust_chl_hash_u * hash_u);
# 244 "interface/service/sys_svc/cust_chl_interface.h"
extern kal_uint32 CustCHL_Verify_PSS_Signature(TYPE_CUST_CHL_ALG alg_type,
                                                 kal_uint8 * data,
                                                 kal_uint32 data_len,
                                                 kal_uint8 * sig,
                                                 t_cust_chl_asym_key * key);
# 266 "interface/service/sys_svc/cust_chl_interface.h"
extern kal_uint32 CustCHL_Verify_MAC(TYPE_CUST_CHL_ALG alg_type,
                              kal_uint8 * data,
                              kal_uint32 data_len,
                              kal_uint8 * mac,
                              kal_uint8 * key,
                              kal_uint32 key_len) ;
# 291 "interface/service/sys_svc/cust_chl_interface.h"
extern kal_uint32 CustCHL_Calculate_MAC(TYPE_CUST_CHL_ALG alg_type,
                                 kal_uint8 * data,
                                 kal_uint32 data_len,
                                 kal_uint8 * key,
                                 kal_uint32 key_len,
                                 t_cust_chl_mac_u * mac_u);
# 335 "custom/service/nvram/custom_nvram_sec.h" 2
# 377 "custom/service/nvram/custom_nvram_sec.h"
typedef struct {
    kal_uint8 version[4];
    kal_uint8 protection_scheme;
    kal_uint8 state;
    kal_uint8 length[2];
    kal_uint8 num_of_plmn[2];
    kal_uint8 plmn_list[4 * 10];
    kal_uint8 num_of_gid[2];
    kal_uint8 gid_list[2 * 10];
    kal_uint8 reserved[2];
    kal_uint8 start_time[8];
    kal_uint8 end_time[4];
    kal_uint8 imei[16];
    kal_uint8 verification_code[256];
    kal_uint8 unlock_time[4];
} sml_tmo_context_struct;
typedef sml_tmo_context_struct nvram_sml_tmo_context_struct;





typedef struct {
    kal_uint8 state;
    kal_uint8 key[8];
} sml_control_key_struct;


typedef struct {
    kal_uint8 state;
    kal_uint8 retry_count;
    kal_uint8 autolock_count;
    kal_uint8 num;
} sml_category_meta_struct;

typedef struct {
    kal_uint32 magic_head;
    sml_category_meta_struct cat[7];
    sml_control_key_struct key[7];
    kal_uint8 code_cat_n[(10 * 3)];
    kal_uint8 code_cat_ns[(2 * 4)];
    kal_uint8 code_cat_sp[(2 * 4)];
    kal_uint8 code_cat_c[(2 * 5)];
    kal_uint8 code_cat_sim[(2 * 8)];
    kal_uint8 code_cat_ns_sp[(5 * 2)];
    kal_uint8 code_cat_sim_c[(10 * 2)];
    kal_uint8 range_cat_ns[2];
    kal_uint32 magic_tail;
} sml_context_struct;
typedef sml_context_struct nvram_sml_context_struct;
# 452 "custom/service/nvram/custom_nvram_sec.h"
# 1 "interface/service/nvram/nvram_defs.h" 1
# 162 "interface/service/nvram/nvram_defs.h"
# 1 "./build/HCT6737M_65_N/LWG_DSDS/nvram_auto_gen/nvram_lid_statistics.h" 1
# 163 "interface/service/nvram/nvram_defs.h" 2

# 1 "interface/service/nvram/nvram_enums.h" 1
# 112 "interface/service/nvram/nvram_enums.h"
typedef enum
{
    NVRAM_POWERON_NORMAL,
    NVRAM_POWERON_CHARGER,
    NVRAM_POWERON_ALARM,
    NVRAM_POWERON_INVALID
} nvram_poweron_mode_enum;

typedef enum
{
    NVRAM_LOCK_DISABLE,
    NVRAM_LOCK_ENABLE,
    NVRAM_LOCK_TEMP_DISABLE,
    NVRAM_LOCK_OTP,
    NVRAM_LOCK_INVALID
} nvram_lock_state_enum;

typedef enum
{
    NVRAM_DEFAULT_VALUE_SUCCESS,
    NVRAM_DEFAULT_VALUE_FAIL,
    NVRAM_DEFAULT_VALUE_FF,
    NVRAM_DEFAULT_VALUE_ZERO,
    NVRAM_DEFAULT_VALUE_POINT,
    NVRAM_DEFAULT_VALUE_APPLICATION,

    NVRAM_DEFAULT_VALUE_MAX
} nvram_default_value_enum;

typedef enum
{
    NVRAM_RESET_ALL,
    NVRAM_RESET_USER,
    NVRAM_RESET_SYSTEM,
    NVRAM_RESET_CERTAIN,
    NVRAM_RESET_FACTORY,
    NVRAM_RESET_CUSTPACK,
    NVRAM_RESET_SECUPACK,
    NVRAM_RESET_BRANCH,
    NVRAM_RESET_PACKAGE,
    NVRAM_RESET_FAT,
    NVRAM_RESET_SDS,
    NVRAM_RESET_INVALID
} nvram_reset_category_enum;


typedef enum
{

    NVRAM_ERRNO_SUCCESS,
    NVRAM_IO_ERRNO_OK = NVRAM_ERRNO_SUCCESS,

    NVRAM_ERRNO_FAIL,
    NVRAM_ERRNO_INVALID,
    NVRAM_ERRNO_NOT_READY,


    NVRAM_IO_ERRNO_INVALID_LID,
    NVRAM_IO_ERRNO_INVALID_SIZE,
    NVRAM_IO_ERRNO_INVALID_RECORD,
    NVRAM_IO_ERRNO_EMPTY_RECORD,
    NVRAM_IO_ERRNO_STORAGE,
    NVRAM_IO_ERRNO_INIT,
    NVRAM_IO_ERRNO_CHK,
    NVRAM_IO_ERRNO_LOCKED,
    NVRAM_IO_ERRNO_WRONG_RINGLID,
    NVRAM_IO_ERRNO_ACCESS_DENIED,
    NVRAM_IO_ERRNO_DRV_BROKEN,
    NVRAM_IO_ERRNO_CONTENT_BROKEN,
    NVRAM_IO_ERRNO_SDS_FAIL,
    NVRAM_IO_ERRNO_SDS_MODE,


    NVRAM_ERRNO_OTP_UNKNOW,
    NVRAM_ERRNO_OTP_OVERSCOPE,
    NVRAM_ERRNO_OTP_WRITEFAIL,
    NVRAM_ERRNO_OTP_LOCKED,
    NVRAM_ERRNO_OTP_INVALID_INPUT,
    NVRAM_ERRNO_OTP_INVALID_RANGE,
    NVRAM_ERRNO_OTP_WRITETWICE,

    NVRAM_ERRNO_IMAGE_BROKEN,
    NVRAM_ERRNO_IMAGE_EMPTY,
    NVRAM_ERRNO_IMAGE_DATA_NOT_SYNC,
    NVRAM_ERRNO_IMAGE_DATA_NOT_EXIST,

    NVRAM_ERRNO_FOLDER_EXIST,

    NVRAM_ERRNO_SDS_READY,
    NVRAM_ERRNO_SDS_EMPTY,

    NVRAM_ERRNO_MAX
} nvram_errno_enum;




typedef kal_uint16 nvram_lid_enum;
typedef kal_uint16 nvram_app_id_enum;







typedef enum
{
    NVRAM_IMAGE_TYPE_EMPTY = 0x0000,
    NVRAM_IMAGE_TYPE_CALIBRAT = 0x0001,
    NVRAM_IMAGE_TYPE_IMEI = 0x0002
} nvram_image_type_enum;



typedef enum
{
    NVRAM_BIN_REGION_BACKUP,
    NVRAM_BIN_REGION_RESTORE,
} nvram_bin_region_access_enum;

typedef enum
{
    NVRAM_SDS_ACCESS_BACKUP,
    NVRAM_SDS_ACCESS_RESTORE,
} nvram_sds_access_enum;

typedef enum
{
    NVRAM_RESTORE_FALSE,
    NVRAM_RESTORE_TRUE
}nvram_restore_flag_enum;
# 165 "interface/service/nvram/nvram_defs.h" 2
# 235 "interface/service/nvram/nvram_defs.h"
typedef kal_uint16 nvram_attr_enum;
# 259 "interface/service/nvram/nvram_defs.h"
typedef kal_uint32 nvram_category_enum;
# 302 "interface/service/nvram/nvram_defs.h"
typedef enum
{
    NVRAM_CLEAN_FOLDER_NONE = 0x00,
    NVRAM_CLEAN_FOLDER_SYSTEM = 0x01,
    NVRAM_CLEAN_FOLDER_FACTORY = 0x02,
    NVRAM_CLEAN_FOLDER_BRANCH = 0x04,
    NVRAM_CLEAN_FOLDER_ALL = 0xFF
} nvram_clean_folder_enum;




typedef void (*nvram_query_deault_func)(nvram_lid_enum file_id, kal_uint8 *buffer, kal_uint16 buffer_size);




    typedef struct







    {
        nvram_lid_enum LID;
        kal_uint16 total_records;
        kal_uint32 size;
        kal_uint8 const* default_value;
        nvram_category_enum category;
        nvram_attr_enum attr;
        kal_char fileprefix[4 + 1];
        kal_char fileverno[3 + 1];
        kal_char* description;
    } nvram_ltable_entry_struct;
# 355 "interface/service/nvram/nvram_defs.h"
typedef struct
{
    nvram_ltable_entry_struct *ltable;
    kal_uint32 size;
}nvram_ltable_tbl_struct;
# 444 "interface/service/nvram/nvram_defs.h"
typedef struct
{
    kal_uint8 const* version;
    void const* custpack_default[11];
}custpack_nvram_header;

typedef struct
{
    nvram_clean_folder_enum category;
    kal_wchar *folder_path;
} nvram_clean_folder_entry;

typedef struct
{
    nvram_lid_enum LID;
    kal_bool (*get_data)(kal_uint8 *buffer, kal_uint16 buf_size);
}nvram_shutdown_cb_struct;

typedef struct
{
    nvram_lid_enum LID;
    kal_uint32 size;
    kal_uint16 total_records;
    kal_uint8 const *default_value;
    kal_bool is_multi_default;
} nvram_cat_replace_setting;


typedef struct NVRAM_FS_PARAM_COMP
{
    kal_uint32 opid_map;
    kal_uint32 ret[2];
    kal_uint32 Flag;
    kal_uint32 *FileSize;
    kal_int32 Offset;
    kal_int32 Whence;
    void *DataPtr;
    kal_uint32 Length;
    kal_uint32 *Read;
} NVRAM_FS_PARAM_CMPT_T;
# 497 "interface/service/nvram/nvram_defs.h"
extern const kal_uint8 NVRAM_EF_ZERO_DEFAULT[];
extern const kal_uint8 NVRAM_EF_FF_DEFAULT[];
# 453 "custom/service/nvram/custom_nvram_sec.h" 2
# 479 "custom/service/nvram/custom_nvram_sec.h"
typedef enum
{
    SEC_RO_PARA_DBG_PORT,
    SEC_RO_PARA_TOTAL
}sec_ro_para_enum;

typedef struct
{
    kal_uint8 m_custom_database_key[64];




    kal_uint32 padding[16>>2];
} CUST_SECRET_DATA_ST;
# 574 "custom/service/nvram/custom_nvram_sec.h"
extern const kal_uint8 NVRAM_SECUPACK_DEFAULT[];
extern const kal_uint8 NVRAM_CUSTOM_KEY[];
extern const kal_uint8 NVRAM_CUSTOM_KEY_SEED[];


extern kal_uint32 secupack_total_to_verify;
extern void custom_nvram_get_key(char *init_key, unsigned char *keys);
extern void custom_nvram_encrypt(unsigned char const *keys, unsigned char *buffer, unsigned int length, int scrambleIndex);
extern void custom_nvram_decrypt(unsigned char const *keys, unsigned char *buffer, unsigned int length, int scrambleIndex);

extern kal_uint32 custom_nvram_sec_ro_size(void);
extern kal_uint32 custom_nvram_secupack_size(void);
extern kal_uint32 custom_nvram_secupack_total(void);
extern kal_uint32 custom_nvram_key_len(void);
extern kal_int32 custom_nvram_get_database_key(kal_uint8 *key_buffer, kal_uint32 buffer_size);
# 1420 "interface/modem/general/ps_public_enum.h" 2
# 1 "interface/sap/cross_core/ps_public_enum_public.h" 1
# 11 "interface/sap/cross_core/ps_public_enum_public.h"
typedef enum
{
     IPV4_ADDR_TYPE = 0X21,
     IPV6_ADDR_TYPE = 0X57,
     IPV4V6_ADDR_TYPE = 0X8D,
     PPP_ADDR_TYPE = 0X01,
     OSP_IHOSS_ADDR_TYPE = 0X02,
     NULL_PDP_ADDR_TYPE = 0X03

}pdp_addr_type_enum;


typedef enum
{
     IPV4_ADDR_LEN = 0X04,
     IPV6_ADDR_LEN = 0X10,
     IPV4V6_ADDR_LEN = 0X14,
     PPP_ADDR_LEN = 0X0,
     OSP_IHOSS_ADDR_LEN = 0X0,


    NULL_PDP_ADDR_LEN = 0X01,
    MAXIMUM_POSSIBLE_ADDR_LEN = IPV4V6_ADDR_LEN
}pdp_addr_len_enum;
# 1421 "interface/modem/general/ps_public_enum.h" 2
# 1457 "interface/modem/general/ps_public_enum.h"
typedef enum {
    TCM_PDP_DEACT_REASON_NORMAL_DEACT,
    TCM_PDP_DEACT_REASON_DEACT_DUE_TO_TFT_CONFLICT,
    TCM_PDP_DEACT_REASON_DEACT_DUE_TO_TFT_VALIDATE_FAIL,
    TCM_PDP_DEACT_REASON_ESM_INIT_DEACT_FOR_NON_EMC_PDN,
    TCM_PDP_DEACT_REASON_ESM_INIT_DEACT_EPSB_FOR_ABNORMAL,

} tcm_pdp_deact_reason_enum;
# 1587 "interface/modem/general/ps_public_enum.h"
typedef enum
{
    L4C_CALL_OPERATION,
    L4C_SS_OPERATION,
    L4C_SMS_OPERATION,
    L4C_SMS_SCA_OPERATION,
    L4C_SMS_DA_OPERATION,
    L4C_CSD_OPERATION,
    L4C_INT_GPRS_OPERATION,
    L4C_EXT_GPRS_OPERATION,
    L4C_NONE_OPERATION = 255
}l4c_operation_type_enum;



typedef enum
{

   L4C_ACCURACY_PREFERED,
   L4C_SPEED_PREFERED
}l4c_plmn_list_preference_enum;
# 1626 "interface/modem/general/ps_public_enum.h"
typedef enum {
   PHB_LN_CALL,
   PHB_LN_VOIP,
   PHB_LN_VIDEO
} phb_ln_addr_type_enum;

typedef enum {
   PHB_STORAGE_NONE,
   PHB_STORAGE_NVRAM,
   PHB_STORAGE_SIM,
   PHB_STORAGE_SIM2,
   PHB_STORAGE_SIM3,
   PHB_STORAGE_SIM4,
   PHB_STORAGE_NUM = PHB_STORAGE_SIM4,
   PHB_STORAGE_MAX
} phb_storage_enum;


typedef enum {
   PHB_ERRNO_FAIL,
   PHB_ERRNO_SUCCESS,
   PHB_ERRNO_NOT_SUPPORT,
   PHB_ERRNO_READ_FAIL,
   PHB_ERRNO_READ_SUCCESS,
   PHB_ERRNO_READ_EMPTY,
   PHB_ERRNO_DELETE_EMPTY,
   PHB_ERRNO_NOT_READY,
   PHB_ERRNO_BUSY,
   PHB_ERRNO_ANR_FULL,
   PHB_ERRNO_EMAIL_FULL,
   PHB_ERRNO_SNE_FULL
} phb_errno_enum;

typedef enum {
   PHB_LND,
   PHB_LNM,
   PHB_LNR,
   PHB_LN_NONE,
   PHB_LN_MAX = PHB_LN_NONE
} phb_ln_type_enum;

typedef enum {
   PHB_NONE,
   PHB_ECC,
   PHB_FDN,
   PHB_BDN,
   PHB_MSISDN,
   PHB_SDN,
   PHB_PHONEBOOK,
   PHB_EXT1,

   PHB_SNE,
   PHB_AAS,
   PHB_ANR,
   PHB_GAS,
   PHB_GRP,
   PHB_EMAIL,
   PHB_PBC,

   PHB_TYPE_ENUM_MAX
} phb_type_enum;
# 1702 "interface/modem/general/ps_public_enum.h"
typedef enum
{
 L4C_PHB_UPDATE,
 L4C_PHB_DELETE,
 L4C_PHB_DELETE_ALL,
 L4C_PHB_WRITE_LND,
 L4C_PHB_WRITE_LNM,
 L4C_PHB_WRITE_LNR,
 L4C_PHB_DELETE_LND,
 L4C_PHB_DELETE_LNM,
 L4C_PHB_DELETE_LNR,
 L4C_PHB_UPDATE_NONE
}l4c_phb_update_enum;

typedef enum {
   PHB_NO_CAUSE,
   PHB_CAUSE_STORAGE_FULL,
   PHB_CAUSE_CAPACITY_EXCEEDED,
   PHB_CAUSE_NOT_SUPPORT
} phb_cause_enum;

typedef enum
{
    APPROVAL_TYPE_NONE,
    APPROVAL_TYPE_ECC_ONLY,
    APPROVAL_TYPE_FDN_ONLY,
    APPROVAL_TYPE_FULL
}l4c_phb_approval_type_enum;

typedef enum {
   PHB_BCD = 0x01,
   PHB_ASCII = 0x00,
   PHB_UCS2 = 0x08,
   PHB_UCS2_81 = 0x09,
   PHB_UCS2_82 = 0x10
} phb_charset_enum;



typedef enum
{
   L4C_OK,
   L4C_ERROR,
   L4C_NVRAM_ERROR_INIT = 5

} l4c_result_enum;



typedef enum
{
   PPP_OK,
   PPP_ERROR
} ppp_result_enum;


typedef enum
{
   L4C_NO_CAUSE,
   L4C_GEN_CAUSE
} l4c_cause_enum;

typedef enum
{
    ATCI_REQ_QOS = 0,
    ATCI_MIN_QOS,
    ATCI_NEG_QOS
} atci_qos_enum;

typedef enum {
    SUBSCRIBED_DELAY_CLASS = 0,
    RESERVED_NW_TO_MS_DELAY_CLASS = 0,
    DELAY_CLASS1,
    DELAY_CLASS2,
    DELAY_CLASS3,
    DELAY_CLASS4,
    RESERVED_BIDIRECT_DELAY_CLASS = 7,
    TOT_DELAY_CLASS = 8
} delay_class_enum;

typedef enum {
    SUBSCRIBED_REL_CLASS = 0,
    RESERVED_NW_TO_MS_REL_CLASS = 0,
    REL_CLASS1,
    REL_CLASS2,
    REL_CLASS3,
    REL_CLASS4,
    REL_CLASS5,
    RESERVED_BIDIRECT_REL_CLASS = 7
} reliability_class_enum;

typedef enum {
    SUBSCRIBED_PTC = 0,
    RESERVED_NW_TO_MS_PTC = 0,
    PTC_1,
    PTC_2,
    PTC_3,
    PTC_4,
    PTC_5,
    PTC_6,
    PTC_7,
    PTC_8,
    PTC_9,
    RESERVED_BIDIRECT_PTC = 15
} peak_throughput_class;

typedef enum {
    SUBSCRIBED_PREC_CLASS = 0,
    RESERVED_NW_TO_MS_PREC_CLASS = 0,
    PREC_CLASS1,
    PREC_CLASS2,
    PREC_CLASS3,
    RESERVED_BIDIRECT_PREC_CLASS = 7
} precedence_class_enum;

typedef enum {
    SUBSCRIBED_MEAN_THROUGHPUT = 0,
    RESERVED_NW_TO_MS_MEAN_THROUGHPUT = 0,
    MEAN_THROUGHPUT1,
    MEAN_THROUGHPUT2,
    MEAN_THROUGHPUT3,
    MEAN_THROUGHPUT4,
    MEAN_THROUGHPUT5,
    MEAN_THROUGHPUT6,
    MEAN_THROUGHPUT7,
    MEAN_THROUGHPUT8,
    MEAN_THROUGHPUT9,
    MEAN_THROUGHPUT10,
    MEAN_THROUGHPUT11,
    MEAN_THROUGHPUT12,
    MEAN_THROUGHPUT13,
    MEAN_THROUGHPUT14,
    MEAN_THROUGHPUT15,
    MEAN_THROUGHPUT16,
    MEAN_THROUGHPUT17,
    MEAN_THROUGHPUT18,
    RESERVED_BIDIRECT_MEAN_THROUGHPUT = 30,
    BEST_EFFORT_THROUGHPUT = 31
} mean_throughput_enum;

typedef enum
{
   L4C_GPRS_ATTACHED,
   L4C_NONE_GPRS,
   L4C_GPRS_DETACHED,
   L4C_INVALID_SIM,
   L4C_GPRS_ATTEMPT_ATTACH,
   L4C_GPRS_COVERAGE,
   L4C_PDP_ATTEMPT_ACT,
   L4C_PDP_DEACTIVED,
   L4C_PDP_ACTIVED
} l4c_gprs_status_enum;

typedef enum
{
   L4C_RAT_NONE = 0,
   L4C_RAT_GSM = 1,
   L4C_RAT_UMTS = 2,
   L4C_RAT_GSM_UMTS = L4C_RAT_GSM | L4C_RAT_UMTS,
   L4C_RAT_LTE = 4,
   L4C_RAT_GSM_LTE = L4C_RAT_GSM | L4C_RAT_LTE,
   L4C_RAT_UMTS_LTE = L4C_RAT_UMTS | L4C_RAT_LTE,
   L4C_RAT_GSM_UMTS_LTE = L4C_RAT_GSM | L4C_RAT_UMTS | L4C_RAT_LTE,
   L4C_RAT_COM_GSM = 8,
   L4C_RAT_C2K = 0x10,
   L4C_RAT_LTE_C2K = L4C_RAT_LTE | L4C_RAT_C2K,
   L4C_RAT_GSM_UMTS_LTE_C2K = L4C_RAT_GSM | L4C_RAT_UMTS | L4C_RAT_LTE | L4C_RAT_C2K
} l4c_rat_enum;

typedef enum
{
   L4C_PREFER_RAT_NONE = 0,
   L4C_PREFER_RAT_GSM = 1,
   L4C_PREFER_RAT_UMTS = 2,
   L4C_PREFER_RAT_LTE = 4,
   L4C_PREFER_RAT_INVALID
} l4c_prefer_rat_enum;

typedef enum
{
   L4C_SIM_NOT_INSERTED,
   L4C_SIM_INSERTED,
   L4C_SIM_BLOCK,
   L4C_SIM_NONE
}l4c_sim_status_enum;
# 1902 "interface/modem/general/ps_public_enum.h"
typedef enum
{
  CS_DOMAIN = 0,
  PS_DOMAIN = 1,
  CS_PS_DOMAIN = 2,
  DOMAIN_NONE = 3
} domain_id_enum;

typedef enum
{
    NONE_SPECIFIED = 0x0000,
    GPRS_SUPPORT = 0x0001,
    EDGE_SUPPORT = 0x0002,
    UMTS_SUPPORT = 0x0004,
    HSDPA_SUPPORT = 0x0008,
    HSUPA_SUPPORT = 0x0010,
    HSDPA_UPA_SUPPORT = 0x0018,
    HSDPAP_SUPPORT = 0x0020,
    HSDPAP_UPA_SUPPORT = 0x0030,
    HSUPAP_SUPPORT = 0x0040,
    HSUPAP_DPA_SUPPORT = 0x0048,
    HSPAP_SUPPORT = 0x0060,
    DC_DPA_SUPPORT = 0x0088,
    DC_DPA_UPA_SUPPORT = 0x0098,
    DC_HSDPAP_SUPPORT = 0x00a0,
    DC_HSDPAP_UPA_SUPPORT = 0x00b0,
    DC_HSUPAP_DPA_SUPPORT = 0x00c8,
    DC_HSPAP_SUPPORT = 0x00e0,
    LTE_SUPPORT = 0x1000,
    NOT_CHANGE = 0xffff
}data_speed_support_enum;

typedef enum
{
   DATA_SPEED_NONE_ACTIVATE = 0x0000,
   DATA_SPEED_GPRS_CAPABILITY = 0x0001,
   DATA_SPEED_EDGE_CAPABILITY = 0x0002,
   DATA_SPEED_UMTS_CAPABILITY = 0x0004,
   DATA_SPEED_HSDPA_CAPABILITY = 0x0008,
   DATA_SPEED_HSUPA_CAPABILITY = 0x0010,
   DATA_SPEED_HSDPA_HSUPA_CAPABILITY = 0x0018,
   DATA_SPEED_HSDPAP_CAPABILITY = 0x0020,
   DATA_SPEED_HSDPAP_UPA_CAPABILITY = 0x0030,
   DATA_SPEED_HSUPAP_CAPABILITY = 0x0040,
   DATA_SPEED_HSUPAP_DPA_CAPABILITY = 0x0048,
   DATA_SPEED_HSPAP_CAPABILITY = 0x0060,
   DATA_SPEED_DC_DPA_CAPABILITY = 0x0088,
   DATA_SPEED_DC_DPA_UPA_CAPABILITY = 0x0098,
   DATA_SPEED_DC_HSDPAP_CAPABILITY = 0x00a0,
   DATA_SPEED_DC_HSDPAP_UPA_CAPABILITY = 0x00b0,
   DATA_SPEED_DC_HSUPAP_DPA_CAPABILITY = 0x00c8,
   DATA_SPEED_DC_HSPAP_CAPABILITY = 0x00e0,
   DATA_SPEED_LTE_CAPABILITY = 0x1000
} data_speed_activate_enum;

typedef enum
{
    L4C_CAP_GPRS = 0x0001,
    L4C_CAP_EDGE = 0x0002,
    L4C_CAP_WCDMA = 0x0004,
    L4C_CAP_TDSCDMA = 0x0008,
    L4C_CAP_UMTS = (L4C_CAP_WCDMA | L4C_CAP_TDSCDMA),
    L4C_CAP_HSDPA = 0x0010,
    L4C_CAP_HSUPA = 0x0020,
    L4C_CAP_HSPA = (L4C_CAP_HSDPA | L4C_CAP_HSUPA),
    L4C_CAP_HSPAP = 0x0040,
    L4C_CAP_FDD_LTE = 0x0080,
    L4C_CAP_TDD_LTE = 0x0100,
    L4C_CAP_LTE = (L4C_CAP_FDD_LTE | L4C_CAP_TDD_LTE),
    L4C_CAP_MAX = (L4C_CAP_GPRS | L4C_CAP_EDGE | L4C_CAP_UMTS | L4C_CAP_HSPA | L4C_CAP_HSPAP | L4C_CAP_LTE)
}l4c_modem_capability_enum;

typedef enum
{
   CSD_BEARER_DIALUP,
   GPRS_BEARER_DIALUP,
   INVALID_BEARER
}l4c_dialup_bearer_enum;

typedef enum
{
   TCM_PDP_DEACTIVATE,
   TCM_PDP_ACTIVATE,
   TCM_PDP_DEACTIVATE_LOCAL
}l4c_tcm_pdp_action_enum;

typedef enum
{
   TCM_AT_PDP_CID = 1,
   TCM_EM_PDP_CID_1 = 2,
   TCM_EM_PDP_CID_2
}l4c_tcm_em_pdp_cid_enum;

typedef enum
{
    RMMI_UCM_ATD = 0,
    RMMI_UCM_ATD_2,
    RMMI_UCM_ATD_3,
    RMMI_UCM_ATD_4,
    RMMI_UCM_ATD_DATA,
    RMMI_UCM_ATH,
    RMMI_UCM_ATA,
    RMMI_UCM_BLDN,
    RMMI_UCM_CHLD,
    RMMI_UCM_CHUP,
    RMMI_UCM_MEM_DIAL,
    RMMI_UCM_MEM_DIAL_2,
    RMMI_UCM_MEM_DIAL_3,
    RMMI_UCM_MEM_DIAL_4
} rmmi_ucm_action_enum;

typedef enum
{
    RMMI_UCM_CAUSE_NONE = 0,
    RMMI_UCM_CAUSE_ATD_NOT_ALLOWED,
    RMMI_UCM_CAUSE_ATA_NOT_ALLOWED,
    RMMI_UCM_CAUSE_ATH_NOT_ALLOWED,
    RMMI_UCM_CAUSE_CHLD_NOT_ALLOWED,
    RMMI_UCM_CAUSE_NO_CALL_TO_ANSWER,
    RMMI_UCM_CAUSE_NO_CALL_TO_HANGUP,
    RMMI_UCM_CAUSE_NO_CALL_TO_HOLD,
    RMMI_UCM_CAUSE_NO_CALL_TO_REL,
    RMMI_UCM_CAUSE_NO_CALL_TO_ECT,
    RMMI_UCM_CAUSE_NO_CALL_TO_CONFERENCE,
    RMMI_UCM_CAUSE_INVALID_CALLID,
    RMMI_UCM_CAUSE_NO_NUM_EXIST,
    RMMI_UCM_CAUSE_ATD_DATA_NOT_ALLOWED
} rmmi_ucm_cause_enum;

typedef enum
{
    RMMI_UCM_RCODE_OK,
    RMMI_UCM_RCODE_CONNECT,
    RMMI_UCM_RCODE_RING,
    RMMI_UCM_RCODE_NO_CARRIER,
    RMMI_UCM_RCODE_ERROR,
    RMMI_UCM_RCODE_CCWA
} rmmi_rcode_type_enum;

typedef enum
{
    CLIR_INVOKE,
    CLIR_SUPPRESS,
    CLIR_AUTO
} rmmi_clir_enum;

typedef enum
{
    RMMI_CLI_VALID = 0,
    RMMI_CLI_WITHHELD = 1,
    RMMI_CLI_INTERWORK = 2,
    RMMI_CLI_COIN_PAYPHONE = 3,
    RMMI_CLI_OTHERS = 4

}rmmi_cli_validity_enum;

typedef enum
{
   CALL_DIAL,
   CALL_ANSWER
}l4c_data_call_op_enum;

typedef enum
{
    L4C_DISCONNECT_NONE,
    L4C_DISCONNECT_MO,
    L4C_DISCONNECT_MT
} l4c_ath_req_enum;

typedef enum
{
    L4C_SS_MO,
    L4C_SS_MT,
    L4C_SS_NONE
} l4c_ss_direction_enum;

typedef enum
{
   CSMCC_REL_HELD_OR_UDUB,
   CSMCC_REL_ACTIVE_AND_ACCEPT,
   CSMCC_REL_SPECIFIC_CALL,
   CSMCC_HOLD_ACTIVE_AND_ACCEPT,
   CSMCC_HOLD_ACTIVE_EXCEPT_SPECIFIC_CALL,
   CSMCC_ADD_HELD_CALL,
   CSMCC_EXPLICIT_CALL_TRANSFER,
   CSMCC_ACTIVATE_CCBS_CALL,
   CSMCC_REL_ALL_EXCEPT_WAITING_CALL,
   CSMCC_REL_SPECIFIC_ACTIVE_CALL,
   CSMCC_SWAP_CALL,
   CSMCC_REL_HELD,
   CSMCC_REL_ACTIVE,
   CSMCC_REL_ALL,
   CSMCC_REL_UDUB,
   CSMCC_REL_CCBS,
   CSMCC_REL_ACTIVE_AND_ACCEPT_WAITING,
   CSMCC_REL_ACTIVE_AND_ACCEPT_CCBS,
   CSMCC_REL_ACTIVE_AND_ACCEPT_HELD,
   CSMCC_HOLD_ACTIVE_AND_ACCEPT_WAITING,
   CSMCC_HOLD_ACTIVE_AND_ACCEPT_CCBS,
   CSMCC_VT_FALL_TO_VOICE,

   CSMCC_INVALID_CRSS_TYPE = 255
} csmcc_crss_req_enum;

typedef enum
{
   CLCC_MO_CALL,
   CLCC_MT_CALL,
   CLCC_UNKNOWN_DIR
} clcc_dir_enum;

typedef enum
{
   CSMCC_SETUP_MSG,
   CSMCC_DISCONNECT_MSG,
   CSMCC_ALERT_MSG,
   CSMCC_CALL_PROCESS_MSG,
   CSMCC_SYNC_MSG,
   CSMCC_PROGRESS_MSG,
   CSMCC_CALL_CONNECTED_MSG,
   CSMCC_ALL_CALLS_DISC_MSG = 129,
   CSMCC_MO_CALL_ID_ASSIGN_MSG = 130,
   CSMCC_STATE_CHANGE_HELD = 131,
   CSMCC_STATE_CHANGE_ACTIVE = 132,
   CSMCC_STATE_CHANGE_DISCONNECTED = 133,
   CSMCC_STATE_CHANGE_MO_DISCONNECTING =134,
   CSMCC_CPI_END = 255
}csmcc_cpi_msg_type_enum;


typedef enum {
    SAT_EVDL_CALL_CONNECT = 0,
    SAT_EVDL_CALL_DISCONNECT = 1
}csmcc_sat_evdl_call_status_enum;


typedef enum {
   INVALID_OPERATION,
   SS_OPERATION,
   SIM_OPERATION,
   GPRS_OPERATION,
   CC_OPERATION
} csmss_string_op_enum;





typedef enum
{
   ECALL_TEST,
   ECALL_RECONFIGURATION,
   ECALL_MANUALLY_INITIATED,
   ECALL_AUTOMATICALLY_INITIATED,
   ECALL_DISABLE = 0xff
} ecall_type_enum;



typedef enum
{
   L4C_SS_NotificationToMSUser_notifyLocationAllowed,
   L4C_SS_NotificationToMSUser_notifyAndVerify_LocationAllowedIfNoResponse,
   L4C_SS_NotificationToMSUser_notifyAndVerify_LocationNotAllowedIfNoResponse,

   L4C_SS_NotificationToMSUser_locationNotAllowed
}
L4C_SS_NotificationToMSUser;


typedef enum
{
   L4C_SS_OccurrenceInfo_oneTimeEvent,
   L4C_SS_OccurrenceInfo_multipleTimeEvent

}
L4C_SS_OccurrenceInfo;


typedef enum
{
   L4C_SS_LocationEstimateType_currentLocation,
   L4C_SS_LocationEstimateType_currentOrLastKnownLocation,
   L4C_SS_LocationEstimateType_initialLocation,

   L4C_SS_LocationEstimateType_activateDeferredLocation,
   L4C_SS_LocationEstimateType_cancelDeferredLocation
}
L4C_SS_LocationEstimateType;


typedef enum
{
   L4C_SS_LCS_FormatIndicator_logicalName,
   L4C_SS_LCS_FormatIndicator_e_mailAddress,
   L4C_SS_LCS_FormatIndicator_msisdn,
   L4C_SS_LCS_FormatIndicator_url,
   L4C_SS_LCS_FormatIndicator_sipUrl

}
L4C_SS_LCS_FormatIndicator;


typedef enum
{
   L4C_SS_VerificationResponse_permissionDenied,
   L4C_SS_VerificationResponse_permissionGranted

}
L4C_SS_VerificationResponse;


typedef enum
{
   L4C_SS_AreaType_countryCode,
   L4C_SS_AreaType_plmnId,
   L4C_SS_AreaType_locationAreaId,
   L4C_SS_AreaType_routingAreaId,
   L4C_SS_AreaType_cellGlobalId,

   L4C_SS_AreaType_utranCellId
}
L4C_SS_AreaType;


typedef enum
{
   L4C_SS_MOLR_Type_locationEstimate,
   L4C_SS_MOLR_Type_assistanceData,
   L4C_SS_MOLR_Type_deCipheringKeys

}
L4C_SS_MOLR_Type;


typedef enum
{
   L4C_SS_LocationMethod_msBasedEOTD,
   L4C_SS_LocationMethod_msAssistedEOTD,
   L4C_SS_LocationMethod_assistedGPS,

   L4C_SS_LocationMethod_msBasedOTDOA
}
L4C_SS_LocationMethod;


typedef enum
{
   L4C_SS_ResponseTimeCategory_lowdelay,
   L4C_SS_ResponseTimeCategory_delaytolerant

}
L4C_SS_ResponseTimeCategory;



typedef enum
{
   SMSAL_DEFAULT_PID = 0x00,
   SMSAL_TELEX_PID = 0x21,
   SMSAL_G3_FAX_PID = 0x22,
   SMSAL_G4_FAX_PID = 0x23,
   SMSAL_VOICE_PID = 0x24,
   SMSAL_ERMES_PID = 0x25,
   SMSAL_PAGING_PID = 0x26,
   SMSAL_X400_PID = 0x31,
   SMSAL_EMAIL_PID = 0x32

} smsal_pid_enum;

typedef enum
{
   SMSAL_DEFAULT_DCS = 0x00,
   SMSAL_8BIT_DCS = 0x04,
   SMSAL_UCS2_DCS = 0x08,
   SMSAL_RESERVED_DCS = 0x0c,


   SMSAL_EXT_DCS = 0x10

} smsal_dcs_enum;

typedef enum
{

   SMSAL_LINE_1 = 0,
   SMSAL_LINE_2 = 1,
   SMSAL_MAX_LINES = 2,


   SMSAL_PROFILE_1 = 0,
   SMSAL_PROFILE_2 = 1,
   SMSAL_PROFILE_3 = 2,
   SMSAL_PROFILE_4 = 3,
   SMSAL_PROFILE_NONE = 0xff
} smsal_dest_no_enum;

typedef enum
{
   SMSAL_CB_MI = 0x01,
   SMSAL_CB_MIR = 0x02,
   SMSAL_CB_DCS = 0x04,
   SMSAL_CB_MI_MASK = 0x08,
   SMSAL_CB_MIR_MASK = 0x10,
   SMSAL_CB_DCS_MASK = 0x20,
   SMSAL_CB_ALL_LANG = 0x40
} smsal_cb_para_enum;


typedef enum
{



   ST_COMP_MSG_RECV_BY_SME = 0x00,
   ST_COMP_MSG_FORWARD_NOT_CONF = 0x01,

   ST_COMP_MSG_REPLACE = 0x02,




   ST_TE1_CONGESTION = 0x20,
   ST_TE1_SME_BUSY = 0x21,
   ST_TE1_NO_RSP_FROM_SME = 0x22,
   ST_TE1_SERVICE_REJECT = 0x23,
   ST_TE1_QOS_NOT_AVAIL = 0x24,
   ST_TE1_ERROR_IN_SME = 0x25,




   ST_PE_REMOTE_PROC_ERROR = 0x40,
   ST_PE_INCOMP_DEST = 0x41,
   ST_PE_CONN_REJ_BY_SME = 0x42,
   ST_PE_NOT_OBTAINABLE = 0x43,
   ST_PE_QOS_NOT_AVAIL = 0x44,
   ST_PE_NO_INTERWK_AVAIL = 0x45,
   ST_PE_VP_EXPIRED = 0x46,
   ST_PE_DEL_BY_ORI_SME = 0x47,
   ST_PE_DEL_BY_SC = 0x48,
   ST_PE_NOT_EXIST = 0x49,




   ST_TE2_CONGESTION = 0x60,
   ST_TE2_SME_BUSY = 0x61,
   ST_TE2_NO_RSP_FROM_SME = 0x62,
   ST_TE2_SERVICE_REJECT = 0x63,
   ST_TE2_QOS_NOT_AVAIL = 0x64,
   ST_TE2_ERROR_IN_SME = 0x65,

   ST_SERVICE_REJECT = 0xff

} smsal_st_enum;







typedef enum
{
   SMSAL_SM = 0,
   SMSAL_ME = 1,
   SMSAL_SR = 2,
   SMSAL_BM = 3,
   SMSAL_TA = 4,
   SMSAL_SM_PREFER = 5,
   SMSAL_ME_PREFER = 6,
   SMSAL_MT = 7,
   SMSAL_STORAGE_UNSPECIFIED = 7

} smsal_storage_enum;
# 2414 "interface/modem/general/ps_public_enum.h"
typedef enum
{
   SMSAL_PARA_FO = 0x0001,
   SMSAL_PARA_PID = 0x0002,
   SMSAL_PARA_DCS = 0x0004,
   SMSAL_PARA_VP = 0x0008,
   SMSAL_PARA_SCA = 0x0010,
   SMSAL_PARA_PROFILE_NAME = 0x0020,
   SMSAL_PARA_SAVE_PROFILE = 0x0040,

   SMSAL_PARA_STATUS_REP = 0x0100,
   SMSAL_PARA_REPLY_PATH = 0x0200
} smsal_profile_para_enum;

typedef enum
{
   SMSAL_COM_PARA_FO = 0x0001,
   SMSAL_COM_PARA_BEARER = 0x0002,
   SMSAL_COM_PARA_PREFER_MEM = 0x0004,
   SMSAL_COM_PARA_STATUS_REP = 0x0008,
   SMSAL_COM_PARA_REPLY_PATH = 0x0010,
   SMSAL_COM_PARA_CBCH_REQ = 0x0020,
   SMSAL_COM_PARA_MAILBOX_ADDR = 0x0040,
   SMSAL_COM_PARA_ALL_CB_LANG = 0x0080,
   SMSAL_COM_PARA_RESTORE_PROFILE= 0x0100,
   SMSAL_COM_PARA_MBI_NUM = 0x0200

} smsal_common_para_enum;



typedef enum
{
   SMS_PS_ONLY = 0,
   SMS_CS_ONLY,
   SMS_PREFER_PS,
   SMS_PREFER_CS,
   NUM_OF_SMS_SERVICE_MODE
}sms_bearer_enum;

typedef enum
{

   SMSAL_REC_UNREAD = 0,
   SMSAL_REC_READ,
   SMSAL_STO_UNSENT,
   SMSAL_STO_SENT,

   SMSAL_ALL,




   SMSAL_INBOX_PARTIAL,
   SMSAL_OUTBOX_PARTIAL,
   SMSAL_STO_DRAFT,
   SMSAL_INVALID_STATUS
} smsal_status_enum;


typedef enum
{
    RMMI_SMSAL_SM = 0,
    RMMI_SMSAL_ME = 1,
    RMMI_SMSAL_MT = 2
} rmmi_smsal_storage_enum;

typedef enum
{
  L4C_NORMAL_CB_UPDATE = 0,
  L4C_ETWS_CB_START_RX,
  L4C_ETWS_CB_STOP_RX
} l4c_cb_set_type_enum;



typedef enum
{
    SCRI_REQ_SENT = 0,
    SCRI_CS_SESSION_ONGOING = 1,
    SCRI_PS_SIGNALLING_ONGOING = 2,
    SCRI_NO_PS_DATA_SESSION = 3,
    SCRI_REQ_NOT_SENT = 4,
    SCRI_NOT_ALLOWED = 5,
    SCRI_REQ_IND = 6
} end_session_result_enum;

typedef enum
{
   SCRI_REQ_FD = 0,
   SCRI_REQ_AFR = 1,
   SCRI_REQ_FOP = 2
} end_session_cause_enum;


typedef enum {
    GMMREG_CIPHER_OFF,
 GMMREG_CIPHER_ON,
 GMMREG_CIPHER_INVALID=0xff
} gmmreg_cipher_ind_enum;

typedef enum {
    NOT_ALLOWED_CSG = 0x00,
    ALLOWED_CSG = 0x01,
    OPERATOR_CSG = 0x02,
    UNAUTH_OPERATOR_CSG = 0x03
} csg_type_enum;



typedef enum
{
    SIM_RADIO_OFF = 0x00,
    SIM1_RADIO_ON = 0x01,
    SIM2_RADIO_ON = 0x02,
    SIM3_RADIO_ON = 0x04,
    SIM4_RADIO_ON = 0x08
} sim_radio_status_enum;

typedef enum
{
    SIM1_INSERTED = 0x01,
    SIM2_INSERTED = 0x02,
    SIM3_INSERTED = 0x04,
    SIM4_INSERTED = 0x08
} sim_inserted_status_enum;

typedef enum
{
    SIM1_ONLY_CONFIG = SIM1_RADIO_ON,
    SIM2_ONLY_CONFIG = SIM2_RADIO_ON,
    DAUL_SIM_CONFIG = SIM1_RADIO_ON | SIM2_RADIO_ON,
    TRIPLE_SIM_CONFIG = SIM1_RADIO_ON | SIM2_RADIO_ON | SIM3_RADIO_ON,
    QUAD_SIM_CONFIG = SIM1_RADIO_ON | SIM2_RADIO_ON | SIM3_RADIO_ON | SIM4_RADIO_ON,
    SIM_CONFIG_STATUS_NONE = 0xFF
} sim_config_status_enum;

typedef enum
{
    NO_SIM_INSERTED = 0,
    ONLY_SIM1_INSERTED = 1,
    ONLY_SIM2_INSERTED = 2,
    DUAL_SIM_INSERTED = 3,
    SIM_INSERT_STATUS_NONE = 0xFF
} sim_insert_status_enum;



typedef enum
{
    PHB_APPROVE_FORMAT_FAIL = 0,
    PHB_APPROVE_PHB_NOT_READY,

    PHB_APPROVE_FDN_BLOCKED = 2600
} phb_approve_cause_enum;


typedef enum
{
    ESDP_CATEGORY_WALLPAPER = 0,
    ESDP_CATEGORY_RINGTONE,
    ESDP_CATEGORY_HOMECITY,
    ESDP_CATEGORY_THEME,
    ESDP_CATEGORY_SHORTCUT,
    ESDP_CATEGORY_SCREENSAVER,
    ESDP_CATEGORY_PWRONDISPLAY,
    ESDP_CATEGORY_PWROFFDISPLAY,
    ESDP_CATEGORY_MAX = ESDP_CATEGORY_PWROFFDISPLAY
}esdp_category_enum;

typedef enum
{
   TYPE_NO_REQUIRED,
   TYPE_PHONELOCK,
   TYPE_CHV1,
   TYPE_CHV2,
   TYPE_UBCHV1,
   TYPE_UBCHV2,
   TYPE_NP,
   TYPE_NSP,
   TYPE_SP,
   TYPE_CP,
   TYPE_IMSI_LOCK,
   TYPE_PERSONALIZATION_KEY,
   TYPE_CHV1_BLOCKED,
   TYPE_CHV2_BLOCKED,
   TYPE_SIM_CARD_BLOCKED,
   TYPE_UBCHV2_BLOCKED,
   TYPE_UBCHV1_CHV1_NOT_LOCK,
   TYPE_LINK_NS_SP,
   TYPE_LINK_SIM_C,
   TYPE_UNSPECIFIED,
   TYPE_UNEXPECTED_ERROR
}smu_security_type_enum;


typedef enum
{
   SMU_SIM_NOT_READY,
   SMU_SIM_NO_IMSI,
   SMU_SIM_REPLACED,
   SMU_SIM_NOT_REPLACED
}smu_sim_status_enum;

typedef enum
{
   SMU_ADD_PLMNSEL,
   SMU_REMOVE_PLMNSEL,
   SMU_REPLACE_PLMNSEL,
   SMU_INSERT_EMPTY
}smu_plmnsel_op_enum;



extern smu_sim_status_enum check_sim_status(kal_uint8 simInterface);
# 2637 "interface/modem/general/ps_public_enum.h"
typedef enum {
    SML_PROTECTION_SCHEME_NONE = 0,
    SML_PROTECTION_SCHEME_HMAC_SHA256 = 1,
    SML_PROTECTION_SCHEME_RSA2048 = 2,
} sml_protection_scheme_enum;

typedef enum {
    SML_TMO_STATE_PERMANENT_LOCK = 0,
    SML_TMO_STATE_TEMPORARY_UNLOCK = 1,
    SML_TMO_STATE_PERMANENT_UNLOCK = 2,
    SML_TMO_STATE_PARTIAL_UNLOCK = 3,
} sml_tmo_state_enum;

typedef enum {
    SML_EVENT_REBOOT_REQUIRED
} sml_event_enum;


typedef enum {
    SML_STATE_NULL,
    SML_STATE_LOCK,
    SML_STATE_UNLOCK,
    SML_STATE_AUTOLOCK,
    SML_STATE_DISABLE
} sml_state_enum;

typedef enum {
    SML_KEY_EMPTY,
    SML_KEY_SET
} sml_key_state_enum;

typedef enum {
    SML_OP_UNLOCK,
    SML_OP_LOCK,
    SML_OP_ADD,
    SML_OP_REMOVE,
    SML_OP_DISABLE
} sml_op_enum;

typedef enum {
    SML_CAT_N,
    SML_CAT_NS,
    SML_CAT_SP,
    SML_CAT_C,
    SML_CAT_SIM,
    SML_CAT_NS_SP,
    SML_CAT_SIM_C,
    SML_CAT_SIZE
} sml_cat_enum;

typedef enum {
    SML_MAGIC_HEAD,
    SML_MAGIC_TAIL,
    SML_CAT_META,
    SML_CAT_KEY,
    SML_CAT_CODE,
    SML_CAT_RANGE,


    SML_TMO_CAT_VERSION,
    SML_TMO_CAT_PERTECTION_SCHEME,
    SML_TMO_CAT_STATE,
    SML_TMO_CAT_LENGTH,
    SML_TMO_CAT_NUM_PLMN,
    SML_TMO_CAT_PLMN_LIST,
    SML_TMO_CAT_NUM_GID,
    SML_TMO_CAT_GID_LIST,
    SML_TMO_CAT_START_TIME,
    SML_TMO_CAT_END_TIME,
    SML_TMO_CAT_IMEI,
    SML_TMO_CAT_VERIFICATION_CODE,
    SML_TMO_CAT_UNLOCK_TIME_COUNTER,
} sml_ctx_enum;


typedef enum
{
    RAC_DETACH,
    RAC_ATTACH
} l4crac_ps_attach_enum;

typedef enum
{
    RAC_CS = 1,
    RAC_PS = 2,
    RAC_CS_AND_PS = 3
} l4crac_attach_type_enum;

typedef enum
{
   L4C_RAC_OK,
   L4C_RAC_NO_CELL,
   L4C_RAC_LIMITED_SERVICE,
   L4C_RAC_ERROR,
   L4C_RAC_INVALID_SIM,
   L4C_RAC_ATTEMPT_TO_UPDATE,
   L4C_RAC_SEARCHING,
   L4C_RAC_NULL
} l4c_rac_response_enum;

typedef enum
{
   DATA_PREFER,
   CALL_PREFER,
   AS_OPTIMAL
} gprs_transfer_preference_enum;

typedef enum
{
 L4C_APPLY_AT_RUNTIME = 0,
    L4C_APPLY_AFTER_REBOOT,
    L4C_APPLY_INVALID
} l4c_hspa_mode_apply_enum;

typedef enum
{
 L4C_HSPA_OFF = 0,
 L4C_HSDPA_ON = 1,
 L4C_HSDPA_HSUPA_ON = 2,
 L4C_HSPAPLUS_ON = 3,
 L4C_HSPA_INVLIAD
} l4c_hspa_preference_enum;


typedef enum
{
    MANUAL_MODE = 0,
    AUTOMATIC_MODE = 1
} plmn_selection_mode_enum;

 typedef enum {
   PHB_NORMAL_NUM = 129,
   PHB_INTER_NUM = 145,
   PHB_UNKNOW = 255
} phb_ton_enum;




typedef enum
{
    RMMI_PLMN_LONG_ALPHA,
    RMMI_PLMN_SHORT_ALPHA,
    RMMI_PLMN_NUMERIC
} rmmi_plmn_format_enum;

typedef enum
{
    RMMI_DISABLE_REPORT = 0,
    RMMI_ENABLE_REPORT
} rmmi_report_mode_enum;

typedef enum
{
    RMMI_DISABLE_NW_REG_REPORT,
    RMMI_ENABLE_NW_REG_REPORT,
    RMMI_ENABLE_LOC_REPORT,
    RMMI_ENABLE_LOC_AND_CAUSE_REPORT,
} rmmi_nw_reg_report_mode_enum;

typedef enum
{
    RMMI_NUM_PARTIAL_HEAD_TAIL,
    RMMI_VERBOSE_FULL_HEAD_TAIL
} rmmi_result_code_format;

typedef enum
{
    RMMI_SUPPRESS_OFF,
    RMMI_SUPRESS_ON
} rmmi_result_code_suppress_enum;

typedef enum
{
    RMMI_SIMPLE_ERROR,
    RMMI_NUMERIC_ERROR,
    RMMI_TEXT_ERROR
} rmmi_error_report_mode_enum;

typedef enum
{
    RMMI_UART_TO_SIM1,
    RMMI_UART_TO_SIM2,
    RMMI_UART_TO_SIM3,
    RMMI_UART_TO_SIM4,
    RMMI_SIM_UART_SETTING_NONE = 0xFF
}rmmi_sim_uart_setting_enum;







typedef enum
{
    L4C_SETTING_FLIGHT_MODE,
    L4C_SETTING_WLAN_FLIGHT_MODE,
    L4C_SETTING_DUAL_SIM_MODE,
    L4C_SETTING_DUAL_SIM_UART,
    L4C_SETTING_3G_SERVICE_BITMAP,
    L4C_SETTING_MMDC_MODE,
    L4C_SETTING_MAX
}l4c_nvram_setting_enum;

typedef enum
{
   MT_CALL_ALLOW,
   MT_CALL_REJECT,
   MT_CALL_APPROVAL_ENABLE,
   MT_CALL_APPROVAL_DISABLE
}l4c_mt_call_approval_enum;

typedef enum
{
   ALS_DIAL_BY_SETTING,
   ALS_DIAL_LINE1,
   ALS_DIAL_LINE2
}l4c_als_dial_type_enum;

typedef enum
{
   INFO_ECC_CHECK_BY_MODEM,
   INFO_ECC_CALL,
   INFO_NORMAL_CALL,
   INFO_ECALL_START,
   INFO_ECALL_TEST = 0x00 + INFO_ECALL_START,
   INFO_ECALL_RECONFIGURATION = 0x01 + INFO_ECALL_START,
   INFO_ECALL_MANUALLY_INITIATED = 0x02 + INFO_ECALL_START,
   INFO_ECALL_AUTOMATICALLY_INITIATED = 0x03 + INFO_ECALL_START
}l4c_mmi_ecc_info_enum;

typedef enum
{
   SINGLE_VOICE_CALL,
   SINGLE_DATA_CALL,
   SINGLE_FAX_CALL,
   FOLLOW_VOICE_CALL,
   ALT_DATA_VOICE_CALL,
   ALT_FAX_VOICE_CALL,
   FOLLOW_DATA_CALL,
   ALT_DATA_DATA_CALL,
   ALT_FAX_FAX_CALL,
   UNKNOWN_CALL
} l4ccsm_cc_call_mode_enum;


typedef enum
{
    L4C_NONE_SPECIFIED = 0x0000,
    L4C_GPRS_SUPPORT = 0x0001,
    L4C_EDGE_SUPPORT = 0x0002,
    L4C_UMTS_SUPPORT = 0x0004,
    L4C_HSDPA_SUPPORT = 0x0008,
    L4C_HSUPA_SUPPORT = 0x0010,
    L4C_HSDPA_UPA_SUPPORT = 0x0018,

    L4C_HSDPAP_SUPPORT = 0x0020,
    L4C_HSDPAP_UPA_SUPPORT = 0x0030,
    L4C_HSUPAP_SUPPORT = 0x0040,
    L4C_HSUPAP_DPA_SUPPORT = 0x0048,
    L4C_HSPAP_SUPPORT = 0x0060,
    L4C_DC_DPA_SUPPORT = 0x0088,
    L4C_DC_DPA_UPA_SUPPORT = 0x0098,
    L4C_DC_HSDPAP_SUPPORT = 0x00a0,
    L4C_DC_HSDPAP_UPA_SUPPORT = 0x00b0,
    L4C_DC_HSUPAP_DPA_SUPPORT = 0x00c8,
    L4C_DC_HSPAP_SUPPORT = 0x00e0,
    L4C_LTE_SUPPORT = 0x1000,
    L4C_NOT_CHANGE = 0xffff
} l4c_data_speed_support_enum;




typedef enum
{
    L4C_NONE_ACTIVATE = 0,
    L4C_GPRS_CAPABILITY,
    L4C_EDGE_CAPABILITY,
    L4C_UMTS_CAPABILITY,
    L4C_HSDPA_CAPABILITY,
    L4C_HSUPA_CAPABILITY,
    L4C_HSDPA_HSUPA_CAPABILITY,

    L4C_HSDPAP_CAPABILITY,
    L4C_HSDPAP_UPA_CAPABILITY,
    L4C_HSUPAP_CAPABILITY,
    L4C_HSUPAP_DPA_CAPABILITY,
    L4C_HSPAP_CAPABILITY,
    L4C_DC_DPA_CAPABILITY,
    L4C_DC_DPA_UPA_CAPABILITY,
    L4C_DC_HSDPAP_CAPABILITY,
    L4C_DC_HSDPAP_UPA_CAPABILITY,
    L4C_DC_HSUPAP_DPA_CAPABILITY,
    L4C_DC_HSPAP_CAPABILITY,
    L4C_LTE_CAPABILITY
} l4c_data_bearer_capablility_enum;
# 2955 "interface/modem/general/ps_public_enum.h"
typedef enum
{
    RMMI_CIND_BEGIN = 0,
    RMMI_CIND_BATTCHG,
    RMMI_CIND_SIGNAL,
    RMMI_CIND_SERVICE,
    RMMI_CIND_MESSAGE,
    RMMI_CIND_CALL,
    RMMI_CIND_ROAM,
    RMMI_CIND_SMSMEMSTATUS,
    RMMI_CIND_CALLSETUP,
    RMMI_CIND_END
} rmmi_cind_enum;


typedef enum
{
    RMMI_CIND_CC_NONE = 0,
    RMMI_CIND_CC_ACTIVE = 1
} rmmi_cind_call;

typedef enum
{
    RMMI_CIND_CSUP_NONE = 0,
    RMMI_CIND_CSUP_INCOMING,
    RMMI_CIND_CSUP_OUTGOING,
    RMMI_CIND_CSUP_ALERT,
    RMMI_CIND_CSU_PEND
} rmmi_cind_callsetup;

typedef enum
{
    RMMI_CIND_HELD_NONE = 0,
    RMMI_CIND_HELD_ACTIVE_HOLD = 1,
    RMMI_CIND_HELD_HOLD = 2
} rmmi_cind_callheld;

typedef enum
{
    NW_BAND_PGSM900 = 0x01,
    NW_BAND_EGSM900 = 0x02,
    NW_BAND_RGSM900 = 0x04,
    NW_BAND_DCS1800 = 0x08,
    NW_BAND_PCS1900 = 0x10,
    NW_BAND_GSM450 = 0x20,
    NW_BAND_GSM480 = 0x40,
    NW_BAND_GSM850 = 0x80
} l4c_nw_band_enum;

typedef enum {

   CM_RADIO_LINK_FAIL = 0,




   CM_UNASSIGNED_NUM = 1,
   CM_NO_ROUTE_TO_DESTINATION = 3,
   CM_CHANNEL_UN_ACCP = 6,
   CM_OPR_DTR_BARRING = 8,
   CM_CALL_BARRED = 10,
   CM_RESERVED = 11,

   CM_NORMAL_CALL_CLR = 16,
   CM_USER_BUSY = 17,
   CM_NO_USER_RESPONDING = 18,
   CM_NO_ANSWER_ON_ALERT = 19,
   CM_CALL_REJECTED = 21,
   CM_NUMBER_CHANGED = 22,
   CM_CALL_REJECT_DUO_TO_FEATURE = 24,
   CM_PRE_EMPTION = 25,
   CM_NON_SEL_USER_CLEAR = 26,
   CM_DEST_OUT_OF_ORDER = 27,
   CM_INVALID_NUMBER_FORMAT = 28,
   CM_FACILITY_REJECT = 29,
   CM_RES_STATUS_ENQ = 30,
   CM_NORMAL_UNSPECIFIED = 31,

   CM_NO_CIRCUIT_CHANNEL_AVAIL = 34,
   CM_NETWORK_OUT_OF_ORDER = 38,
   CM_TEMPORARY_FAILURE = 41,
   CM_SWITCH_EQUIPMENT_CONGESTION = 42,
   CM_ACCESS_INFO_DISCARDED = 43,
   CM_REQUESTED_CKT_CHANEL_NOT_AVIL = 44,
   CM_RESOURCE_UNAVAIL_UNSPECIFIED = 47,

   CM_QOS_UNAVAIL = 49,
   CM_REQ_FAC_NOT_SUBS = 50,
   CM_IC_BAR_CUG = 55,
   CM_BEARER_CAP_NOT_AUTHORISED = 57,
   CM_BEARER_CAP_NOT_AVAIL = 58,
   CM_SER_UNAVAILABLE = 63,

   CM_BEARER_SER_UNIMPL = 65,
   CM_ACM_EXCEEDED = 68,
   CM_REQ_FACILITY_UNAVAIL = 69,
   CM_RESTR_DIGITAL_INFO = 70,
   CM_SER_OPT_UNIMPL = 79,

   CM_INVALID_TI_VALUE = 81,
   CM_USER_NOT_IN_CUG = 87,
   CM_INCOMPATIBLE_DEST = 88,
   CM_INVALID_TRANSIT_NW_SEL = 91,
   CM_SEMANTIC_ERR = 95,

   CM_INVALID_MANDATORY_INF = 96,
   CM_MSG_TYPE_UNIMPL = 97,
   CM_MSG_TYPE_NOT_COMPATIBLE = 98,
   CM_IE_NON_EX = 99,
   CM_COND_IE_ERR = 100,
   CM_INCOMP_MESG_WITH_STATE = 101,
   CM_RECOVERY_ON_TIMER_EXPIRY = 102,
   CM_PROTOCOL_ERR_UNSPECIFIED = 111,

   CM_INTER_WRK_UNSPECIFIED = 127,







   TELEMATIC_INT_WRK_NOT_SUPPORT = 0x80,
   SMS_TYPE0_NOT_SUPPORT = 0x81,
   CANNOT_REPLACE_MSG = 0x82,
   UNSPECIFIED_PID_ERROR = 0x8F,


   ALPHABET_NOT_SUPPORT = 0x90,
   MSG_CLASS_NOT_SUPPORT = 0x91,
   UNSPECIFIED_TP_DCS = 0x9f,


   CMD_CANNOT_ACTION = 0xa0,
   CMD_NOT_SUPPORT = 0xa1,
   UNSPECIFIED_CMD_ERROR = 0xaf,

   TPDU_NOT_SUPPORT = 0xb0,
   SC_BUSY = 0xc0,
   NO_SC_SUBSCRIPTION = 0xc1,
   SC_SYS_FAILURE = 0xc2,
   INVALID_SME_ADDR = 0xc3,
   DEST_SME_BARRED = 0xc4,
   SM_REJ_DUP_SM = 0xc5,
   TP_VPF_NOT_SUPPORT = 0xc6,
   TP_VP_NOT_SUPPORT = 0xc7,

   SIM_STORAGE_FULL = 0xd0,
   NO_SMS_STO_IN_SIM = 0xd1,
   ERROR_IN_MS = 0xd2,
   MEM_CAP_EXCEEDED = 0xd3,


   SMS_SAT_BUSY = 0xd4,
   SMS_SAT_DL_ERROR = 0xd5,


   SMS_CP_RETRY_EXCEED = 0xe0,
   SMS_RP_TR1M_TIMEOUT = 0xe1,
   SMS_CONNECTION_BROKEN = 0xe2,

   UNSPECIFIED_TP_FCS = 0xff,



   INVALID_PDU_MODE_PARA = 304,
   INVALID_TEXT_MODE_PARA = 305,
   SMS_SIM_FAILURE = 313,
   MEM_FAILURE = 320,
   INVALID_MEM_INDEX = 321,
   MEM_FULL = 322,
   SCA_UNKNOWN = 330,
   NO_CNMA_EXPECTED = 340,
   SMSAL_UNSPECIFIED_ERROR_CAUSE = 500,


   SMSAL_NO_ERROR = 512,
   MSG_LEN_EXCEEDED = 513,

   INVALID_REQ_PARAMETER = 514,
   SMS_ME_STORAGE_FAILURE = 515,
   SMSAL_INVALID_BEARER = 516,
   SMSAL_INVALID_SERVICE_MODE = 517,
   SMSAL_INVALID_STORAGE_TYPE = 518,
   SMSAL_INVALID_MSG_FORMAT = 519,
   TOO_MANY_MO_CONCAT_MSG = 520,
   SMSAL_NOT_READY = 521,
   SMSAL_NO_MO_SERVICE = 522,
   NOT_SUPP_SR_CMD_IN_STORAGE = 523,
   SMSAL_NOT_SUPPORT_MSG_TYPE = 524,
   SMS_RL_NO_FREE_ENTITY = 525,
   SMS_PORT_NUM_ALREADY_REG = 526,
   SMS_PORT_NUM_NO_FREE_ENTITY= 527,
   SMS_RL_MMS_STATE_ERR = 528,
   SMS_MO_SMS_NOT_ALLOW = 529,
   SMS_PS_SUSPENDED = 530,
   SMS_ME_STORAGE_FULL = 531,
   SMS_SIM_REFRESHING = 532,




 CSMCC_CMD_NOT_ALLOW = 768,
 CSMCC_ILLEGAL_CALL_ID,
 CSMCC_CALL_ALLOC_FAIL,
 CSMCC_BC_FILL_FAIL,
 CSMCC_CALL_RE_EST,
 CSMCC_ILLEGAL_DTMF_TONE,
 CSMCC_ILLEGAL_BC,
 CSMCC_MODIFY_ACTUAL_MODE,
 CSMCC_DATA_ACT_FAIL,
 CSMCC_NO_RESPONSE_FROM_NW,
 CSMCC_CALL_ACCEPT_NOT_ALLOW,
        CSMCC_SAT_CALL_CTRL_REJECTED,
        CSMCC_VT_NO_UMTS_CAPABILITY,

   CM_L4C_GEN_CAUSE = 896,
   CM_L4C_CC_CALL_ABORT = 897,

   CM_L4C_CC_CALL_DISC_IND = 898,





   CM_SS_ERR_START = 1024,
   CM_SS_ERR_UNKNOWNSUBSCRIBER = 1 + CM_SS_ERR_START,
   CM_SS_ERR_ILLEGALSUBSCRIBER = 9 + CM_SS_ERR_START,
   CM_SS_ERR_BEARERSERVICENOTPROVISIONED = 10 + CM_SS_ERR_START,
   CM_SS_ERR_TELESERVICENOTPROVISIONED = 11 + CM_SS_ERR_START,
   CM_SS_ERR_ILLEGALEQUIPMENT = 12 + CM_SS_ERR_START,
   CM_SS_ERR_CALLBARRED = 13 + CM_SS_ERR_START,
   CM_SS_ERR_ILLEGALSS_OPERATION = 16 + CM_SS_ERR_START,
   CM_SS_ERR_SS_ERRORSTATUS = 17 + CM_SS_ERR_START,
   CM_SS_ERR_SS_NOTAVAILABLE = 18 + CM_SS_ERR_START,
   CM_SS_ERR_SS_SUBSCRIPTIONVIOLATION = 19 + CM_SS_ERR_START,
   CM_SS_ERR_SS_INCOMPABILITY = 20 + CM_SS_ERR_START,
   CM_SS_ERR_FACILITYNOTSUPPORTED = 21 + CM_SS_ERR_START,
   CM_SS_ERR_ABSENTSUBSCRIBER = 27 + CM_SS_ERR_START,
   CM_SS_ERR_SHORTTERMDENIAL = 29 + CM_SS_ERR_START,
   CM_SS_ERR_LONGTERMDENIAL = 30 + CM_SS_ERR_START,
   CM_SS_ERR_SYSTEMFAILURE = 34 + CM_SS_ERR_START,
   CM_SS_ERR_DATAMISSING = 35 + CM_SS_ERR_START,
   CM_SS_ERR_UNEXPECTEDDATAVALUE = 36 + CM_SS_ERR_START,
   CM_SS_ERR_PW_REGISTRATIONFAILURE = 37 + CM_SS_ERR_START,
   CM_SS_ERR_NEGATIVEPW_CHECK = 38 + CM_SS_ERR_START,
   CM_SS_ERR_NUMBEROFPW_ATTEMPTSVIOLATION = 43 + CM_SS_ERR_START,
   CM_SS_ERR_POSITIONMETHODFAILURE = 54 + CM_SS_ERR_START,
   CM_SS_ERR_UNKNOWNALPHABET = 71 + CM_SS_ERR_START,
   CM_SS_ERR_USSD_BUSY = 72 + CM_SS_ERR_START,
   CM_SS_ERR_REJECTEDBYUSER = 121 + CM_SS_ERR_START,
   CM_SS_ERR_REJECTEDBYNETWORK = 122 + CM_SS_ERR_START,
   CM_SS_ERR_DEFLECTIONTOSERVEDSUBSCRIBER = 123 + CM_SS_ERR_START,
   CM_SS_ERR_SPECIALSERVICECODE = 124 + CM_SS_ERR_START,
   CM_SS_ERR_INVALIDDEFLECTIONTONUMBER = 125 + CM_SS_ERR_START,
   CM_SS_ERR_MAXNUMBEROFMPTY_PARTICIPANTSEXCEEDED = 126 + CM_SS_ERR_START,
   CM_SS_ERR_RESOURCESNOTAVAILABLE = 127 + CM_SS_ERR_START,

   CM_SS_GENERALPROBLEM_START = 1152,
   CM_SS_GENERALPROBLEM_UNRECOGNIZEDCOMPONENT = CM_SS_GENERALPROBLEM_START,
   CM_SS_GENERALPROBLEM_MISTYPEDCOMPONENT = 1 + CM_SS_GENERALPROBLEM_START,
   CM_SS_GENERALPROBLEM_BADLYSTRUCTUREDCOMPONENT = 2 + CM_SS_GENERALPROBLEM_START,

   CM_SS_INVOKEPROBLEM_START = 1155,
   CM_SS_INVOKEPROBLEM_DUPLICATEINVOKEID = CM_SS_INVOKEPROBLEM_START,
   CM_SS_INVOKEPROBLEM_UNRECOGNIZEDOPERATION = 1 + CM_SS_INVOKEPROBLEM_START,
   CM_SS_INVOKEPROBLEM_MISTYPEDPARAMETER = 2 + CM_SS_INVOKEPROBLEM_START,
   CM_SS_INVOKEPROBLEM_RESOURCELIMITATION = 3 + CM_SS_INVOKEPROBLEM_START,
   CM_SS_INVOKEPROBLEM_INITIATINGRELEASE = 4 + CM_SS_INVOKEPROBLEM_START,
   CM_SS_INVOKEPROBLEM_UNRECOGNIZEDLINKDID = 5 + CM_SS_INVOKEPROBLEM_START,
   CM_SS_INVOKEPROBLEM_LINKEDRESONSEUNEXPECTED = 6 + CM_SS_INVOKEPROBLEM_START,
   CM_SS_INVOKEPROBLEM_UNEXPECTEDLINKEDOPERATION = 7 + CM_SS_INVOKEPROBLEM_START,

   CM_SS_RETURNRESULTPROBLEM_START = 1163,
   CM_SS_RETURNRESULTPROBLEM_RR_UNRECOGNIZEDINVOKEID = CM_SS_RETURNRESULTPROBLEM_START,
   CM_SS_RETURNRESULTPROBLEM_RR_RETURNRESULTUNEXPECTED = 1 + CM_SS_RETURNRESULTPROBLEM_START,
   CM_SS_RETURNRESULTPROBLEM_RR_MISTYPEDPARAMETER = 2 + CM_SS_RETURNRESULTPROBLEM_START,

   CM_SS_RETURNERRORPROBLEM_START = 1166,
   CM_SS_RETURNERRORPROBLEM_RE_UNRECOGNIZEDINVOKEID = CM_SS_RETURNERRORPROBLEM_START,
   CM_SS_RETURNERRORPROBLEM_RE_RETURNERRORUNEXPECTED = 1 + CM_SS_RETURNERRORPROBLEM_START,
   CM_SS_RETURNERRORPROBLEM_RE_UNRECOGNIZEDERROR = 2 + CM_SS_RETURNERRORPROBLEM_START,
   CM_SS_RETURNERRORPROBLEM_RE_UNEXPECTEDERROR = 3 + CM_SS_RETURNERRORPROBLEM_START,
   CM_SS_RETURNERRORPROBLEM_RE_MISTYPEDPARAMETER = 4 + CM_SS_RETURNERRORPROBLEM_START,


   CM_SS_LCS_EMM_STATUS_START = 1171,
   CM_SS_LCS_EMM_STATUS_SUCCESS = CM_SS_LCS_EMM_STATUS_START,
   CM_SS_LCS_EMM_STATUS_ERR_CONN_FAIL = 1 + CM_SS_LCS_EMM_STATUS_START,
   CM_SS_LCS_EMM_STATUS_ERR_NW_NO_LCS = 2 + CM_SS_LCS_EMM_STATUS_START,
   CM_SS_LCS_EMM_STATUS_ERR_CS_LCS_ONLY = 3 + CM_SS_LCS_EMM_STATUS_START,


   CM_SS_OTHER_CAUSE_START = 1181,
   CM_SS_CTRL_BY_SIM_FAIL_NOT_INFORM_USER = CM_SS_OTHER_CAUSE_START,
# 3258 "interface/modem/general/ps_public_enum.h"
   CM_MM_CAUSE_START = 2048,
   CM_MM_CAUSE_NONE = 0x00 + CM_MM_CAUSE_START,
   CM_MM_IMSI_UNKNOWN_IN_HLR = 0x02 + CM_MM_CAUSE_START,
   CM_MM_ILLEGAL_MS = 0x03 + CM_MM_CAUSE_START,
   CM_MM_IMSI_UNKNOWN_IN_VLR = 0x04 + CM_MM_CAUSE_START,
   CM_MM_IMEI_NOT_ACCEPTED = 0x05 + CM_MM_CAUSE_START,
   CM_MM_ILLEGAL_ME = 0x06 + CM_MM_CAUSE_START,
   CM_MM_GPRS_NOT_ALLOWED = 0x07 + CM_MM_CAUSE_START,
   CM_MM_GPRS_NON_GPRS_NOT_ALLOWED = 0x08 + CM_MM_CAUSE_START,
   CM_MM_MS_ID_NOT_DERIVED_BY_NW = 0x09 + CM_MM_CAUSE_START,
   CM_MM_IMPLICIT_DETACH = 0x0a + CM_MM_CAUSE_START,
   CM_MM_PLMN_NOT_ALLOWED = 0x0b + CM_MM_CAUSE_START,
   CM_MM_LOCATION_AREA_NOT_ALLOWED = 0x0c + CM_MM_CAUSE_START,
   CM_MM_ROAMING_AREA_NOT_ALLOWED = 0x0d + CM_MM_CAUSE_START,
   CM_MM_GPRS_NOT_ALLOWED_IN_PLMN = 0x0e + CM_MM_CAUSE_START,
   CM_MM_NO_SUITABLE_CELLS_IN_LA = 0x0f + CM_MM_CAUSE_START,
   CM_MM_MSC_TEMP_NOT_REACHABLE = 0x10 + CM_MM_CAUSE_START,
   CM_MM_NETWORK_FAILURE = 0x11 + CM_MM_CAUSE_START,
   CM_MM_MAC_FAILURE = 0x14 + CM_MM_CAUSE_START,
   CM_MM_SYNC_FAILURE = 0x15 + CM_MM_CAUSE_START,
   CM_MM_CONGESTION = 0x16 + CM_MM_CAUSE_START,
   CM_MM_NOT_AUTHORIZED_FOR_THIS_CSG = 0x19 + CM_MM_CAUSE_START,
   CM_MM_SERV_OPTION_NOT_SUPPORTED = 0x20 + CM_MM_CAUSE_START,
   CM_MM_REQ_SERV_OPTION_NOT_SUBSCRIBED = 0x21 + CM_MM_CAUSE_START,
   CM_MM_SERV_OPTION_TEMP_OUT_OF_ORDER = 0x22 + CM_MM_CAUSE_START,
   CM_MM_CALL_CANNOT_BE_IDENTIFIED = 0x26 + CM_MM_CAUSE_START,
   CM_MM_NO_PDP_CONTEXT_ACTIVATED = 0x28 + CM_MM_CAUSE_START,
   CM_MM_RETRY_UPON_ENTRY_INTO_NEWCELL_MIN = 0x30 + CM_MM_CAUSE_START,
   CM_MM_RETRY_UPON_ENTRY_INTO_NEWCELL_MAX = 0x3f + CM_MM_CAUSE_START,
   CM_MM_SEMANTICALLY_INCORRECT_MSG = 0x5f + CM_MM_CAUSE_START,
   CM_MM_INVALID_MM_MAND_INFO = 0x60 + CM_MM_CAUSE_START,
   CM_MM_MSG_TYPE_NON_EXISTENT = 0x61 + CM_MM_CAUSE_START,
   CM_MM_MSG_TYPE_NOT_IMPLEMENTED = 0x61 + CM_MM_CAUSE_START,
   CM_MM_MSG_TYPE_INCOMPAT_WITH_PROTO_STATE = 0x62 + CM_MM_CAUSE_START,
   CM_MM_IE_NOT_IMPLEMENTED = 0x63 + CM_MM_CAUSE_START,
   CM_MM_CONDITIONAL_MM_IE_ERROR = 0x64 + CM_MM_CAUSE_START,
   CM_MM_MSG_NOT_COMPAT_WITH_PROTO_STATE = 0x65 + CM_MM_CAUSE_START,
   CM_MM_PROTO_ERROR_UNSPECIFIED = 0x6f + CM_MM_CAUSE_START,


   CM_MM_ACCESS_BARRED ,
   CM_MM_ASSIGNMENT_REJECT ,
   CM_MM_RANDOM_ACCES_FAILURE ,
   CM_MM_RR_NO_SERVICE ,
   CM_RR_PLMN_SRCH_REJ_EMERGENCY,
   CM_MM_RR_CONN_RELEASE,


   CM_MM_AUTH_FAILURE,
   CM_MM_IMSI_DETACH,
   CM_MM_ABORT_BY_NW ,
   CM_MM_CONN_TIMEOUT,

   CM_MM_CM_ENQUEUE_FAIL,
   CM_MM_NOT_UPDATED ,
   CM_MM_STATE_NOT_ALLOWED_CM,
   CM_MM_EMERGENCY_NOT_ALLOWED,
   CM_MM_NO_SERVICE,
   CM_MM_ACCESS_CLASS_BARRED,
   CM_MM_PS_SERVICE_ERROR,
   CM_MM_MT_CALL_INCOMING,

   CM_RR_SUSPEND_FOR_CS_SIG,
   CM_RR_SUSPEND_FOR_CS_CALL,
   CM_RR_SUSPEND_FOR_PS_SIG,
   CM_RR_SUSPEND_FOR_PS_DATA,
   CM_RR_SUSPEND_UNSPECIFIED,

   CM_MM_CAUSE_END = 2048 + 256,



   SIM_CAUSE_START = 2560,
   SIM_CAUSE_CMD_SUCCESS = SIM_CAUSE_START,
   SIM_CAUSE_CMD_FAIL = 1 + SIM_CAUSE_START,
   SIM_CAUSE_FATAL_ERROR = 2 + SIM_CAUSE_START,
   SIM_CAUSE_NO_INSERTED = 3 + SIM_CAUSE_START,
   SIM_CAUSE_CHV_NOT_INIT = 4 + SIM_CAUSE_START,
   SIM_CAUSE_CHV_VERIFY_ERROR = 5 + SIM_CAUSE_START,
   SIM_CAUSE_CHV_BLOCK = 6 + SIM_CAUSE_START,
   SIM_CAUSE_ACCESS_NOT_ALLOW = 7 + SIM_CAUSE_START,
   SIM_CAUSE_SAT_CMD_BUSY = 8 + SIM_CAUSE_START,
   SIM_CAUSE_DL_ERROR = 9 + SIM_CAUSE_START,
   SIM_CAUSE_MEMORY_PROBLEM = 10 + SIM_CAUSE_START,
   SIM_CAUSE_TECHNICAL_PROBLEM = 11 + SIM_CAUSE_START,
   SIM_CAUSE_PUK_UNLOCK = 12 + SIM_CAUSE_START,

   SIM_CAUSE_END,



   PHB_CAUSE_FDN_BLOCKED = 2600,
   PHB_L4C_ERROR = 2601,






    SM_CAUSE_START = 0x0C00,

    SM_CAUSE_EMPTY = 0x01 + SM_CAUSE_START,
    OPERATOR_DETERMINED_BARRING = 0x08 + SM_CAUSE_START,
    LLC_SND_FAILURE = 0X19 + SM_CAUSE_START,
    INSUFF_RESOURCE = 0X1A + SM_CAUSE_START,
    UNKNOWN_APN = 0X1B + SM_CAUSE_START,
    UNKNOWN_PDP_ADDR_OR_TYPE = 0X1C + SM_CAUSE_START,
    AUTHENTICATION_FAILURE = 0X1D + SM_CAUSE_START,
    ACTIVATION_REJ_GGSN = 0X1E + SM_CAUSE_START,
    ACTIVATION_REJ_UNSPECIFIED = 0X1F + SM_CAUSE_START,
    UNSUPPORTED_SERVICE_OPTION = 0X20 + SM_CAUSE_START,
    UNSUBSCRIBED_SERVICE_OPTION = 0X21 + SM_CAUSE_START,
    SERVICE_OPTION_TEMPORARILY_OUT_OF_ORDER = 0X22 + SM_CAUSE_START,
    PTI_ALREADY_USED = 0X23 + SM_CAUSE_START,
    REGULAR_DEACTIVATION = 0X24 + SM_CAUSE_START,
    QOS_NOT_ACCEPTED = 0X25 + SM_CAUSE_START,
    NETWORK_FAIL = 0X26 + SM_CAUSE_START,
    REACTIVATION_REQD = 0X27 + SM_CAUSE_START,
    UNSUPPORTED_NW_CONTEXT_ACTIVATION = 0X28 + SM_CAUSE_START,
    SEMANTIC_ERROR_IN_TFT_OP = 0X29 + SM_CAUSE_START,
    SYNTACTICAL_ERROR_IN_TFT_OP = 0X2A + SM_CAUSE_START,
    UNKNOWN_PDP_CONTEXT = 0X2B + SM_CAUSE_START,
    SEMANTIC_ERROR_IN_PACKET_FILTER = 0X2C + SM_CAUSE_START,
    SYNTAX_ERROR_IN_PACKET_FILTER = 0X2D + SM_CAUSE_START,
    PDP_CONTEXT_WO_TFT_ALREADY_ACT = 0X2E + SM_CAUSE_START,
    PTI_MISMATCH = 0X2F + SM_CAUSE_START,
    ACTIVATION_REJ_BCM_VIOLATION = 0X30 + SM_CAUSE_START,
    LAST_PDN_DISC_NOT_ALLOWED = 0X31 + SM_CAUSE_START,
    PDP_TYPE_IPV4_ONLY_ALLOWED = 0X32 + SM_CAUSE_START,
    PDP_TYPE_IPV6_ONLY_ALLOWED = 0X33 + SM_CAUSE_START,
    SINGLE_ADDR_BEARERS_ONLY_ALLOWED = 0X34 + SM_CAUSE_START,
    ESM_INFORMATION_NOT_RECEIVED = 0X35 + SM_CAUSE_START,
    PDN_CONNENCTION_NOT_EXIST = 0X36 + SM_CAUSE_START,
    MULTIPLE_PDN_APN_NOT_ALLOWED = 0X37 + SM_CAUSE_START,
    COLLISION_WITH_NW_INITIATED_REQ = 0X38 + SM_CAUSE_START,
    UNSUPPORTED_QCI_VALUE = 0X3B + SM_CAUSE_START,

    INVALID_TI = 0X51 + SM_CAUSE_START,
    SM_SEMANTICALLY_INCORRECT_MSG = 0X5F + SM_CAUSE_START,
    INVALID_MAND_INFO = 0X60 + SM_CAUSE_START,
    SM_MSG_TYPE_NON_EXISTENT_OR_NOT_IMPLEMENTED = 0X61 + SM_CAUSE_START,
    SM_MSG_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE = 0X62 + SM_CAUSE_START,
    IE_NON_EXISTENCE_OR_NOT_IMPLEMENTED = 0X63 + SM_CAUSE_START,
    CONDITIONAL_IE_ERROR = 0X64 + SM_CAUSE_START,
    SM_MSG_NOT_COMPATIBLE_WITH_PROTOCOL_STATE = 0X65 + SM_CAUSE_START,
    SM_PROTOCOL_ERROR_UNSPECIFIED = 0X6F + SM_CAUSE_START,
    APN_RESTRICTION_VALUE_INCOMPATIBLE_WITH_ACTIVE_PDP_CTX = 0X70 + SM_CAUSE_START,
    SM_CAUSE_END,





    ESM_CAUSE_START = 0x0D00,
    ESM_NO_CAUSE = 1 + ESM_CAUSE_START,
    ESM_OPERATOR_DETERMINED_BARRING = 8 + ESM_CAUSE_START,
    ESM_INSUFFICIENT_RESOURCES = 26 + ESM_CAUSE_START,
    ESM_UNKNOWN_OR_MISSING_APN = 27 + ESM_CAUSE_START,
    ESM_UNKNOWN_PDN_TYPE = 28 + ESM_CAUSE_START,
    ESM_USER_AUTH_FAILED = 29 + ESM_CAUSE_START,
    ESM_REQUEST_REJECTED_BY_SGW_OR_PDNGW = 30 + ESM_CAUSE_START,
    ESM_REQUEST_REJECTED_UNSPECIFIED = 31 + ESM_CAUSE_START,
    ESM_SERVICE_OPT_NOT_SUPPORTED = 32 + ESM_CAUSE_START,
    ESM_REQ_SERVICE_NOT_SUBSCRIBED = 33 + ESM_CAUSE_START,
    ESM_SERVICE_TEMP_OUT_OF_ORDER = 34 + ESM_CAUSE_START,
    ESM_PTI_ALREADY_USED = 35 + ESM_CAUSE_START,
    ESM_REGULAR_DEACTIVATION = 36 + ESM_CAUSE_START,
    ESM_EPS_QOS_NOT_ACCEPTED = 37 + ESM_CAUSE_START,
    ESM_NETWORK_FAILURE = 38 + ESM_CAUSE_START,
    ESM_REACTIVATION_REQUESTED = 39 + ESM_CAUSE_START,
    ESM_SEMANTIC_ERROR_IN_TFT = 41 + ESM_CAUSE_START,
    ESM_SYNTACTIC_ERROR_IN_TFT = 42 + ESM_CAUSE_START,
    ESM_INVALID_EPS_BEARER_IDENTITY = 43 + ESM_CAUSE_START,
    ESM_SEMANTIC_ERROR_IN_PACKET_FILTERS = 44 + ESM_CAUSE_START,
    ESM_SYNTACTIC_ERROR_IN_PACKET_FILTERS = 45 + ESM_CAUSE_START,
    ESM_EPSB_CTXT_WITHOUT_TFT_ACTIVATED = 46 + ESM_CAUSE_START,
    ESM_PTI_MISMATCH = 47 + ESM_CAUSE_START,
    ESM_LAST_PDN_DISC_NOT_ALLOWED = 49 + ESM_CAUSE_START,
    ESM_PDN_TYPE_IPV4_ONLY_ALLOWED = 50 + ESM_CAUSE_START,
    ESM_PDN_TYPE_IPV6_ONLY_ALLOWED = 51 + ESM_CAUSE_START,
    ESM_SINGLE_ADDRESS_ONLY_ALLOWED = 52 + ESM_CAUSE_START,
    ESM_ESM_INFORMATION_NOT_RECEIVED = 53 + ESM_CAUSE_START,
    ESM_PDN_CONNENCTION_NOT_EXIST = 54 + ESM_CAUSE_START,
    ESM_MULTIPLE_PDN_APN_NOT_ALLOWED = 55 + ESM_CAUSE_START,
    ESM_COLLISION_WITH_NW_INIT_REQUEST = 56 + ESM_CAUSE_START,
    ESM_UNSUPPORTED_QCI_VALUE = 59 + ESM_CAUSE_START,
    ESM_INVALID_PTI_VALUE = 81 + ESM_CAUSE_START,
    ESM_SEMANTIC_INCORRECT_MSG = 95 + ESM_CAUSE_START,
    ESM_INVALID_MANDATORY_IE = 96 + ESM_CAUSE_START,
    ESM_MSG_TYPE_NON_EXISTENT = 97 + ESM_CAUSE_START,
    ESM_MSG_TYPE_NOT_COMPATIBLE_STATE = 98 + ESM_CAUSE_START,
    ESM_IE_NON_EXISTENT_NOT_IMPLEMENTED = 99 + ESM_CAUSE_START,
    ESM_CONDITIONAL_IE_ERROR = 100 + ESM_CAUSE_START,
    ESM_MSG_NOT_COMPATIBLE_STATE = 101 + ESM_CAUSE_START,
    ESM_PROTOCOL_ERROR_UNSPECIFIED = 111 + ESM_CAUSE_START,
    ESM_APN_RESTRICT_VALUE_INCOMPATIBLE = 112 + ESM_CAUSE_START,

    ESM_CAUSE_END,







     SM_PROPRIETARY_CAUSE_START = 0x0E00,
     SM_PROPRIETARY_CAUSE_IRAT_TO_LTE_LOCAL_DEACTIVATED,
     SM_PROPRIETARY_CAUSE_IRAT_TO_LTE_BUT_BEARER_MAP_INVALID,
     SM_PROPRIETARY_CAUSE_IRAT_TO_LTE_BUT_LTE_BEARER_MAP_FAILED,
     SM_PROPRIETARY_CAUSE_IRAT_TO_LTE_BUT_BEARER_MAP_FAILED_DUE_TO_DETACH,

     SM_LOCAL_REJECT_ACT_REQ_DUE_TO_CURRENT_STATE_NOT_COMPATIBLE,
     SM_LOCAL_REJECT_ACT_REQ_DUE_TO_QOS_NOT_REASONALBE,
     SM_LOCAL_REJECT_ACT_REQ_DUE_TO_QOS_TRAFFIC_CLASS_NOT_SUPPORTED,
     SM_LOCAL_REJECT_ACT_REQ_DUE_TO_NO_AVAILABLE_TI,
     SM_LOCAL_REJECT_ACT_REQ_DUE_TO_PROCESS_QUEUE_FULL,
     SM_LOCAL_REJECT_ACT_REQ_DUE_TO_GPRS_SUSPENDED,
     SM_LOCAL_REJECT_ACT_REQ_DUE_TO_NSAPI_INVALID,
     SM_LOCAL_REJECT_ACT_REQ_DUE_TO_GPRS_DETACH,
     SM_LOCAL_REJECT_ACT_REQ_DUE_TO_GPRS_ATTACH_FAILURE,
     SM_LOCAL_REJECT_ACT_REQ_DUE_TO_GEMINI_SM_CONTEXT_MEMORY_OCCUPIED,
     SM_LOCAL_REJECT_ACT_REQ_DUE_TO_REACH_RETRY_COUNTER,

     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_CURRENT_STATE_NOT_COMPATIBLE,
     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_NO_AVAILABLE_TI,
     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_LINKED_NSAPI_INVALID,
     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_PROCESS_QUEUE_FULL,
     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_NOT_SUPPORT_SECONDARY_PDP,
     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_GPRS_SUSPENDED,
     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_GPRS_DETACH,
     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_COMPOSE_TFT_ERROR,

     SM_LOCAL_REJECT_MOD_REQ_DUE_TO_PROCESS_QUEUE_FULL,
     SM_LOCAL_REJECT_MOD_REQ_DUE_TO_GPRS_SUSPENDED,
     SM_LOCAL_REJECT_MOD_REQ_DUE_TO_GPRS_DETACH,
     SM_LOCAL_REJECT_MOD_REQ_DUE_TO_CURRENT_STATE_NOT_COMPATIBLE,
     SM_LOCAL_REJECT_MOD_REQ_DUE_TO_GEMINI_SM_CONTEXT_MEMORY_OCCUPIED,
     SM_LOCAL_REJECT_MOD_REQ_DUE_TO_FIRST_PDP_NOT_SUPPORT_QOS_MODIFY_FROM_UE,
     SM_LOCAL_REJECT_MOD_REQ_DUE_TO_MODIFY_COLLISION_WITH_NW,
     SM_LOCAL_REJECT_MOD_REQ_DUE_TO_REACH_RETRY_COUNTER,
     SM_LOCAL_REJECT_MOD_REQ_DUE_TO_QOS_NOT_ACCEPTED,
     SM_LOCAL_REJECT_MOD_REQ_DUE_TO_TFT_ENCODE_ERROR,
     SM_LOCAL_REJECT_MOD_REQ_DUE_TO_NOTHING_NEED_TO_MODIFY,

     SM_LOCAL_REJECT_DEACT_REQ_DUE_TO_GEMINI_SM_CONTEXT_MEMORY_OCCUPIED,
     SM_LOCAL_REJECT_DEACT_REQ_DUE_TO_GPRS_DETACH,

     SM_LOCAL_DEACTIVATION_DUE_TO_MT_PDP_COLLISION,

     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_TFT_ENCODE_ERROR,

     SM_LOCAL_REJECT_DUE_TO_CURRENT_RAT_IS_UNKNOWN,
     SM_PROPRIETARY_CAUSE_SILENT_DEACTIVATION_IN_ESM_TRANSFERRED_EPSB_CONTEXT,

     SM_PROPRIETARY_CAUSE_GPRS_DETACH,


     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_NO_NW_INIT_SEC_ACT_REQ_PROCEDURE,
     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_TOKEN_ID_NOT_ACCEPTED,
     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_LOCAL_PARA_NOT_SYNC_WITH_NW_SM_AIR_MSG,
     SM_LOCAL_DEACTIVATION_DUE_TO_MT_SEC_PDP_COLLISION,

     SM_PROPRIETARY_CAUSE_NULL,

     SM_PROPRIETARY_CAUSE_END,
# 3549 "interface/modem/general/ps_public_enum.h"
    TCM_CAUSE_START = 0x0F00,

    TCM_L4C_CHECKED_ACT_WITH_CID_UNEXPECTED,
    TCM_L4C_CHECKED_ACT_WITH_CID_NOT_DEFINED,
    TCM_L4C_CHECKED_ACT_WITH_FSM_UNEXPECTED,
    TCM_L4C_CHECKED_ACT_WITH_CID_SECONDARY_WITHOUT_TFT,
    TCM_L4C_CHECKED_ACT_WITH_PRIMARY_IS_NOT_ACTIVATED,

    TCM_L4C_CHECKED_DEACT_WITH_CID_UNEXPECTED,
    TCM_L4C_CHECKED_DEACT_WITH_FSM_UNEXPECTED,
    TCM_L4C_CHECKED_DEACT_WITH_ACTIVATED_FROM_UNEXPECTED,

    TCM_L4C_CHECKED_MODIFY_WITH_CID_UNEXPECTED,
    TCM_L4C_CHECKED_MODIFY_WITH_FSM_UNEXPECTED,
    TCM_L4C_CHECKED_MODIFY_WITH_NO_QOS_OR_TFT_SET,

    TCM_L4C_CHECKED_CGDATA_WITH_CID_UNEXPECTED,
    TCM_L4C_CHECKED_CGDATA_WITH_FSM_UNEXPECTED,

    TCM_L4C_DCONT_CID_UNEXPECTED,
    TCM_L4C_DCONT_NOT_ALLOW_FOR_PPP_TYPE,
    TCM_L4C_DCONT_INVALID_PARAMETER,
    TCM_L4C_DCONT_INVALID_PDP_TYPE,
    TCM_L4C_DCONT_CID_ALREADY_IN_USE,
    TCM_L4C_DCONT_INVALID_APN,

    TCM_L4C_DSCONT_CID_UNEXPECTED,
    TCM_L4C_DSCONT_INVALID_PARAMETER,
    TCM_L4C_DSCONT_CID_PRIMARY_IS_NOT_IN_USE,
    TCM_L4C_DSCONT_CID_PRIMARY_IS_NOT_ACTIVATED,
    TCM_L4C_DSCONT_NOT_ALLOW_FOR_PPP_TYPE,
    TCM_L4C_DSCONT_CID_ALREADY_IN_USE,

    TCM_L4C_PRCO_CID_ALREADY_IN_USE,
    TCM_L4C_PRCO_CID_UNEXPECTED,

    TCM_L4C_ACT_NOT_SUPPORT_EMERGENCY_BEARER_ACTIVATION,
    TCM_L4C_ACT_ALLOC_NSAPI_FAIL,

    TCM_L4C_DEACT_IND_BY_TIMER_EXPIRY,
    TCM_L4C_DEACT_IND_BY_NO_USER_RESPONSE_TILL_RAT_CHANGE_COMPLETE_IND,






    TCM_L4C_MOD_PRESERVED_PDP_CONTEXT,
    TCM_L4C_MOD_CHECK_TFT_FAIL,
    TCM_L4C_MOD_REJ_DUE_TO_DEACT_IND,

    TCM_L4C_SET_MULTI_PDN_SUCCESS,
    TCM_L4C_SET_MULTI_PDN_CID_UNEXPECTED,
    TCM_L4C_SET_MULTI_PDN_PARA_UNEXPECTED,
    TCM_L4C_SET_MULTI_PDN_INVALID_PDP_TYPE_AND_LEN,
    TCM_L4C_SET_MULTI_PDN_INVALID_APN,

    TCM_PPP_CHECKED_ACT_WITH_CID_UNEXPECTED,
    TCM_PPP_CHECKED_ACT_WITH_PDP_TYPE_LEN_UNEXPECTED,
    TCM_PPP_CHECKED_ACT_WITH_INVALID_CONFIG_PROTOCOL,
    TCM_PPP_CHECKED_ACT_WITH_CID_NOT_DEFINED,
    TCM_PPP_CHECKED_ACT_WITH_FSM_UNEXPECTED,

    TCM_PPP_CHECKED_DEACT_WITH_CID_UNEXPECTED,
    TCM_PPP_CHECKED_DEACT_WITH_FSM_UNEXPECTED,
    TCM_PPP_CHECKED_DEACT_WITH_ACTIVATED_FROM_UNEXPECTED,

    TCM_PPP_CHECKED_CGDATA_WITH_CID_UNEXPECTED,
    TCM_PPP_CHECKED_CGDATA_WITH_FSM_UNEXPECTED,

    TCM_DISPATCH_PDP_ACT_CHECK_TFT_FAIL,

    TCM_UPCM_BIND_CNF_BEARER_HAS_BEEN_DEACTIVATED_ALREADY,
    TCM_UPCM_UNBIND_CNF_BEARER_HAS_BEEN_DEACTIVATED_ALREADY,

    TCM_ACL_APN_NOT_EXIST_IN_ACL,
    TCM_ACL_ACTION_NOT_ALLOWED,
    TCM_ACL_SIM_FILE_FULL,
    TCM_ACL_ADD_ENTRY_FAILED,
    TCM_ACL_DEL_ENTRY_FAILED,
    TCM_ACL_SET_ENTRY_FAILED,
    TCM_ACL_SIM_READ_FAILED,
    TCM_ACL_SIM_WRITE_FAILED,
# 3656 "interface/modem/general/ps_public_enum.h"
    TCM_ESM_FAIL_CAUSE_EMPTY,
    TCM_ESM_USER_CANCEL,
    TCM_ESM_CID_ALREADY_CONNECT,
    TCM_ESM_PDN_NOT_ACTIVATED,
    TCM_ESM_BEARER_NOT_ACTIVATED,
    TCM_ESM_RMV_LAST_PDN_NOT_ALLOWED,
    TCM_ESM_LOCAL_RELEASE,
    TCM_ESM_DETACH,
    TCM_ESM_IE_ERROR,
    TCM_ESM_TIMER_TIMEOUT,
    TCM_ESM_TX_FAILURE,
    TCM_ESM_FAIL_CAUSE_RAT_CHANGE,
    TCM_ESM_FAIL_CAUSE_PS_SWITCH,
    TCM_ESM_ACTION_NOT_ALLOWED,
    TCM_ESM_FAIL_CAUSE_SERIOUS_ERROR_AT_LOW_LAYER,
    TCM_ESM_FAIL_CAUSE_OTHERS,


    RAT_TCM_RETRY_NEEDED_AFTER_IRAT,
    RAT_TCM_LOCAL_REJECTED_DUE_TO_PS_SWITCH,
 AP_RETRY_NEEDED_AFTER_LTE_TO_C2K_IRAT,


    RAT_TCM_DEACT_SUCCESS_DUE_TO_CONTEXT_NEVER_ACTIVATED,
    RAT_TCM_MODIFY_FAIL_DUE_TO_CONTEXT_DEACTIVATED,
    RAT_TCM_MODIFY_FAIL_DUE_TO_CONTEXT_NOT_ACTIVATED,
    RAT_TCM_DEACTIVATED_DUE_TO_NAS_TFT_TRIGGERED_DEACTIVATION,
    RAT_TCM_23G_MT_PRIMARY_PDP_IS_ABORTED_DUE_TO_CHANGE_TO_4G,
    RAT_TCM_DEACTIVATE_SUCCESS_IMMEDIATELY_BECAUSE_ACTIVATION_IS_NOT_PROCESSED_BY_TCM_YET,
    RAT_TCM_EGACT_ACTIVATE_REJ_DUE_TO_ERROR_RAT,
    RAT_TCM_EGACT_DEACTIVATE_REJ_DUE_TO_ERROR_RAT,


 TCM_ETCM_CID_NOT_DEFINE_TFT_QOS,
 TCM_ETCM_CID_IS_NOT_PRIMARY,
 TCM_ETCM_TFT_VALIDATION_ERROR,
 TCM_ETCM_PTI_IS_FULL,


    TCM_L4C_CHECKED_EGLD_WITH_CID_UNEXPECTED,
    TCM_L4C_CHECKED_EGLD_WITH_FSM_UNEXPECTED,


    TCM_L4C_MOD_PRIMARY_QOS_IS_NOT_ALLOWED,
    TCM_L4C_MOD_QOS_FOR_NO_MS_PF_IS_NOT_ALLOWED,

    TCM_CAUSE_END,



    L4C_CAUSE_START = 0x1000,

    L4C_TYPE_1_OLD_CAUSE_START = L4C_CAUSE_START,
    L4C_CMD_CONFLICT = L4C_TYPE_1_OLD_CAUSE_START,
    L4C_CMD_CONFLICT_CHANNEL_BUSY,
    L4C_LOCAL_DISCONNECT_CSD,

    L4C_OPTION_CONFLICT,
    L4C_AT_CMD_INVALID_PARAMETER_OR_MISSING,
    L4C_AT_CMD_PARAMETER_OUT_OF_RANGE,
    L4C_AT_CMD_INVALID_PARAMETER,
    L4C_AT_CMD_CID_UNEXPECTED,
    L4C_CONTEXT_CONFLICT_PPP_DEACTIVATING,
    L4C_CONTEXT_CONFLICT_ACT_ALREADY_ACTIVATED,
    L4C_CONTEXT_CONFLICT_DEACT_ALREADY_DEACTIVATED,
    L4C_CONTEXT_CONFLICT_V4V6FB_NOT_COMPLETED,
    L4C_CONTEXT_CONFLICT_ACT_ABORTED_BY_ANOTHER_DEACT,
    L4C_CONTEXT_CONFLICT_CID0_NOT_ACTIVATED_BY_ATTACH,
    L4C_AT_CMD_CONFIGURATION_ONGOING,
    L4C_CONTEXT_CONFLICT_DUAL_PS_ATTACH,
    L4C_CONTEXT_CONFLICT_DUAL_ALWAYS_TYPE,
    L4C_AT_CMD_IN_WRONG_STATE,
    L4C_OMADM_CHECKING_FAIL,
    L4C_AT_CMD_RAC_NOTIFY_CGACT_ERROR,
    L4C_TYPE_1_OLD_CAUSE_END = 0x101f,

    L4C_TYPE_2_CAUSE_START = 0x1020,
    L4C_TYPE_2_CAUSE_END = 0x103f,
    L4C_TYPE_3_CAUSE_START = 0x1040,
    L4C_TYPE_3_CAUSE_END = 0x105f,
    L4C_TYPE_4_CAUSE_START = 0x1060,
    L4C_TYPE_4_CAUSE_END = 0x107f,

    L4C_TYPE_5_C2K_CAUSE_START = 0x1080,
    L4C_CMD_CONFLICT_C2K_IRAT_ONGOING = L4C_TYPE_5_C2K_CAUSE_START,
    L4C_CMD_CONFLICT_C2K_AP_DEACT_RETRY_NEEDED,
    L4C_TYPE_5_C2K_CAUSE_END = 0x109f,

    L4C_TYPE_6_CAUSE_START = 0x10a0,
    L4C_TYPE_6_CAUSE_END = 0x10bf,
    L4C_TYPE_7_CAUSE_START = 0x10c0,
    L4C_TYPE_7_CAUSE_END = 0x10df,
    L4C_TYPE_8_CAUSE_START = 0x10e0,
    L4C_TYPE_8_CAUSE_END = 0x10ff,
    L4C_CAUSE_END = L4C_TYPE_8_CAUSE_END,



    HIF_CAUSE_START = 0x1100,


    HIF_IPC_OK = HIF_CAUSE_START,


    HIF_IPC_PDN_BIND_RSP_UNSUPPORTED_IP_ADDR_TYPE,
    HIF_IPC_PDN_BIND_RSP_NULL_PARAM,
    HIF_IPC_PDN_BIND_RSP_INVALID_NETIF,
    HIF_IPC_PDN_BIND_RSP_NEW_SESSION_FAIL,
    HIF_IPC_PDN_BIND_RSP_SESSION_RLOCK_FAIL,
    HIF_IPC_PDN_BIND_RSP_EPSB_FAIL,

    UPCM_PDN_UNBIND_RSP_EPSB_NONACT ,
    UPCM_PDN_UNBIND_RSP_EPSB_NONPDN ,
    UPCM_PDN_UNBIND_RSP_EPSB_NONBIND ,

    HIF_CAUSE_END,

}ps_cause_enum;


typedef enum {
   L4_ALLSS,
   L4_EMLPP,
   L4_EMLPP0,
   L4_EMLPP1,
   L4_EMLPP2,
   L4_EMLPP3,
   L4_EMLPP4,
   L4_CD,
   L4_CLIP,
   L4_CLIR,
   L4_COLP,
   L4_COLR,
   L4_CFU,
   L4_CFB,
   L4_CFNRY,
   L4_CFNRC,
   L4_CFA,
   L4_CFC,
   L4_CW,
   L4_HOLD,
   L4_MPTY,
   L4_UUS1,
   L4_UUS2,
   L4_UUS3,
   L4_UUSALL,
   L4_BAOC,
   L4_BOIC,
   L4_BOICEXHC,
   L4_BAIC,
   L4_BAICROAM,
   L4_BAC,
   L4_BOC,
   L4_BIC,
   L4_ECT,
   L4_CCBS,
   L4_FM,
   L4_CNAP,
   L4_MSP1,
   L4_MSP2,
   L4_MSP3,
   L4_MSP4,
   L4_MC,
   L4_CDIP
} l4_ss_code_enum;

typedef enum {


   L4_ALL_TELESERVICES = 10,
   L4_TELEPHONY = 11,
   L4_ALL_DATA_TELESERVICES = 12,
   L4_FACSIMILE_SERVICES = 13,
   L4_SHORT_MESSAGE_SERVICES = 16,
   L4_ALL_TELESERVICES_EXCEPT_SMS = 19,

   L4_VOICE_GROUP_CALL_SERVICE = 17,
   L4_VOICE_BROADCAST_SERVICE = 18,

   L4_ALL_BEARER_SERVICES = 20,
   L4_ALL_ASYNC_SERVICES = 21,
   L4_ALL_SYNC_SERVICES = 22,
   L4_ALL_DATA_CIRCUIT_SYNC = 24,
   L4_ALL_DATA_CIRCUIT_ASYNC = 25,
   L4_AUXILIARY_TELEPHONY = 89,
   L4_ALL_GPRS_BEARER_SERVICES = 99,


   L4_BS_ALLPADACCESSCA_SERVICES = 100,
   L4_BS_ALLDATAPDS_SERVICES = 101
} l4_bs_code_enum;

typedef enum {
    L4_GERAN_RXLEVEL,
    L4_GERAN_BER,
    L4_UTRA_RSCP,
    L4_UTRA_ECNO,
    L4_EUTRA_RSRQ,
    L4_EUTRA_RSRP
} l4_cesq_param_enum;
# 3866 "interface/modem/general/ps_public_enum.h"
typedef enum
{
    UE_MODE_PS_MODE_2 = 0,
    UE_MODE_CS_PS_MODE_1,
    UE_MODE_CS_PS_MODE_2,
    UE_MODE_PS_MODE_1,
    UE_MODE_INVALID,

} ue_mode_enum;

typedef enum
{
    VOICE_CENTRIC = 0,
    DATA_CENTRIC
} ue_usage_setting_enum;


typedef enum
{
    L4_CS_VOICE_ONLY = 1,
    L4_CS_VOICE_PREFERRED_IMS_PS_VOICE_AS_SECONDARY,
    L4_IMS_PS_VOICE_PREFERRED_CS_VOICE_AS_SECONDARY,
    L4_IMS_PS_VOICE_ONLY
} l4_voice_domain_preference_enum;

typedef enum
{
    L4_IMS_SMMA_OP_UPDATE_MEM = 1,
    L4_IMS_SMMA_OP_UPDATE_FILE,
} l4_ims_smma_op_enum;


typedef enum
{
    VOICE_MODE_CS_ONLY,
    VOICE_MODE_VOIP_ONLY,
    VOICE_MODE_CS_PREFERRED,
    VOICE_MODE_VOIP_PREFERRED
} voice_mode_enum;


typedef enum
{
    VDM_NW_SELECTION_ANY_PLMN_FOR_EMERG = 0,
    VDM_NW_SELECTION_PLMN_RESELECTION
} vdm_nw_selection_type_enum;


typedef enum
{
    VDM_NWSEL_RESULT_FAILURE = 0,
    VDM_NWSEL_RESULT_SUCCESS
} vdm_nw_selection_result_enum;



typedef enum{
    VDM_VOICE_STATUS_START =0,
    VDM_VOICE_STATUS_STOP
} vdm_voice_status_enum;







typedef enum
{

    SBP_PERMANENT_AUTO_SEL_MODE,
    SBP_UMTS_CB_OFF,
    SBP_MM_TRY_ABNORMAL_LAI_ONCE_MORE,
    SBP_MM_DISABLE_RETRY_ABNORMAL_LAI,
    SBP_DISABLE_AUTO_RETURN_PRE_RPLMN,
    SBP_MM_HPPLMN_1ST_ATTEMPT_ENHANCE,
    SBP_OOS_EARLY_IND,
    SBP_L2_RANDOM_FILL_BIT,


    SBP_CB_3G_SERVICE_BY_PLMN,
    SBP_MM_IGNORE_EQPLMN_IN_MANUAL_MODE,
    SBP_MM_IGNORE_YOIGO_EQPLMN,
    SBP_MM_IGNORE_PLAY_EQPLMN,
    SBP_MM_IGNORE_EQPLMN_IN_AUTO_MODE,
    SBP_MM_DISABLE_PREVIOUS_RPLMN_FROM_NVRAM,
    SBP_MM_INTERNATIONAL_HPPLMN_SEARCH,
    SBP_ATNT_HPPLMN_SEARCH,


    SBP_HPPLMN_REGARDLESS_ANY_MCC,
    SBP_DISABLE_RPLMN_FROM_GLOCI,
    SBP_DISABLE_PLMNSEL_OPLMN_COEXIST,
    SBP_DISABLE_DISPLAY_ROAMING_HPLMN_IN_EPLMN,
    SBP_RPLMN_HPLMN_COMBINED_SEARCH,
    SBP_MM_SEARCH_HPLMN_BEFORE_RPLMN,
    SBP_DISABLE_PLMN_SEL_WHEN_ACCESS_BARRED,
    SBP_TMO_PLMN_MATCHING,


    SBP_MM_NOT_TRY_ANOTHER_RAT_FOR_LU_ABNORMAL,
    SBP_ENS,
    SBP_MM_PERFORM_PLMN_SEARCH_AFTER_LU_ABNORMAL,
    SBP_RESUME_GPRS_AFTER_LU_ABNORMAL,
    SBP_TMO_ECC_NOTIFICATION_ENABLE,
    SBP_ENS_RAT_BALANCING,
    SBP_ORANGE_H_PLUS,
    SBP_USIM_CSP_SUPPORT,


    SBP_SAT_NO_EVDL_IN_SESSION,
    SBP_IMEI_LOCK_SUPPORT,
    SBP_DOCOMO_IOT_SMS,
    SBP_USE_SM_QOS_SUBSCRIBED,
    SBP_NO_SUPPORT_A5_3,
    SBP_DOCOMO_IOT_CC,
    SBP_AT_ME_IDENTIFICATION_WITHOUT_HEADER,
    SBP_STAR_SHORT_STRING_AS_CALL,


    SBP_CUSTOMIZED_IDLE_STRING_AS_CALL,
    SBP_DISABLE_SKIP_NEW_FPLMN_MANUAL_RESEL,
    SBP_ADAPTIVE_PAGING_PERIOD_IN_UNACK_MODE,
    SBP_OP01_ROAMING_RAT_ORDER,
    SBP_BG_SEARCH_2G4_FDD,
    SBP_BG_SEARCH_3G4_FDD,
    SBP_BG_SEARCH_2G4_TDD,
    SBP_BG_SEARCH_3G4_TDD,


    SBP_PREFER_SEARCH_3G,
    SBP_PREFER_SEARCH_4G,
    SBP_TMO_GBA,
    SBP_OP01_TEST_MODE_CONSIDER_SIM,
    SBP_DISABLE_EUTRAN_AFTER_ABNORMAL,
    SBP_DISABLE_RPLMN_FROM_EPSLOCI,
    SBP_DISABLE_EUTRAN_AFTER_NO_SUITABLE,
    SBP_MM_NOT_STAY_ON_FBLA_FOR_REG_PROV,


    SBP_NO_OPTIONAL_RAU_AFTER_CCO_FAILURE,
    SBP_SAT_PROVIDE_PS_LOCAL_INFO,
    SBP_EMR_REPORTING_WITH_SI2Q_BSIC_PARA,
    SBP_AMR_WB_GSM,
    SBP_AMR_WB_UMTS,
    SBP_TMO_REMOTE_SIM_LOCK,
    SBP_MODE_1_PS_ONLY_LTE_NETWORK_SUPPORT,
    SBP_IGNORE_PLMN_CHANGE_FOR_MANUAL_MODE,


    SBP_CLEAR_CODE_33,
    SBP_RELEASE_PS_CONN_FOR_EUTRAN_UPDATE,
    SBP_SAT_REISSUE_REFRESH_AFTER_CALL_END,
    SBP_ALLOW_SIM_REFRESH_RESET_WHEN_IN_CALL,
    SBP_TMO_IRAT_SET_ACTIVE_FLAG,
    SBP_IS_ATT_CONN_REJ,
    SBP_RELEASE_DEACTIVATING_BEARER_DURING_IRAT,
    SBP_SDM_RETRY_IMS_WHEN_CS_SEND_FAIL,


    SBP_EMM_RETRY_EMC_WHEN_ABNORMAL,
    SBP_EMM_RETRY_EMC_IN_SHARED_NW,
    SBP_EMM_RETRY_EMC_IN_SAME_PLMN,
    SBP_EMM_RETRY_EMC_IN_DIFF_PLMN,
    SBP_MM_IMSI_DETACH_WHEN_MM_CONN_ACTIVE,
    SBP_3G_CSG,
    SBP_DISABLE_4G_CSG,
    SBP_FINGERPRINT,


    SBP_R11_COMB_BUT_EPS_ABNORMAL_HANDLE,
    SBP_CSFB_REJECT,
    SBP_CONSERVATIVE_IPV4V6_FALLBACK_STRATEGY,
    SBP_IS_OP07,
    SBP_SDM_ALWAYS_CS_WHEN_2G,
    SBP_SDM_ALWAYS_CS_WHEN_3G,
    SBP_SDM_TRY_CS_WHEN_2G_VOICE_CALL,
    SBP_SDM_DISABLE_SMS_OVER_SGS,


    SBP_SDM_PREFER_SMS_OVER_SGS_TO_IMS,
    SBP_SDM_RETRY_CS_WHEN_IMS_SEND_FAIL,
    SBP_REPORT_CSG_LIST_IN_SIGNAL_DECREASING_ORDER,
    SBP_GSMA_NETWORK_ACCESS_CONTROL,
    SBP_IS_CONN_PAGING_LOCAL_REL,
    SBP_LTE_FAST_POWER_ON_SEARCH,
    SBP_LTE_CONN_ALWAYS_RCV_UE_PCH,
    SBP_LTE_MRU_SEARCH,


    SBP_VDM_REDIAL_IMS_VT_TO_CS_VOICE,
    SBP_SLT,
    SBP_OP09_SIM_LOCK,
    SBP_ERRC_DETECTION_TIMER,
    SBP_UMAC_TVM_DECREASE_TRANSMITTED,
    SBP_UMAC_TVM_FAVOR_POW_PERF,
    SBP_ECC_NOT_PREEMPT_SEARCH,
    SBP_RAC_CHANGE_VDP_WHEN_IMS_ONOFF,


    SBP_MM_T3212_OPTION,
    SBP_DISABLE_EUTRAN_MEAS_AND_REP_CAP,
    SBP_CLEAR_LOCI_WHEN_UICC_RESET,
    SBP_SAT_LOCATION_INFO_CHANGE_LIMITED_TO_NORMAL_FIRST_TIME,
    SBP_PLMN_SEARCH_ABORT_SUPPORT,
    SBP_CC_SIM_ORIG_DIALLED_NUM,
    SBP_CC_SIM_SPECIFIC_ERROR_CAUSE,
    SBP_DISABLE_EUTRAN_AFTER_ROAMING_NOT_ALLOWED,


    SBP_NWSEL_BACKUP_RPLMN_IN_AUTO_MODE,
    SBP_LTE_IGNORE_CONN_PS_PAGING,
    SBP_ROAMING_NOT_ALLOW_AS_NO_SUITABLE,
    SBP_DISABLE_2MIN_MINIMUM_HPPLMN_TIMER,
    SBP_SPEED_CS_FEATURE,
    SBP_EMM_IGNORE_MT_CS_WHEN_IMS_CALL,
    SBP_TMOUS_VOLTE_FT,
    SBP_CMCC_VOLTE_FT,


    SBP_AUTO_RESEL_ONLY_WHEN_NO_SERVICE,
    SBP_ENHANCED_SOR,
    SBP_C2K_OM_SOLUTION1,
    SBP_RAC_UEMODE_WITHOUT_CONSIDER_VDP,
    SBP_DATA_SR_RETRY_THROTTLING,
    SBP_EMM_CONN_FAIL_ABNORMAL_B,
    SBP_USER_REQ_NOT_INIT_MM_PROC_WHEN_ABNORMAL_T3212_RUNNING,
    SBP_USER_REQ_NOT_INIT_GMM_PROC_WHEN_ABNORMAL_T3302_RUNNING,


    SBP_DISABLE_MO_SMS_OVER_PS,
    SBP_LBS_CP_PLMN_BLACK_LIST,
    SBP_LBS_CP_BLACK_NILR,
    SBP_SEARCH_4G_WHEN_FIRST_PS_ATTACH,
    SBP_DISABLE_BEARER_RSC_ALLOC,
    SBP_DISABLE_BEARER_RSC_MOD,
    SBP_EMM_IGNORE_TAC_ALL_ZEROS_CHECK,
    SBP_4G_BACKGROUND_SEARCH_OPTIMIZATION_3G,


    SBP_4G_BACKGROUND_SEARCH_OPTIMIZATION_2G,
    SBP_MM_SKIP_LU_AFTER_CSFB_FOR_EAFR,
    SBP_FAST_ROAMING_SEARCH,
    SBP_SEARCH_NOT_PREFERRED_AVAILABLE_PLMN,
    SBP_MCC_ASSIST_FULLBAND_RAT_SELECTION,
    SBP_FULLBAND_RAT_ORDER_ON_CUSTOM_SETTING,
    SBP_REG_HISTORY_FOR_PLMN_SELECTION,
    SBP_SEARCH_AVAILABLE_PLMN_IMMEDIATELY,


    SBP_FAST_HPPLMN_SEARCH,
    SBP_LTE_DISABLE_ENH_CELLSEL,
    SBP_CLEAR_LOCI_WHEN_REFRESH_INIT_FCN,
    SBP_DRX_TEST_TRACE,
    SBP_DISABLE_PAGING_RESPONSE_IN_LIMITED_SIM_ME_LOCK,
    SBP_LTE_FORCE_RX_NESIB_B4_CONN,
    SBP_DISABLE_LTE_B41,
 SBP_DISABLE_CS_DETACH_FOR_SET_MULTIRAT,


    SBP_SEL_AUTO_MODE_FROM_MANUAL_MODE_IF_REFRESH_TYPE_RESET,
    SBP_SM_DISABLE_PS_SIG_CONN_RETRY_TIMER,
    SBP_CELL_FACH_LTE_APBCR,
    SBP_NWSEL_DO_NOT_SEARCH_NEXT_FOR_REJ_12,
    SBP_NO_3G_FULL_BAND_SEARCH_DURING_CSFB_REDIR,
    SBP_CS_AUTHENTICATION_REJECT_PS_UNAFFECTED,
    SBP_FORCE_LU_FOR_SPECIAL_NW_EMM_DETACH,
    SBP_PREFER_3G_IN_23G_MODE,


    SBP_WAIT_RRC_CONN_REL_FOR_SET_RAT_MODE,
    SBP_AVOID_PS_DETACH_WHEN_EUTRAN_DISABLED,
    SBP_LTE_PARTIAL_BAND,
    SBP_LTE_DISABLE_BW,
    SBP_GAS_SMART_SCAN,
    SBP_SDM_RETRY_IMS_WHEN_IMS_SEND_FAIL,
    SBP_SAT_ALLOW_REFRESH_RESET_SIM_BY_MODEM,
    SBP_NOT_PREFER_HPLMNWACT_INFO,


    SBP_IGNORE_INT_CHECK_FOR_NAS_MSG,
    SBP_RAC_CHANGE_USAGE_SETTING_BY_SIM,
    SBP_DO_NOT_START_TD_DISABLE_TIMER,
    SBP_BEFORE_RINGING_CSFB,
    SBP_SET_FOLLOW_ON_REQUEST_FOR_IMS_PDP,
    SBP_NOT_REPORT_IMS_UL_DATA_STATUS,
    SBP_LTE_ENH_RSRP_SEARCH,
    SBP_ALLOW_CSFB_FOR_DATAONLY,


    SBP_VDM_DELAY_ENW_RESUME_ADS,
    SBP_NWSEL_INCREMENTAL_LTE_DISABLE_FOR_NW_REJ,
    SBP_MM_DO_NOT_START_FOP_GUARD_TIMER,
    SBP_EXTRA_FILE_SELECTION_AFTER_SAT_COMMAND,
    SBP_ALLOW_REGISTRATION_FOR_PPAC_RESTRICTION,
    SBP_CUSTOM_FPLMN_USED,
    SBP_DISABLE_MM_SKIP_LU_WHEN_BACK_TO_REGISTERED_LAI,
    SBP_DISABLE_SMS_RETRY,


    SBP_DO_NOT_CLEAR_CS_FPLMN_FOR_RAT_MODE_CHANGE,
    SBP_TELSTRA_BAND_PRIORITY_SEARCH,
    SBP_CB_CHANNEL_STORED_IN_SIM_FIRST,
    SBP_REL_12_EPLMN_LIST_HANDLING,
    SBP_AVOID_INTRA_LTE_PINGPONG_RESEL,
    SBP_STAY_ON_23G_FOR_LIMITED_WHEN_NO_IMS,
    SBP_DISABLE_ISR_SUPPORT,
    SBP_TERMINAL_CAPABILITY_FLEX,


    SBP_CMCC_SRVCC_CDRX_EHEN,
    SBP_SRVCC_STOP_UAS_MEAS,
    SBP_SRVCC_STOP_EAS_MEAS,
    SBP_SRVCC_DRX_INC_GAP,
    SBP_SKIP_VDP_IE_IN_ATTACH_TAU_REQ,
    SBP_CMHK_CUSTOMIZE_EPLMN,
    SBP_HSR_ENHANCE,
    SBP_LTE_EPLMN_SEARCH,


    SBP_OMIT_PTMSI_TYPE_FOR_TESTSIM,
    SBP_4G23_LOCAL_REL_IMS_PDN,
    SBP_CB_CHANNEL_ONLY_STORED_IN_NVRAM,
    SBP_SIM_RETRY_WHEN_CDMA_DETECTION_RESET_ERROR,
    SBP_SCA_CONFIGURED_BY_CUSTOMER,
    SBP_BAR_EUTRA_FREQ_BASED_ON_EUTRA_DISABLE_TIMER,
    SBP_SDM_DISABLE_SMS_OVER_WIFI,
 SBP_MPT_REJ_8_MAPPING_TO_15,


    SBP_X2G_HO_START_CPHR_CR0585_ENABLE,
    SBP_VDM_ADS_RETRY_CS_AND_REDIAL_VT_TO_CS_VOICE_FOR_BEREJECT,
    SBP_CONVERT_ATTACH_REJECT_FROM_CAUSE_7_TO_14,
    SBP_GMM_REATTACH_FOR_NW_DETACH_OTHER_CAUSE,
    SBP_MM_STRICT_PRECONDITION_FOR_REL7_MANUAL_RHPLMN_SEL,
    SBP_LTE_SET_RAT_DO_COMBINED_DETACH,
    SBP_DCM_ETWS_TEST_UE,
    SBP_ROHC_COMPR_DECOMPR_TRACE,


    SBP_NWSEL_CUSTOMIZE_EHPLMN,
    SBP_RAC_NW_LOSS_OPTIMIZATION,
    SBP_STKSMS_NO_PDU_CHK,
    SBP_IGNORE_EFSMSP_PARAM_IND_FOR_SMSC,
    SBP_DISABLE_CTCH_IF_CONFLICT_WITH_BCH,
    SBP_R13_DOS_ENHANCE,
    SBP_DISABLE_RETRY_FOR_SAT_SMS,
 SBP_DISABLE_CSFB_PAGE_CSMT_3G,


    SBP_EMM_REJ_CAUSE_2_ADD_TO_FTAI,
    SBP_CS_PS_MODE2_NO_SEARCH_AFTER_ABN,
    SBP_DISABLE_BIP_SUPPORT,
    SBP_VDM_DISABLE_RETRY_FOR_4_DIGIT_NUMBER_WHEN_VOWIFI_FAIL,


    SBP_MAX_MD_FEATURE

}sbp_md_feature_enum;






typedef enum
{

    SBP_DATA_VAMOS,

    SBP_IDC_EN,

    SBP_IDC_BAND7_IM3_TX_PWR,

    SBP_IDC_BAND13_GPS_TX_PWR,

    SBP_IDC_802_ANT_ISOLATION,

    SBP_IDC_GPS_ANT_ISOLATION,

    SBP_GERAN_TO_EUTRAN_SUPPORT_IN_GERAN_PTM,

    SBP_PLMN_SEARCH_ABORT_3G_TIMER_PERIOD,

    SBP_PLMN_SEARCH_ABORT_4G_TIMER_PERIOD,

    SBP_EUTRAN_DISABLE_TIMER_VALUE,

    SBP_SS_DISABLE_AFR_TIMER_PERIOD,

 SBP_SIM_MAX_RETRY_WHEN_CDMA_DETECTION_RESET_ERROR,

 SBP_VDM_ADS_SEL_ALGO_MASK_WFCP_VDP_PRIORITY_GROUP1,

 SBP_VDM_ADS_SEL_ALGO_MASK_WFCP_VDP_PRIORITY_GROUP2,


    SBP_DATA_MAX_MD_FEATURE
}sbp_md_feature_data_enum;







typedef enum
{
    CUSATS_BEFORE_PROFILE_DL,
    CUSATS_UICC_START_HALTED,
    CUSATS_PROFILE_DL_COMPLETED,
    CUSATS_AWAITING_PIN_VERIFY,
    CUSATS_UICC_ACTIVE
}cusats_uicc_state_enum;






typedef enum
{
    FULL_BAND_SEARCHED_FALSE = 0,
    FULL_BAND_SEARCHED_TRUE,
    FULL_BAND_SEARCHED_UNKNOWN
} full_band_searched_enum;






typedef enum
{
    AP_BASED_IRAT,
    MD_BASED_IRAT,
    MD_BASED_IRAT_LCG
}l4c_irat_type_enum;






typedef enum
{
    RECONFIG_SIM_SWITCH = 1,
    RECONFIG_SBP_CHANGE = 2,
    RECONFIG_DUPLEX_MODE = 4
} l4c_me_reconfig_enum;
# 307 "interface/modem/general/ps_public_struct.h" 2
# 1 "interface/modem/general/sim_ps_enum.h" 1
# 222 "interface/modem/general/sim_ps_enum.h"
typedef enum
{
    SIM_NO_FILE_ID = 0x0000,
    MASTER_FILE_ID = 0x3f00,

    DF_GSM_ID = 0x7f20,
    DF_TELECOM_ID = 0x7f10,


    DF_IRIDIUM_ID = 0x5f30,
    DF_GLOBST_ID = 0x5f31,
    DF_ICO_ID = 0x5f32,
    DF_ACeS_ID = 0x5f33,
    DF_EIA_ID = 0x5f40,
    DF_CTS_ID = 0x5f60,
    DF_SoLSA_ID = 0x5f70,
    DF_MExE_ID = 0x5f3C,

    DF_GRAPHICS_ID = 0x5f50,

    EF_ICCID_ID = 0x2fE2,
    EF_ELP_ID = 0x2f05,

    EF_SAI_ID = 0x4f30,
    EF_SLL_ID = 0x4f31,

    EF_MExE_ST_ID = 0x4f40,
    EF_ORPK_ID = 0x4f41,
    EF_ARPK_ID = 0x4f42,
    EF_TPRPK_ID = 0x4f43,

    EF_IMG_ID = 0x4f20,
    EF_IMG_1_ID = 0x4f01,
    EF_IMG_2_ID = 0x4f02,
    EF_IMG_3_ID = 0x4f03,
    EF_IMG_4_ID = 0x4f04,
    EF_IMG_5_ID = 0x4f05,
    EF_IMG_6_ID = 0x4f06,
    EF_IMG_7_ID = 0x4f07,
    EF_IMG_8_ID = 0x4f08,
    EF_IMG_9_ID = 0x4f09,
    EF_IMG_A_ID = 0x4f0a,
    EF_IMG_B_ID = 0x4f0b,
    EF_IMG_C_ID = 0x4f0c,
    EF_IMG_D_ID = 0x4f0d,
    EF_IMG_E_ID = 0x4f0e,
    EF_IMG_F_ID = 0x4f0f,


    EF_LP_ID = 0x6f05,
    EF_IMSI_ID = 0x6f07,
    EF_Kc_ID = 0x6f20,
    EF_PLMNsel_ID = 0x6f30,
    EF_HPLMN_ID = 0x6f31,
    EF_ACMax_ID = 0x6f37,
    EF_SST_ID = 0x6f38,
    EF_ACM_ID = 0x6f39,
    EF_GID1_ID = 0x6f3E,
    EF_GID2_ID = 0x6f3F,
    EF_SPN_ID = 0x6f46,
    EF_PUCT_ID = 0x6f41,
    EF_CBMI_ID = 0x6f45,
    EF_BCCH_ID = 0x6f74,
    EF_ACC_ID = 0x6f78,
    EF_FPLMN_ID = 0x6f7B,
    EF_LOCI_ID = 0x6f7E,
    EF_AD_ID = 0x6fAD,
    EF_PHASE_ID = 0x6fAE,
    EF_VGCS_ID = 0x6fB1,
    EF_VGCSS_ID = 0x6fB2,
    EF_VBS_ID = 0x6fB3,
    EF_VBSS_ID = 0x6fB4,
    EF_eMLPP_ID = 0x6fB5,
    EF_AAeM_ID = 0x6fB6,
    EF_CBMID_ID = 0x6f48,
    EF_ECC_ID = 0x6fB7,
    EF_CBMIR_ID = 0x6f50,
    EF_DCK_ID = 0x6f2C,
    EF_CNL_ID = 0x6f32,
    EF_NIA_ID = 0x6f51,
    EF_KcGPRS_ID = 0x6f52,
    EF_LOCIGPRS_ID = 0x6f53,
    EF_SUME_ID = 0x6f54,
    EF_PLMNwACT_ID = 0x6f60,
    EF_OPLMNwACT_ID = 0x6f61,
    EF_HPLMNACT_ID = 0x6f62,
    EF_CPBCCH_ID = 0x6f63,
    EF_INVSCAN_ID = 0x6f64,
    EF_VM_WAIT_ID = 0x6F11,
    EF_CPHS_SST_ID = 0x6F12,
    EF_CF_FLAG_ID = 0x6F13,
    EF_OP_STRING_ID = 0x6F14,
    EF_CSP_ID = 0x6F15,
    EF_CPHS_INFO_ID = 0x6F16,
    EF_MAILBOX_NUM_ID = 0x6F17,
    EF_OP_SHORTFORM_ID = 0x6F18,
    EF_INFO_NUM_ID = 0x6F19,

    EF_ADN_ID = 0x6f3A,
    EF_FDN_ID = 0x6f3B,
    EF_SMS_ID = 0x6f3C,
    EF_CCP_ID = 0x6f3D,
    EF_ECCP_ID = 0x6f4F,
    EF_MSISDN_ID = 0x6f40,
    EF_SMSP_ID = 0x6f42,
    EF_SMSS_ID = 0x6f43,
    EF_LND_ID = 0x6f44,
    EF_SDN_ID = 0x6f49,
    EF_EXT1_ID = 0x6f4A,
    EF_EXT2_ID = 0x6f4B,
    EF_EXT3_ID = 0x6f4C,
    EF_BDN_ID = 0x6f4D,
    EF_EXT4_ID = 0x6f4E,
    EF_SMSR_ID = 0x6f47,
    EF_CMI_ID = 0x6f58,

    DF_VID_ID = 0x7F43,
    EF_HZ_ID = 0x6F60,
    EF_HZ_CACHE1_ID = 0x6F61,
    EF_HZ_CACHE2_ID = 0x6F62,
    EF_HZ_CACHE3_ID = 0x6F63,
    EF_HZ_CACHE4_ID = 0x6F64,

    DF_ENS_7F66_ID = 0x7F66,
    DF_ENS_5F30_ID = 0x5F30,
    EF_ENS_ACTING_HPLMN = 0x4F34,
    EF_ENS_TERMINAL_SUPPORT_TABLE = 0x6FD2,
    EF_PNN_ID = 0x6FC5,
    EF_OPL_ID = 0x6FC6,
    EF_MBDN_ID = 0x6FC7,
    EF_EXT6_ID = 0x6FC8,
    EF_MBI_ID = 0x6FC9,
    EF_MWIS_ID = 0x6FCA,
    EF_CFIS_ID = 0x6FCB,
    EF_EXT7_ID = 0x6FCC,
    EF_SPDI_ID = 0x6FCD,
    EF_MMSN_ID = 0x6FCE,
    EF_EXT8_ID = 0x6FCF,
    EF_MMSICP_ID = 0x6FD0,
    EF_MMSUP_ID = 0x6FD1,
    EF_MMSUCP_ID = 0x6FD2,
    EF_DIR_ID = 0x2F00,

    EF_ARR_ID = 0x2F06,
    DF_USIM_ID = 0x7FFF,
    EF_U_LI_ID = 0x6F05,
    EF_U_IMSI_ID = 0x6F07,
    EF_U_KEYS_ID = 0x6F08,
    EF_U_KEYSPS_ID = 0x6F09,
    EF_U_PLMNWACT_ID = 0x6F60,
    EF_U_HPPLMN_ID = 0x6F31,
    EF_U_ACMMAX_ID = 0x6F37,
    EF_U_UST_ID = 0x6F38,
    EF_U_ACM_ID =0x6F39,
    EF_U_GID1_ID = 0x6F3E,
    EF_U_GID2_ID = 0x6F3F,
    EF_U_SPN_ID = 0x6F46,
    EF_U_PUCT_ID = 0x6F41,
    EF_U_CBMI_ID = 0x6F45,
    EF_U_ACC_ID = 0x6F78,
    EF_U_FPLMN_ID = 0x6F7B,
    EF_U_LOCI_ID = 0x6F7E,
    EF_U_AD_ID = 0x6FAD,
    EF_U_CBMID_ID = 0x6F48,
    EF_U_ECC_ID = 0x6FB7,
    EF_U_CBMIR_ID = 0x6F50,
    EF_U_PSLOCI_ID = 0x6F73,
    EF_U_FDN_ID = 0x6F3B,
    EF_U_SMS_ID = 0x6F3C,
    EF_U_MSISDN_ID = 0x6F40,
    EF_U_SMSP_ID = 0x6F42,
    EF_U_SMSS_ID = 0x6F43,
    EF_U_SDN_ID = 0x6F49,
    EF_U_EXT2_ID = 0x6F4B,
    EF_U_EXT3_ID = 0x6F4C,
    EF_U_SMSR_ID = 0x6F47,
    EF_U_ICI_ID = 0x6F80,
    EF_U_OCI_ID = 0x6F81,
    EF_U_ICT_ID = 0x6F82,
    EF_U_OCT_ID = 0x6F83,
    EF_U_EXT5_ID = 0x6F4E,
    EF_U_CCP2_ID = 0x6F4F,
    EF_U_EMLPP_ID = 0x6FB5,
    EF_U_AAEM_ID = 0x6FB6,
    EF_U_HIDDENKEY_ID = 0x6FC3,
    EF_U_BDN_ID = 0x6F4D,
    EF_U_EXT4_ID = 0x6F55,
    EF_U_CMI_ID = 0x6F58,
    EF_U_EST_ID = 0x6F56,
    EF_U_ACL_ID = 0x6F57,
    EF_U_DCK_ID = 0x6F2C,
    EF_U_CNL_ID = 0x6F32,
    EF_U_STARTHFN_ID = 0x6F5B,
    EF_U_THRESHOLD_ID = 0x6F5C,
    EF_U_OPLMNWACT_ID = 0x6F61,
    EF_U_HPLMNWACT_ID = 0x6F62,
    EF_U_ARR_ID = 0x6F06,
    EF_U_NETPAR_ID = 0x6FC4,
    EF_U_PNN_ID = 0x6FC5,
    EF_U_OPL_ID = 0x6FC6,
    EF_U_MBDN_ID = 0x6FC7,
    EF_U_EXT6_ID = 0x6FC8,
    EF_U_MBI_ID = 0x6FC9,
    EF_U_MWIS_ID = 0x6FCA,
    EF_U_CFIS_ID = 0x6FCB,
    EF_U_EXT7_ID = 0x6FCC,
    EF_U_SPDI_ID = 0x6FCD,
    EF_U_MMSN_ID = 0x6FCE,
    EF_U_EXT8_ID = 0x6FCF,
    EF_U_MMSICP_ID = 0x6FD0,
    EF_U_MMSUP_ID = 0x6FD1,
    EF_U_MMSUCP_ID = 0x6FD2,
    EF_U_NIA_ID = 0x6FD3,
    EF_U_VGCS_ID = 0x6FB1,
    EF_U_VGCSS_ID = 0x6FB2,
    EF_U_VBS_ID = 0x6FB3,
    EF_U_VBSS_ID = 0x6FB4,
    EF_U_VGCSCA_ID = 0x6FD4,
    EF_U_VBSCA_ID = 0x6FD5,
    EF_U_GBAP_ID = 0x6FD6,
    EF_U_MSK_ID = 0x6FD7,
    EF_U_MUK_ID = 0x6FD8,
    EF_U_GBANL_ID = 0x6FDA,
    DF_U_SOLSA_ID = 0x5F70,
    EF_U_SAI_ID = 0x4F30,
    EF_U_SLL_ID = 0x4F31,
    EF_U_LSAD_ID = 0x0000,
    DF_U_PHONEBOOK_ID = 0x5F3A,
    EF_U_PBR_ID = 0x4F30,
    EF_U_IAP_ID = 0x0000,
    EF_U_ADN_ID = 0x0000,
    EF_U_EXT1_ID = 0x0000,
    EF_U_PBC_ID = 0x0000,
    EF_U_GRP_ID = 0x0000,
    EF_U_AAS_ID = 0x0000,
    EF_U_GAS_ID = 0x0000,
    EF_U_ANR_ID = 0x0000,
    EF_U_SNE_ID = 0x0000,
    EF_U_CCP1_ID = 0x0000,
    EF_U_UID_ID = 0x0000,
    EF_U_PSC_ID = 0x4F22,
    EF_U_CC_ID = 0x4F23,
    EF_U_PUID_ID = 0x4F24,
    EF_U_EMAIL_ID = 0x0000,
    DF_U_GSMACCESS_ID = 0x5F3B,
    EF_U_KC_ID = 0x4F20,
    EF_U_KCGPRS_ID = 0x4F52,
    EF_U_CPBCCH_ID = 0x4F63,
    EF_U_INVSCAN_ID = 0x4F64,
    DF_U_MEXE_ID = 0x5F3C,
    EF_U_MEXEST_ID = 0x4F40,
    EF_U_ORPK_ID = 0x4F41,
    EF_U_ARPK_ID = 0x4F42,
    EF_U_TPRPK_ID = 0x4F43,
    EF_U_TKCDF_ID = 0x0000,
    DF_U_WLAN_ID = 0x5F40,
    EF_U_PSEUDO_ID = 0x4F41,
    EF_U_UPLMNWLAN_ID = 0x4F42,
    EF_U_OPLMNWLAN_ID = 0x4F43,
    EF_U_USSIDL_ID = 0x4F44,
    EF_U_OSSIDL_ID = 0x4F45,
    EF_U_WRI_ID = 0x4F46,
    DF_G_PHONEBOOK_ID = 0x5F3A,
    EF_G_PBR_ID = 0x4F30,
    EF_G_IAP_ID = 0x0000,
    EF_G_ADN_ID = 0x0000,
    EF_G_EXT1_ID = 0x0000,
    EF_G_PBC_ID = 0x0000,
    EF_G_GRP_ID = 0x0000,
    EF_G_AAS_ID = 0x0000,
    EF_G_GAS_ID = 0x0000,
    EF_G_ANR_ID = 0x0000,
    EF_G_SNE_ID = 0x0000,
    EF_G_CCP1_ID = 0x0000,
    EF_G_UID_ID = 0x0000,
    EF_G_PSC_ID = 0x4F22,
    EF_G_CC_ID = 0x4F23,
    EF_G_PUID_ID = 0x4F24,
    EF_G_EMAIL_ID = 0x0000,
    DF_MULTIMEDIA_ID = 0x5F3B,
    EF_MML_ID = 0x4F47,
    EF_MMDF_ID = 0x4F48,
    EF_U_EHPLMN_ID = 0x6FD9,
    EF_U_EHPLMNPI_ID = 0x6FDB,
    EF_U_LRPLMNSI_ID = 0x6FDC,

    EF_U_CSP_ID = 0x6F15,
    EF_U_ENS_RAT_ID = 0x4F36,
    EF_U_ENS_TERMINAL_SUPPORT_TABLE = 0x6FD2,

    DF_U_HNB_ID = 0x5F50,
    EF_U_ACSGL_ID = 0x4F81,
    EF_U_CSGT_ID = 0x4F82,
    EF_U_HNBN_ID = 0x4F83,
    EF_U_EPSLOCI_ID = 0x6FE3,
    EF_U_EPSNSC_ID = 0x6FE4,
    EF_U_OCSGL_ID = 0x4F84,

    EF_PSISMSC_ID = 0x6FE5,
    DF_ISIM_ID = 0x7FFF,
    EF_I_IST_ID = 0x6F07,
    EF_I_IMPI_ID = 0x6F02,
    EF_I_DOMAIN_ID = 0x6F03,
    EF_I_IMPU_ID = 0x6F04,
    EF_I_AD_ID = 0x6FAD,
    EF_I_ARR_ID = 0x6F06,
    EF_I_PCSCF_ID = 0x6F09,
    EF_I_GBAP_ID = 0x6FD5,
    EF_I_GBANL_ID = 0x6FD7,
    EF_I_NAFKCA_ID = 0x6FDD,
    EF_I_UICCIARI_ID = 0x6FE7,
    EF_I_SMS_ID = 0x6F3C,
    EF_I_SMSS_ID = 0x6F43,
    EF_I_SMSR_ID = 0x6F47,
    EF_I_SMSP_ID = 0x6F42,



    EF_U_NAFKCA_ID = 0x6FDD,
    EF_U_SPNI_ID = 0x6FDE,
    EF_U_PNNI_ID = 0x6FDF,
    EF_U_NCPIP_ID = 0x6FE2,


    EF_U_UFC_ID = 0x6FE6,
    EF_U_UICCIARI_ID = 0x6FE7,
    EF_U_NASCONFIG_ID = 0x6FE8,
    EF_U_PWS_ID = 0x6FEC,



    DF_MMSS_ID = 0x5f3c,
    EF_MLPL_ID = 0x4f20,
    EF_MSPL_ID = 0x4f21,
    EF_MMSSMODE_ID = 0x4f22,
    DF_CSIM_ID = 0x7FFF,
    EF_C_IMSI_M_ID = 0x6F22,


    EF_NULL = 0xFFFF
}sim_file_id_enum;

typedef enum
{
    SIMCALLCONTROL_NOMODIFY,
    SIMCALLCONTROL_CALLTOSS,
    SIMCALLCONTROL_CALLTOUSSD,
    SIMCALLCONTROL_SSTOCALL,
    SIMCALLCONTROL_SSTOUSSD,
    SIMCALLCONTROL_USSDTOCALL,
    SIMCALLCONTROL_USSDTOSS,
    SIMCALLCONTROL_L4RETRY
}sim_call_control_type_enum;

typedef enum
{
   TYPE_NONE=0,
   TYPE_ADN=0x2,
   TYPE_FDN=0x4,
   TYPE_BDN=0x8,
   TYPE_ADN_BDN=0x0A,
   TYPE_FDN_BDN=0x0C
}sim_dn_enum;

typedef enum
{
   SIM_CHV_1=1,
   SIM_CHV_2=2
}sim_chv_type_enum;

typedef enum
{
   SIM_START_MODE_RESET,
   SIM_START_MODE_INIT,
   SIM_START_MODE_PUK1
}sim_start_mode_enum;

typedef enum
{
   UICC_ISIM_APP,
   UICC_USIM_APP,
   UICC_CSIM_APP,
   UICC_MAX_APP_NUM
}uicc_app_type_enum;

typedef enum
{
   SIM_ELP,
   SIM_LP,
   USIM_LI,
   USIM_PL
}sim_lp_file_type_enum;

typedef enum
{
   SIM_PHASE_0,
   SIM_PHASE_2=2,
   SIM_PHASE_3=3
}sim_phase_enum;

typedef enum
{
   SIM_FILE_SIZE,
   SIM_REC_NUM,
   SIM_REC_SIZE,
   SIM_RES_DATA_LEN
}sim_info_type_enum;



typedef enum
{
   SAT_MM_NO_SERVICE,
   SAT_MM_LIMITED_SERVICE,
   SAT_MM_NORMAL_SERVICE
}sat_mm_status_enum;

typedef enum
{
    SIM_FILE_TRANSP = 0x00,
    SIM_FILE_LINEAR_FIXED= 0x01,
    SIM_FILE_CYCLIC = 0x03,
    SIM_FILE_NO_STRUCTURE = 0x07,
    SIM_FILE_BER_TLV = 0x0f
} sim_file_structure_enum;

typedef enum
{
   USIM_FILE_SIZE,
   USIM_REC_NUM,
   USIM_REC_SIZE
}usim_info_type_enum;

typedef enum
{
   USIM_ACL_SERVICE_NOT_AVAILABLE,
   USIM_ACL_SERVICE_NOT_ACTIVATED,
   USIM_ACL_SERVICE_ACTIVATED,
   USIM_NOT_INITIALIZED
}usim_acl_type_enum;
# 670 "interface/modem/general/sim_ps_enum.h"
typedef enum
{
    SIM_NO_TIMER_STATUS = 0,
    SIM_TIMER_RUNNING,
    SIM_TIMER_NOT_RUNNING,
    SIM_TIMER_STOPPED,
    SIM_TIMER_TIMED_OUT
} sim_timer_status_enum;

typedef enum
{
    UICC_NOT_INIT,
    SIM_CARD_INSIDE,
    UICC_USIM_INSIDE,
    UICC_ISIM_INSIDE,
    SIM_RUIM_INSIDE,
    UICC_CSIM_INSIDE
} uicc_card_type_enum;

typedef enum
{
 SIM_CHANNEL_OPEN,
 SIM_CHANNEL_CLOSE
} sim_manage_channel_mode_enum;


typedef enum
{
    VSIM_SIM_TYPE,
 VSIM_USIM_TYPE
}vsim_card_type_enum;



typedef enum
{

    SIM_PROFILE_TE = 0,
    SIM_PROFILE_MT,
    SIM_PROFILE_DEFAULT_MT,
    SIM_PROFILE_ACTIVE,
    SIM_PROFILE_UST,
    SIM_PROFILE_MT_ONLY = 5,
    SIM_PROFILE_CONFLICT = 5,


    SIM_PROFILE_TE_MT = 128
} sim_profile_storage_enum;


typedef enum
{
   CMD_DETAIL_TAG=1,
   DEVICE_ID_TAG,
   RESULT_TAG,
   DURATION_TAG,
   ALPHA_ID_TAG,
   ADDRESS_TAG,
   CCP_TAG,
   SUBADDR_TAG,
   SS_STRING_TAG,
   USSD_STRING_TAG,
   SMS_TPDU_TAG,
   CB_PAGE_TAG,
   TEXT_STRING_TAG,
   TONE_TAG,
   ITEM_TAG,
   ITEM_ID_TAG,
   RSP_LEN_TAG,
   FILE_LIST_TAG,
   LOCI_TAG,
   IMEI_TAG,
   HELP_REQ_TAG,
   NET_MEASURE_RES_TAG,
   DEFAULT_TEXT_TAG,
   ITEM_NEXT_ACTION_IND_TAG,
   EVENT_LIST_TAG,
   CAUSE_TAG,
   LOCATION_STATUS_TAG,
   TID_TAG,
   BCCH_CHAN_LIST_TAG,
   ICON_ID_TAG,
   ITEM_ICON_ID_LIST_TAG,
   CARD_READER_STATUS_TAG,
   CARD_ATR_TAG,
   C_APDU_TAG,
   R_APDU_TAG,
   TIMER_ID_TAG,
   TIMER_VALUE_TAG,
   DATE_TIME_ZONE_TAG,
   CC_REQ_ACTION_TAG,
   AT_CMD_TAG,
   AT_RSP_TAG,
   BC_REPEAT_IND_TAG,
   IMMEDIATE_RSP_TAG,
   DTMF_STRING_TAG,
   LANGUAGE_TAG,
   TA_TAG,
   RFU1_TAG,
   BROWSER_ID_TAG,
   URL_TAG,
   IMS_REQUEST_URI_TAG = URL_TAG,
   BEARER_TAG,
   PROVISIONING_REF_FILE_TAG,
   BROWSER_TERMINATION_CAUSE_TAG,
   BEARER_DESCRIPTION_TAG,
   CHAN_DATA_TAG,
   CHAN_DATA_LEN_TAG,
   CHAN_STATUS_TAG,
   BUFFER_SIZE_TAG,
   CARD_READER_ID_TAG,
   RFU2_TAG,
   SIM_ME_INTERFACE_LEVEL_TAG,
   RFU3_TAG,
   OTHER_ADDR_TAG,
   ACCESS_TECH_TAG,
   RFU4_TAG,
   RFU5_TAG,
   NETWORK_ACCESS_NAME_TAG = 0x47,
   IWLAN_ID_TAG = 0x4a,
   IWLAN_ACCESS_STATUS_TAG = 0x4b,
   PDP_CTX_ACTIVATE_PARAM_TAG = 0x52,
   CONTACTLESS_FUNCTIONALITY_STATE_TAG = 0x54,
   CSG_CELL_SELECT_STATUS_TAG = 0x55,
   CSG_ID_TAG = 0x56,
   HNB_NAME_TAG = 0x57,
   IMEISV_TAG = 0x62,
   NETWORK_SEARCH_MODE_TAG = 0x65,
   NMR_QUAL_TAG = 0x69,
   PLMNwACT_LIST_TAG = 0x72,
   ROUTING_AREA_ID_TAG = 0x73,
   UPDATE_ATTCH_TYPE_TAG = 0x74,
   REJECT_CAUSE_TAG = 0x75,
   GEO_LOCATION_PARAM_TAG = 0x76,
   IARI_TAG = 0x76,
   GAD_SHAPES_TAG = 0x77,
   IMPU_LIST_TAG = 0x77,
   NMEA_SENTENCE_TAG = 0x78,
   IMS_STATUS_CODE_TAG = 0x78,
   PLMN_LIST_TAG = 0x79,
   ACTIVATE_DESCRIPTOR_TAG = 0x7b,
   EPS_PDN_CONNECT_PARAM_TAG = 0x7c,
   TRACKING_AREA_ID_TAG = 0x7d,
   CSG_ID_LIST_TAG = 0x7e,
   PROACTIVE_CMD_TAG = 0xD0,
   SMS_PP_DL_TAG,
   CB_DL_TAG,
   MENU_SELECTION_TAG,
   CALL_CONTROL_TAG,
   MO_SMS_CONTROL_TAG,
   EVENT_DL_TAG,
   TIMER_EXPIR_TAG,
   RFU6_TAG=0xDF
}sat_tag_enum;

typedef enum
{
   SAT_SETUP_CALL=ADDRESS_TAG,
   SAT_SEND_SS=SS_STRING_TAG,
   SAT_SEND_USSD=USSD_STRING_TAG
}sat_call_ctrl_type_enum;

typedef enum
{
   SAT_ALLOWED_NO_MODIFICATION=0,
   SAT_NOT_ALLOWED,
   SAT_ALLOWED_WITH_MODIFICATION,
   SAT_SIM_ERROR
}sat_call_ctrl_by_sim_result_enum;

typedef enum
{
    SAT_BIP_NO_SPECIFIC_CAUSE,
    SAT_BIP_NO_CHANNEL_AVAILABLE,
    SAT_BIP_CHANNEL_CLOSED,
    SAT_BIP_CHANNEL_IDENTIFIER_NOT_VALID,
    SAT_BIP_REQUESTED_BUFFER_SIZE_NOT_AVAILABLE,
    SAT_BIP_SECURITY_ERROR,
    SAT_BIP_REQUESTED_TRANSPORT_LEVEL_NOT_AVAILABLE
}sat_bearer_independent_protocol_additional_info_for_res_enum;

typedef enum
{
    SAT_CSD_BEARER = 0x01,
    SAT_GPRS_BEARER,
    SAT_SERVER_MODE_BEARER
}sat_bearer_enum;

typedef enum
{
    SAT_UDP_PROTOCOL = 0x01,
    SAT_TCP_PROTOCOL,
    SAT_RAW_PROTOCOL
}sat_protocol_type_enum;

typedef enum
{
    SAT_CLOSE_CHANNEL_FINISHED,
    SAT_SEND_DATA_FINISHED,
    SAT_SEND_DATA_TERMINATED,
    SAT_RECEIVE_DATA_FINISHED,
    SAT_RECEIVE_DATA_TERMINATED,
    SAT_DISCONNECT_EVENT_DOWNLOAD
} sat_notify_mmi_enum;

typedef enum
{
   SAT_DL_BUSY,
   SAT_DL_ERROR
}sat_sms_dl_error_cause_enum;

typedef enum
{
   SAT_RR_IDLE,
   SAT_RR_NOT_IDLE
}sat_me_status_enum;

typedef enum
{
   SAT_NO_CHANNEL=0x00,
   SAT_CH1=0x21,
   SAT_CH2=0x22,
   SAT_CH3=0x23,
   SAT_CH4=0x24,
   SAT_CH5=0x25,
   SAT_CH6=0x26,
   SAT_CH7=0x27
}sat_channel_id_enum;

typedef enum
{
    RSAT_DISPLAY_TEXT,
    RSAT_GET_INKEY,
    RSAT_GET_INPUT,
    RSAT_MORE_TIME,
    RSAT_PLAY_TONE,
    RSAT_POLL_INTERVAL,
    RSAT_REFRESH_I,
    RSAT_REFRESH_II,
    RSAT_REFRESH_III,
    RSAT_REFRESH_IV,
    RSAT_REFRESH_V,
    RSAT_REFRESH_VI,
    RSAT_REFRESH_VII,
    RSAT_REFRESH_VIII,
    RSAT_SETUP_MENU,
    RSAT_SELECT_ITEM,
    RSAT_SEND_SMS,
    RSAT_SEND_SS,
    RSAT_SEND_USSD,
    RSAT_SETUP_CALL,
    RSAT_POLLING_OFF,
    RSAT_LOCAL_INFO_I,
    RSAT_LOCAL_INFO_II,
    RSAT_LOCAL_INFO_III,
    RSAT_LOCAL_INFO_IV,
    RSAT_LOCAL_INFO_V,
    RSAT_LOCAL_INFO_VI,
    RSAT_LOCAL_INFO_VII,
    RSAT_LOCAL_INFO_VIII,
    RSAT_LOCAL_INFO_IX,
    RSAT_LOCAL_INFO_X,
    RSAT_SETUP_EVENT_LIST,
    RSAT_TIMER_MANAGEMENT,
    RSAT_SETUP_IDLE_TEXT,
    RSAT_RUN_AT_COMMAND,
    RSAT_SEND_DTMF,
    RSAT_LANG_NOTIFY,
    RSAT_LAUNCH_BROWSER,
    RSAT_OPEN_CHANNEL,
    RSAT_CLOSE_CHANNEL,
    RSAT_RECEIVE_DATA,
    RSAT_SEND_DATA,
    RSAT_GET_CHANNEL_STATUS,
    RSAT_ACTIVATE,
    RSAT_CONTACTLESS_STATE_CHANGE,
    RSAT_SIZE
} rsat_type_enum;

typedef enum
{
    SAT_CC_NULL,

    SAT_MMI_SETUP_CALL_TO_SEND_SS,
    SAT_MMI_SETUP_CALL_TO_SEND_USSD,
    SAT_STK_SETUP_CALL_TO_SEND_SS,
    SAT_STK_SETUP_CALL_TO_SEND_USSD,

    SAT_MMI_SEND_SS_TO_SETUP_CALL,
    SAT_MMI_SEND_SS_TO_SEND_USSD,
    SAT_STK_SEND_SS_TO_SETUP_CALL,
    SAT_STK_SEND_SS_TO_SEND_USSD,

    SAT_MMI_SEND_USSD_TO_SETUP_CALL,
    SAT_MMI_SEND_USSD_TO_SEND_SS,
    SAT_STK_SEND_USSD_TO_SETUP_CALL,
    SAT_STK_SEND_USSD_TO_SEND_SS
} sat_call_ctrl_by_sim_state_enum;

typedef enum
{
   SAT_CALL_DISCONNECT,
   SAT_CALL_CONNECT
}sat_call_status_enum;

typedef enum
{
   SAT_PDP_DEACTIVATE,
   SAT_PDP_ACTIVATE
}sat_pdp_status_enum;

typedef enum
{
   CMD_REFRESH=0x01,
   CMD_MORE_TIME=0x02,
   CMD_POLL_INTERVAL=0x03,
   CMD_POLLING_OFF=0x04,
   CMD_SETUP_EVENT_LIST=0x05,
   CMD_SETUP_CALL=0x10,
   CMD_SEND_SS=0x11,
   CMD_SEND_USSD=0x12,
   CMD_SEND_SMS=0x13,
   CMD_DTMF=0x14,
   CMD_LAUNCH_BROWSER=0x15,
   CMD_PLAY_TONE=0x20,
   CMD_DSPL_TXT=0x21,
   CMD_GET_INKEY=0x22,
   CMD_GET_INPUT=0x23,
   CMD_SELECT_ITEM=0x24,
   CMD_SETUP_MENU=0x25,
   CMD_PROVIDE_LOCAL_INFO=0x26,
   CMD_TIMER_MANAGER=0x27,
   CMD_IDLE_MODEL_TXT=0x28,
   CMD_PERFORM_CARD_APDU=0x30,
   CMD_POWER_ON_CARD=0x31,
   CMD_POWER_OFF_CARD=0x32,
   CMD_GET_READER_STATUS=0x33,
   CMD_RUN_AT=0x34,
   CMD_LANGUAGE_NOTIFY=0x35,
   CMD_OPEN_CHAN=0x40,
   CMD_CLOSE_CHAN=0x41,
   CMD_RECEIVE_DATA=0x42,
   CMD_SEND_DATA=0x43,
   CMD_GET_CHAN_STATUS=0x44,
   CMD_RFU=0x60,
   CMD_ACTIVATE=0x70,
   CMD_CONTACTLESS_STATE_CHANGED=0x71,
   CMD_END_PROACTIVE_SESSION=0x81,
   CMD_DETAIL=0xFF
}sat_proactive_cmd_enum;

typedef enum
{
   RSAT_BY_TE,
   RSAT_BY_SIM,

   RSAT_NULL
} rsat_config_enum;
# 308 "interface/modem/general/ps_public_struct.h" 2
# 1 "interface/modem/general/sim_public_enum.h" 1
# 244 "interface/modem/general/sim_public_enum.h"
# 1 "interface/common/global_def.h" 1
# 245 "interface/modem/general/sim_public_enum.h" 2
# 1 "interface/sap/cross_core/sim_public_enum_public.h" 1
# 12 "interface/sap/cross_core/sim_public_enum_public.h"
typedef enum
{
  SIM_CARD_REMOVED,
  SIM_ACCESS_ERROR,
  SIM_REFRESH,
  SIM_REFRESH_POWER_OFF,
  SIM_PUK1,
  SIM_ACCESS_PROFILE_ON,
  SIM_ACCESS_PROFILE_OFF,
  DUALSIM_DISCONNECTED,
  DUALSIM_CONNECTED,
  SIM_VSIM_ON,
  SIM_VSIM_OFF,
  SIM_PLUG_OUT,
  SIM_PLUG_IN,
  SIM_RECOVERY_START,
  SIM_RECOVERY_END,
  SIM_IMEI_LOCK_FAIL,
  SIM_OP09_LOCK_FAIL,
  SIM_CARD_TECHNICAL_PROBLEM
}sim_error_cause_enum;


typedef enum
{
  SIM_CMD_SUCCESS = 2560,
  SIM_CMD_FAIL = 2561,
  SIM_FATAL_ERROR = 2562,
  SIM_NO_INSERTED = 2563,
  SIM_CHV_NOT_INIT = 2564,
  SIM_CHV_RETRY_ALLOW = 2565,
  SIM_CHV_BLOCK = 2566,
  SIM_ACCESS_NOT_ALLOW = 2567,
  SIM_SAT_CMD_BUSY = 2568,
  SIM_DL_ERROR = 2569,
  SIM_MEMORY_PROBLEM = 2570,
  SIM_TECHNICAL_PROBLEM = 2571,
  SIM_PUK_UNLOCK = 2572,
  SIM_EF_RECORD_FULL = 2573,
  SIM_SELECT_FILE_INVALID = 2574,
  SIM_SELECT_DF_TERMINATED = 2575,
  SIM_NO_EF_SELECTED = 2576,
  SIM_FILE_NOT_FOUND = 2577,
  SIM_RECORD_NOT_FOUND = 2578,
  SIM_REF_DATA_NOT_FOUND = 2579,
  SIM_INCREASE_FAIL = 2580,
  SIM_AUTH_ERROR_WRONG_MAC = 2581,
  SIM_AUTH_ERROR_GSM_NOT_SUPPORT = 2582,
  SIM_WRONG_INSTRUCTION_CLASS = 2583
}sim_cmd_result_enum;


typedef enum
{
    USIM_DEFAULT_CH = 0x00,
    USIM_LOGIC_CH_1 = 0x01,
    USIM_LOGIC_CH_2 = 0x02,
    USIM_LOGIC_CH_3 = 0x03,
    USIM_LOGIC_CH_4 = 0x04,
    USIM_LOGIC_CH_5 = 0x05,
    USIM_LOGIC_CH_6 = 0x06,
    USIM_LOGIC_CH_7 = 0x07,
    USIM_LOGIC_CH_8 = 0x08,
    USIM_LOGIC_CH_9 = 0x09,
    USIM_LOGIC_CH_10 = 0x0a,
    USIM_LOGIC_CH_11 = 0x0b,
    USIM_LOGIC_CH_12 = 0x0c,
    USIM_LOGIC_CH_13 = 0x0d,
    USIM_LOGIC_CH_14 = 0x0e,
    USIM_LOGIC_CH_15 = 0x0f,
    USIM_LOGIC_CH_16 = 0x10,
    USIM_LOGIC_CH_17 = 0x11,
    USIM_LOGIC_CH_18 = 0x12,
    USIM_LOGIC_CH_19 = 0x13,
    USIM_LOGIC_CH_SIZE,
    USIM_LOGIC_CH_INVALID = 0xFF
} usim_logic_channel_enum;

typedef enum
{
    AKA_CONTEXT,
    GBA_CONTEXT,
    MAX_AUTH_CONTEXT
} uicc_auth_mode_enum;
# 246 "interface/modem/general/sim_public_enum.h" 2


typedef enum
{
    SIM_ACCESS_EXTERNAL_READ_BINARY,
    SIM_ACCESS_EXTERNAL_READ_RECORD,
    SIM_ACCESS_EXTERNAL_UPDATE_BINARY,
    SIM_ACCESS_EXTERNAL_UPDATE_RECORD,
    SIM_ACCESS_EXTERNAL_FILE_INFO,
    SIM_ACCESS_EXTERNAL_AUTHENTICATION
}sim_access_extmd_op_enum;

typedef enum
{
    SIM_NOTIFY_INITIALIZATION,
    SIM_RESPONSE_ACCESS,
    SIM_NOTIFY_CARD_STATUS,
    SIM_NOTIFY_CARD_TYPE,
    SIM_NOTIFY_FILE_CHANGE
}sim_extmd_notify_enum;



typedef enum
{
   SIM_TYPE_NULL,
   SIM_TYPE_TEST_SIM,
   SIM_TYPE_TEST_USIM,
   SIM_TYPE_SIM,
   SIM_TYPE_USIM
} sim_type_query_enum;


typedef enum
{
   SERVICE_CHV_DISABLE_FUNCTION=1,
   SERVICE_ADN,
   SERVICE_FDN,
   SERVICE_SMS,
   SERVICE_AOC,
   SERVICE_CCP,
   SERVICE_PLMNSEL,
   SERVICE_RFU1,
   SERVICE_MSISDN,
   SERVICE_EXT1,
   SERVICE_EXT2,
   SERVICE_SMSP,
   SERVICE_LND,
   SERVICE_CBMI,
   SERVICE_GID1,
   SERVICE_GID2,
   SERVICE_SPN,
   SERVICE_SDN,
   SERVICE_EXT3,
   SERVICE_RFU2,
   SERVICE_VGCS,
   SERVICE_VBS,
   SERVICE_EMLPP,
   SERVICE_AAEM,
   SERVICE_DATA_DOWNLOAD_SMS_CB,
   SERVICE_DATA_DOWNLOAD_SMS_PP,
   SERVICE_MENU_SELECTION,
   SERVICE_CALL_CONTROL,
   SERVICE_PROACTIVE_SIM,
   SERVICE_CBMIR,
   SERVICE_BDN,
   SERVICE_EXT4,
   SERVICE_DCK,
   SERVICE_CNL,
   SERVICE_SMSR,
   SERVICE_NW_IND_ALERT,
   SERVICE_MO_SMS,
   SERVICE_GPRS,
   SERVICE_IMAGE,
   SERVICE_SOLSA,
   SERVICE_USSD,
   SERVICE_RUN_AT_CMD,
   SERVICE_PLMNWACT,
   SERVICE_OPLMNWACT,
   SERVICE_HPLMNWACT,
   SERVICE_CPBCCH,
   SERVICE_INVSCAN,
   SERVICE_ECCP,
   SERVICE_MEXE,
   SERVICE_RFU,
   SERVICE_PLMN_NAME,
   SERVICE_OPLMN_LIST,
   SERVICE_MAILBOX_DIAL_NUM,
   SERVICE_MSG_WAIT_IND,
   SERVICE_CALL_FWD_IND,
   SERVICE_SP_DSPL_INFO,
   SERVICE_MMS,
   SERVICE_EXT8,
   SERVICE_MMS_UCP,
   SERVICE_EMPTY,
   SERVICE_CSP,
   SERVICE_SST,
   SERVICE_MAILBOX_NUM,
   SERVICE_OPNAME_SHORTFORM,
   SERVICE_INFO_NUM,
   SERVICE_END,
   SERVICE_U_LOCAL_PHB,
   SERVICE_U_FDN,
   SERVICE_U_EXT2,
   SERVICE_U_SDN,
   SERVICE_U_EXT3,
   SERVICE_U_BDN,
   SERVICE_U_EXT4,
   SERVICE_U_OCI_OCT,
   SERVICE_U_ICI_ICT,
   SERVICE_U_SMS,
   SERVICE_U_SMSR,
   SERVICE_U_SMSP,
   SERVICE_U_AOC,
   SERVICE_U_CCP,
   SERVICE_U_CBMI,
   SERVICE_U_CBMIR,
   SERVICE_U_GID1,
   SERVICE_U_GID2,
   SERVICE_U_SPN,
   SERVICE_U_PLMNWACT,
   SERVICE_U_MSISDN,
   SERVICE_U_IMG,
   SERVICE_U_SOLSA,
   SERVICE_U_EMLPP,
   SERVICE_U_AAEM,
   SERVICE_U_RFU,
   SERVICE_U_GSM_ACCESS,
   SERVICE_U_DATA_DOWNLOAD_SMS_PP,
   SERVICE_U_DATA_DOWNLOAD_SMS_CB,
   SERVICE_U_CALL_CONTROL,
   SERVICE_U_SMS_CONTROL,
   SERVICE_U_RUN_AT_CMD,
   SERVICE_U_RFU_1,
   SERVICE_U_EST,
   SERVICE_U_ACL,
   SERVICE_U_DCK,
   SERVICE_U_CO_NWLIST,
   SERVICE_U_GSM_SECURITY_CTX,
   SERVICE_U_CPBCCH,
   SERVICE_U_INVSCAN,
   SERVICE_U_MEXE,
   SERVICE_U_OPLMNWACT,
   SERVICE_U_HPLMNWACT,
   SERVICE_U_EXT5,
   SERVICE_U_PLMN_NAME,
   SERVICE_U_OPLMN_LIST,
   SERVICE_U_MAILBOX_DIAL_NUM,
   SERVICE_U_MSG_WAIT_IND,
   SERVICE_U_CALL_FWD_IND,
   SERVICE_U_RFU_2,
   SERVICE_U_SP_DSPL_INFO,
   SERVICE_U_MMS,
   SERVICE_U_EXT8,
   SERVICE_U_GPRS_CALL_CONTROL,
   SERVICE_U_MMS_UCP,
   SERVICE_U_NIA,
   SERVICE_U_VGCS,
   SERVICE_U_VBS,
   SERVICE_U_PSEUDO,
   SERVICE_U_UPLMNWLAN,
   SERVICE_U_OPLMNWLAN,
   SERVICE_U_UWSIDL,
   SERVICE_U_OWSIDL,
   SERVICE_U_VGCS_SECURITY,
   SERVICE_U_VBS_SECURITY,
   SERVICE_U_WRI,
   SERVICE_U_MULTIMEDIA_MSG_STORAGE,
   SERVICE_U_GBA,
   SERVICE_U_MBMS_SECURITY,
   SERVICE_U_DATA_DOWNLOAD_USSD,
   SERVICE_U_EHPLMN,
   SERVICE_U_ADDITIONAL_TERMINAL_PROFILE,
   SERVICE_U_EHPLMNPI,
   SERVICE_U_LRPLMNSI,
   SERVICE_U_OMA_BCAST,
   SERVICE_U_GBA_LOCAL_KEY,
   SERVICE_U_TERMINAL_AP,
   SERVICE_U_SPNI,
   SERVICE_U_PNNI,
   SERVICE_U_CPIP,
   SERVICE_U_HWSIDL,
   SERVICE_U_WEHPLMNPI,
   SERVICE_U_WHPI,
   SERVICE_U_WLRPLMN,
   SERVICE_U_EPS_MM_INFO,
   SERVICE_U_ACSGL,
   SERVICE_U_CC_EPS_PDN,
   SERVICE_U_HPLMNDA,
   SERVICE_U_ECALL_DATA,
   SERVICE_U_OCSGL,
   SERVICE_U_SM_OVER_IP,
   SERVICE_U_CSG_DISPLAY,
   SERVICE_U_COMM_CTRL_IMS,
   SERVICE_U_EXT_TERMINAL_APP,
   SERVICE_U_UICC_ACCESS_IMS,
   SERVICE_U_NAS_CONFIG,
   SERVICE_U_PWS_CONFIG,
   SERVICE_U_END
}sim_service_enum;

typedef enum
{
   SERVICE_NOT_SUPPORT,
   SERVICE_SUPPORT,
   SERVICE_ALLOCATE,
   SERVICE_UNDEFINED
}sim_service_state_enum;

typedef enum
{
   SIM_NOT_READY,
   SIM_CARD_NOT_INSERTED,
   NORMAL_SIM_PRESENCE,
   TEST_SIM_PRESENCE,
   SIM_ERROR_SIM_PRESENCE
}sim_card_status_enum;

typedef enum
{
    FILE_NONE,
    FILE_MF_IDX,
    FILE_GSM_IDX,
    FILE_TELECOM_IDX,
    FILE_IRIDIUM_IDX,
    FILE_GLOBST_IDX,
    FILE_ICO_IDX,
    FILE_ACES_IDX,
    FILE_EIA_IDX,
    FILE_CTS_IDX,
    FILE_SOLSA_IDX,
    FILE_MEXE_IDX,
    FILE_GRAPHICS_IDX,
    GLOBAL_FILES_START,
    FILE_ICCID_IDX = GLOBAL_FILES_START,
    FILE_ELP_IDX,
    GLOBAL_FILES_END = FILE_ELP_IDX,
    FILE_SAI_IDX,
    FILE_SLL_IDX,
    FILE_MEXE_ST_IDX,
    FILE_ORPK_IDX,
    FILE_ARPK_IDX,
    FILE_TPRPK_IDX,
    FILE_IMG_IDX,
    FILE_LP_IDX,
    FILE_IMSI_IDX,
    FILE_KC_IDX,
    FILE_PLMNSEL_IDX,
    FILE_HPLMN_IDX,
    FILE_ACMAX_IDX,
    FILE_SST_IDX,
    FILE_ACM_IDX,
    FILE_GID1_IDX,
    FILE_GID2_IDX,
    FILE_SPN_IDX,
    FILE_PUCT_IDX,
    FILE_CBMI_IDX,
    FILE_BCCH_IDX,
    FILE_ACC_IDX,
    FILE_FPLMN_IDX,
    FILE_LOCI_IDX,
    FILE_AD_IDX,
    FILE_PHASE_IDX,
    FILE_VGCS_IDX,
    FILE_VGCSS_IDX,
    FILE_VBS_IDX,
    FILE_VBSS_IDX,
    FILE_EMLPP_IDX,
    FILE_AAEM_IDX,
    FILE_CBMID_IDX,
    FILE_ECC_IDX,
    FILE_CBMIR_IDX,
    FILE_DCK_IDX,
    FILE_CNL_IDX,
    FILE_NIA_IDX,
    FILE_KCGPRS_IDX,
    FILE_LOCIGPRS_IDX,
    FILE_SUME_IDX,
    FILE_PLMNWACT_IDX,
    FILE_OPLMNWACT_IDX,
    FILE_HPLMNACT_IDX,
    FILE_CPBCCH_IDX,
    FILE_INVSCAN_IDX,
    FILE_VM_WAIT_IDX,
    FILE_CPHS_SST_IDX,
    FILE_CF_FLAG_IDX,
    FILE_OP_STRING_IDX,
    FILE_CSP_IDX,
    FILE_CPHS_INFO_IDX,
    FILE_MAILBOX_NUM_IDX,
    FILE_OP_SHORTFORM_IDX,
    FILE_INFO_NUM_IDX,
    FILE_ADN_IDX,
    FILE_FDN_IDX,
    FILE_SMS_IDX,
    FILE_CCP_IDX,
    FILE_ECCP_IDX,
    FILE_MSISDN_IDX,
    FILE_SMSP_IDX,
    FILE_SMSS_IDX,
    FILE_LND_IDX,
    FILE_SDN_IDX,
    FILE_EXT1_IDX,
    FILE_EXT2_IDX,
    FILE_EXT3_IDX,
    FILE_BDN_IDX,
    FILE_EXT4_IDX,
    FILE_SMSR_IDX,
    FILE_CMI_IDX,
    FILE_IMG_1_IDX,
    FILE_IMG_2_IDX,
    FILE_IMG_3_IDX,
    FILE_IMG_4_IDX,
    FILE_IMG_5_IDX,
    FILE_IMG_6_IDX,
    FILE_IMG_7_IDX,
    FILE_IMG_8_IDX,
    FILE_IMG_9_IDX,
    FILE_IMG_A_IDX,
    FILE_IMG_B_IDX,
    FILE_IMG_C_IDX,
    FILE_IMG_D_IDX,
    FILE_IMG_E_IDX,
    FILE_IMG_F_IDX,

    FILE_VID_IDX,
    FILE_HZ_IDX,
    FILE_HZ_CACHE1_IDX,
    FILE_HZ_CACHE2_IDX,
    FILE_HZ_CACHE3_IDX,
    FILE_HZ_CACHE4_IDX,


    FILE_ENS_DF_7F66_IDX,
    FILE_ENS_DF_5F30_IDX,
    FILE_ENS_ACTING_HPLMN_IDX,
    FILE_ENS_TERMINAL_SUPPORT_TABLE_IDX,

    FILE_PNN_IDX,
    FILE_OPL_IDX,
    FILE_MBDN_IDX,
    FILE_EXT6_IDX,
    FILE_MBI_IDX,
    FILE_MWIS_IDX,
    FILE_CFIS_IDX,
    FILE_EXT7_IDX,
    FILE_SPDI_IDX,
    FILE_MMSN_IDX,
    FILE_EXT8_IDX,
    FILE_MMSICP_IDX,
    FILE_MMSUP_IDX,
    FILE_MMSUCP_IDX,
    SIM_TOT_FILES,
    FILE_DIR_IDX = SIM_TOT_FILES,
    FILE_ARR_IDX,
    FILE_USIM_IDX,
    FILE_U_LI_IDX,
    FILE_U_IMSI_IDX,
    FILE_U_KEYS_IDX,
    FILE_U_KEYSPS_IDX,
    FILE_U_PLMNWACT_IDX,
    FILE_U_HPPLMN_IDX,
    FILE_U_ACMMAX_IDX,
    FILE_U_UST_IDX,
    FILE_U_ACM_IDX,
    FILE_U_GID1_IDX,
    FILE_U_GID2_IDX,
    FILE_U_SPN_IDX,
    FILE_U_PUCT_IDX,
    FILE_U_CBMI_IDX,
    FILE_U_ACC_IDX,
    FILE_U_FPLMN_IDX,
    FILE_U_LOCI_IDX,
    FILE_U_AD_IDX,
    FILE_U_CBMID_IDX,
    FILE_U_ECC_IDX,
    FILE_U_CBMIR_IDX,
    FILE_U_PSLOCI_IDX,
    FILE_U_FDN_IDX,
    FILE_U_SMS_IDX,
    FILE_U_MSISDN_IDX,
    FILE_U_SMSP_IDX,
    FILE_U_SMSS_IDX,
    FILE_U_SDN_IDX,
    FILE_U_EXT2_IDX,
    FILE_U_EXT3_IDX,
    FILE_U_SMSR_IDX,
    FILE_U_ICI_IDX,
    FILE_U_OCI_IDX,
    FILE_U_ICT_IDX,
    FILE_U_OCT_IDX,
    FILE_U_EXT5_IDX,
    FILE_U_CCP2_IDX,
    FILE_U_EMLPP_IDX,
    FILE_U_AAEM_IDX,
    FILE_U_HIDDENKEY_IDX,
    FILE_U_BDN_IDX,
    FILE_U_EXT4_IDX,
    FILE_U_CMI_IDX,
    FILE_U_EST_IDX,
    FILE_U_ACL_IDX,
    FILE_U_DCK_IDX,
    FILE_U_CNL_IDX,
    FILE_U_STARTHFN_IDX,
    FILE_U_THRESHOLD_IDX,
    FILE_U_OPLMNWACT_IDX,
    FILE_U_HPLMNWACT_IDX,
    FILE_U_ARR_IDX,
    FILE_U_NETPAR_IDX,
    FILE_U_PNN_IDX,
    FILE_U_OPL_IDX,
    FILE_U_MBDN_IDX,
    FILE_U_EXT6_IDX,
    FILE_U_MBI_IDX,
    FILE_U_MWIS_IDX,
    FILE_U_CFIS_IDX,
    FILE_U_EXT7_IDX,
    FILE_U_SPDI_IDX,
    FILE_U_MMSN_IDX,
    FILE_U_EXT8_IDX,
    FILE_U_MMSICP_IDX,
    FILE_U_MMSUP_IDX,
    FILE_U_MMSUCP_IDX,
    FILE_U_NIA_IDX,
    FILE_U_VGCS_IDX,
    FILE_U_VGCSS_IDX,
    FILE_U_VBS_IDX,
    FILE_U_VBSS_IDX,
    FILE_U_VGCSCA_IDX,
    FILE_U_VBSCA_IDX,
    FILE_U_GBAP_IDX,
    FILE_U_MSK_IDX,
    FILE_U_MUK_IDX,
    FILE_U_GBANL_IDX,
    FILE_U_SOLSA_IDX,
    FILE_U_SAI_IDX,
    FILE_U_SLL_IDX,
    FILE_U_LSAD_IDX,
    FILE_U_PHONEBOOK_IDX,
    FILE_U_PBR_IDX,
    FILE_U_IAP_IDX,
    FILE_U_ADN_IDX,
    FILE_U_EXT1_IDX,
    FILE_U_PBC_IDX,
    FILE_U_GRP_IDX,
    FILE_U_AAS_IDX,
    FILE_U_GAS_IDX,
    FILE_U_ANR_IDX,
    FILE_U_SNE_IDX,
    FILE_U_CCP1_IDX,
    FILE_U_UID_IDX,
    FILE_U_PSC_IDX,
    FILE_U_CC_IDX,
    FILE_U_PUID_IDX,
    FILE_U_EMAIL_IDX,
    FILE_U_GSMACCESS_IDX,
    FILE_U_KC_IDX,
    FILE_U_KCGPRS_IDX,
    FILE_U_CPBCCH_IDX,
    FILE_U_INVSCAN_IDX,
    FILE_U_MEXE_IDX,
    FILE_U_MEXEST_IDX,
    FILE_U_ORPK_IDX,
    FILE_U_ARPK_IDX,
    FILE_U_TPRPK_IDX,
    FILE_U_TKCDF_IDX,
    FILE_U_WLAN_IDX,
    FILE_U_PSEUDO_IDX,
    FILE_U_UPLMNWLAN_IDX,
    FILE_U_OPLMNWLAN_IDX,
    FILE_U_USSIDL_IDX,
    FILE_U_OSSIDL_IDX,
    FILE_U_WRI_IDX,
    FILE_G_PHONEBOOK_IDX,
    FILE_G_PBR_IDX,
    FILE_G_IAP_IDX,
    FILE_G_ADN_IDX,
    FILE_G_EXT1_IDX,
    FILE_G_PBC_IDX,
    FILE_G_GRP_IDX,
    FILE_G_AAS_IDX,
    FILE_G_GAS_IDX,
    FILE_G_ANR_IDX,
    FILE_G_SNE_IDX,
    FILE_G_CCP1_IDX,
    FILE_G_UID_IDX,
    FILE_G_PSC_IDX,
    FILE_G_CC_IDX,
    FILE_G_PUID_IDX,
    FILE_G_EMAIL_IDX,
    FILE_MULTIMEDIA_IDX,
    FILE_MML_IDX,
    FILE_MMDF_IDX,
    FILE_U_EHPLMN_IDX,
    FILE_U_EHPLMNPI_IDX,
    FILE_U_LRPLMNSI_IDX,

    FILE_U_CSP_IDX,

    FILE_U_ENS_RAT_IDX,
    FILE_U_ENS_TERMINAL_SUPPORT_TABLE_IDX,
    FILE_U_ENS_DF_7F66_IDX,
    FILE_U_ENS_DF_5F30_IDX,
    FILE_U_ENS_ACTING_HPLMN_IDX,

    FILE_U_HNB_IDX,
    FILE_U_ACSGL_IDX,
    FILE_U_CSGT_IDX,
    FILE_U_HNBN_IDX,
    FILE_U_OCSGL_IDX,

    FILE_U_EPSLOCI_IDX,
    FILE_U_EPSNSC_IDX,

    FILE_PSISMSC_IDX,
    FILE_ISIM_IDX,
    FILE_I_IST_IDX,
    FILE_I_IMPI_IDX,
    FILE_I_DOMAIN_IDX,
    FILE_I_IMPU_IDX,
    FILE_I_AD_IDX,
    FILE_I_ARR_IDX,
    FILE_I_PCSCF_IDX,
    FILE_I_GBAP_IDX,
    FILE_I_GBANL_IDX,
    FILE_I_NAFKCA_IDX,
    FILE_I_UICCIARI_IDX,
    FILE_I_SMS_IDX,
    FILE_I_SMSS_IDX,
    FILE_I_SMSR_IDX,
    FILE_I_SMSP_IDX,



    FILE_U_NAFKCA_IDX,
    FILE_U_SPNI_IDX,
    FILE_U_PNNI_IDX,
    FILE_U_NCPIP_IDX,


    FILE_U_UFC_IDX,
    FILE_U_UICCIARI_IDX,
    FILE_U_NASCONFIG_IDX,
    FILE_U_PWS_IDX,



    FILE_MMSS_IDX,
    FILE_MLPL_IDX,
    FILE_MSPL_IDX,
    FILE_MMSSMODE_IDX,
    FILE_CSIM_IDX,
    FILE_C_IMSI_M_IDX,


    UICC_TOTAL_FILES
}sim_file_index_enum;

typedef enum
{
   TYPE_SIM_INIT_AND_FULL_FILE_CHANGE,
   TYPE_FILE_CHANGE,
   TYPE_SIM_INIT_AND_FILE_CHANGE,
   TYPE_SIM_INIT,
   TYPE_SIM_RESET,
   TYPE_USIM_APPLICATION_RESET,
   TYPE_USIM_SESSION_RESET,
   TYPE_STEERING_OF_ROAMING,
   TYPE_NON_SAT_REFRESH = 0xFE
}sat_refresh_type_enum;

typedef enum
{
   PROTOCOL_1 = 0x00,
   PROTOCOL_2 = 0x01,
   PROTOCOL_3 = 0x02,
   PROTOCOL_4 = 0x03
}protocol_id_enum;

typedef enum
{
   SIM1 = 0x00,
   SIM2 = 0x01,
   SIM3 = 0x02,
   SIM4 = 0x03
}sim_interface_enum;

typedef enum
{
    SIM_INFO_ATR,
    SIM_INFO_CDMA,
    SIM_INFO_MAX
}sim_query_info_enum;

typedef enum
{
   SIM_ECALL_NONE,
   SIM_ECALL_ONLY,
   SIM_ECALL_AND_NORMAL,
   SIM_ECALL_TEST_DISABLE
}sim_ecall_mode_enum;

typedef enum
{
    GSMCDMA_DUALSIM_DISCONNECT,
    GSMCDMA_DUALSIM_CONNECT
}gsmcdma_dualsim_mode_enum;

typedef enum
{
    DUALSIM_CMD_SUCCESS,
    DUALSIM_CMD_FAIL_RESET_ABNORMAL,
    DUALSIM_CMD_FAIL_CHVINFO_ABNORMAL,
    DUALSIM_CMD_FAIL_DISCONNECT_NOT_ALLOWED,
    DUALSIM_CMD_FAIL_CONNECT_NOT_ALLOWED,
    DUAKSIM_CMD_FAIL_UNDEFINED_OPERATION,
    DUALSIM_CMD_FAIL_PUK_STATE
}gsmcdma_dualsim_result_enum;

typedef enum
{
   VERIFY,
   DISABLE,
   ENABLE,
   CHANGE,
   UNBLOCK,
   SUPER_VERIFY,
}sim_security_operation_enum;

typedef enum
{
   TYPE_ONLY_DIGIT,
   TYPE_SMS_DEFAULT_SET,
   TYPE_UCS2,
   TYPE_YES_NO,
   TYPE_ONLY_DIGIT_UCS2
}sat_input_type_enum;

typedef enum
{
   SAT_CMD_PERFORMED_SUCCESSFULLY= 0,
   SAT_CMD_PERFORMED_WITH_PARTIAL_COMPREHENSION= 0X01,
   SAT_CMD_PERFORMED_WITH_MISSING_INFO= 0X02,
   SAT_REFRESH_PERFORMED_WITH_ADDITIONAL_EF_READ= 0X03,
   SAT_CMD_PERFORMED_BUT_ICON_COULD_NOT_DSPL= 0X04,
   SAT_CMD_PERFORMED_BUT_MODIFIED_CC_BY_SIM= 0X05,
   SAT_CMD_PERFORMED_LIMITED_SERVICE= 0X06,
   SAT_CMD_PERFORMED_WITH_MODIFIED= 0X07,
   SAT_PROACTIVE_CMD_TERMINATED_BY_USER= 0X10,
   SAT_BACKWARD_MOVE_IN_PROACTIVE_SESSION_BY_USER= 0X11,
   SAT_NO_RESPONSE_FROM_USER= 0X12,
   SAT_HELP_INFO_REQUEST_BY_USER= 0X13,
   SAT_USSD_SS_TRANSACTION_TERMINATION_BY_USER= 0X14,
   SAT_ME_CURRENTLY_UNABLE_TO_PROCESS_CMD= 0X20,
   SAT_NET_CURRENTLY_UNABLE_TO_PROCESS_CMD= 0X21,
   SAT_USER_DID_NOT_ACCEPT_THE_PROACTIVE_CMD= 0X22,
   SAT_USER_CLEAR_DOWN_CALL_BEFORE_CONNECTION_RELEASE= 0X23,
   SAT_ACTION_IN_CONTRACTION_WITH_CURRENT_TIMER_STATE= 0X24,
   SAT_INTERACTION_WITH_CALL_CTRL_BY_SIM_TEMPORARY_ERROR= 0X25,
   SAT_LAUNCH_BROWER_GENERIC_ERROR_CODE= 0X26,
   SAT_CMD_BEYOND_ME_CAP= 0X30,
   SAT_CMD_TYPE_NOT_UNDERSTAND_BY_ME= 0X31,
   SAT_CMD_DATA_NOT_UNDERSTAND_BY_ME= 0X32,
   SAT_CMD_NUMBER_NOT_KNOWN_BY_ME= 0X33,
   SAT_SS_RETURN_ERROR= 0X34,
   SAT_SMS_RP_ERROR= 0X35,
   SAT_ERROR_REQUIRED_VALUE_MISSING= 0X36,
   SAT_USSD_RETURN_ERROR= 0X37,
   SAT_MULTICARD_CMD_ERROR= 0X38,
   SAT_INTERACTION_WITH_CALL_CTRL_BY_SIM_PERMANENT_ERROR= 0X39,
   SAT_BEARER_INDEPENDENT_PROTOCOL_ERROR= 0X3A
}sat_terminal_res_enum;

typedef enum
{
   SAT_NO_SPECIFIC_CAUSE,
   SAT_SCREEN_BUSY,
   SAT_ME_CURRENTLY_BUSY_ON_CALL,
   SAT_ME_CURRENTLY_BUSY_ON_SS,
   SAT_NO_SERVICE,
   SAT_ACCESS_CTRL_CLASS_BAR,
   SAT_RR_NOT_BRANTED,
   SAT_NOT_IN_SPEECH_MODE,
   SAT_ME_CURRENTLY_BUSY_ON_USSD,
   SAT_ME_CURRENTLY_BUSY_ON_DTMF
}sat_additional_info_for_res_enum;

typedef enum
{
   SAT_LAUNCH_BROWSER_IF_NOT_ALREADY_LAUNCHED = 0x00,
   SAT_USE_EXISTING_BROWSER = 0x02,
   SAT_CLOSE_EXISTING_BROWSER_AND_LAUNCH_NEW = 0x03
}sat_launch_browser_mode_enum;

typedef enum
{
   SAT_LAUNCH_BROWSER_NO_SPECIFIC_CAUSE,
   SAT_LAUNCH_BROWSER_BEARER_UNAVALIABLE,
   SAT_LAUNCH_BROWSER_BROWSER_UNAVALIABLE,
   SAT_LAUNCH_BROWSER_ME_UNABLE_TO_READ_PROVISION_DATA
}sat_launch_browser_additional_info_for_res_enum;

typedef enum
{
   SAT_BROWSER_USER_TERMINATION,
   SAT_BROWSER_ERROR_TERMINATION
}sat_browser_termination_mode_enum;


typedef enum
{
   SETUP_CALL_IF_NO_ANOTHER_CALL,
   SETUP_CALL_WITH_REDIAL_IF_NO_ANOTHER_CALL,
   SETUP_CALL_PUT_ANOTHER_HOLD,
   SETUP_CALL_WITH_REDIAL_PUT_ANOTHER_HOLD,
   SETUP_CALL_DISCON_ANOTHER,
   SETUP_CALL_WITH_REDIAL_DISCON_ANOTHER
}sat_setup_call_condition_enum;

typedef enum
{
   SAT_OPERATION_CHANGED_BY_SIM,

   SAT_NUM_CHANGED_CALL_TO_CALL,
   SAT_NUM_CHANGED_CALL_TO_SS,
   SAT_NUM_CHANGED_CALL_TO_USSD,
   SAT_NUM_CHANGED_SS_TO_CALL,
   SAT_NUM_CHANGED_SS_TO_SS,
   SAT_NUM_CHANGED_SS_TO_USSD,
   SAT_NUM_CHANGED_USSD_TO_CALL,
   SAT_NUM_CHANGED_USSD_TO_SS,
   SAT_NUM_CHANGED_USSD_TO_USSD,
   SAT_NUM_CHANGED_SMS,

   SAT_CALL_NOT_ALLOWED,
   SAT_SS_NOT_ALLOWED,
   SAT_USSD_NOT_ALLOWED,
   SAT_SMS_NOT_ALLOWED,
   SIM_MEM_PROBLEM,
   SIM_SECRET_CODE_REJ,
   SIM_TECH_PROBLEM,
   SAT_ALLOWED_NO_CHANGE
}sat_mmi_info_type_enum;

typedef enum
{
   SAT_TONE_DIAL=0x01,
   SAT_TONE_CALLED_SUBSCRIBER_BUSY=0x02,
   SAT_TONE_CONGESTION=0x03,
   SAT_TONE_RADIO_PATH_ACK=0x04,
   SAT_TONE_RADIO_NO_PATH=0x05,
   SAT_TONE_ERROR=0x06,
   SAT_TONE_CALL_WAITING=0x07,
   SAT_TONE_RING=0x08,
   SAT_TONE_GENERAL_BEEP=0x10,
   SAT_TONE_POS_ACK=0x11,
   SAT_TONE_NEG_ACK=0x12
}sat_tone_id_enum;

typedef enum
{

    SIM_RESET_SMART_DETECTION,
    SIM_RESET_USIM_PREFER,
    SIM_RESET_SIM_PREFER
} sim_reset_method_enum;

typedef enum
{
    SAT_NW_REJ_LOCATION_INFO,
    SAT_NW_REJ_ROUTE_AREA_ID,
    SAT_NW_REJ_TRACK_AREA_ID
} sat_nw_rej_info_enum;


typedef enum
{
    SAT_NW_REJ_TYPE_NORMAL_LU,
    SAT_NW_REJ_TYPE_PERIODIC_LU,
    SAT_NW_REJ_TYPE_IMSI_ATTACH,
    SAT_NW_REJ_TYPE_GPRS_ATTACH,
    SAT_NW_REJ_TYPE_COMBINED_ATTACH,

    SAT_NW_REJ_TYPE_RAU,
    SAT_NW_REJ_TYPE_COMBINED_RA_LAU,
    SAT_NW_REJ_TYPE_COMBINED_RA_LAU_WITH_IMSI,
    SAT_NW_REJ_TYPE_PERIODIC_RAU,

    SAT_NW_REJ_TYPE_EPS_ATTACH,
    SAT_NW_REJ_TYPE_COMBINED_EPS_IMSI_ATTACH,
    SAT_NW_REJ_TYPE_TAU,
    SAT_NW_REJ_TYPE_COMBINED_TA_LAU,
    SAT_NW_REJ_TYPE_COMBINED_TA_LAU_WITH_IMSI,
    SAT_NW_REJ_TYPE_PERIODIC_TAU
} sat_nw_rej_type_enum;


typedef enum
{
    SAT_NMR_UTRAN_INTRA_FRQ = 0x01,
    SAT_NMR_UTRAN_INTER_FRQ = 0x02,
    SAT_NMR_UTRAN_INTRAT_GSM = 0x03,
    SAT_NMR_UTRAN_INTRAT_EUTRAN = 0x04,
    SAT_NMR_EUTRAN_INTRA_FRQ = 0x05,
    SAT_NMR_EUTRAN_INTER_FRQ = 0x06,
    SAT_NMR_EUTRAN_INTRAT_GSM = 0x07,
    SAT_NMR_EUTRAN_INTRAT_UTRAN = 0x08
} sat_nmr_qual_enum;


typedef enum
{
    SAT_PROFILE_DL_MT_DEFAULT,
    SAT_PROFILE_DL_MT_TE,
    SAT_PROFILE_DL_HALT,
    SAT_PROFILE_DL_DISABLE = 0xFF
}sat_profile_download_enum;

typedef enum
{
    SAT_PROFILE_ACT_QUERY,
    SAT_PROFILE_ACT_ENABLE_TE_FACILITY,
    SAT_PROFILE_ACT_MT_DEFAULT,
    SAT_PROFILE_ACT_MT_TE,


    SAT_PROFILE_ACT_DL_ME_DEFAULT = 0xD0,
    SAT_PROFILE_ACT_WAIT_ENABLE_TE,
    SAT_PROFILE_ACT_HALT,
    SAT_PROFILE_ACT_DISABLE = 0xFF
}sat_profile_activate_enum;
# 309 "interface/modem/general/ps_public_struct.h" 2

# 1 "./mtk_rel/HCT6737M_65_N/LWG_DSDS/BASIC/mcd/mcd_l4_common.h" 1
# 57 "./mtk_rel/HCT6737M_65_N/LWG_DSDS/BASIC/mcd/mcd_l4_common.h"
extern kal_uint32 l4_pun_src_buff[180];
extern kal_uint32 l4_pun_dest_buff[200];
typedef struct _l4_addr_bcd_struct
{
 kal_uint8 addr_length;
 kal_uint8 addr_bcd[41];
} l4_addr_bcd_struct;


typedef struct _l4_name_struct
{
 kal_uint8 name_length;
 kal_uint8 name_dcs;
 kal_uint8 name[42];
} l4_name_struct;


typedef struct _l4_csd_name_struct
{
 kal_uint8 name_length;
 kal_uint8 name_dcs;
 kal_uint8 name[32];
} l4_csd_name_struct;
# 311 "interface/modem/general/ps_public_struct.h" 2
# 356 "interface/modem/general/ps_public_struct.h"
typedef struct l4c_result_struct
{
   kal_uint8 flag;
   kal_uint16 cause;

} l4c_result_struct;

typedef struct
{
   kal_uint32 total_rx_data;
   kal_uint32 total_tx_data;
   kal_uint32 last_rx_data;
   kal_uint32 last_tx_data;
} l4c_gprs_statistics_info_struct;

typedef struct
{
    kal_uint8 apn[100];
} l4c_tcm_acl_entry_struct;


typedef struct {
    kal_uint16 protocol_id;
    kal_uint8 protocol_config_len;
    kal_uint8 protocol_config[(42 +33 +6)];
} config_option_struct;

typedef struct
{
    kal_uint8 context_id;
    kal_uint8 apn_length;
    kal_uint8 apn [ 100 ];
    kal_uint8 dcomp_algo;
    kal_uint8 hcomp_algo;
    pdp_addr_type_enum pdp_type;
    pdp_addr_len_enum pdp_addr_len;
    kal_uint8 addr_val[ 16 ];
    kal_uint8 ipv4addralloc;
 kal_uint8 request_type;
 kal_uint8 p_cscf_discovery;
 kal_uint8 im_cn_signalling_flag;
} l4c_prim_pdp_info_struct;

typedef struct
{
    kal_uint8 context_id;
    kal_uint8 prim_context_id;
    kal_uint8 dcomp_algo;
    kal_uint8 hcomp_algo;

 kal_uint8 im_cn_signalling_flag;
} l4c_sec_pdp_info_struct;
# 439 "interface/modem/general/ps_public_struct.h"
typedef struct {
    kal_uint8 pfi;
    kal_uint8 epi;
    kal_uint8 src_addr_sb_net_mask_len;
    kal_uint8 src_addr_sb_net_mask[32];
    kal_bool prot_number_present;
    kal_uint8 prot_number_next_hdr;
    kal_uint8 dst_port_len;
    kal_uint16 dst_port_range[2];
    kal_uint8 src_port_len;
    kal_uint16 src_port_range[2];
    kal_bool ipsec_spi_present;
    kal_uint32 ipsec_spi;
    kal_uint8 tos_len;
    kal_uint8 tos_traffic_class_mask[2];
    kal_bool flow_label_present;
    kal_uint32 flow_label;
} l4c_pf_struct_only_for_mmi;


typedef struct
{
   kal_uint8 context_id;
   kal_uint8 tot_pf_count;
   l4c_pf_struct_only_for_mmi pf[8];
} l4c_tft_struct_only_for_mmi;


typedef struct
{
    atci_qos_enum qos_type;
    kal_uint8 context_id;
    delay_class_enum delay_class;
    reliability_class_enum reliability_class;
    peak_throughput_class peak_throughput;
    precedence_class_enum precedence_class;
    mean_throughput_enum mean_throughput;
} l4c_qos_struct;

typedef struct
{
    atci_qos_enum qos_type;
    kal_uint8 context_id;
    kal_uint8 traffic_class;
    kal_uint8 delivery_order;
    kal_uint8 delivery_of_err_sdu;
    kal_uint8 max_sdu_size;
    kal_uint8 max_bitrate_up_lnk;
    kal_uint8 max_bitrate_down_lnk;
    kal_uint8 residual_bit_err_rate;
    kal_uint8 sdu_err_ratio;
    kal_uint8 transfer_delay;
    kal_uint8 traffic_hndl_priority;
    kal_uint8 guarntd_bit_rate_up_lnk;
    kal_uint8 guarntd_bit_rate_down_lnk;
    kal_uint8 signalling_indication;
    kal_uint8 source_statistics_descriptor;
    kal_uint8 ext_max_bitrate_down_lnk;
    kal_uint8 ext_guarntd_bit_rate_down_lnk;
    kal_uint8 ext_max_bitrate_up_lnk;
    kal_uint8 ext_guarntd_bit_rate_up_lnk;
} l4c_eqos_struct;


typedef struct
{
    kal_uint8 context_id;
    kal_uint8 qci;
    kal_bool max_bitrate_present;
    kal_uint8 max_bitrate_up_lnk;
    kal_uint8 max_bitrate_down_lnk;
    kal_uint8 ext_max_bitrate_up_lnk;
    kal_uint8 ext_max_bitrate_down_lnk;
    kal_uint8 ext2_max_bitrate_up_lnk;
    kal_uint8 ext2_max_bitrate_down_lnk;
    kal_bool guarntd_bit_rate_present;
    kal_uint8 guarntd_bit_rate_up_lnk;
    kal_uint8 guarntd_bit_rate_down_lnk;
    kal_uint8 ext_guarntd_bit_rate_up_lnk;
    kal_uint8 ext_guarntd_bit_rate_down_lnk;
    kal_uint8 ext2_guarntd_bit_rate_up_lnk;
    kal_uint8 ext2_guarntd_bit_rate_down_lnk;
} l4c_eps_qos_struct;


typedef struct
{
    kal_uint8 qci;
    kal_uint8 unused1;
    kal_uint8 unused2;
    kal_uint8 unused3;
    kal_uint8 max_bitrate_up_lnk;
    kal_uint8 max_bitrate_down_lnk;
    kal_uint8 guarntd_bit_rate_up_lnk;
    kal_uint8 guarntd_bit_rate_down_lnk;
    kal_uint8 ext_max_bitrate_up_lnk;
    kal_uint8 ext_max_bitrate_down_lnk;
    kal_uint8 ext_guarntd_bit_rate_up_lnk;
    kal_uint8 ext_guarntd_bit_rate_down_lnk;
    kal_uint8 ext2_max_bitrate_up_lnk;
    kal_uint8 ext2_max_bitrate_down_lnk;
    kal_uint8 ext2_guarntd_bit_rate_up_lnk;
    kal_uint8 ext2_guarntd_bit_rate_down_lnk;
} tcm_eps_qos_struct;

typedef struct
{
    kal_uint8 authentication_type;
    kal_uint8 user_name[42];
    kal_uint8 password[33];
    kal_uint8 dns[4];
    kal_uint8 sec_dns[4];
    kal_uint8 apn[100];
    kal_uint8 apn_length;


    kal_uint8 dcomp_algo;
    kal_uint8 hcomp_algo;
    kal_uint8 pdp_type;
    kal_uint8 pdp_addr_len;
    kal_uint8 pdp_addr_val[4];
} l4c_gprs_account_info_struct;

typedef struct
{
   kal_uint8 call_id;
   kal_uint8 call_state;
   kal_uint8 mpty;
   kal_uint8 number[81];
} l4c_call_list_entry_struct;

typedef struct
{
   kal_uint8 length;
   l4c_call_list_entry_struct list[7];
} l4c_call_list_struct;

typedef struct
{
   kal_uint8 type;
   kal_uint8 length;
   kal_uint8 number[81];
} l4c_number_struct;

typedef struct
{
   kal_uint8 type;
   kal_uint8 length;
   kal_uint8 number[81];
} l4c_sub_addr_struct;

typedef struct {
   kal_uint8 bs_code;
   kal_uint8 ss_status;
   kal_uint8 no_reply_timer;
   kal_uint8 subaddress_flag;
   kal_char address[81];
   kal_char subaddress[41];
} forwarding_list_struct;

typedef struct {
   kal_uint8 bs_code;
   kal_uint8 ss_status;
} barring_list_struct;

typedef struct {
   kal_uint8 ss_status;
   kal_uint8 subaddress_flag;
   l4_addr_bcd_struct address;
   l4_addr_bcd_struct subaddress;
   kal_uint8 bs_code;
} ccbs_list_struct;

typedef struct
{
    kal_bool cug_flag;
    kal_uint8 clir_flag;
    kal_uint8 call_type;
    csmss_string_op_enum opcode;
    l4c_number_struct addr;
} l4c_ss_string_info_struct;

typedef struct {
    kal_uint8 icon_attr;
    kal_uint8 icon_id;
} sat_icon_struct;

typedef struct {
    kal_uint8 length;
    kal_uint8 procomm[256];
    rsat_config_enum is_wait_for_rsp;
} sat_procomm_struct;

typedef struct {
    kal_uint8 p_class;
    kal_uint8 d_class;
    kal_uint8 r_class;
    kal_uint8 peak_rate;
    kal_uint8 mean_rate;
    kal_uint8 proto_type;
} sat_gprs_bearer_para_struct;

typedef struct {
    kal_uint8 speed;
    kal_uint8 service_name;
    kal_uint8 ce;
} sat_csd_bearer_para_struct;



typedef struct L4C_SS_Ext_GeographicalInformation
{
   kal_uint8 numOctets;
   kal_uint8 stringData[20];
}
L4C_SS_Ext_GeographicalInformation;


typedef struct L4C_SS_DecipheringKeys
{
   kal_uint8 numOctets;
   kal_uint8 stringData[15];
}
L4C_SS_DecipheringKeys;


typedef struct L4C_SS_Add_GeographicalInformation
{
   kal_uint8 numOctets;
   kal_uint8 stringData[91];
}
L4C_SS_Add_GeographicalInformation;
# 681 "interface/modem/general/ps_public_struct.h"
typedef struct L4C_SS_DeferredLocationEventType
{
   kal_uint8 numBits;
   kal_uint8 stringData[2];
}
L4C_SS_DeferredLocationEventType;


typedef struct L4C_SS_AddressString
{
   kal_uint8 numOctets;
   kal_uint8 stringData[20];
}
L4C_SS_AddressString;

typedef L4C_SS_AddressString L4C_SS_ISDN_AddressString;

typedef struct
{
 kal_uint32 valueLen;
 kal_uint8 *value;
}L4C_LCS_applib2_UnKnowExtensionItem;

typedef struct
{
 kal_uint32 valueLen;
 L4C_LCS_applib2_UnKnowExtensionItem *value;
}L4C_LCS_applib2_UnKnowExtensionItemArray;


typedef struct L4C_SS_PrivateExtension
{
   L4C_LCS_applib2_UnKnowExtensionItemArray UnKnowItem;
}
L4C_SS_PrivateExtension;


typedef struct L4C_SS_PrivateExtensionList
{
   kal_uint8 numElements;

   L4C_SS_PrivateExtension element[10];
}
L4C_SS_PrivateExtensionList;


typedef struct L4C_SS_ExtensionContainer
{
   kal_uint8 validity;




   L4C_SS_PrivateExtensionList privateExtensionList;
}
L4C_SS_ExtensionContainer;


typedef struct L4C_SS_USSD_DataCodingScheme
{
   kal_uint8 numOctets;
   kal_uint8 stringData[1];
}
L4C_SS_USSD_DataCodingScheme;


typedef struct L4C_SS_USSD_String
{
   kal_uint8 numOctets;
   kal_uint8 stringData[160];
}
L4C_SS_USSD_String;


typedef L4C_SS_USSD_String L4C_SS_NameString;


typedef L4C_SS_USSD_String L4C_SS_RequestorIDString;


typedef struct L4C_SS_LCSClientName
{
   kal_uint8 validity;



   L4C_SS_USSD_DataCodingScheme dataCodingScheme;
   L4C_SS_NameString nameString;

   kal_uint8 lcs_FormatIndicator;
}
L4C_SS_LCSClientName;


typedef struct L4C_SS_LCSRequestorID
{
   kal_uint8 validity;



   L4C_SS_USSD_DataCodingScheme dataCodingScheme;
   L4C_SS_RequestorIDString requestorIDString;

   kal_uint8 lcs_FormatIndicator;
}
L4C_SS_LCSRequestorID;


typedef L4C_SS_USSD_String L4C_SS_LCSCodewordString;


typedef struct L4C_SS_LCSCodeword
{
   L4C_SS_USSD_DataCodingScheme dataCodingScheme;
   L4C_SS_LCSCodewordString lcsCodewordString;
}
L4C_SS_LCSCodeword;


typedef kal_uint8 L4C_SS_LCSServiceTypeID;


typedef kal_uint16 L4C_SS_AgeOfLocationInformation;


typedef struct L4C_SS_LocationNotificationRes
{
   kal_uint8 validity;



   kal_uint8 verificationResponse;
}
L4C_SS_LocationNotificationRes;


typedef struct L4C_SS_LCS_ReferenceNumber
{
   kal_uint8 numOctets;
   kal_uint8 stringData[1];
}
L4C_SS_LCS_ReferenceNumber;


typedef struct L4C_SS_GSN_Address
{
   kal_uint8 numOctets;
   kal_uint8 stringData[17];
}
L4C_SS_GSN_Address;


typedef struct L4C_SS_LCS_AreaEventReportArg
{
   kal_uint8 validity;



   L4C_SS_LCS_ReferenceNumber referenceNumber;
   L4C_SS_GSN_Address h_gmlc_address;
   L4C_SS_GSN_Address r_gmlc_address;
}
L4C_SS_LCS_AreaEventReportArg;

typedef struct L4C_SS_LCS_AreaEventCancellationArg
{
   L4C_SS_LCS_ReferenceNumber referenceNumber;
   L4C_SS_GSN_Address h_gmlc_address;
}
L4C_SS_LCS_AreaEventCancellationArg;


typedef struct L4C_SS_AreaIdentification
{
   kal_uint8 numOctets;
   kal_uint8 stringData[7];
}
L4C_SS_AreaIdentification;


typedef struct L4C_SS_Area
{
   kal_uint8 areaType;
   L4C_SS_AreaIdentification areaIdentification;
}
L4C_SS_Area;


typedef struct L4C_SS_AreaList
{
   kal_uint8 numElements;

   L4C_SS_Area element[10];
}
L4C_SS_AreaList;


typedef struct L4C_SS_AreaDefinition
{
   L4C_SS_AreaList areaList;
}
L4C_SS_AreaDefinition;


typedef kal_uint16 L4C_SS_IntervalTime;


typedef struct L4C_SS_AreaEventInfo
{
   kal_uint8 validity;




   L4C_SS_AreaDefinition areaDefinition;
   kal_uint8 occurrenceInfo;
   L4C_SS_IntervalTime intervalTime;
}
L4C_SS_AreaEventInfo;


typedef struct L4C_SS_LCS_AreaEventRequestArg
{
   kal_uint8 validity;



   L4C_SS_LCS_ReferenceNumber referenceNumber;
   L4C_SS_GSN_Address h_gmlc_address;
   L4C_SS_GSN_Address r_gmlc_address;
   L4C_SS_DeferredLocationEventType deferredLocationEventType;
   L4C_SS_AreaEventInfo areaEventInfo;
}
L4C_SS_LCS_AreaEventRequestArg;


typedef struct L4C_SS_ResponseTime
{
   kal_uint8 responseTimeCategory;
}
L4C_SS_ResponseTime;


typedef struct L4C_SS_Vertical_Accuracy
{
   kal_uint8 numOctets;
   kal_uint8 stringData[1];
}
L4C_SS_Vertical_Accuracy;


typedef struct L4C_SS_Horizontal_Accuracy
{
   kal_uint8 numOctets;
   kal_uint8 stringData[1];
}
L4C_SS_Horizontal_Accuracy;


typedef struct L4C_SS_LCS_QoS
{
   kal_uint8 validity;







   L4C_SS_Horizontal_Accuracy horizontal_accuracy;
   kal_int8 verticalCoordinateRequest;
   L4C_SS_Vertical_Accuracy vertical_accuracy;
   L4C_SS_ResponseTime responseTime;
   L4C_SS_ExtensionContainer extensionContainer;
}
L4C_SS_LCS_QoS;
# 973 "interface/modem/general/ps_public_struct.h"
typedef struct L4C_SS_SupportedGADShapes
{
   kal_uint8 numBits;
   kal_uint8 stringData[2];
}
L4C_SS_SupportedGADShapes;


typedef struct L4C_SS_GPSAssistanceData
{
   kal_uint8 numOctets;
   kal_uint8 stringData[38];
}
L4C_SS_GPSAssistanceData;


typedef struct L4C_SS_LCSClientExternalID
{
   kal_uint8 validity;




   L4C_SS_ISDN_AddressString externalAddress;
   L4C_SS_ExtensionContainer extensionContainer;
}
L4C_SS_LCSClientExternalID;


typedef struct L4C_SS_LocationType
{
   kal_uint8 validity;



   kal_uint8 locationEstimateType;

   L4C_SS_DeferredLocationEventType deferredLocationEventType;
}
L4C_SS_LocationType;


typedef struct L4C_SS_LCS_MOLRArg
{
   kal_uint16 validity;
# 1030 "interface/modem/general/ps_public_struct.h"
   kal_uint8 molr_Type;
   kal_uint8 locationMethod;
   L4C_SS_LCS_QoS lcs_QoS;
   L4C_SS_LCSClientExternalID lcsClientExternalID;
   L4C_SS_ISDN_AddressString mlc_Number;
   L4C_SS_GPSAssistanceData gpsAssistanceData;

   L4C_SS_SupportedGADShapes supportedGADShapes;

   L4C_SS_LCSServiceTypeID lcsServiceTypeID;
   L4C_SS_AgeOfLocationInformation ageOfLocationInfo;
   L4C_SS_LocationType locationType;
   kal_uint8 pseudonymIndicator;
}
L4C_SS_LCS_MOLRArg;


typedef struct L4C_SS_LocationNotificationArg
{
   kal_uint8 validity;







   kal_uint8 notificationType;
   L4C_SS_LocationType locationType;
   L4C_SS_LCSClientExternalID lcsClientExternalID;
   L4C_SS_LCSClientName lcsClientName;

   L4C_SS_LCSRequestorID lcsRequestorID;
   L4C_SS_LCSCodeword lcsCodeword;
   L4C_SS_LCSServiceTypeID lcsServiceTypeID;
}
L4C_SS_LocationNotificationArg;


typedef struct L4C_SS_LCS_MOLRRes
{
   kal_uint8 validity;





   L4C_SS_Ext_GeographicalInformation locationEstimate;
   L4C_SS_DecipheringKeys decipheringKeys;

   L4C_SS_Add_GeographicalInformation add_LocationEstimate;
}
L4C_SS_LCS_MOLRRes;



typedef struct {

    kal_uint32 PWM1_freq_Level_Info[5];
 kal_uint32 PWM1_duty_Level_Info[5];
 kal_uint32 PWM2_freq_Level_Info[5];
 kal_uint32 PWM2_duty_Level_Info[5];
 kal_uint32 PWM3_freq_Level_Info[5];
 kal_uint32 PWM3_duty_Level_Info[5];

 kal_uint8 MainLCD_Contrast_Level_Info[15];
 kal_uint8 MainLCD_Bias_Level_Info[5];
 kal_uint8 MainLCD_Linerate_Level_Info[5];
 kal_uint8 MainLCD_Temp_Level_Info[5];

 kal_uint8 SubLCD_Contrast_Level_Info[15];
 kal_uint8 SubLCD_Bias_Level_Info[5];
 kal_uint8 SubLCD_Linerate_Level_Info[5];
 kal_uint8 SubLCD_Temp_Level_Info[5];

 kal_uint32 Battery_Level_Info[10];





}
l4c_hw_profile_struct;

typedef struct {
    kal_uint8 rtc_sec;
    kal_uint8 rtc_min;
    kal_uint8 rtc_hour;
    kal_uint8 rtc_day;
    kal_uint8 rtc_mon;
    kal_uint8 rtc_wday;
    kal_uint8 rtc_year;
} rtc_format_struct;

typedef struct {
    kal_uint8 alarm_format;
    kal_uint8 alarm_index;
    kal_uint8 type;
    kal_uint8 text[30];
    kal_uint8 recurr;
    rtc_format_struct data_time;
} rtc_alarm_info_struct;

typedef struct mmi_at_alarm_info_struct
{
   kal_uint8 alarm_index;
   kal_uint8 recurr;
   rtc_format_struct date_time;
} mmi_at_alarm_info_struct;

typedef enum{
    VT_EM_REVERSE_INVALID = -1,
    VT_EM_REVERSE_DATA = 0,
    VT_EM_REVERSE_NULL
}vt_em_reverse_channel_data_type;

typedef enum{
    VT_EM_AL_INVALID = -1,
    VT_EM_AL2_WITH_SEQUENCE_NUMBER = 0,
    VT_EM_AL2_WITHOUT_SEQUENCE_NUMBER,
    VT_EM_AL3_CONTROL_FIELD_SIZE_0,
    VT_EM_AL3_CONTROL_FIELD_SIZE_1,
    VT_EM_AL3_CONTROL_FIELD_SIZE_2
}vt_em_al_choice;

typedef enum{
    VT_EM_MUX_LEVEL_INVALID = -1,
    VT_EM_MUX_LEVEL_0 = 0,
    VT_EM_MUX_LEVEL_1,
    VT_EM_MUX_LEVEL_1_WITH_DOUBLE_FLAG,
    VT_EM_MUX_LEVEL_2,
    VT_EM_MUX_LEVEL_2_WITH_OPTIONAL_HEADER,
    VT_EM_MUX_LEVEL_3,
    VT_EM_MUX_LEVEL_3_WITH_OPTIONAL_HEADER
}vt_em_mux_level_choice;

typedef enum{
    VT_EM_WNSRP_INVALID = -1,
    VT_EM_WNSRP_OFF = 0,
    VT_EM_WNSRP_ON
}vt_em_wnsrp_choice;

typedef enum{
    VT_EM_CODEC_INVALID = -1,
    VT_EM_CODEC_MPEG4_H263 = 0,
    VT_EM_CODEC_H263_MPEG4
}vt_em_video_codec_preference_choice;

typedef enum{
    VT_EM_AUTO_DROP_INVALID = -1,
    VT_EM_DISABLE_AUTO_DROP_IF_CHANNEL_FAIL = 0,
    VT_EM_ENABLE_AUTO_DROP_IF_CHANNEL_FAIL
}vt_em_auto_drop_if_channel_fail_choice;

typedef enum{
    VT_EM_TERMINAL_TYPE_INVALID = -1,
    VT_EM_TERMINAL_TYPE_NORMAL = 0,
    VT_EM_TERMINAL_TYPE_MASTER,
    VT_EM_TERMINAL_TYPE_SLAVE
}vt_em_terminal_type_choice;

typedef struct{
    vt_em_mux_level_choice mux_level_choice;
    vt_em_wnsrp_choice wnsrp_choice;
    vt_em_al_choice audio_al_choice;
    vt_em_al_choice video_al_choice;
    vt_em_reverse_channel_data_type video_reverse_data_type_choice;
    vt_em_video_codec_preference_choice video_codec_preference_choice;
    vt_em_auto_drop_if_channel_fail_choice auto_drop_if_channel_fail_choice;
    vt_em_terminal_type_choice terminal_type_choice;
    kal_int32 timer_T101;
    kal_int32 timer_T109;
    kal_int32 timer_T401;
    kal_int32 user_specified_1;
    kal_int32 user_specified_2;
    kal_uint8 user_specified_3[64];
}vt_em_config_struct;

typedef struct
{
 kal_uint8 mcc[3];
 kal_uint8 mnc[3];
 kal_uint8 lac[2];
 kal_uint16 cell_id;
 kal_uint8 nc_info_index;
    kal_uint8 rac;


    kal_uint8 nmo;

    kal_uint8 supported_Band;
} rr_em_lai_info_struct;
# 1329 "interface/modem/general/ps_public_struct.h"
typedef struct
{
# 1354 "interface/modem/general/ps_public_struct.h"
    kal_uint8 unused;
}pmu6223_config_param_struct;
# 1527 "interface/modem/general/ps_public_struct.h"
typedef struct
{
# 1562 "interface/modem/general/ps_public_struct.h"
    kal_uint8 unused;
}pmu6238_config_param_struct;
# 1580 "interface/modem/general/ps_public_struct.h"
typedef struct
{


    kal_uint8 unused;
}pmu6326_config_param_struct;
# 1762 "interface/modem/general/ps_public_struct.h"
typedef struct
{
# 1798 "interface/modem/general/ps_public_struct.h"
    kal_uint8 unused;
}pmic_config_param_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint16 arfcn;
    kal_int16 afc;
    kal_uint8 band;
    kal_int8 tsc;
    kal_int8 pcl;
    kal_uint8 pattern;
}rf_test_gsm_tx_test_struct, l4cl1_em_rf_test_gsm_tx_test_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_int16 arfcn;
    kal_int16 gain;
    kal_uint8 band;
    kal_uint8 pattern;
}rf_test_gsm_rx_test_struct, l4cl1_em_rf_test_gsm_rx_test_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 band;
    kal_int16 arfcn_in;
    kal_int16 arfcn_out[20];
    kal_int16 power[20];
}rf_test_gsm_power_scan_struct,
l4cl1_em_rf_test_gsm_power_scan_req_struct,
l4cl1_em_rf_test_gsm_power_scan_cnf_struct;


typedef struct
{
    rf_test_gsm_tx_test_struct gsm_tx_test;
    rf_test_gsm_rx_test_struct gsm_rx_test;
    rf_test_gsm_power_scan_struct gsm_power_scan;
}rf_test_gsm_param_struct;

typedef struct
{
    kal_uint8 mono_enable;
}fm_radio_mono_struct;

typedef struct
{
    kal_uint8 stereo_enable;
    kal_uint8 sblend_onoff;
}fm_radio_stereo_struct;

typedef struct
{
    kal_uint8 level;
}fm_radio_rssi_struct;

typedef struct
{
    kal_uint8 item_value;
}fm_radio_if_count_delta_struct;

typedef struct
{
    fm_radio_mono_struct fm_radio_mono;
    fm_radio_stereo_struct fm_radio_stereo;
    fm_radio_rssi_struct fm_radio_rssi;
    fm_radio_if_count_delta_struct fm_radio_if;
}fm_radio_config_param_struct;
# 2019 "interface/modem/general/ps_public_struct.h"
typedef struct
{
    kal_uint8 addr_length;
    kal_uint8 addr_bcd[11];
}l4c_sms_addr_struct;

typedef struct
{
 l4c_sms_addr_struct sca;
 kal_uint8 tpdu[176];
 kal_uint8 pdu_len;
 kal_uint8 tpdu_len;
}l4c_usm_cmgw_struct;

typedef struct
{
 kal_uint8 mode;
 kal_uint8 mt;
 kal_uint8 bm;
 kal_uint8 ds;
 kal_uint8 bfr;
}l4c_usm_cnmi_struct;

typedef struct
{
 kal_uint16 reply_index;
 kal_uint16 data_len;
 kal_uint8 length;
 kal_uint8 pdu[176];
}l4c_usm_cmss_struct;

typedef struct {
   l4_name_struct name;
   l4c_number_struct number_info;
} l4c_sms_mailbox_info_struct;

typedef struct {
    kal_uint8 line_no;
    kal_uint8 msp_no;
    kal_uint8 waiting_num;
    kal_uint8 ind_type;
    kal_bool is_show_num;
    kal_bool is_clear;
    kal_bool is_from_storage;
} l4csmsal_msg_waiting_ind_ext_struct;

typedef struct {
   kal_uint16 mid[60];
   kal_uint16 dcs[30];
   kal_uint16 mir[60];
   kal_uint8 mid_mask[60];
   kal_uint8 mir_mask[30];
   kal_uint8 dcs_mask[30];
   kal_uint8 para_ind;

   kal_bool is_all_language_on;


   kal_bool is_cb_ready;
   kal_bool is_sim_change;

   l4c_cb_set_type_enum set_type;
} l4c_cb_info_struct;

typedef struct {
    kal_uint16 ref;
    kal_uint8 total_seg;
    kal_uint8 seg;
} smsal_concat_struct;

typedef struct {
    kal_uint8 mem1;
    kal_uint8 mem2;
    kal_uint8 mem3;
    kal_uint16 used1;
    kal_uint16 used2;
    kal_uint16 used3;
    kal_uint16 total1;
    kal_uint16 total2;
    kal_uint16 total3;
} smsal_prefer_storage_struct;


typedef struct
{

    kal_uint8 mbi_id[5];



} smsal_mbi_struct;

typedef struct {
    kal_uint8 mti;
    kal_uint8 status;
    kal_uint8 storage_type;
    kal_uint16 index;
} smsal_inbox_struct;

typedef struct {
    kal_uint16 msg_count;
    smsal_inbox_struct inbox_list[40];
} smsal_inbox_list_struct;

typedef struct {
    kal_uint8 mti;
    kal_uint8 status;
    kal_uint8 storage_type;
    kal_uint16 index;
} smsal_outbox_struct;

typedef struct {
    kal_uint16 msg_count;
    smsal_outbox_struct outbox_list[40];
} smsal_outbox_list_struct;


typedef struct
{
    kal_uint16 id;

    kal_uint8 msg_len_insec;
    kal_uint8 msg_retention_day;

    kal_uint8 priority;

    kal_uint8 msg_ext_flg;

    l4_addr_bcd_struct calling_line_addr;

    kal_uint8 msg_ext_len;
    kal_uint8 *msg_ext_data;
}smsal_evmi_msg_struct;

typedef struct {
    kal_uint8 addr_length;
    kal_uint8 addr_bcd[11];
} sms_addr_struct;

typedef struct {
   kal_uint8 storage;
   kal_uint8 type;
   kal_uint8 num_index;
   kal_uint8 aas_id;
   kal_uint16 index;
   kal_uint16 record_index;
   l4c_number_struct tel;
   l4_name_struct alpha_id;
} l4c_phb_entry_struct;

typedef struct {

   kal_uint8 address_type;
   union
   {
      l4c_number_struct tel;
      kal_uint8 uri[(41)];
   } address;



   l4_name_struct alpha_id;
   rtc_format_struct time;
   kal_uint8 count;
   kal_uint8 call_status;
   kal_int32 call_duration;
} l4c_phb_ln_entry_struct;

typedef struct {
    kal_uint16 record_size;
    kal_uint16 record_num;
    kal_uint8 alpha_length;
    kal_uint8 occurrence;
    kal_bool is_support;
} l4c_phb_desc_struct;

typedef l4_name_struct phb_sne_struct;
typedef l4_name_struct phb_aas_struct;
typedef l4_name_struct phb_gas_struct;

typedef struct {
    kal_uint8 email_length;
    kal_uint16 record_index;
    kal_uint16 adn_record_index;
    kal_uint8 email_address[61];
} phb_email_struct;

typedef struct
{
    kal_uint8 gas_id[10];
} phb_grp_struct;

typedef struct
{
    kal_uint8 ctrl_info;
    kal_uint8 hidden_info;
} phb_pbc_struct;

typedef union {
    phb_sne_struct sne;
    phb_aas_struct aas;
    phb_gas_struct gas;
    phb_grp_struct grp;
    phb_email_struct email;
    phb_pbc_struct pbc;
} l4c_phb_usim_field;

typedef struct {
    l4c_phb_usim_field field;
} l4c_phb_usim_entry;

typedef struct {
   kal_uint8 storage;
   kal_uint8 type;
   kal_uint16 index;
   kal_uint16 record_index;
   l4_addr_bcd_struct tel;
   l4_name_struct alpha_id;
} l4c_phb_bcd_entry_struct;


typedef struct
{
 kal_uint16 num_of_entry;
 l4c_phb_bcd_entry_struct phb_entry[1000/(54+42)];
} l4c_phb_entries_struct;


typedef struct {
   kal_uint8 plmn_id[7];
   kal_uint8 status;
} l4c_plmn_info_struct;

typedef struct {
   kal_uint8 plmn_id[7];
   kal_uint8 status;
   kal_uint8 rat;
   kal_uint8 lac[2];
} l4c_rat_plmn_info_struct;

typedef struct l4c_nw_time_zone_time_struct
{
 kal_uint8 year;
 kal_uint8 month;
 kal_uint8 day;
 kal_uint8 hour;
 kal_uint8 min;
 kal_uint8 sec;
 kal_uint8 time_zone;
} l4c_nw_time_zone_time_struct;


typedef struct l4c_rac_ecc_number_struct
{
 kal_uint8 category;
 l4_addr_bcd_struct tel_number;
} l4c_rac_ecc_number_struct;


typedef struct {
    kal_uint8 chv1_count;
    kal_uint8 chv2_count;
    kal_uint8 ubchv1_count;
    kal_uint8 ubchv2_count;
    kal_uint8 is_chv1_enabled;
    kal_uint8 is_chv1_verified;
    kal_uint8 is_chv2_enabled;
    kal_uint8 is_chv2_verified;
    kal_uint8 chv_key_ref[2];
} sim_chv_info_struct;

typedef struct {
    kal_uint8 chv1_status;
    kal_uint8 chv2_status;
    kal_uint8 ubchv1_status;
    kal_uint8 ubchv2_status;
} sim_chv_status_struct;

typedef struct {
    kal_uint8 ecc[3];
    kal_uint8 esc;
    kal_uint8 name_length;
    kal_uint8 name_dcs;
    kal_uint8 name[(32)];
} sim_ecc_entry_struct;

typedef struct {
   kal_uint8 alpha_id_dcs;
   kal_uint8 alpha_id_size;
   kal_uint8 alpha_id[32];
   kal_uint8 ton_npi;
   kal_uint8 digit_size;
   kal_uint8 digit[41];
} l4csmu_addr_struct;

typedef struct {
   kal_uint8 alpha_id_size;
   kal_uint8 alpha_id[21];
   kal_uint8 ton_npi;
   kal_uint8 digit_size;
   kal_uint8 digit[4];
   kal_uint8 index_level;
   kal_bool network_specific;
   kal_bool premium_rate;
} l4csmu_info_num_struct;

typedef struct {
    kal_uint8 rand[16];
    kal_bool is_auth_present;
    kal_uint8 auth[16];
    sim_interface_enum sim_id;
} smu_supc_sim_authenticate_request_struct;

typedef struct {
    kal_uint16 result;
    kal_uint8 kc[8];
    kal_uint8 sres[4];
    kal_uint8 ck[16];
    kal_uint8 ik[16];
    kal_uint8 res[16];
    kal_uint8 res_len;
    kal_uint8 auts[16];
    kal_uint8 auts_len;
} smu_supc_sim_authenticate_response_struct;

typedef struct {
  kal_uint8 ref_count;
  kal_uint16 msg_len;
   kal_uint8 cmd_detail[5];
   kal_bool is_icon_available;
   sat_icon_struct icon_info;
  kal_uint8 bearer_type;
} l4csmu_sat_open_channel_ind_struct;

typedef struct {
   kal_uint8 ref_count;
   kal_uint16 msg_len;
   kal_uint8 cmd_detail[5];
  kal_uint8 state;
  kal_bool is_icon_available;
  sat_icon_struct icon_info;
} l4csmu_sat_close_channel_ind_struct;

typedef struct {
   kal_uint8 ref_count;
   kal_uint16 msg_len;
   kal_uint8 cmd_detail[5];
  kal_uint8 state;
   kal_bool is_icon_available;
   sat_icon_struct icon_info;
} l4csmu_sat_send_data_ind_struct;

typedef struct {
   kal_uint8 ref_count;
   kal_uint16 msg_len;
   kal_uint8 cmd_detail[5];
  kal_uint8 state;
  kal_bool is_icon_available;
  sat_icon_struct icon_info;
} l4csmu_sat_recv_data_ind_struct;

typedef struct {
    kal_uint8 hnb_name_length;
    kal_uint8 hnb_name[48];
    csg_type_enum csg_type;
    kal_uint32 csg_id;
    kal_int8 power_level;
} csg_info_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 gsm_tx_pwr_red;
    kal_uint8 umts_tx_pwr_red;
} l4c_max_tx_pwr_red_req_struct;

typedef struct {
    pdp_addr_type_enum ip_addr_type;
    kal_uint8 ipv4[4];
    kal_uint8 ipv6[16];
} ip_addr_struct;

typedef struct
{
    kal_uint16 earfcn;
    kal_uint8 bandwidth;
} interrat_lte_cell_info_struct;

typedef struct {
    kal_bool is_dnsv4_present ;
    kal_uint8 dnsv4[IPV4_ADDR_LEN] ;
} ipv4_dns_struct ;

typedef struct {
    kal_bool is_dnsv6_present ;
    kal_uint8 dnsv6[IPV6_ADDR_LEN] ;
} ipv6_dns_struct ;


typedef struct {
    ipv4_dns_struct v4[2];
    ipv6_dns_struct v6[2];
} dns_struct ;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 length;
    kal_uint8 string[128];
}l4ctst_at_response_ind_struct;

typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_bool remote_wakeup_enable;
}l4c_usb_suspend_req_struct;
# 2448 "interface/modem/general/ps_public_struct.h"
typedef struct {
    kal_bool geran_tdma;
    kal_bool utran_fdd;
    kal_bool utran_tdd_lcr;
    kal_bool eutran_fdd;
    kal_bool eutran_tdd;
} l4c_radio_access_setting_struct;


typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 reconfig_type;
}l4c_me_reconfigure_req_struct, l4c_me_volte_reconfigure_req_struct;
# 355 "interface/modem/general/em_struct.h" 2





# 1 "interface/modem/general/em_public_struct.h" 1
# 776 "interface/modem/general/em_public_struct.h"
# 1 "interface/modem/general/ps_em_enum.h" 1
# 203 "interface/modem/general/ps_em_enum.h"
typedef enum
{
    PS_CONF_TEST_NONE,
    PS_CONF_TEST_CTA,
    PS_CONF_TEST_IP_OFF = PS_CONF_TEST_CTA,
    PS_CONF_TEST_FTA,
    PS_CONF_TEST_IOT,
    PS_CONF_TEST_OPERATOR,
    PS_CONF_TEST_FACTORY,

    PS_CONF_TEST_END
} ps_conf_test_mode_enum;
# 289 "interface/modem/general/ps_em_enum.h"
typedef enum
{




    EM_NW_EVENT_ID_UMAC_EVENT_START,

    EM_NW_EVENT_ID_UMAC_EVENT_END,


    EM_NW_EVENT_ID_CSCE_CELL_RESELECTION_EVENT,
    EM_NW_EVENT_ID_CSCE_NEW_CELL_SELECTED_EVENT,
    EM_NW_EVENT_ID_CSCE_OUT_OF_SERVICE_EVENT,
    EM_NW_EVENT_ID_CSCE_IN_SERVICE_EVENT,


    EM_NW_EVENT_ID_MEME_EVENT_SPECIFIC_CELL_IND,


    EM_NW_EVENT_ID_RRCE_IRHO_3G2_EVENT,
    EM_NW_EVENT_ID_RRCE_IRCCO_3G2_EVENT,
    EM_NW_EVENT_ID_RRCE_IRCR_3G2_EVENT,

    EM_NW_EVENT_ID_RRCE_IRHO_3G4_EVENT,
    EM_NW_EVENT_ID_RRCE_IRCR_3G4_EVENT,


    EM_NW_EVENT_ID_SLCE_EVENT_START,

    EM_NW_EVENT_ID_SLCE_EVENT_END,



    EM_NW_EVENT_ID_TEST0,
    EM_NW_EVENT_ID_TEST1,
    EM_NW_EVENT_ID_TEST2,
    EM_NW_EVENT_ID_TEST3,
    EM_NW_EVENT_ID_TEST4,
    EM_NW_EVENT_ID_TEST5,
    EM_NW_EVENT_ID_TEST6,
    EM_NW_EVENT_ID_TEST7,
    EM_NW_EVENT_ID_TEST8,
    EM_NW_EVENT_ID_TEST9,
    EM_NW_EVENT_ID_TEST10,
    EM_NW_EVENT_ID_TEST11,
    EM_NW_EVENT_ID_TEST12,
    EM_NW_EVENT_ID_TEST13,
    EM_NW_EVENT_ID_TEST14,
    EM_NW_EVENT_ID_TEST15,
    EM_NW_EVENT_ID_TEST16,
    EM_NW_EVENT_ID_TEST17,
    EM_NW_EVENT_ID_TEST18,
    EM_NW_EVENT_ID_TEST19,
    EM_NW_EVENT_ID_TEST20,
    EM_NW_EVENT_ID_TEST21,
    EM_NW_EVENT_ID_TEST22,
    EM_NW_EVENT_ID_TEST23,
    EM_NW_EVENT_ID_TEST24,
    EM_NW_EVENT_ID_TEST25,
    EM_NW_EVENT_ID_TEST26,
    EM_NW_EVENT_ID_TEST27,
    EM_NW_EVENT_ID_TEST28,
    EM_NW_EVENT_ID_TEST29,
    EM_NW_EVENT_ID_TEST30,
    EM_NW_EVENT_ID_TEST31,
    EM_NW_EVENT_ID_TEST32,
    EM_NW_EVENT_ID_TEST33,
    EM_NW_EVENT_ID_TEST34,
    EM_NW_EVENT_ID_TEST35,
    EM_NW_EVENT_ID_TEST36,
    EM_NW_EVENT_ID_TEST37,


    EM_NW_EVENT_ID_CELL_POWER_LEVEL_IND,
    EM_NW_EVENT_ID_GMMREG_ATTACH_CNF,



    EM_NW_EVENT_ID_MAX

} EM_NW_EVENT_ID_ENUM;

typedef enum
{


    EM_NW_EVENT_GROUP_CSCE,
    EM_NW_EVENT_GROUP_MEME,
    EM_NW_EVENT_GROUP_RRCE,


    EM_NW_EVENT_GROUP_RAC,

    EM_NW_MAX_NO_OF_GROUP
} EM_NW_EVENT_GROUP_ENUM;



typedef enum
{
    EM_AMR_MODE_475,
    EM_AMR_MODE_515,
    EM_AMR_MODE_590,
    EM_AMR_MODE_670,
    EM_AMR_MODE_740,
    EM_AMR_MODE_795,
    EM_AMR_MODE_1020,
    EM_AMR_MODE_1220,
    EM_AMR_MODE_NONE,
} em_amr_mode_enum;
# 777 "interface/modem/general/em_public_struct.h" 2


typedef kal_uint32 request_info_type;

typedef enum
{


   RR_EM_CELL_SELECT_PARA_INFO = 0, RR_EM_INFO_BEGIN = RR_EM_CELL_SELECT_PARA_INFO,
   RR_EM_CHANNEL_DESCR_INFO,
   RR_EM_CTRL_CHANNEL_DESCR_INFO,
   RR_EM_RACH_CTRL_PARA_INFO,
   RR_EM_LAI_INFO,
   RR_EM_RADIO_LINK_COUNTER_INFO,
   RR_EM_MEASUREMENT_REPORT_INFO,

   RR_EM_CA_LIST_INFO,

   RR_EM_CONTROL_MSG_INFO,
   RR_EM_SI2Q_INFO_STRUCT_INFO,
   RR_EM_MI_INFO_STRUCT_INFO,
   RR_EM_BLK_INFO,
   RR_EM_TBF_INFO,
   RR_EM_GPRS_GENERAL_INFO,

   RRM_EM_IR_PARAMETER_STATUS_IND_STRUCT_INFO,
   RRM_EM_IR_RESELECT_STATUS_IND_STRUCT_INFO,
   RRM_EM_IR_3G_NEIGHBOR_MEAS_STATUS_IND_STRUCT_INFO,
   RRM_EM_IR_3G_NEIGHBOR_MEAS_INFO_IND_STRUCT_INFO,
   RRM_EM_IR_4G_NEIGHBOR_MEAS_STATUS_IND_STRUCT_INFO,
   RRM_EM_IR_4G_NEIGHBOR_MEAS_INFO_IND_STRUCT_INFO,
   RRM_EM_SERV_CELL_POWER_STATUS_IND_STRUCT_INFO,
   RRM_EM_IR_3G_NEIGHBOR_CELL_STATUS_IND_STRUCT_INFO,
   RRM_EM_IR_4G_NEIGHBOR_CELL_STATUS_IND_STRUCT_INFO,
   RR_EM_INFO_END = RR_EM_INFO_BEGIN + 49,




   CC_EM_CHANNEL_INFO = 50,
   CC_EM_CALL_INFO,


   SS_EM_INFO,


   MM_EM_INFO,

   MMRR_EM_PLMN_INFO_STRUCT_INFO,


   UEM_EM_BATTERY_INFO,


   GMM_EM_INFO,




   LLC_EM_INFO,


   SM_EM_INFO,
# 864 "interface/modem/general/em_public_struct.h"
   MMRR_EM_PLMN_LOSS_INFO_STRUCT_INFO,
   MMRR_EM_PLMN_SEARCH_CNF_INFO_STRUCT_INFO,
   EM_URR_3G_GENERAL_STATUS_IND = 70, URR_EM_INFO_BEGIN = EM_URR_3G_GENERAL_STATUS_IND,



   EM_SIBE_3G_SIB_IND_STRUCT_INFO,
   EM_CSCE_SERV_CELL_IND_STRUCT_INFO = 75,
   EM_CSCE_NEIGH_CELL_IND_STRUCT_INFO,
   EM_CSCE_R_STATUS_IND_STRUCT_INFO,
   EM_CSCE_H_STATUS_IND_STRUCT_INFO,
   EM_CSCE_APBCR_STATUS_IND_STRUCT_INFO,
   EM_CSCE_MEAS_RULE_STATUS_IND_STRUCT_INFO,
   EM_CSCE_MULTIPLE_PLMN_IND_STRUCT_INFO,

   EM_MEME_INFO_DCH_UMTS_CELL_INFO = 90, MEME_EM_INFO_BEGIN = EM_MEME_INFO_DCH_UMTS_CELL_INFO,
   EM_MEME_INFO_DCH_GSM_CELL_INFO,
   EM_MEME_INFO_DCH_LTE_CELL_INFO,
   EM_MEME_INFO_EVENT_TYPE_1_PARAMETER_STRUCT_INFO,
   EM_MEME_INFO_EVENT_TYPE_2_PARAMETER_STRUCT_INFO,
   EM_MEME_INFO_EVENT_TYPE_3_PARAMETER_STRUCT_INFO,



   EM_MEME_INFO_DCH_H_SERVING_CELL_INFO,
   EM_MEME_INFO_DCH_3G_BLER_INFO,
   EM_MEME_INFO_GSM_CELL_INFO,
   EM_MEME_INFO_LTE_CELL_INFO,
   MEME_EM_INFO_END = EM_MEME_INFO_LTE_CELL_INFO,


   EM_CALL_INFO_IND = 106,


   EM_IMC_SIP_INFO_IND = 107,

   EM_RRCE_TGPS_STATUS_IND= 110,
   EM_SLCE_SRNCID_STATUS_IND,

   EM_UAS_3G_TDD128_HANDOVER_SEQUENCE_IND = 130,

   EM_RRCE_3G4_REDIR_EVENT,

   EM_SLCE_PS_DATA_RATE_STATUS_IND = 140,
   EM_RRCE_DCH_STATE_CONFIGURATION_STATUS_IND = 155,
   EM_RRCE_FACH_STATE_CONFIGURATION_STATUS_IND,
   EM_RRCE_CS_OVER_HSPA_STATUS_IND,
   URR_EM_INFO_END = EM_RRCE_CS_OVER_HSPA_STATUS_IND,



   UL1_EM_HS_DSCH_CONFIGURATION_INFO = 170, UL1_EM_INFO_BEGIN = UL1_EM_HS_DSCH_CONFIGURATION_INFO,
   UL1_EM_EDCH_CONFIGURATION_INFO,
   UL1_EM_CPC_CONFIGURATION_INFO,
   UL1_EM_SECONDARY_HS_CONFIGURATION_STATUS_INFO,
   UL1_EM_PRIMARY_HS_DSCH_BLER_INFO,
   UL1_EM_SECONDARY_HS_DSCH_BLER_INFO,
   UL1_EM_EDCH_ACK_RATE_INFO,
   UL1_EM_TAS_INFO, UL1_EM_INFO_END = UL1_EM_TAS_INFO,



   UL2_EM_ADM_POOL_STATUS_IND_STRUCT_INFO = 185, UL2_EM_INFO_BEGIN = UL2_EM_ADM_POOL_STATUS_IND_STRUCT_INFO,
   UL2_EM_PS_DATA_RATE_STATUS_IND_STRUCT_INFO,
   UL2_EM_HSDSCH_RECONFIG_STATUS_IND_STRUCT_INFO,
   UL2_EM_URLC_EVENT_STATUS_IND_STRUCT_INFO,
   UL2_EM_3G_BLER_IND_STRUCT_INFO,


   UL2_EM_HSUPA_SI_IND_STRUCT_INFO,

   UL2_EM_INFO_END = UL2_EM_HSUPA_SI_IND_STRUCT_INFO,



   ERRC_EM_MOB_MEAS_INTRARAT_INFO = 210, ERRC_EM_INFO_BEGIN = ERRC_EM_MOB_MEAS_INTRARAT_INFO,
   ERRC_EM_MOB_MEAS_INTERRAT_UTRAN_INFO,
   ERRC_EM_MOB_MEAS_INTERRAT_GERAN_INFO,
   ERRC_EM_AUTOS_CSG_INFO,
   ERRC_EM_CARRS_EVENT_IND,
   ERRC_EM_SIB_EVENT_IND,
   ERRC_EM_MOB_EVENT_IND,
   ERRC_EM_SEC_PARAM,
   ERRC_EM_REEST_INFO,
   ERRC_EM_RECONF_INFO,
   ERRC_EM_RCM_SIM_STS_INFO,
   ERRC_EM_SYS_SIB_RX_STS_INFO,
   ERRC_EM_ERRC_STATE_IND,
   ERRC_EM_OVER_PROC_DELAY_WARNING,
   ERRC_EM_LTE_SUPPORTED_BAND_INFO,
   ERRC_EM_ERRC_KPI_INFO,


   ESM_ESM_INFO,
   ESM_L4C_ESM_INFO,

   ERRC_EM_ERRC_CONFIG_INFO,
   ERRC_EM_INFO_END = ERRC_EM_ERRC_CONFIG_INFO,


   EMM_EM_SEC_INFO = 230, EMM_EM_INFO_BEGIN = EMM_EM_SEC_INFO,
   EMM_EM_PLMNSEL_INFO,
   EMM_EM_CONN_INFO,
   EMM_EM_NASMSG_INFO,
   EMM_EM_CALL_INFO,
   EMM_EM_REG_ATTACH_INFO,
   EMM_EM_REG_DETACH_INFO,
   EMM_EM_REG_TAU_INFO,
   EMM_EM_REG_COMMON_INFO,
   EMM_EM_SV_INFO,
   EMM_EM_RATBAND_INFO,
   EMM_EM_TIMERSRV_INFO,
   EMM_EM_USIMSRV_INFO,
   EMM_EM_NVMSRV_INFO,
   EMM_EM_INFO_END = EMM_EM_NVMSRV_INFO,

   EMM_L4C_EMM_INFO,

   EM_EL2_OV_STATUS,
   EM_EL1_OV_STATUS,
   EM_QBM_STATUS,
   EM_UPCM_STATUS,


   EL1TX_EM_TX_INFO,

   EM_CSR_STATUS_IND,

   RAC_EM_INFO,


   EM_EL2_PUB_STATUS,

   EMM_L4C_LAI_CHANGE_INFO,


   RATCM_EM_23G_RAT_CHANGE_IND, RATCM_EM_INFO_BEGIN = RATCM_EM_23G_RAT_CHANGE_IND,
   RATCM_EM_INFO_END = RATCM_EM_INFO_BEGIN + 20,


   EM_L4C_RAT_CHANGE_IND, L4C_EM_INFO_BEGIN = EM_L4C_RAT_CHANGE_IND,
   L4C_EM_INFO_END = L4C_EM_INFO_BEGIN + 50,


   IPC_EM_UL_THROTTLE_STATUS,


   ERRC_EM_SERV_IR_NEIGHBOR_INFO, ERRC_EM_INFO_BEGIN_R2 = ERRC_EM_SERV_IR_NEIGHBOR_INFO,
   ERRC_EM_IR_REDIR_EVENT,
   ERRC_EM_IRAT_MEAS_CFG,
   ERRC_EM_SRVCC_BSIC_INFO,
   ERRC_EM_INFO_END_R2 = ERRC_EM_SRVCC_BSIC_INFO,
   ERRC_EM_INFO_END_RESERVED = ERRC_EM_INFO_BEGIN_R2 + 30,


   IMC_EM_IPSEC_INFO_IND, IMC_EM_INFO_BEGIN = IMC_EM_IPSEC_INFO_IND,
   IMC_EM_INFO_END = IMC_EM_INFO_BEGIN + 20,

   NWSEL_EM_TIMER_INFO,
   NWSEL_EM_INFO_BEGIN = NWSEL_EM_TIMER_INFO,
   NWSEL_EM_INFO_END = NWSEL_EM_INFO_BEGIN+30,



   EM_ABNORMAL_EVENT_INFO_ERRC_FEATURE_TEST = 400, EM_ABNORMAL_EVENT_INFO_BEGIN = EM_ABNORMAL_EVENT_INFO_ERRC_FEATURE_TEST,
   EM_ABNORMAL_EVENT_RAC_NO_SERVICE,
   EM_ABNORMAL_EVENT_INFO_END = EM_ABNORMAL_EVENT_INFO_BEGIN + 50,


   EM_UPCM_PS_TPUT_INFO = 461, EL2_EM_INFO_BEGIN_R2 = EM_UPCM_PS_TPUT_INFO,
   EL2_EM_INFO_END_R2 = EM_UPCM_PS_TPUT_INFO,
   EL2_EM_INFO_END_RESERVED = EL2_EM_INFO_BEGIN_R2 + 29,


   TDD_EM_L1_TAS_INFO = 495, TDD_EM_L1_INFO_BEGIN = TDD_EM_L1_TAS_INFO,
   TDD_EM_L1_INFO_END = TDD_EM_L1_TAS_INFO + 4,


   GL1_EM_TAS_INFO = 950,

   NUM_OF_EM_INFO,
   INVALID_EM_INFO = 0x7fffffff
} em_info_enum;




typedef struct
{
 kal_uint8 mcc1;
 kal_uint8 mcc2;
 kal_uint8 mcc3;
 kal_uint8 mnc1;
 kal_uint8 mnc2;
 kal_uint8 mnc3;
} plmn_struct;

typedef enum {
    ACCESS_CLASS_NOT_BARRED = 0,
    ACCESS_CLASS_EMERGENCY_ONLY = 1,
    ACCESS_CLASS_ALL_BARRED = 2,
    ACCESS_CLASS_NOT_AVAILABLE = 3
} access_class_level_enum;

typedef enum {
    PPAC_FOR_NONE_DOMAIN = 0,
    PPAC_FOR_CS_DOMAIN = 1,
    PPAC_FOR_PS_DOMAIN = 2,
    PPAC_FOR_CS_PS_DOMAIN = 3,
    PPAC_NOT_AVAILABLE = 4
} ppac_domain_enum;







typedef enum
{
    EM_OFF = 0,
    EM_ON = 1,
    EM_NC = 2
} em_info_status_enum;


typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   em_info_status_enum info_request[NUM_OF_EM_INFO];
} dhll4c_em_update_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;


    kal_uint8 band;
    kal_uint8 ant_port;
    kal_uint8 dl_bw;
    kal_uint8 ul_bw;
    kal_uint8 tdd_cfg;
    kal_uint8 sp_cfg;
    kal_uint8 tm;
    kal_int16 pci;
    kal_uint16 earfcn;
    kal_uint16 dlFreq;
    kal_uint16 ulFreq;


    kal_int16 dl_rsrp[2];
    kal_int16 dl_rssi[2];
    kal_int16 snr[2];
    kal_int16 rsrp;
    kal_int16 rsrq;
    kal_int16 os_snr;


    kal_int16 phr;
    kal_int16 ta;
    kal_int16 cqi;
    kal_int16 cqi1;
    kal_int16 ri;


    kal_int16 prach_tx_power_ave;
    kal_int16 pucch_tx_power_ave;
    kal_int16 pusch_tx_power_ave;
    kal_int16 srs_tx_power_ave;


    kal_uint32 DL_Tput;


    kal_uint32 UL_Tput;


    kal_int16 data[8];


    kal_int16 dl_rsrq[2];


    kal_uint8 srs_bw_ave;
    kal_int16 pucch_tx_power_ave_fmt[7];


} em_el1tx_status_ind_struct;


typedef struct
{
    kal_uint8 srb_num;
    kal_uint8 drb_num;
} em_el2_pub_info_t;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    em_el2_pub_info_t el2_info;

} em_el2_pub_status_ind_struct;

extern em_el2_pub_status_ind_struct el2_pubstatus_g;


typedef enum {
    BOTH_RX_PATH = 0,
    RX_PATH_0 = 1,
    RX_PATH_1 = 2
} rx_path_setting_enum;

typedef enum {
    SET_RX_PATH = 0,
    READ_RX_PATH = 1
} rx_path_cmd_type;



typedef enum {
    UL1_RX_MAIN_ONLY = 0,
    UL1_RX_RXD_ONLY = 1,
    UL1_RX_BOTH = 2,
    UL1_RX_OFF = 3
} ul1_rx_path_set_enum;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    rx_path_cmd_type cmd_type;
    rx_path_setting_enum rx_path;
    kal_bool nvram_write;
}l4cel1_set_rx_path_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    rx_path_cmd_type cmd_type;
    kal_bool rx_path_set_result;

    rx_path_setting_enum rx_path;
}l4cel1_set_rx_path_cnf_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    ul1_rx_path_set_enum rx_path;
    kal_bool nvram_write;
    rx_path_cmd_type cmd_type;
}l4cul1_set_rx_path_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool result;
    rx_path_cmd_type cmd_type;
    ul1_rx_path_set_enum rx_path;
}l4cul1_set_rx_path_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 band;
    kal_uint16 dl_earfcn;
}l4cel1_rx_rssi_verify_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 rssi0_dBm;
    kal_int32 rssi1_dBm;
}l4cel1_rx_rssi_verify_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}l4cel1_get_rf_temperature_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 rf_temperature;
}l4cel1_get_rf_temperature_cnf_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;

    kal_bool on;

    kal_int16 threshold ;
    kal_int16 monitor_period;
}l4cel1_monitor_rf_temperature_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}l4cel1_monitor_rf_temperature_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;

    kal_int16 curr_temperature;
    kal_int16 threshold ;
}l4cel1_monitor_rf_temperature_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}l4cel1_get_tx_power_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 tx_power;
}l4cel1_get_tx_power_cnf_struct;


typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   module_type mod_id;
   request_info_type info_request;
} tstl4c_em_start_req_struct;

typedef tstl4c_em_start_req_struct tstl4c_em_stop_req_struct;



typedef struct
{
 kal_uint8 crh;
 kal_uint8 ms_txpwr;
 kal_uint8 rxlev_access_min;
} rr_em_cell_select_para_info_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    rr_em_cell_select_para_info_struct rr_em_cell_select_para_info;
} em_rrm_cell_select_para_info_ind_struct;

typedef struct
{
 kal_uint8 channel_type;
 kal_uint8 tn;
 kal_uint8 tsc;
 kal_uint8 hopping_flag;
 kal_uint8 maio;
 kal_uint8 hsn;
 kal_uint8 num_of_carriers;
 kal_uint16 arfcn[64];
 kal_bool is_BCCH_arfcn_valid;

 kal_uint16 BCCH_arfcn;


 kal_uint8 cipher_algo;
 kal_uint8 imeisv_digit[16];

    kal_uint8 channel_mode;



       kal_bool amr_valid;
       kal_uint8 mr_ver;
       kal_bool nscb;
       kal_bool icmi;
       kal_uint8 start_codec_mode;
       kal_uint8 acs;
       kal_uint8 threshold[3];
       kal_uint8 hysteresis[3];

} rr_em_channel_descr_info_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    rr_em_channel_descr_info_struct rr_em_channel_descr_info;
} em_rrm_channel_descr_info_ind_struct;

typedef struct
{
 kal_uint8 mscr;
 kal_uint8 att;
 kal_uint8 bs_ag_blks_res;
 kal_uint8 ccch_conf;
 kal_uint8 cbq2;
 kal_uint8 bs_pa_mfrms;
 kal_uint8 t3212;
} rr_em_ctrl_channel_descr_info_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    rr_em_ctrl_channel_descr_info_struct rr_em_ctrl_channel_descr_info;
} em_rrm_ctrl_channel_descr_info_ind_struct;

typedef struct
{
 kal_uint8 max_retrans;
 kal_uint8 tx_integer;
 kal_uint8 cba;
 kal_uint8 re;
 kal_uint8 acc_class[2];
 kal_bool CB_supported;
} rr_em_rach_ctrl_para_info_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    rr_em_rach_ctrl_para_info_struct rr_em_rach_ctrl_para_info;
} em_rrm_rach_ctrl_para_info_ind_struct;

typedef struct
{
 kal_uint16 max_value;
 kal_int16 current_value;
 kal_uint8 dtx_ind;
 kal_uint8 dtx_used;
 kal_bool is_dsf;
} rr_em_radio_link_counter_info_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    rr_em_radio_link_counter_info_struct rr_em_radio_link_counter_info;
} em_rrm_radio_link_counter_info_ind_struct;

typedef struct
{
    kal_bool is_valid;
    kal_uint8 cs_report_type;
    kal_bool is_invalid_bsic_rp;
    kal_uint8 cs_serv_band_rp;
    kal_uint8 cs_multi_band_rp;

    kal_uint8 cs_rp_threshold_850;
    kal_uint8 cs_rp_offset_850;

    kal_uint8 cs_rp_threshold_900;
    kal_uint8 cs_rp_offset_900;

    kal_uint8 cs_rp_threshold_1800;
    kal_uint8 cs_rp_offset_1800;

    kal_uint8 cs_rp_threshold_1900;
    kal_uint8 cs_rp_offset_1900;
} rr_em_cs_meas_param_struct;

typedef struct
{
    kal_bool is_valid;
    kal_uint8 ps_report_type;
    kal_bool is_invalid_bsic_rp;
    kal_uint8 ps_serv_band_rp;
    kal_uint8 ps_multi_band_rp;

    kal_uint8 ps_rp_threshold_850;
    kal_uint8 ps_rp_offset_850;

    kal_uint8 ps_rp_threshold_900;
    kal_uint8 ps_rp_offset_900;

    kal_uint8 ps_rp_threshold_1800;
    kal_uint8 ps_rp_offset_1800;

    kal_uint8 ps_rp_threshold_1900;
    kal_uint8 ps_rp_offset_1900;
} rr_em_ps_meas_param_struct;

typedef struct
{

    kal_uint8 rr_state;


    kal_uint8 meas_mode;

    kal_uint16 serving_arfcn;
    kal_uint8 serving_bsic;
    kal_uint8 serving_current_band;
    kal_uint8 serv_gprs_supported;
    kal_int16 serv_rla_in_quarter_dbm;



    kal_uint8 serv_rla_reported_value;
    kal_bool is_serv_BCCH_rla_valid;
    kal_int16 serv_BCCH_rla_in_dedi_state;
    kal_uint8 quality;
    kal_bool gprs_pbcch_present;

    kal_bool gprs_c31_c32_enable;


    kal_int16 c1_serv_cell;
    kal_int16 c2_serv_cell;



    kal_int16 c31_serv_cell;


    kal_uint8 num_of_carriers;
    kal_uint16 nc_arfcn[32];

    kal_int16 rla_in_quarter_dbm[32];
    kal_uint8 rla_in_reported_value[32];
    kal_uint8 nc_info_status[32];





    kal_uint8 nc_bsic[32];
    kal_int32 frame_offset[32];
    kal_int32 ebit_offset[32];
    kal_int16 c1[32];
    kal_int16 c2[32];



    kal_int16 c31[32];
    kal_uint8 multiband_report;
    kal_uint8 timing_advance;
    kal_int16 tx_power_level;
    kal_int16 serv_rla_full_value_in_quater_dbm;
    kal_uint8 nco;
    kal_uint8 rxqual_sub;
    kal_uint8 rxqual_full;
    kal_int16 using_tx_power_in_dbm;

    kal_bool amr_info_valid;
    kal_uint8 cmr_cmc_cmiu_cmid;
    kal_uint8 c_i;
    kal_uint16 icm;
    kal_uint16 acs;
    kal_bool dl_dtx_used;
    em_amr_mode_enum cmr;
    em_amr_mode_enum cmc;
    em_amr_mode_enum amr_ul_mode;
    em_amr_mode_enum amr_dl_mode;





    rr_em_cs_meas_param_struct cs_meas_param;
    rr_em_ps_meas_param_struct ps_meas_param;
} rr_em_measurement_report_info_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    rr_em_measurement_report_info_struct rr_em_measurement_report_info;
} em_rrm_measurement_report_info_ind_struct;


typedef struct
{
        kal_uint8 valid;
        kal_uint8 number_of_channels;
        kal_uint16 arfcn_list[64];
} rr_em_ca_list_info_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    rr_em_ca_list_info_struct rr_em_ca_list_info;
} em_rrm_ca_list_info_ind_struct;

typedef struct
{
 kal_uint8 msg_type;
# 1571 "interface/modem/general/em_public_struct.h"
   kal_uint8 rr_cause;

} rr_em_control_msg_info_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    rr_em_control_msg_info_struct rr_em_control_msg_info;

} em_mac_control_msg_info_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    rr_em_control_msg_info_struct rr_em_control_msg_info;
} em_rrm_control_msg_info_ind_struct;


typedef struct
{
 kal_bool present;
 kal_uint8 no_of_instance;
 kal_bool emr_report;
       kal_bool pemr_report;
 kal_bool umts_parameter_exist;
} rr_em_si2q_info_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    rr_em_si2q_info_struct rr_em_si2q_info;
} em_rrm_si2q_info_ind_struct;


typedef struct
{
 kal_bool present;
 kal_uint8 no_of_instance;
 kal_bool emr_report;
 kal_bool umts_parameter_exist;
} rr_em_mi_info_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    rr_em_mi_info_struct rr_em_mi_info;
} em_rrm_mi_info_ind_struct;


typedef struct
{
 kal_uint32 t3192;
 kal_uint32 t3168;
 kal_uint8 rp;
 kal_uint8 gprs_support;
 kal_uint8 egprs_support;
 kal_uint8 sgsn_r;
 kal_uint8 pfc_support;
 kal_uint8 epcr_support;
 kal_uint8 bep_period;
}rr_em_gprs_general_info_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    rr_em_gprs_general_info_struct rr_em_gprs_general_info;
} em_rrm_gprs_general_info_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    rr_em_lai_info_struct rr_em_lai_info;
} em_rrm_lai_info_ind_struct;

typedef struct
{
 kal_bool is_greater_than_85db;
}rr_em_serv_cell_power_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    rr_em_serv_cell_power_struct rr_em_serv_cell_power_status;
}em_rrm_serv_cell_power_status_ind_struct;

typedef struct
{
 kal_bool with_4g_neighbor;
}rr_em_4g_neigbor_cell_status_sturct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
 rr_em_4g_neigbor_cell_status_sturct rr_em_4g_neighbor_status;
}em_rrm_ir_4g_neighbor_cell_status_ind_struct;

typedef struct
{
 kal_bool with_3g_neighbor;
}rr_em_3g_neigbor_cell_status_sturct;

typedef struct
{
 kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
 em_info_enum em_info;
 rr_em_3g_neigbor_cell_status_sturct rr_em_3g_neighbor_status;
}em_rrm_ir_3g_neighbor_cell_status_ind_struct;
# 1731 "interface/modem/general/em_public_struct.h"
typedef enum {
    RRM_EM_IR_MEAS_STOPPED = 0x00,
    RRM_EM_IR_FIXED_MEAS_START = 0x01,
    RRM_EM_IR_70S_PRIO_MEAS_START = 0x02,
    RRM_EM_IR_70S_PRIO_N_FIXED_MEAS_STRAT = 0x03,
    RRM_EM_IR_25S_PRIO_MEAS_START = 0x04,
    RRM_EM_IR_25S_PRIO_N_FIXED_MEAS_START = 0x05
} rrm_em_ir_meas_status_enum;

typedef struct
{
    kal_bool is_valid;

    kal_int8 geran_priority;

    kal_int8 thresh_priority_search;

    kal_uint8 thresh_GSM_low;

    kal_uint8 h_prio;
    kal_uint8 t_reselection;
}rrm_em_ir_2g_parameter_struct;

typedef struct
{
    kal_bool is_valid;







    kal_uint8 ir_source;
    kal_uint8 qsearch_i;

    kal_uint8 qsearch_c;
    kal_uint8 qsearch_c_initial;
    kal_uint8 qsearch_p;


    kal_int8 fdd_qoffset;
    kal_int8 fdd_qmin;

    kal_uint8 fdd_qmin_off;

    kal_int8 fdd_rscpmin;
    kal_uint8 fdd_rep_quant;

    kal_uint8 fdd_multirat_reporting;
    kal_uint8 fdd_reporting_offset;

    kal_uint8 fdd_reporting_threshold;

    kal_uint8 fdd_reporting_threshold_2;
    kal_uint8 fdd_gprs_rep_quant;

    kal_uint8 fdd_gprs_multirat_reporting;
    kal_uint8 fdd_gprs_reporting_offset;

    kal_uint8 fdd_gprs_reporting_threshold;

    kal_uint8 fdd_gprs_reporting_threshold_2;
# 1809 "interface/modem/general/em_public_struct.h"
}rrm_em_ir_3g_parameter_struct;

typedef struct
{
    kal_bool is_valid;






    kal_uint8 ir_source;

    kal_uint8 qsearch_c_eutran_initial;

    kal_uint8 qsearch_c_eutran;
    kal_uint8 qsearch_p_eutran;
    kal_uint8 eutran_rep_quant;

    kal_uint8 eutran_multirat_reporting;

    kal_uint8 eutran_6bit_fdd_report_threshold;
    kal_uint8 eutran_6bit_fdd_report_threshold_2;
    kal_uint8 eutran_6bit_fdd_report_offset;

    kal_uint8 eutran_6bit_tdd_report_threshold;
    kal_uint8 eutran_6bit_tdd_report_threshold_2;
    kal_uint8 eutran_6bit_tdd_report_offset;
    kal_int16 eutran_3bit_fdd_meas_report_offset;
    kal_uint8 eutran_3bit_fdd_report_threshold_2;
    kal_uint8 eutran_3bit_fdd_report_offset;
    kal_int16 eutran_3bit_tdd_meas_report_offset;
    kal_uint8 eutran_3bit_tdd_report_threshold_2;
    kal_uint8 eutran_3bit_tdd_report_offset;
    kal_uint8 eutran_3bit_report_granularity;
    kal_uint8 eutran_gprs_rep_quant;

    kal_uint8 eutran_gprs_multirat_reporting;

    kal_uint8 eutran_gprs_6bit_fdd_report_threshold;
    kal_uint8 eutran_gprs_6bit_fdd_report_threshold_2;
    kal_uint8 eutran_gprs_6bit_fdd_report_offset;

    kal_uint8 eutran_gprs_6bit_tdd_report_threshold;
    kal_uint8 eutran_gprs_6bit_tdd_report_threshold_2;
    kal_uint8 eutran_gprs_6bit_tdd_report_offset;
} rrm_em_ir_4g_parameter_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    rrm_em_ir_2g_parameter_struct ir_2g_parameter;
    rrm_em_ir_3g_parameter_struct ir_3g_parameter;
    rrm_em_ir_4g_parameter_struct ir_4g_parameter;
} em_rrm_ir_parameter_status_ind_struct;

typedef struct
{
    kal_bool is_valid;




    kal_uint8 rat;





    kal_uint8 type;
    kal_uint16 freq;
    kal_uint16 phy_id;
    kal_int16 strength;
    kal_int16 quality;
    kal_uint32 hit_duration;
# 1893 "interface/modem/general/em_public_struct.h"
    kal_uint8 hit_critiria;
}rrm_em_ir_reselect_status_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    rrm_em_ir_reselect_status_struct ir_reselect_status[6];
} em_rrm_ir_reselect_status_ind_struct;

typedef struct
{
    kal_bool is_valid;





    kal_uint8 cell_type;
    kal_uint16 uarfcn;
    kal_uint16 phy_id;
    kal_int16 strength;
    kal_int16 quailty;
    kal_uint8 rep_value;
    kal_uint8 non_rep_value;
# 1932 "interface/modem/general/em_public_struct.h"
    kal_uint8 fail_type;
}rrm_em_ir_3g_neighbor_meas_status_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    rrm_em_ir_3g_neighbor_meas_status_struct ir_3g_neighbor_meas_status[6];
} em_rrm_ir_3g_neighbor_meas_status_ind_struct;

typedef struct
{
   kal_bool is_valid;
   kal_uint16 uarfcn;
   kal_bool is_meas_ongoing;



   kal_uint8 meas_control_utran;

   kal_int8 priority;

   kal_uint8 thr_high;

   kal_uint8 thr_low;

   kal_int8 qrx_lev_min;
} rrm_em_ir_3g_neighbor_meas_info_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    kal_uint8 rrm_state;




    kal_uint8 ir_resel_mode;
    rrm_em_ir_meas_status_enum rrm_em_ir_meas_status;
    rrm_em_ir_3g_neighbor_meas_info_struct ir_3g_neighbor_meas_info[9];
} em_rrm_ir_3g_neighbor_meas_info_ind_struct;

typedef struct
{
    kal_bool is_valid;





    kal_uint8 cell_type;
    kal_uint16 earfcn;
    kal_uint16 pci;





    kal_uint8 band_type;
    kal_int16 rsrp;
    kal_int16 rsrq;
    kal_uint8 rep_value;
    kal_uint8 non_rep_value;
# 2010 "interface/modem/general/em_public_struct.h"
    kal_uint8 fail_type;
}rrm_em_ir_4g_neighbor_meas_status_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    rrm_em_ir_4g_neighbor_meas_status_struct ir_4g_neighbor_meas_status[6];
} em_rrm_ir_4g_neighbor_meas_status_ind_struct;

typedef struct
{
   kal_bool is_valid;
   kal_uint16 earfcn;
   kal_bool is_meas_ongoing;



   kal_uint8 meas_control_eutran;

   kal_int8 priority;

   kal_uint8 thr_high;

   kal_uint8 thr_low;

   kal_int16 qrx_lev_min;
# 2045 "interface/modem/general/em_public_struct.h"
   kal_uint8 lte_suitability_check;

   kal_int8 qmin;

   kal_uint8 thr_high_q;

   kal_uint8 thr_low_q;

   kal_int8 qqualmin;

   kal_int16 rsrpmin;
} rrm_em_ir_4g_neighbor_meas_info_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    kal_uint8 rrm_state;




    kal_uint8 ir_resel_mode;
    rrm_em_ir_meas_status_enum rrm_em_ir_meas_status;
    rrm_em_ir_4g_neighbor_meas_info_struct ir_4g_neighbor_meas_info[9];
} em_rrm_ir_4g_neighbor_meas_info_ind_struct;



typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   em_info_enum em_info;
   kal_uint8 cause;
   kal_uint8 channel_type;
   kal_uint8 channel_mode;
} em_cc_channel_info_ind_struct;

typedef struct
{
  kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
  em_info_enum em_info;
 kal_uint8 call_id;
 kal_uint8 ti;
 kal_uint8 state;
 kal_uint8 aux_state;
    kal_uint8 pi;
 kal_uint16 cause;
 kal_uint8 cause_location;
} em_cc_call_info_ind_struct;


typedef struct
{
 kal_uint16 sn;
 kal_uint16 mi;
 kal_uint8 dcs;
 kal_uint8 page;
 kal_uint8 pages;
} cb_em_info_struct;


typedef struct
{
 kal_uint8 ss_state;
 kal_uint8 ti;
 kal_uint8 call_id;
 kal_uint8 invoke_id;
 kal_uint8 num_invoke;
 kal_uint8 op_code;
 kal_uint8 ss_code;
 kal_uint8 bs_code;
} ss_em_info_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    kal_uint8 t3212_val;
    kal_uint8 att_flag;
    kal_uint8 mm_cause;
    kal_uint8 mm_state;
    kal_uint8 mcc[3];
    kal_uint8 mnc[3];
    kal_uint8 loc[2];
    kal_uint8 rac;
    kal_uint8 tmsi[4];
    kal_bool is_t3212_running;
    kal_uint16 t3212_timer_value;
    kal_uint16 t3212_passed_time;
    kal_uint8 common_access_class;
    kal_uint8 cs_access_class;
    kal_uint8 ps_access_class;
    ppac_domain_enum paging_for_ppac;
    ppac_domain_enum lr_for_ppac;
    access_class_level_enum lr_access_class;
    kal_uint8 lu_req_mobile_identity;





} em_mm_info_ind_struct;


typedef struct
{
 kal_int32 adc_value;
 kal_uint8 battery_level;
 kal_uint8 battery_status;
} uem_em_battery_info;



typedef struct
{
 kal_uint8 tbf_mode;


 kal_uint8 ul_tbf_status;
 kal_uint8 ul_rel_cause;
 kal_uint8 ul_ts_allocation;
 kal_uint8 ul_rlc_mode;
 kal_uint8 ul_mac_mode;

       kal_uint16 number_rlc_octect;
 kal_uint8 ul_tfi;
 kal_uint8 ul_granularity;
 kal_uint8 ul_usf;
       kal_uint8 ul_tai;
       kal_uint16 ul_tqi;
 kal_uint16 ul_window_size;


 kal_uint8 dl_tbf_status;
 kal_uint8 dl_rel_cause;
 kal_uint8 dl_ts_allocation;
 kal_uint8 dl_rlc_mode;
 kal_uint8 dl_mac_mode;

 kal_uint8 dl_tfi;
       kal_uint8 dl_tai;
 kal_uint16 dl_window_size;

 kal_uint8 dl_out_of_memory;



    kal_uint8 mac_mode;
    kal_uint8 num_dl_ts;
    kal_uint8 num_ul_ts;

}rr_em_tbf_status_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    rr_em_tbf_status_struct rr_em_tbf_status;

} em_mac_tbf_info_ind_struct;




typedef struct
{

 kal_uint8 ul_coding_scheme;
 kal_uint8 ul_cv;
 kal_uint8 ul_tlli;
 kal_uint16 ul_bsn1;

 kal_uint16 ul_bsn2;
       kal_uint8 ul_cps;
 kal_uint8 ul_rsb;
 kal_uint8 ul_spb;



 kal_uint8 dl_c_value_in_rx_level;
       kal_uint8 dl_rxqual;
       kal_uint8 dl_sign_var;
 kal_uint8 dl_coding_scheme;
 kal_uint8 dl_fbi;
 kal_uint16 dl_bsn1;

 kal_uint16 dl_bsn2;
 kal_uint8 dl_cps;
 kal_uint8 dl_gmsk_mean_bep_lev;
 kal_uint8 dl_8psk_mean_bep_lev;
    kal_uint8 dl_gmsk_cv_bep_lev;
    kal_uint8 dl_8psk_cv_bep_lev;
       kal_uint8 dl_tn_mean_bep_lev[8];

       kal_uint8 dl_tn_interference_lev[8];


    kal_uint32 em_bit_error_rate;
    kal_uint32 em_block_error_rate;
    kal_uint32 rlc_dl_rx;
    kal_uint32 rlc_ul_tx;
    kal_uint32 rlc_ul_retx;
    kal_uint32 rlc_instant_ul_throughput;
    kal_uint32 rlc_instant_dl_throughput;
    kal_uint32 coding_scheme_hist[13];
    kal_uint32 num_blks_for_cs_stats;
    kal_uint32 rlc_average_ul_throughput;
    kal_uint32 rlc_average_dl_throughput;
}rr_em_blk_info_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    rr_em_blk_info_struct rr_em_blk_info;

} em_mac_blk_info_ind_struct;
# 2337 "interface/modem/general/em_public_struct.h"
typedef enum{
     LOG_EM_MODE_PDP_INACTIVE,
     LOG_EM_MODE_PDP_ACTIVE_PENDING,
     LOG_EM_MODE_PDP_INACTIVE_PENDING,
     LOG_EM_MODE_PDP_ACTIVE,
     LOG_EM_MODE_PDP_MODIFY_PENDING,
     LOG_EM_MODE_PDP_CONTEXT_ENUM_TOTAL
} sm_em_mode_pdp_context_enum;

typedef enum
{
    LOG_EM_MODE_PRIMARY_CONTEXT,
    LOG_EM_MODE_SECONDARY_CONTEXT,
    LOG_EM_MODE_UNKNOWN_CONTEXT
} sm_em_mode_pdp_context_type_enum;

typedef enum
{
    LOG_EM_MODE_MS_INITIATED = 0,
    LOG_EM_MODE_NW_INITIATED = 1
} sm_em_mode_initiated_enum;

typedef enum
{
     LOG_EM_MODE_IPV4_ADDR_TYPE = 0X21,
     LOG_EM_MODE_IPV6_ADDR_TYPE = 0X57,
     LOG_EM_MODE_IPV4V6_ADDR_TYPE = 0X8D,
     LOG_EM_MODE_PPP_ADDR_TYPE = 0X01,
     LOG_EM_MODE_OSP_IHOSS_ADDR_TYPE = 0X02,
     LOG_EM_MODE_NULL_PDP_ADDR_TYPE = 0X03

} sm_em_mode_pdp_addr_type_enum;


typedef enum
{
    LOG_EM_MODE_SM_BCM_NULL = 0x00,
    LOG_EM_MODE_SM_BCM_MS_ONLY = 0x01,
    LOG_EM_MODE_SM_BCM_MS_NW = 0x02
} sm_em_mode_selected_bcm_enum ;

typedef struct
{

    kal_uint8 delay_class;
    kal_uint8 reliability_class;
    kal_uint8 peak_throughput;
    kal_uint8 precedence_class;
    kal_uint8 mean_throughput;
    kal_uint8 traffic_class;
    kal_uint8 delivery_order;
    kal_uint8 delivery_of_err_sdu;
    kal_uint8 max_sdu_size;
    kal_uint8 max_bitrate_up_lnk;
    kal_uint8 max_bitrate_down_lnk;
    kal_uint8 residual_bit_err_rate;
    kal_uint8 sdu_err_ratio;
    kal_uint8 transfer_delay;
    kal_uint8 traffic_hndl_priority;
    kal_uint8 guarntd_bit_rate_up_lnk;
    kal_uint8 guarntd_bit_rate_down_lnk;
    kal_uint8 signalling_indication;
    kal_uint8 source_statistics_descriptor;
    kal_uint8 ext_max_bitrate_down_lnk;
    kal_uint8 ext_guarntd_bit_rate_down_lnk;
    kal_uint8 ext_max_bitrate_up_lnk;
    kal_uint8 ext_guarntd_bit_rate_up_lnk;

    kal_uint8 human_readable_delay_class;
    kal_uint8 human_readable_reliability_class;
    kal_uint8 human_readable_peak_throughput;
    kal_uint8 human_readable_precedence_class;
    kal_uint8 human_readable_mean_throughput;
    kal_uint8 human_readable_traffic_class;
    kal_uint8 human_readable_delivery_order;
    kal_uint8 human_readable_delivery_of_err_sdu;
    kal_uint16 human_readable_max_sdu_size;
    kal_uint32 human_readable_max_bitrate_up_lnk;
    kal_uint32 human_readable_max_bitrate_down_lnk;
    kal_uint8 human_readable_residual_bit_err_rate;
    kal_uint8 human_readable_sdu_err_ratio;
    kal_uint16 human_readable_transfer_delay;
    kal_uint8 human_readable_traffic_hndl_priority;
    kal_uint32 human_readable_guarntd_bit_rate_up_lnk;
    kal_uint32 human_readable_guarntd_bit_rate_down_lnk;
    kal_uint8 human_readable_signalling_indication;
    kal_uint8 human_readable_source_statistics_descriptor;
    kal_uint32 human_readable_ext_max_bitrate_down_lnk;
    kal_uint32 human_readable_ext_guarntd_bit_rate_down_lnk;
    kal_uint32 human_readable_ext_max_bitrate_up_lnk;
    kal_uint32 human_readable_ext_guarntd_bit_rate_up_lnk;

} sm_em_qos_struct;


typedef struct
{




   kal_uint8 pdp_index;

   kal_uint8 nsapi;
   kal_uint8 ti_value;
# 2454 "interface/modem/general/em_public_struct.h"
   sm_em_mode_pdp_context_enum pdp_context_status;
   sm_em_mode_pdp_context_type_enum context_type;

   sm_em_mode_initiated_enum initiated_by;

   sm_em_mode_pdp_addr_type_enum pdp_addr_type;

   kal_uint8 ip[MAXIMUM_POSSIBLE_ADDR_LEN];



   kal_uint16 sdu_size;

   kal_uint8 apn[100];







   kal_uint8 sm_cause;






   sm_em_qos_struct em_requested_qos;
   sm_em_qos_struct em_minimum_qos;
   sm_em_qos_struct em_negotiated_qos;

   kal_uint8 pkt_flow_id;
   kal_uint8 radio_priority;
   kal_uint16 req_n201u;


   sm_em_mode_selected_bcm_enum selected_bcm ;


} sm_em_pdp_info_struct;


typedef enum{
      SM_EM_MAX_PDP_SUPPORT = 11
} sm_em_max_pdp_support_enum;


typedef struct{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   em_info_enum em_info;
   kal_uint8 num_of_active_pdp_context;
   sm_em_pdp_info_struct pdp;
} em_sm_info_struct;

typedef em_sm_info_struct em_sm_nsapi5_status_ind_struct;
typedef em_sm_info_struct em_sm_nsapi6_status_ind_struct;
typedef em_sm_info_struct em_sm_nsapi7_status_ind_struct;
typedef em_sm_info_struct em_sm_nsapi8_status_ind_struct;
typedef em_sm_info_struct em_sm_nsapi9_status_ind_struct;
typedef em_sm_info_struct em_sm_nsapi10_status_ind_struct;
typedef em_sm_info_struct em_sm_nsapi11_status_ind_struct;
typedef em_sm_info_struct em_sm_nsapi12_status_ind_struct;
typedef em_sm_info_struct em_sm_nsapi13_status_ind_struct;
typedef em_sm_info_struct em_sm_nsapi14_status_ind_struct;
typedef em_sm_info_struct em_sm_nsapi15_status_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    kal_uint16 ready_timer;
    kal_uint16 rau_timer;
    kal_uint8 ms_state;



    kal_bool is_rau_timer_running;
    kal_uint16 rau_timer_passed_time;
    kal_uint8 attach_req_mobile_identity;
# 2547 "interface/modem/general/em_public_struct.h"
}em_gmm_info_ind_struct;
# 2562 "interface/modem/general/em_public_struct.h"
typedef struct
{
 kal_uint32 num_reasm_failure;
} sndcp_em_info_struct;

typedef struct
{
    kal_uint8 sapi_id;
    kal_uint16 n201_ui;
    kal_uint16 n201_i;
    kal_uint16 kU;
    kal_uint16 kD;
    kal_uint32 num_fcs_error;
} llc_sapi_info_struct ;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    llc_sapi_info_struct sapi_info[2];
    kal_uint8 cipher_algo;
} em_llc_status_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    kal_uint8 is_higher_pri_plmn_srch;
    kal_uint8 hp_timeout_timer;
    kal_uint8 hp_count_down_timer;
    kal_uint8 rplmn[6];
    kal_uint8 eq_plmn[5][6];
    kal_uint8 forbid_plmn[4][6];






} em_nwsel_plmn_info_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
 em_info_enum em_info;
    kal_uint8 rplmn[6];
    kal_uint8 plmn_sel_mode;
 kal_uint8 loss_rat;
} em_nwsel_plmn_loss_info_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
 em_info_enum em_info;
    kal_uint8 result;
    kal_uint8 plmn_sel_mode;
 kal_uint8 search_rat;
} em_nwsel_plmn_search_cnf_info_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;






    kal_uint32 eutran_disable_timer_value;






    kal_uint32 eutran_disable_td_timer_value;





    kal_uint32 eutran_disable_esm_timer_value;
# 2653 "interface/modem/general/em_public_struct.h"
    kal_uint32 eutran_disable_for_rej_in_hplmn_timer_value;




    kal_uint32 recovery_timer_value;




    kal_uint32 high_prio_search_timer_value;


    kal_uint32 retry_abnormal_lai_timer_value;


    kal_uint32 retry_abnormal_rai_timer_value;
} em_nwsel_timer_info_ind_struct;







typedef enum
{
    MEME_EM_EVENT_TYPE1_E1G = 6,
    MEME_EM_EVENT_TYPE1_E1H,
    MEME_EM_EVENT_TYPE1_E1I,
} MemeEmInfoEventType1;

typedef enum
{
    MEME_EM_EVENT_TYPE2_E2A,
    MEME_EM_EVENT_TYPE2_E2B,
    MEME_EM_EVENT_TYPE2_E2C,
    MEME_EM_EVENT_TYPE2_E2D,
    MEME_EM_EVENT_TYPE2_E2E,
    MEME_EM_EVENT_TYPE2_E2F
} MemeEmInfoEventType2;

typedef enum
{
    MEME_EM_EVENT_TYPE3_E3A,
    MEME_EM_EVENT_TYPE3_E3B,
    MEME_EM_EVENT_TYPE3_E3C,
    MEME_EM_EVENT_TYPE3_E3D
} MemeEmInfoEventType3;
typedef struct {
    kal_uint8 MeasId;
    MemeEmInfoEventType1 EventType;
    kal_uint8 fc;
    kal_uint8 MeasQuantity;
    kal_int16 W;
    kal_int16 R;



    kal_int16 Hystersis;
    kal_uint16 TimeToTrigger;
} event_1_struct;

typedef struct {
    kal_uint8 MeasId;
    MemeEmInfoEventType2 EventType;
    kal_uint8 fc;

    kal_uint8 MeasQuantity;
    kal_int16 UsedW;
    kal_int16 nonUsedW;



    kal_int16 nonUsedT;
    kal_int16 Hystersis;
    kal_uint16 TimeToTrigger;
} event_2_struct;

typedef struct {
    kal_uint8 MeasId;
    MemeEmInfoEventType3 EventType;
    kal_uint8 fc;
    kal_int32 ThresholdOwnSystem;
    kal_int32 ThresholdOtherSystem;

    kal_int16 W;

    kal_int16 Hystersis;
    kal_uint16 TimeToTrigger;
} event_3_struct;

typedef struct {
    kal_uint8 MeasId;
    kal_uint8 TrCHId;
    kal_uint8 EventType;
    kal_uint8 Threshold;
    kal_uint16 TimeToTrigger;
    kal_uint16 PendingTimeAfterTrigger;
    kal_uint16 TxInteruptionAfterTrigger;
} event_4_struct;

typedef struct {
    kal_uint8 MeasId;
    kal_uint8 TrCHId;
    kal_uint16 TotalCRC;
    kal_uint16 BadCRC;
    kal_uint16 PendingTimeAfterTrigger;
} event_5_struct;

typedef struct {
    kal_uint8 MeasId;
    kal_uint8 EventType;
    kal_uint8 fc;
    kal_int16 TxThreshold;
    kal_uint16 TimeToTrigger;
} event_6_struct;

typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    kal_uint8 num_event_info;
    event_1_struct em_event_info[6];
} em_meme_event_type_1_parameter_info_ind_struct;

typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    kal_uint8 num_event_info;
    event_2_struct em_event_info[6];
} em_meme_event_type_2_parameter_info_ind_struct;

typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    kal_uint8 num_event_info;
    event_3_struct em_event_info[4];
} em_meme_event_type_3_parameter_info_ind_struct;

typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    kal_uint8 num_event_info;
    event_4_struct em_event_info[4];
} em_meme_info_event_type_4_parameter_struct;

typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    kal_uint8 num_event_info;
    event_5_struct em_event_info[2];
} em_meme_info_event_type_5_parameter_struct;

typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    kal_uint8 num_event_info;
    event_6_struct em_event_info[4];
} em_meme_info_event_type_6_parameter_struct;


typedef struct {
    kal_uint8 TrCHId;
    kal_uint32 TotalCRC;
    kal_uint32 BadCRC;
} trch_bler_struct;

typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    kal_uint8 num_trch;
    trch_bler_struct TrCHBler[8];
} em_meme_periodic_bler_report_ind;
# 2851 "interface/modem/general/em_public_struct.h"
typedef struct uas_cell_plmn_id
{
    kal_uint16 mcc;
    kal_uint16 mnc;
} uas_cell_plmn_id;


typedef struct meme_umts_ura_identity
{
   kal_uint8 numBits;
   kal_uint8 stringData[2];
}
meme_umts_ura_identity;

typedef enum {
    MEME_EM_ACTIVE_SET,
    MEME_EM_INTRA_MONITORED,
    MEME_EM_INTRA_DETECTED,
    MEME_EM_INTER_MONITORED,
    MEME_EM_INVALID = 0xff
} meme_em_umts_cell_type;

typedef struct
{
    kal_uint16 UARFCN;
    kal_uint16 PSC;
    kal_int32 RSCP;
    kal_int32 ECN0;
    meme_em_umts_cell_type cell_type;
    kal_uint8 Band;
    kal_int32 RSSI;
    kal_uint32 Cell_identity;

    kal_uint8 validity;





    kal_uint8 num_plmn_id;
    uas_cell_plmn_id plmn_id_list[6];
    kal_uint16 lac;
    kal_uint8 rac;
    kal_uint8 num_ura_id;
    meme_umts_ura_identity uraIdentity[8];
} meme_umts_cell_struct;

typedef struct
{
    kal_int8 tx_power;
    kal_uint8 num_cells;
    meme_umts_cell_struct umts_cell_list[32];
} meme_em_info_umts_cell_status_struct;


typedef struct
{
    kal_uint8 frequency_band;
    kal_uint16 arfcn;
    kal_uint8 bsic;
    kal_int16 rssi;
    kal_bool verified;
} meme_gsm_cell_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    kal_uint8 num_cells;
    meme_gsm_cell_struct gsm_cell_list[6];
} em_meme_dch_gsm_cell_info_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    kal_bool with_2g_neighbor;
    kal_bool is_gsm_ncell_meas_ongoing;
} em_meme_gsm_ncell_info_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    kal_bool with_4g_neighbor;
    kal_bool is_lte_ncell_meas_ongoing;
} em_meme_lte_ncell_info_ind_struct;




typedef struct
{
   kal_uint16 HSDSCH_Serving_UARFCN;
   kal_uint16 HSDSCH_Serving_PSC;
   kal_uint16 EDCH_Serving_UARFCN;
   kal_uint16 EDCH_Serving_PSC;
} meme_em_info_h_serving_cell_ind_struct;







typedef enum
{
   EM_3G_IN_SERV_ABOVE_S,
   EM_3G_IN_SERV_BELOW_S,
   EM_3G_OUT_OF_SERV,
   EM_3G_NO_SERV,
   EM_3G_NO_CHANGE
} em_3g_service_status_enum;

typedef enum
{
   EM_3G_RRC_IDLE,
   EM_3G_RRC_CELL_FACH,
   EM_3G_RRC_CELL_PCH,
   EM_3G_RRC_URA_PCH,
   EM_3G_RRC_CELL_DCH,
   EM_3G_RRC_INACTIVE,
   EM_3G_RRC_NO_CHANGE,

   EM_3G_RRC_CELL_FACH_HSDPA,
   EM_3G_RRC_CELL_PCH_HSDPA_DATA,
   EM_3G_RRC_CELL_PCH_HSDPA_PAGING,
   EM_3G_RRC_URA_PCH_HSDPA_PAGING,

   EM_3G_RRC_CELL_FACH_HSUPA,
   EM_3G_RRC_CELL_PCH_HSUPA_DATA,
   EM_3G_RRC_CELL_PCH_READYtoHSPA
} em_3g_rrc_state_enum;

typedef struct
{
   em_3g_service_status_enum service_status;
   em_3g_rrc_state_enum umts_rrc_state;
   kal_uint16 uarfcn_DL;

   kal_uint16 psc;
# 3009 "interface/modem/general/em_public_struct.h"
} uas_em_3g_status;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   em_info_enum em_info;

   uas_em_3g_status uas_3g_general_status;
} em_urr_3g_general_status_ind_struct;
# 3059 "interface/modem/general/em_public_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
} em_rrce_3g4_redir_event_ind_struct;

typedef struct
{
   kal_uint16 uarfcn_DL;
   kal_uint16 psc;
   kal_uint32 Sib_Scheduled;
# 3089 "interface/modem/general/em_public_struct.h"
   kal_uint32 received_Sib_Type;
   kal_bool is_finished;






   kal_uint8 deferredSIB11_ongoing;
# 3108 "interface/modem/general/em_public_struct.h"
} sibe_em_sib_status;







typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   sibe_em_sib_status sib_status;
} sibe_em_sib_status_ind_struct;

typedef struct
{
   kal_uint8 cellidx;
   kal_uint16 uarfcn_DL;
   kal_uint16 psc;
   kal_bool is_s_criteria_satisfied;

   kal_int8 qQualmin;
   kal_int8 qRxlevmin;

   kal_int32 srxlev;
   kal_int32 squal;
   kal_int32 rscp;

   kal_int32 ec_no;

   kal_uint16 cycleLength;


   kal_uint8 quality_measure;





   kal_uint8 band;
   kal_int32 rssi;
   kal_uint32 cell_identity;


   kal_uint32 csg_id;

   kal_int8 apbcr_priority;
   kal_uint8 sprio_search1;
   kal_uint8 sprio_search2;
   kal_uint8 threshserv_low;
   kal_uint8 threshserv_low2;




   kal_uint8 multi_plmn_count;
   plmn_struct multi_plmn_id[6];

   kal_bool lac_valid;
   kal_uint16 lac;

   kal_bool rac_valid;
   kal_uint8 rac;

   kal_bool ura_valid;
   kal_uint8 num_ura_id;
   meme_umts_ura_identity uraIdentity[8];

} csce_em_serv_cell_s_status;

typedef struct
{
    kal_uint8 multi_plmn_count;
    plmn_struct multi_plmn_id[6];
} csce_em_info_multiple_plmn_struct;

typedef struct
{
   kal_uint8 cellidx;
   kal_uint16 uarfcn_DL;
   kal_uint16 psc;
   kal_bool is_s_criteria_satisfied;

   kal_int8 qQualmin;
   kal_int8 qRxlevmin;

   kal_int32 srxlev;
   kal_int32 squal;
   kal_int32 rscp;
   kal_int32 ec_no;


   kal_int8 apbcr_priority;
   kal_uint8 threshx_high;
   kal_uint8 threshx_low;
   kal_uint8 threshx_high2;
   kal_uint8 threshx_low2;




   kal_uint32 cell_identity;

   kal_bool multi_plmn_valid;

   kal_uint8 multi_plmn_count;
   plmn_struct multi_plmn_id[6];

   kal_bool lac_valid;
   kal_uint16 lac;

   kal_bool rac_valid;
   kal_uint8 rac;

   kal_bool ura_valid;
   kal_uint8 num_ura_id;
   meme_umts_ura_identity uraIdentity[8];

} csce_em_neigh_cell_s_status;

typedef struct
{
   kal_uint8 cellidx;
   kal_uint16 arfcn;
   kal_uint8 bsic;
   kal_bool is_bsic_verified;
   kal_bool is_s_criteria_satisfied;

   kal_uint8 freq_band;

   kal_int8 qRxlevmin;

   kal_int32 srxlev;
   kal_int32 rssi;


   kal_int8 apbcr_priority;
   kal_uint8 threshx_high;
   kal_uint8 threshx_low;
   kal_uint8 threshx_high2;
   kal_uint8 threshx_low2;

} csce_em_2G_neigh_cell_s_status;

typedef struct
{
   kal_uint16 earfcn;
   kal_uint16 pci;
   kal_int32 rsrp;
   kal_int32 rsrq;
   kal_int32 Treselection;
   kal_int8 apbcr_priority;

   kal_int16 qRxlevmin;
   kal_int8 qQualMinEUTRA;

   kal_uint8 threshx_high;
   kal_uint8 threshx_low;
   kal_uint8 threshx_high2;
   kal_uint8 threshx_low2;
} csce_em_LTE_neigh_cell_s_status;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   csce_em_serv_cell_s_status serv_cell;
} csce_em_serv_cell_s_status_ind_struct;

typedef enum
{
  EM_UMTS_CELL,
  EM_GSM_CELL,
  EM_LTE_CELL
} em_RAT_type_enum;


typedef enum
{
  EM_CLEAN_NEIGH_CELL_INFO,
  EM_UPDATE_RH_NEIGH_CELL_INFO,
  EM_UPDATE_APBCR_NEIGH_CELL_INFO
}em_neigh_cell_operation_enum;


typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   kal_uint8 neigh_cell_count;

   em_neigh_cell_operation_enum operation;

   em_RAT_type_enum RAT_type;
   union
   {
      csce_em_neigh_cell_s_status neigh_cells[16];
      csce_em_2G_neigh_cell_s_status GSM_neigh_cells[16];
   }
   choice;

} csce_em_neigh_cell_s_status_ind_struct;

typedef struct
{
   kal_uint8 cellidx;
   kal_uint8 celltype;

   kal_int32 r_value;

   kal_int32 Treselection;

   kal_uint8 chan_fail_type;

} csce_em_cell_r_status;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   kal_uint8 cell_count;
   csce_em_cell_r_status cell_r_status[9];
} csce_em_cell_r_status_ind_struct;

typedef struct
{
   kal_uint8 cellidx;
   kal_int32 h_value;

   kal_uint8 HCS_PRIO;
} csce_em_cell_h_status;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   kal_uint8 cell_count;
   csce_em_cell_h_status cell_h_status[9];
} csce_em_cell_h_status_ind_struct;


typedef struct
{
   kal_uint8 cellidx;
   kal_uint8 celltype;

   kal_int32 Treselection;

   kal_uint8 chan_fail_type;

} csce_em_cell_apbcr_status;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   kal_uint8 cell_count;
   csce_em_cell_apbcr_status cell_apbcr_status[16];
} csce_em_cell_apbcr_status_ind_struct;



typedef enum
{
  _QPSK=0,
  _16QAM,
  _64QAM
}em_mod_enum;

typedef struct
{
   kal_bool dl_64QAM_on;
} ul1_em_hs_dsch_configuration_struct;

typedef struct
{
   kal_bool ul_16QAM_on;
   kal_uint8 edch_tti;
} ul1_em_edch_configuration_struct;

typedef struct
{
   kal_bool dtx_on;
 kal_bool drx_on;
} ul1_em_cpc_configuration_struct;

typedef struct
{
   kal_bool dc_on;
   kal_uint16 dl_freq;
   kal_uint16 psc;
   kal_bool dl_64QAM_on;
} ul1_em_secondary_hs_dsch_configuration_status_struct;

typedef struct
{
   kal_uint16 dsch_error_all;
   kal_uint16 dsch_error_new_data;
   kal_uint16 dsch_error_after_retx;
   em_mod_enum dsch_curr_mod;
   kal_uint16 dsch_code_num;
   kal_uint16 dsch_cqi_val;
   kal_uint16 dsch_gap_ratio;
} ul1_em_primary_hs_dsch_bler_struct;

typedef struct
{
   kal_uint16 dsch_error_all;
   kal_uint16 dsch_error_new_data;
   kal_uint16 dsch_error_after_retx;
   em_mod_enum dsch_curr_mod;
   kal_uint16 dsch_code_num;
   kal_uint16 dsch_cqi_val;
   kal_uint16 dsch_gap_ratio;
} ul1_em_secondary_hs_dsch_bler_struct;

typedef struct
{
   kal_uint16 edch_ack_cnt;
 kal_uint16 edch_gap_ratio;
} ul1_em_edch_ack_rate_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    ul1_em_hs_dsch_configuration_struct EmHsDschInfo;
}
em_ul1_hs_dsch_config_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    ul1_em_edch_configuration_struct EmEdchInfo;
}
em_ul1_edch_config_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    ul1_em_secondary_hs_dsch_configuration_status_struct EmSecHsDschInfo;
}
em_ul1_sec_hs_dsch_config_ind_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    ul1_em_cpc_configuration_struct EmCpcInfo;
}
em_ul1_cpc_config_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    ul1_em_primary_hs_dsch_bler_struct EmPriHsDschBLER;
}
em_ul1_pri_hs_dsch_bler_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    ul1_em_secondary_hs_dsch_bler_struct EmSecHsDschBLER;
}
em_ul1_sec_hs_dsch_bler_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    ul1_em_edch_ack_rate_struct EmEdchAckRate;
}
em_ul1_edch_ack_rate_ind_struct;



typedef struct
{
   kal_uint16 band;
   kal_uint16 uarfcn;
   kal_uint16 serving_psc;
   kal_int16 rscp_max;
   kal_int16 rscp_0;
   kal_int16 rscp_1;
   kal_int16 rscp_diff;
   kal_int16 ecno_max;
   kal_int16 ecno_0;
   kal_int16 ecno_1;
   kal_int16 rssi_max;
   kal_int16 rssi_0;
   kal_int16 rssi_1;
   kal_int8 tx_pwr;
   kal_int8 dpcch_tx_pwr;
   kal_uint8 main_ant_idx;
} ul1_em_tas_info_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    ul1_em_tas_info_struct EmUl1Tas;
}em_ul1_tas_info_ind_struct;


typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;




   kal_int32 sx;
   kal_bool is_s_intra_search_valid;
   kal_int32 s_intra_search_value;
   kal_bool is_s_inter_search_valid;
   kal_int32 s_inter_search_value;
   kal_bool is_s_search_hcs_valid;
   kal_int32 s_search_hcs_value;
   kal_bool is_s_search_rat_valid;
   kal_int32 s_search_rat_value;
   kal_bool is_s_hcs_rat_valid;
   kal_int32 s_hcs_rat_value;
   kal_bool is_s_limit_search_rat_valid;
   kal_int32 s_limit_search_rat_value;
# 3560 "interface/modem/general/em_public_struct.h"
   kal_uint32 meas_tgt_cells;
# 3569 "interface/modem/general/em_public_struct.h"
   kal_uint8 apbcr_enabled_type;
# 3588 "interface/modem/general/em_public_struct.h"
   kal_uint32 apbMeasTargetCells;
   kal_bool is_gsm_apbcr_enabled;

   kal_uint16 apbcr_uarfcn[2];






} csce_em_meas_rule_status_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    kal_uint8 multi_plmn_count;
    plmn_struct multi_plmn_id[6];
}
em_csce_multiple_plmn_ind_struct;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   em_info_enum em_info;

   kal_uint8 neigh_cell_count;

   em_neigh_cell_operation_enum operation;

   em_RAT_type_enum RAT_type;
   union
   {
      csce_em_neigh_cell_s_status neigh_cells[16];
      csce_em_2G_neigh_cell_s_status GSM_neigh_cells[16];
      csce_em_LTE_neigh_cell_s_status LTE_neigh_cells[16];
   }
   choice;

}
em_csce_neigh_cell_s_status_ind_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
 em_info_enum em_info;





   kal_int32 sx;
   kal_bool is_s_intra_search_valid;
   kal_int32 s_intra_search_value;
   kal_bool is_s_inter_search_valid;
   kal_int32 s_inter_search_value;
   kal_bool is_s_search_hcs_valid;
   kal_int32 s_search_hcs_value;
   kal_bool is_s_search_rat_valid;
   kal_int32 s_search_rat_value;
   kal_bool is_s_hcs_rat_valid;
   kal_int32 s_hcs_rat_value;
   kal_bool is_s_limit_search_rat_valid;
   kal_int32 s_limit_search_rat_value;
# 3667 "interface/modem/general/em_public_struct.h"
   kal_uint32 meas_tgt_cells;
# 3676 "interface/modem/general/em_public_struct.h"
   kal_uint8 apbcr_enabled_type;
# 3695 "interface/modem/general/em_public_struct.h"
   kal_uint32 apbMeasTargetCells;
   kal_bool is_gsm_apbcr_enabled;

   kal_uint16 apbcr_uarfcn[2];





}
em_csce_meas_rule_status_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    kal_uint8 cell_count;
    csce_em_cell_apbcr_status cell_apbcr_status[16];
}
em_csce_apbcr_status_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    kal_uint8 cell_count;
    csce_em_cell_r_status cell_r_status[9];
}
em_csce_cell_r_status_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    kal_uint8 cell_count;
    csce_em_cell_h_status cell_h_status[9];
}
em_csce_cell_h_status_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    csce_em_serv_cell_s_status serv_cell;
} em_csce_serv_cell_s_status_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    sibe_em_sib_status sib_status;
} em_sibe_sib_status_ind_struct;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   em_info_enum em_info;

   kal_uint16 HSDSCH_Serving_UARFCN;
   kal_uint16 HSDSCH_Serving_PSC;
   kal_uint16 EDCH_Serving_UARFCN;
   kal_uint16 EDCH_Serving_PSC;
} em_meme_dch_h_serving_cell_info_ind_struct;

typedef struct {
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   em_info_enum em_info;

   kal_uint8 num_trch;
   trch_bler_struct TrCHBler[8];
}
em_meme_dch_bler_info_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    kal_int8 tx_power;
    kal_uint8 num_cells;
    meme_umts_cell_struct umts_cell_list[32];
} em_meme_dch_umts_cell_info_ind_struct;


typedef struct
{
    kal_uint16 EARFCN;
    kal_uint16 PCI;
    kal_int16 RSRP;
    kal_int16 RSRQ;
} meme_lte_cell_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    kal_uint8 num_cells;
    meme_lte_cell_struct lte_cell_list[32];
} em_meme_dch_lte_cell_info_ind_struct;





typedef enum
{
   EM_TDD_MEASURE,
   EM_FDD_MEASURE,
   EM_GSM_RSSI,
   EM_GSM_BSIC_INIT,
   EM_GSM_BSIC_CNF,
   EM_MULTI_CARRIER,
   EM_E_UTRA
} em_tgps_measure_enum;


typedef struct
{
   kal_bool existed;
   kal_uint8 tgpsi;
   kal_bool is_gap_deactive;

   em_tgps_measure_enum measure_purpose;
} urr_em_tgps_status;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   em_info_enum em_info;

   urr_em_tgps_status tgps_status[6];

} em_rrce_tgps_status_ind_struct;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   em_info_enum em_info;

   kal_uint16 srnc;

} em_slce_srncid_status_ind_struct;

typedef struct
{
   kal_uint8 RAB_ID;
   kal_int8 RB_ID;
   kal_uint32 DL_rate;
   kal_uint32 UL_rate;

} slce_em_ps_data_status;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   em_info_enum em_info;

   kal_uint8 ps_number;
   slce_em_ps_data_status ps_data_status[8];

} em_slce_ps_data_rate_status_ind_struct;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   em_info_enum em_info;


   kal_uint8 dl_mac_hspa_type;
 kal_uint8 ul_mac_hspa_type;


 kal_uint8 fdpch[6];

} em_rrce_dch_state_configuration_status_ind_struct ;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   em_info_enum em_info;


   kal_bool eDRXcfgStatus;

} em_rrce_fach_state_configuration_status_ind_struct ;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   em_info_enum em_info;

   kal_bool cs_over_hspa_status;

} em_rrce_cs_over_hspa_status_ind_struct;

typedef enum
{
   AMR_4_75 = 0,
   AMR_5_15,
   AMR_5_90,
   AMR_6_70,
   AMR_7_40,
   AMR_7_95,
   AMR_10_20,
   AMR_12_20,
   AMR_SID,
   GSM_EFR_SID,
   TDMA_EFR_SID,
   PDC_EFR_SID,
   RESERVE_1,
   RESERVE_2,
   RESERVE_3,
   AMR_NODATA,
   AMRWB_6_60,
   AMRWB_8_85,
   AMRWB_12_65,
   AMRWB_14_25,
   AMRWB_15_85,
   AMRWB_18_25,
   AMRWB_19_85,
   AMRWB_23_05,
   AMRWB_23_85,
   AMRWB_SID
} em_csr_SpeechCodecType;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    em_csr_SpeechCodecType ULAMRType;
    em_csr_SpeechCodecType DLAMRType;
} em_csr_status_ind_struct;



typedef enum
{
   TX_ANTENNA_0,
   TX_ANTENNA_1,
   TX_ANTENNA_NUM,
   TX_ANTENNA_INVALID = 0xFF
} force_tx_ant_idx_enum;

typedef enum _force_tx_ant_cmd_type_e
{
   SET_FORCE_TX_ANT = 0,
   READ_FORCE_TX_ANT = 1
} force_tx_ant_cmd_type_e;

typedef struct _l4cul1_force_tx_ant_req_struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   force_tx_ant_cmd_type_e cmd_type;
   kal_bool enable_force_tx_ant;
   force_tx_ant_idx_enum force_tx_ant_idx;

} l4cl1_force_tx_ant_req_struct,
  l4cul1_force_tx_ant_req_struct,
  l4ctl1_force_tx_ant_req_struct,
  l4cel1_force_tx_ant_req_struct;

typedef struct _l4cul1_force_tx_ant_cnf_struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   force_tx_ant_cmd_type_e cmd_type;
   kal_bool result;
   kal_bool enable_force_tx_ant;
   force_tx_ant_idx_enum force_tx_ant_idx;

} l4cl1_force_tx_ant_cnf_struct,
  l4cul1_force_tx_ant_cnf_struct,
  l4ctl1_force_tx_ant_cnf_struct,
  l4cel1_force_tx_ant_cnf_struct;
# 3986 "interface/modem/general/em_public_struct.h"
typedef enum{
    VT_EM_DATA_TYPE_INVALID = -1,
    VT_EM_DATA_TYPE_AUDIO = 0,
    VT_EM_DATA_TYPE_VIDEO
}vt_em_channel_data_type;

typedef struct{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    vt_em_config_struct em_config;
}l4c_vt_em_set_config_req_struct;

typedef struct{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    vt_em_config_struct em_config;
}l4c_vt_em_get_config_cnf_struct;




typedef enum{
    VT_EM_CALL_STATE_INIT = -1,
    VT_EM_CALL_STATE_SYNCHRONIZED = 0,
    VT_EM_CALL_STATE_CONNECTED,
    VT_EM_CALL_STATE_CONNECTEDCHANNELS,
    VT_EM_CALL_STATE_IDLE,
    VT_EM_CALL_STATE_RESETTING,
    VT_EM_CALL_STATE_LOSTSYNC
}vt_em_call_state_choice;

typedef enum
{
    VT_EM_CODEC_TYPE_Unknown = -1,
    VT_EM_CODEC_TYPE_Amr,
    VT_EM_CODEC_TYPE_Mpeg4,
    VT_EM_CODEC_TYPE_H264,
    VT_EM_CODEC_TYPE_H239Control,
    VT_EM_CODEC_TYPE_H239ExtendedVideo,
    VT_EM_CODEC_TYPE_G7221,
    VT_EM_CODEC_TYPE_G726,
    VT_EM_CODEC_TYPE_H324AnnexI,
    VT_EM_CODEC_TYPE_SessionReset,
    VT_EM_CODEC_TYPE_G7222,
    VT_EM_CODEC_TYPE_G7231,
    VT_EM_CODEC_TYPE_H263,
    VT_EM_CODEC_TYPE_G711,
    VT_EM_CODEC_TYPE_G722,
    VT_EM_CODEC_TYPE_G729,
    VT_EM_CODEC_TYPE_H249NavigationKey,
    VT_EM_CODEC_TYPE_H249SoftKeys,
    VT_EM_CODEC_TYPE_H249PointingDevice,
    VT_EM_CODEC_TYPE_H249ModalInterface,
    VT_EM_CODEC_TYPE_Last
} vt_em_codec_type;


typedef enum{
    VT_EM_MASTER_SLAVE_STATUS_INVALID = -1,
    VT_EM_SLAVE = 0,
    VT_EM_MASTER
}vt_em_master_slave_status_choice;

typedef enum{
    VT_EM_RETRANSMISSION_PROTOCOL_INVALID = -1,
    VT_EM_RETRANSMISSION_PROTOCOL_SRP = 0,
    VT_EM_RETRANSMISSION_PROTOCOL_NSRP,
    VT_EM_RETRANSMISSION_PROTOCOL_WNSRP
}vt_em_retransmission_protocol_choice;

typedef enum{
    VT_EM_RESOLUTION_INVALID = -1,
    VT_EM_RESOLUTION_SQCIF = 0,
    VT_EM_RESOLUTION_QCIF,
    VT_EM_RESOLUTION_CIF
}vt_em_video_resolution_choice;

typedef enum{
    VT_EM_H223_AL_TYPE_UNKNOWN = -1,
    VT_EM_H223_AL_TYPE_1 = 0,
    VT_EM_H223_AL_TYPE_2,
    VT_EM_H223_AL_TYPE_3
}vt_em_al_type;

typedef struct{
    kal_uint16 lcn;
    kal_uint8 is_chan_duplex;
    vt_em_codec_type codec_type;
    vt_em_video_resolution_choice resolution_choice;
    vt_em_al_type forward_al;
    kal_int32 max_sdu_size;
}vt_em_video_channel_info_struct;

typedef struct{
    kal_uint16 lcn;
    kal_uint8 is_chan_duplex;
    vt_em_codec_type codec_type;
    vt_em_al_type forward_al;
    kal_int32 max_sdu_size;
}vt_em_audio_channel_info_struct;

typedef enum{
    VT_EM_RP_UNKNOWN = -1,
    VT_EM_RP_COMMAND = 0,
    VT_EM_RP_RESPONSE
}vt_em_xSRP_data_type;

typedef struct{
    kal_uint8 sq;
    vt_em_xSRP_data_type type;
}vt_em_outgoing_xSRP;

typedef struct{
    kal_uint8 sq;
    vt_em_xSRP_data_type type;
}vt_em_incoming_xSRP;

typedef struct{
        kal_uint32 vt_csr_DL_Q_frame_num;
        kal_uint32 vt_csr_UL_Q_frame_num;
        kal_uint32 vt_MED_DL_Q_frame_num;
        kal_uint32 vt_MED_DL_Q_state;

        kal_uint32 vt_DL_video_frame_num;
        kal_uint32 vt_DL_video_frame_size;
        kal_uint32 vt_DL_video_I_frame_num;
        kal_uint32 vt_DL_video_P_frame_num;

        kal_uint32 vt_DL_audio_frame_num;
        kal_uint32 vt_DL_audio_frame_size;

        kal_uint32 vt_UL_video_frame_num;
        kal_uint32 vt_UL_video_frame_size;
        kal_uint32 vt_UL_video_drop_frame_num;
        kal_uint32 vt_UL_video_drop_frame_size;

        kal_uint32 vt_UL_audio_frame_num;
        kal_uint32 vt_UL_audio_frame_size;
        kal_uint32 vt_UL_audio_drop_frame_num;
        kal_uint32 vt_UL_audio_drop_frame_size;

        kal_uint32 vt_UL_csr_size;
        kal_uint32 vt_UL_csr_num;
        kal_uint32 vt_DL_csr_size;
        kal_uint32 vt_DL_csr_num;

        kal_uint32 vt_downlink_mc_tbl[16];
        kal_uint32 vt_uplink_mc_tbl[16];

        kal_uint32 vt_ra_add_failures;
        kal_uint32 vt_incoming_audio_crc_errors;
        kal_uint32 vt_incoming_video_crc_errors;
        kal_uint32 vt_incoming_control_crc_errors;
        kal_uint32 vt_incoming_control_total_packets;
}vt_em_statistic_info_struct;

typedef struct{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
}l4cvt_em_display_ind_struct;




typedef struct
{
    kal_uint16 max_usage_kbytes;
    kal_uint16 avg_usage_kbytes;
} adm_pool_info_struct;

typedef struct
{

    adm_pool_info_struct dl_adm_pool_info;
    adm_pool_info_struct ul_adm_pool_info[4];


} ul2_em_adm_pool_status_ind_struct;

typedef struct
{
 kal_uint8 num_trch;
 trch_bler_struct TrCHBler[8];
}ul2_em_3g_bler_ind_struct;


typedef enum
{
    Invalid,
    No_Modify,
    Add_Queue,
    Delete_Queue,
    Reconfigure_T1,
    Reconfigure_WindowSize,
    Reconfigure_T1_WindowSize,
    Reconfigure_C_T,
} reconfigure_operation_E;

typedef struct
{
    reconfigure_operation_E reconfig_info[8];
} ul2_em_hsdsch_reconfig_status_ind_struct;
typedef struct
{
    kal_uint16 rx_mac_data_rate;
    kal_uint16 rx_pdcp_data_rate;
    kal_uint16 tx_mac_data_rate;
    kal_uint16 tx_pdcp_data_rate;
} ul2_em_ps_data_rate_status_ind_struct;

typedef enum
{
    URLC_ESTABLISH,
    URLC_REESTABLISH,
    URLC_RECONFIG,
    URLC_RELEASE,
    URLC_SUSPEND,
    URLC_RESUME,
    URLC_RESET,
    URLC_DISCARD
} RLC_ACTION_INFO;

typedef struct
{
    kal_bool is_srb;
    kal_uint8 cn_domain;
} ul2_em_rb_info_struct;

typedef struct
{
    kal_uint8 rlc_mode;
    kal_uint8 direction;
} ul2_em_rlc_info_struct;

typedef struct
{
    kal_uint16 pdu_Size;
    kal_uint16 tx_window_size;
    kal_uint16 rx_window_size;
    kal_uint8 discard_mode;
    kal_uint16 discard_value;
} ul2_em_rlc_parameter_struct;

typedef struct
{
    kal_int8 rb_id;
    RLC_ACTION_INFO rlc_action;
    ul2_em_rb_info_struct rb_info;
    ul2_em_rlc_info_struct rlc_info;
    ul2_em_rlc_parameter_struct rlc_parameter;
    kal_bool flush_data_indicator;
    kal_uint8 reset_cause;
} ul2_em_urlc_event_status_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    ul2_em_adm_pool_status_ind_struct ul2_em_adm_pool_status_ind_struct_info;
} em_ul2_adm_pool_status_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    ul2_em_ps_data_rate_status_ind_struct ul2_em_ps_data_rate_status_ind_struct_info;
} em_ul2_ps_data_rate_status_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    ul2_em_hsdsch_reconfig_status_ind_struct ul2_em_hsdsch_reconfig_status_ind_struct_info;
} em_ul2_hsdsch_reconfig_status_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    ul2_em_urlc_event_status_ind_struct ul2_em_urlc_event_status_ind_struct_info;
} em_ul2_urlc_event_status_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    ul2_em_3g_bler_ind_struct ul2_em_periodic_bler_report_ind_info;
} em_ul2_3g_bler_ind_struct;


typedef struct
{
   kal_uint32 time;
   kal_uint8 SNPL;
   kal_uint8 UPH;
   kal_uint8 TEBS;
   kal_uint8 HLBS;
   kal_uint8 HLID;
   kal_bool isERUCCH;
}ul2_em_hsupa_si_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    ul2_em_hsupa_si_ind_struct ul2_em_hsupa_si_ind_info;
}em_ul2_hsupa_si_ind_struct;
# 4306 "interface/modem/general/em_public_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    kal_uint32 total_rx_byte_per_second;
    kal_uint32 total_tx_byte_per_second;
}em_upcm_ps_tput_info_ind_struct;
# 4323 "interface/modem/general/em_public_struct.h"
typedef struct
{
    kal_uint16 earfcn;
    kal_uint16 pci;
    kal_uint32 csg_id;
}em_errc_csg_info_struct;



typedef struct
{
    kal_uint8 num_cells;
    em_errc_csg_info_struct detected_csg_cell[10];
}em_errc_autos_info_struct;

typedef enum
{
    EM_ERRC_CARRS_TRIG_TYPE_NAS,
    EM_ERRC_CARRS_TRIG_TYPE_AS,
    EM_ERRC_CARRS_TRIG_TYPE_IRAT
}em_errc_carrs_trigger_type_enum;

typedef enum
{
    EM_ERRC_CARRS_TYPE_PLMN_LIST,
    EM_ERRC_CARRS_TYPE_CSG_LIST,
    EM_ERRC_CARRS_TYPE_FINGER_PRINT,
    EM_ERRC_CARRS_TYPE_MCC_LEARNING,
    EM_ERRC_CARRS_TYPE_BACKGROUND_SEARCH,
    EM_ERRC_CARRS_TYPE_AUTO_SEARCH,
    EM_ERRC_CARRS_TYPE_OOS
}em_errc_carrs_type_enum;

typedef struct
{
    em_errc_carrs_trigger_type_enum trigger_type;
    em_errc_carrs_type_enum carrs_type;
}em_errc_carrs_event_struct;

typedef enum
{
    EM_ERRC_SIB_EVENT_3H_TIMEOUT,
    EM_ERRC_SIB_EVENT_SIB_MODIFY,
    EM_ERRC_SIB_EVENT_PWS
}em_errc_sib_event_enum;

typedef enum
{
    EM_ERRC_MOB_TYPE_CR,
    EM_ERRC_MOB_TYPE_REDT,
    EM_ERRC_MOB_TYPE_CCO,
    EM_ERRC_MOB_TYPE_HO,
    EM_ERRC_MOB_TYPE_REEST
}em_errc_mob_type_enum;

typedef enum
{
    EM_ERRC_MOB_DIR_INTRA_LTE,
    EM_ERRC_MOB_DIR_TO_LTE,
    EM_ERRC_MOB_DIR_FROM_LTE
}em_errc_mob_dir_enum;

typedef struct
{
    em_errc_mob_type_enum mob_type;
    em_errc_mob_dir_enum mob_dir;
}em_errc_mob_event_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

}em_errc_mob_meas_info_ind_struct;

typedef enum
{
    EM_ERRC_RCM_SIM_STS_REMOVED,
    EM_ERRC_RCM_SIM_STS_INVALID_BY_NAS,
    EM_ERRC_RCM_SIM_STS_VALID
}em_errc_rcm_sim_sts_enum;

typedef enum
{
    EM_ERRC_SYS_SIB_RX_STS_IDLE,
    EM_ERRC_SYS_SIB_RX_STS_WAIT,
    EM_ERRC_SYS_SIB_RX_STS_CMPL,
    EM_ERRC_SYS_SIB_RX_STS_STORED
}em_errc_sys_sib_rx_sts_enum;

typedef struct
{
    kal_bool is_rxing;
    kal_uint32 earfcn;
    kal_uint16 pci;
    em_errc_sys_sib_rx_sts_enum mib_rx_sts;
    em_errc_sys_sib_rx_sts_enum sib1_rx_sts;
    em_errc_sys_sib_rx_sts_enum sib2_rx_sts;
    em_errc_sys_sib_rx_sts_enum sib3_rx_sts;
    em_errc_sys_sib_rx_sts_enum sib4_rx_sts;
    em_errc_sys_sib_rx_sts_enum sib5_rx_sts;
    em_errc_sys_sib_rx_sts_enum sib6_rx_sts;
    em_errc_sys_sib_rx_sts_enum sib7_rx_sts;
    em_errc_sys_sib_rx_sts_enum sib9_rx_sts;
    em_errc_sys_sib_rx_sts_enum sib10_rx_sts;
    em_errc_sys_sib_rx_sts_enum sib11_rx_sts;
    em_errc_sys_sib_rx_sts_enum sib12_rx_sts;
}em_errc_sib_rx_info_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    em_errc_autos_info_struct autos_info;
}em_errc_autos_csg_info_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    em_errc_carrs_event_struct carrs_evt;
}em_errc_carrs_event_ind_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    em_errc_sib_event_enum sib_evt;
}em_errc_sib_event_ind_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    em_errc_mob_event_struct mob_evt;
}em_errc_mob_event_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    kal_bool key_chg_ind;

    kal_uint8 ncc;
    kal_uint8 int_algo;
    kal_uint8 enc_algo;





}em_errc_sec_param_ind_struct;

typedef enum
{
    ERRC_REEST_CAUSE_LTE_HO_FAIL,
    ERRC_REEST_CAUSE_LTE_MFROM_FAIL,
    ERRC_REEST_RLC_ACK_TIMEOUT,
    ERRC_REEST_SIB_UPDT_FAIL,
    ERRC_REEST_CAUSE_L1_RLF,
    ERRC_REEST_CAUSE_MAC_RLF,
    ERRC_REEST_CAUSE_RLC_UL_MAX_RLF,
    ERRC_REEST_CAUSE_RLC_DL_MAX_RLF,
    ERRC_REEST_CAUSE_RLC_UL_DL_MAX_RLF,
    ERRC_REEST_CAUSE_INTECHK_FAIL,
    ERRC_REEST_CAUSE_RECONF_FAIL,
    ERRC_REEST_CAUSE_PDCP_RLF,
    ERRC_REEST_CAUSE_DISABLE_B39,
    ERRC_REEST_CAUSE_GENERAL
}em_errc_reest_info_cause_enum;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    em_errc_reest_info_cause_enum cause;
}em_errc_reest_info_ind_struct;

typedef enum
{
    ERRC_NORMAL_RECONF,
    ERRC_INTRA_CEL_HO,
    ERRC_INTER_CEL_HO,
    ERRC_INTER_RAT_HO
}em_errc_reconf_info_type_enum;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    em_errc_reconf_info_type_enum reconf_type;
    kal_bool is_cell_info_valid;
    kal_uint32 earfcn;
    kal_uint16 pci;
    kal_uint16 crnti;
    kal_uint32 t311;
    kal_uint32 t301;
    kal_uint32 t304;
}em_errc_reconf_info_ind_struct;
typedef enum
{

    EM_ERRC_PROC_EST,
    EM_ERRC_PROC_RECONF_RR_MEAS_CONFIG,
    EM_ERRC_PROC_RECONF_INTRALTEMOBILITY,
    EM_ERRC_PROC_REEST,
    EM_ERRC_PROC_INITIAL_SEC,
    EM_ERRC_UE_CAPABILITY,
    EM_ERRC_COUNTER_CHECK,
    EM_ERRC_UE_INFORMATION,
    EM_ERRC_PROC_IRAT_HO_FROM_LTE_TO_UMTS,
    EM_ERRC_PROC_IRAT_HO_FROM_LTE_TO_GSM,
    EM_ERRC_PROC_IRAT_CCO_FROM_LTE,
    EM_ERRC_PROC_IRAT_CR_FROM_LTE_TO_UMTS,
    EM_ERRC_PROC_IRAT_CR_FROM_LTE_TO_GSM,
    EM_ERRC_PROC_IRAT_REDIR_FROM_LTE_TO_UMTS,
    EM_ERRC_PROC_IRAT_REDIR_FROM_LTE_TO_GSM,
    EM_ERRC_PROC_IRAT_HO_TO_LTE,
    EM_ERRC_PROC_IRAT_CCO_TO_LTE,
    EM_ERRC_PROC_IRAT_CR_TO_LTE,
    EM_ERRC_PROC_IRAT_REDIR_TO_LTE,
    EM_ERRC_PROC_INTRA_REDIR
}em_errc_delay_proc_enum;

typedef struct
{
  kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    em_errc_delay_proc_enum delay_proc_id;
    kal_uint32 delay_time;
}em_errc_over_proc_delay_warning_ind_struct;

typedef enum
{
   EM_ERRC_SUCCESS_RATE_KPI_INTRA_LTE_CR,
   EM_ERRC_SUCCESS_RATE_KPI_IRAT_4G3_CR,
   EM_ERRC_SUCCESS_RATE_KPI_IRAT_4G2_CR,
   EM_ERRC_SUCCESS_RATE_KPI_IRAT_3G4_CR,
   EM_ERRC_SUCCESS_RATE_KPI_IRAT_2G4_CR,

   EM_ERRC_SUCCESS_RATE_KPI_INTRA_CELL_HO,
   EM_ERRC_SUCCESS_RATE_KPI_INTER_CELL_HO,
   EM_ERRC_SUCCESS_RATE_KPI_IRAT_4G3_HO,
   EM_ERRC_SUCCESS_RATE_KPI_IRAT_4G2_HO,
   EM_ERRC_SUCCESS_RATE_KPI_IRAT_3G4_HO,

}em_errc_success_rate_kpi_proc_enum;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    em_errc_success_rate_kpi_proc_enum proc_id;
    kal_uint32 attempt;
    kal_uint32 success;
}em_errc_success_rate_kpi_ind_struct;

typedef enum
{
    EM_ERRC_ON_DUARTION_PS1,
    EM_ERRC_ON_DUARTION_PS2,
    EM_ERRC_ON_DUARTION_PS3,
    EM_ERRC_ON_DUARTION_PS4,
    EM_ERRC_ON_DUARTION_PS5,
    EM_ERRC_ON_DUARTION_PS6,
    EM_ERRC_ON_DUARTION_PS8,
    EM_ERRC_ON_DUARTION_PS10,
    EM_ERRC_ON_DUARTION_PS20,
    EM_ERRC_ON_DUARTION_PS30,
    EM_ERRC_ON_DUARTION_PS40,
    EM_ERRC_ON_DUARTION_PS50,
    EM_ERRC_ON_DUARTION_PS60,
    EM_ERRC_ON_DUARTION_PS80,
    EM_ERRC_ON_DUARTION_PS100,
    EM_ERRC_ON_DUARTION_PS200,

    EM_ERRC_ON_DUARTION_INVALID = 0xFFFFFFFF,
}em_errc_on_duration_timer_enum;

typedef enum
{
    EM_ERRC_DRX_INACTIVITY_PS1,
    EM_ERRC_DRX_INACTIVITY_PS2,
    EM_ERRC_DRX_INACTIVITY_PS3,
    EM_ERRC_DRX_INACTIVITY_PS4,
    EM_ERRC_DRX_INACTIVITY_PS5,
    EM_ERRC_DRX_INACTIVITY_PS6,
    EM_ERRC_DRX_INACTIVITY_PS8,
    EM_ERRC_DRX_INACTIVITY_PS10,
    EM_ERRC_DRX_INACTIVITY_PS20,
    EM_ERRC_DRX_INACTIVITY_PS30,
    EM_ERRC_DRX_INACTIVITY_PS40,
    EM_ERRC_DRX_INACTIVITY_PS50,
    EM_ERRC_DRX_INACTIVITY_PS60,
    EM_ERRC_DRX_INACTIVITY_PS80,
    EM_ERRC_DRX_INACTIVITY_PS100,
    EM_ERRC_DRX_INACTIVITY_PS200,
    EM_ERRC_DRX_INACTIVITY_PS300,
    EM_ERRC_DRX_INACTIVITY_PS500,
    EM_ERRC_DRX_INACTIVITY_PS750,
    EM_ERRC_DRX_INACTIVITY_PS1280,
    EM_ERRC_DRX_INACTIVITY_PS1920,
    EM_ERRC_DRX_INACTIVITY_PS2560,

    EM_ERRC_DRX_INACTIVITY_INVALID = 0xFFFFFFFF,
}em_errc_drx_inactivity_timer_enum;

typedef enum
{
    EM_ERRC_DRX_RETX_TIMER_PS1,
    EM_ERRC_DRX_RETX_TIMER_PS2,
    EM_ERRC_DRX_RETX_TIMER_PS4,
    EM_ERRC_DRX_RETX_TIMER_PS6,
    EM_ERRC_DRX_RETX_TIMER_PS8,
    EM_ERRC_DRX_RETX_TIMER_PS16,
    EM_ERRC_DRX_RETX_TIMER_PS24,
    EM_ERRC_DRX_RETX_TIMER_PS33,

    EM_ERRC_DRX_RETX_TIMER_INVALID = 0xFFFFFFFF,
}em_errc_drx_retx_timer_enum;

typedef enum
{
    EM_ERRC_LONG_DRX_CYCLE_10,
    EM_ERRC_LONG_DRX_CYCLE_20,
    EM_ERRC_LONG_DRX_CYCLE_32,
    EM_ERRC_LONG_DRX_CYCLE_40,
    EM_ERRC_LONG_DRX_CYCLE_64,
    EM_ERRC_LONG_DRX_CYCLE_80,
    EM_ERRC_LONG_DRX_CYCLE_128,
    EM_ERRC_LONG_DRX_CYCLE_160,
    EM_ERRC_LONG_DRX_CYCLE_256,
    EM_ERRC_LONG_DRX_CYCLE_320,
    EM_ERRC_LONG_DRX_CYCLE_512,
    EM_ERRC_LONG_DRX_CYCLE_640,
    EM_ERRC_LONG_DRX_CYCLE_1024,
    EM_ERRC_LONG_DRX_CYCLE_1280,
    EM_ERRC_LONG_DRX_CYCLE_2048,
    EM_ERRC_LONG_DRX_CYCLE_2560,

    EM_ERRC_LONG_DRX_CYCLE_INVALID = 0xFFFFFFFF,
}em_errc_long_drx_cycle_enum;

typedef enum
{
    EM_ERRC_SHORT_DRX_CYCLE_2,
    EM_ERRC_SHORT_DRX_CYCLE_5,
    EM_ERRC_SHORT_DRX_CYCLE_8,
    EM_ERRC_SHORT_DRX_CYCLE_10,
    EM_ERRC_SHORT_DRX_CYCLE_16,
    EM_ERRC_SHORT_DRX_CYCLE_20,
    EM_ERRC_SHORT_DRX_CYCLE_32,
    EM_ERRC_SHORT_DRX_CYCLE_40,
    EM_ERRC_SHORT_DRX_CYCLE_64,
    EM_ERRC_SHORT_DRX_CYCLE_80,
    EM_ERRC_SHORT_DRX_CYCLE_128,
    EM_ERRC_SHORT_DRX_CYCLE_160,
    EM_ERRC_SHORT_DRX_CYCLE_256,
    EM_ERRC_SHORT_DRX_CYCLE_320,
    EM_ERRC_SHORT_DRX_CYCLE_512,
    EM_ERRC_SHORT_DRX_CYCLE_640,

    EM_ERRC_SHORT_DRX_CYCLE_INVALID = 0xFFFFFFFF,
}em_errc_short_drx_cycle_enum;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    em_errc_on_duration_timer_enum on_duration_timer_index;
    em_errc_drx_inactivity_timer_enum drx_inactivity_timer_index;
    em_errc_drx_retx_timer_enum drx_retx_timer_index;
    em_errc_long_drx_cycle_enum long_drx_cycle_index;
    em_errc_short_drx_cycle_enum short_drx_cycle_index;
    kal_uint8 drx_short_cycle_timer;
    kal_uint16 drx_start_offset;
}em_errc_config_info_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

   em_errc_rcm_sim_sts_enum sim_sts;
}em_errc_rcm_sim_sts_info_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

   em_errc_sib_rx_info_struct sib_rx_info[3];
}em_errc_sys_sib_rx_sts_info_ind_struct;

typedef enum
{
    ERRC_INITIAL,
    ERRC_STANDBY,
    ERRC_IDLE,
    ERRC_CONNECTED,
    ERRC_FLIGHT,
    ERRC_IDLE_IRSUS,
    ERRC_CONN_IRSUS
}em_errc_state_enum;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    em_errc_state_enum errc_sts;
}em_errc_state_ind_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    kal_uint8 num_supported_band;
    kal_uint8 supported_band[64];
}em_lte_supported_band_info_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    kal_bool with_3g_neighbor;
    kal_bool with_2g_neighbor;
}em_errc_serv_ir_neighbor_info_ind_struct;

typedef enum
{
    EM_ERRC_EVENT_REDIR_FROM_LTE_TO_GSM_R8,
    EM_ERRC_EVENT_REDIR_FROM_LTE_TO_UMTS_R8,
    EM_ERRC_EVENT_REDIR_FROM_LTE_TO_GSM_R9_LATER,
    EM_ERRC_EVENT_REDIR_FROM_LTE_TO_UMTS_R9_LATER
}em_errc_ir_redir_event_enum;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    em_errc_ir_redir_event_enum redir_event;
    kal_bool is_csfb_ongoing;
}em_errc_ir_redir_event_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;

    kal_bool utran_meas_cfg;
    kal_bool geran_meas_cfg;
}em_errc_irat_meas_cfg_ind_struct;






typedef enum
{
    EM_EMM_EU1_UPDATE = 0,
    EM_EMM_EU2_NOT_UPDATE,
    EM_EMM_EU3_ROAMING_NOT_ALLOWED
} em_emm_update_status_enum;

typedef enum
{
    EM_EMM_SIM_REMOVE,
    EM_EMM_SIM_INVALID,
    EM_EMM_SIM_VALID,
} em_emm_sim_status_enum;

typedef enum
{
    EM_EMM_TIN_DELETED = 0,
    EM_EMM_TIN_PTMSI,
    EM_EMM_TIN_RAT_RELATED_TMSI,
    EM_EMM_TIN_GUTI
} em_emm_tin_enum;

typedef struct
{
    plmn_struct plmn_id;
    kal_uint8 mme_gid[2];
    kal_uint8 mme_code;
    kal_uint8 mtmsi[4];
} em_emm_guti_struct;

typedef enum
{
    EM_ECM_IDLE=0,
    EM_ECM_CONNECTED
}em_emm_ecm_status_enum;

typedef enum
{
    EM_NORMAL_CELL = 0,
    EM_CSG_CELL,
    EM_HYBRID_CELL
} em_csg_access_mode_enum;

typedef enum
{
    EM_DUPLEX_TYPE_FDD = 0,
    EM_DUPLEX_TYPE_TDD,
    EM_DUPLEX_TYPE_UNKNOWN
} em_lte_duplex_type_enum;

typedef enum
{
    EM_TYPE_NONE = 0,
    EM_TYPE_SERVICE_REQ,
    EM_TYPE_EXTENDED_SERVICE_REQ,
    EM_TYPE_MAX
} em_sr_type_enum;

typedef enum
{
    EM_CAUSE_MO_SIGNAL = 0,
    EM_CAUSE_MO_DATA,
    EM_CAUSE_MT,
    EM_CAUSE_EMERGENCY,
    EM_CAUSE_INVALID
} em_sr_cause_enum;

typedef enum
{
    EM_MO_CSFB_TYPE_INVALID = 0,
    EM_MO_CSFB_TYPE_NORMAL_CALL,
    EM_MO_CSFB_TYPE_EMERGENCY_CALL,
    EM_MO_CSFB_TYPE_SS,
    EM_MO_CSFB_TYPE_LCS,
    EM_MO_CSFB_TYPE_RESERVED
} em_mo_csfb_cause_enum;

typedef enum
{
    EM_MT_CSFB_PAGING_ID_INVALID = 0,
    EM_MT_CSFB_PAGING_ID_IMSI,
    EM_MT_CSFB_PAGING_ID_TMSI
} em_mt_csfb_paging_id_enum;

typedef enum
{
    EM_EMM_CAUSE_CAUSE_NONE = 0x00,
    EM_EMM_CAUSE_IMSI_UNKNOWN_IN_HSS = 0x02,
    EM_EMM_CAUSE_ILLEGAL_UE = 0x03,
    EM_EMM_CAUSE_IMEI_NOT_ACCEPTED = 0x05,
    EM_EMM_CAUSE_ILLEGAL_ME = 0x06,
    EM_EMM_CAUSE_EPS_NOT_ALLOWED = 0x07,
    EM_EMM_CAUSE_EPS_NON_EPS_NOT_ALLOWED = 0x08,
    EM_EMM_CAUSE_UE_ID_NOT_DERIVED_BY_NW = 0x09,
    EM_EMM_CAUSE_IMPLICIT_DETACH = 0x0a,
    EM_EMM_CAUSE_PLMN_NOT_ALLOWED = 0x0b,
    EM_EMM_CAUSE_TA_NOT_ALLOWED = 0x0c,
    EM_EMM_CAUSE_ROAMING_NOT_ALLOWED_IN_TA = 0x0d,
    EM_EMM_CAUSE_EPS_NOT_ALLOWED_IN_PLMN = 0x0e,
    EM_EMM_CAUSE_NO_SUITABLE_CELL_IN_TA = 0x0f,
    EM_EMM_CAUSE_MSC_NOT_REACHABLE = 0x10,
    EM_EMM_CAUSE_NW_FAILURE = 0x11,
    EM_EMM_CAUSE_CS_NOT_AVAILABLE = 0x12,
    EM_EMM_CAUSE_ESM_FAILURE = 0x13,
    EM_EMM_CAUSE_MAC_FAILURE = 0x14,
    EM_EMM_CAUSE_SYNCH_FAILURE = 0x15,
    EM_EMM_CAUSE_CONGESTION = 0x16,
    EM_EMM_CAUSE_UE_SEC_CAPA_MISMATCH = 0x17,
    EM_EMM_CAUSE_SEC_MODE_REJ_UNSPECIFIED = 0x18,
    EM_EMM_CAUSE_NOT_AUTH_FOR_CSG = 0x19,
    EM_EMM_CAUSE_NON_EPS_AUTH_UNACCEPTABLE = 0x1a,
    EM_EMM_CAUSE_CS_TEMP_NOT_AVAILABLE = 0x27,
    EM_EMM_CAUSE_NO_EPS_CTXT_ACT = 0x28,
    EM_EMM_CAUSE_SEMANTIC_INCORRECT = 0x5f,
    EM_EMM_CAUSE_INVALID_MANDATORY_INFO = 0x60,
    EM_EMM_CAUSE_MSG_TYPE_NOT_EXIST = 0x61,
    EM_EMM_CAUSE_MSG_TYPE_NOT_COMPATIBLE = 0x62,
    EM_EMM_CAUSE_IE_NOT_EXIST = 0x63,
    EM_EMM_CAUSE_CONDITIONAL_IE_ERROR = 0x64,
    EM_EMM_CAUSE_MESSAGE_NOT_COMPATIBLE = 0x65,
    EM_EMM_CAUSE_PROTOCOL_ERROR = 0x6f,

    EM_EMM_CAUSE_FORBIDDEN_PLMN,
    EM_EMM_CAUSE_NO_COVERAGE = 0x72,
    EM_EMM_CAUSE_SIM_REMOVED = 0x76,
    EM_EMM_CAUSE_SIM_INVALID_FOR_PS = 0x78,
    EM_EMM_CAUSE_SIM_INVALID_FOR_CS,
    EM_EMM_CAUSE_SIM_INVALID_FOR_CS_AND_PS
} em_emm_cause_enum;


typedef enum
{
    EM_EMM_ATTACH_TYPE_INVALID = 0,
    EM_EMM_ATTACH_TYPE_EPS_ATTACH = 1,
    EM_EMM_ATTACH_TYPE_COMBINED_ATTACH = 2,
    EM_EMM_ATTACH_TYPE_EMERGENCY_ATTACH = 6
} em_emm_attach_type_enum;

typedef enum
{
    EM_EMM_ATTACH_RESULT_EPS_ONLY_ATTACHED = 1,
    EM_EMM_ATTACH_RESULT_COMBINED_ATTACHED
} em_emm_attach_result_enum;

typedef enum
{
    EM_EMM_TYPE_NO_ADDITIONAL_INFO = 1,
    EM_EMM_TYPE_SMS_ONLY
}em_emm_additional_update_type_enum;

typedef enum
{
    EM_EMM_RESULT_NO_ADDITIONAL_INFO = 0,
    EM_EMM_RESULT_CSFB_NOT_PREFERRED = 1,
    EM_EMM_RESULT_SMS_ONLY = 2
}em_emm_additional_update_result_enum;

typedef enum
{
    EM_EMM_UPDATE_TYPE_TAU = 0,
    EM_EMM_UPDATE_TYPE_COMBINED_TAU,
    EM_EMM_UPDATE_TYPE_COMBINED_TAU_IMSI_ATTACH,
    EM_EMM_UPDATE_TYPE_PERIODIC_TAU,
    EM_EMM_UPDATE_TYPE_INVALID
} em_emm_update_type_enum;

typedef enum
{
    EM_EMM_UPDATE_RESULT_TA_UPDATED = 0,
    EM_EMM_UPDATE_RESULT_COMBINED_UPDATED = 1,
    EM_EMM_UPDATE_RESULT_TA_UPDATED_ISR_ACTIVATED = 4,
    EM_EMM_UPDATE_RESULT_COMBINED_UPDATED_ISR_ACTIVATED = 5,
    EM_EMM_UPDATE_RESULT_INVALID
} em_emm_update_result_enum;

typedef enum
{
    EM_EMM_USER_DETACH_EPS_DETACH = 1,
    EM_EMM_USER_DETACH_IMSI_DETACH ,
    EM_EMM_USER_DETACH_COMBINED_EPS_IMSI_DETACH
}em_emm_user_detach_type_enum;

typedef enum
{
    EM_EMM_NW_DETACH_TYPE_RE_ATTACH_REQUIRED = 1,
    EM_EMM_NW_DETACH_TYPE_RE_ATTACH_NOT_REQUIRED,
    EM_EMM_NW_DETACH_TYPE_IMSI_DETACH
}em_emm_nw_detach_type_enum;

typedef enum
{
    EM_EMM_IMS_VOICE_OVER_PS_SESSION_IN_S1_MODE_NOT_SUPPORT = 0,
    EM_EMM_IMS_VOICE_OVER_PS_SESSION_IN_S1_MODE_SUPPORT
}em_emm_ims_service_ind_enum;

typedef enum
{
    EM_EMM_EMERGENCY_BEARER_SERVICE_IN_S1_MODE_NOT_SUPPORT = 0,
    EM_EMM_EMERGENCY_BEARER_SERVICE_IN_S1_MODE_SUPPORT
}em_emm_emergency_service_ind_enum;

typedef enum
{
    EM_EMM_ATTACH_NEEDED = 0,
    EM_EMM_ATTACH_REQUEST,
    EM_EMM_ATTACH_COMPLETE,
    EM_EMM_ATTACH_SUCCESS,
    EM_EMM_23G_ATTACH_SUCCESS
}em_emm_attach_status;

typedef enum
{
    EM_EMM_TAU_ONGOING_BEFORE_TAU_REQ = 0,
    EM_EMM_TAU_REQUEST,
    EM_EMM_TAU_COMPLETE,
    EM_EMM_TAU_SUCCESS,
    EM_EMM_TAU_FAIL,
    EM_EMM_TAU_NO_TAU_EVER
}em_emm_tau_status;

typedef struct
{
    plmn_struct plmn_id;
    kal_uint8 lac[2];
}em_emm_lai_struct;

typedef struct
{
    em_sr_type_enum service_request_type;
    em_sr_cause_enum service_request_cause;
    em_mo_csfb_cause_enum mo_csfb_cause;
    em_mt_csfb_paging_id_enum mt_csfb_paging_id;

}l4c_em_emm_call_para_struct;

typedef struct
{
    em_emm_ecm_status_enum ecm_status;

}l4c_em_emm_conn_para_struct;


typedef struct
{
    em_emm_attach_type_enum eps_attach_type;
    em_emm_additional_update_type_enum attach_additional_update_type;
    em_emm_attach_result_enum eps_attach_result;
    em_emm_additional_update_result_enum attach_additional_update_result;
    em_emm_cause_enum attach_emm_cause;
    kal_uint32 attach_attempt_count;
    em_emm_attach_status attach_status;

    em_emm_update_type_enum tau_req_update_type;
    em_emm_additional_update_type_enum tau_additional_update_type;
    em_emm_update_result_enum tau_update_result;
    em_emm_additional_update_result_enum tau_additional_update_result;
    em_emm_cause_enum tau_emm_cause;
    kal_uint32 tau_attempt_count;
    em_emm_tau_status tau_status;

    em_emm_user_detach_type_enum user_detach_type;
    em_emm_nw_detach_type_enum nw_detach_type;
    em_emm_cause_enum nw_detach_emm_cause;
    kal_uint32 detach_attempt_count;

    em_emm_ims_service_ind_enum ims_service_ind;
    em_emm_emergency_service_ind_enum emergency_service_ind;

    em_emm_lai_struct lai;
}l4c_em_emm_reg_para_struct;

typedef struct
{
    plmn_struct selected_plmn;
    kal_uint16 tac;
    em_csg_access_mode_enum csg_access_mode;
    kal_uint32 csg_id;
    em_lte_duplex_type_enum duplex_type;

}l4c_em_emm_plmnsel_para_struct;

typedef struct
{
    em_emm_update_status_enum update_status;
    em_emm_sim_status_enum cs_sim_status;
    em_emm_sim_status_enum ps_sim_status;
    em_emm_guti_struct guti;

}l4c_em_emm_usimsrv_para_struct;

typedef struct
{
    em_emm_tin_enum tin;
}l4c_em_emm_nvmsrv_para_struct;

typedef struct
{
    kal_uint8 integrity_alg;
    kal_uint8 ciphering_alg;
} l4c_em_emm_sec_para_struct;

typedef struct
{
    kal_uint16 t3402_remaining_time;
}l4c_em_emm_timersrv_para_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
 em_info_enum em_info;
    l4c_em_emm_call_para_struct emm_call_para;
    l4c_em_emm_conn_para_struct emm_conn_para;
    l4c_em_emm_reg_para_struct emm_reg_para;
    l4c_em_emm_plmnsel_para_struct emm_plmnsel_para;
    l4c_em_emm_usimsrv_para_struct emm_usimsrv_para;
    l4c_em_emm_nvmsrv_para_struct emm_nvmsrv_para;
    l4c_em_emm_sec_para_struct emm_sec_para;
    l4c_em_emm_timersrv_para_struct emm_timersrv_para;
} em_emm_l4c_emm_info_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
}em_emm_l4c_lai_change_info_ind_struct;






typedef enum
{
 EM_ESM_SYSTEM_STATE_ATTACH_NONE,
 EM_ESM_SYSTEM_STATE_ATTACH_INIT,
 EM_ESM_SYSTEM_STATE_ATTACH_ING,
 EM_ESM_SYSTEM_STATE_ATTACH_NORMAL,
 EM_ESM_SYSTEM_STATE_ATTACH_EMERGENCY,
 EM_ESM_SYSTEM_STATE_RAT_CHANGE,
 EM_ESM_SYSTEM_STATE_RAT_2G3G
} l4c_em_esm_system_state_enum;

typedef enum
{
 EM_ESM_RAT_STATE_INACTIVE,
 EM_ESM_RAT_STATE_4G,
 EM_ESM_RAT_STATE_4G23_PENDING,
 EM_ESM_RAT_STATE_4G23_CONTEXT_MAP,
 EM_ESM_RAT_STATE_23G,
 EM_ESM_RAT_STATE_23G4_PENDING,
 EM_ESM_RAT_STATE_23G4_CONTEXT_MAP
} l4c_em_esm_rat_state_enum;

typedef struct
{
 l4c_em_esm_system_state_enum em_esm_sys_state;
 l4c_em_esm_rat_state_enum em_esm_rat_state;

 kal_uint8 em_esm_active_pt_num;
 kal_uint8 em_esm_active_epsb_num;
 kal_uint8 em_esm_active_drb_num;

} l4c_em_esm_status_struct;

typedef enum
{
 EM_ESM_PT_REQ_REASON_NULL,
 EM_ESM_PT_REQ_REASON_REGISTER,
 EM_ESM_PT_REQ_REASON_ADD_PDN_CONN,
 EM_ESM_PT_REQ_REASON_ALLOC_BEARER_RSC,
 EM_ESM_PT_REQ_REASON_MOD_BEARER_RSC,
 EM_ESM_PT_REQ_REASON_DEACT_DED_BEARER,
 EM_ESM_PT_REQ_REASON_RMV_PDN_CONN
} l4c_em_esm_pt_req_reason_enum;

typedef enum
{
 EM_ESM_PT_STATE_TERM,
 EM_ESM_PT_STATE_INACTIVE,
 EM_ESM_PT_STATE_WAIT_MM_RES,
 EM_ESM_PT_STATE_PENDING,
 EM_ESM_PT_STATE_WAIT_RESEND,
 EM_ESM_PT_STATE_COMPLETE,
 EM_ESM_PT_STATE_RESERVED,
 EM_ESM_PT_STATE_WAIT_TERM
} l4c_em_esm_pt_state_enum;


typedef struct
{
 kal_bool is_active;
 kal_uint8 pti;

 l4c_em_esm_pt_req_reason_enum pt_req_reason;
 l4c_em_esm_pt_state_enum pt_state;

  kal_uint8 cid;
  kal_uint8 ebi;

} l4c_em_esm_pt_struct;

typedef enum
{
  EM_ESM_EPSBC_TYPE_INVALID,
  EM_ESM_EPSBC_TYPE_DEFAULT_EPSB,
  EM_ESM_EPSBC_TYPE_DEDICATED_EPSB
} l4c_em_esm_epsbc_bearer_type_enum;





typedef struct
{
 kal_uint8 length;
 kal_uint8 data[100];

} em_apn_struct;

typedef struct
{
 kal_bool is_active;
 kal_uint8 ebi;
 l4c_em_esm_epsbc_bearer_type_enum bearer_type;
 kal_bool is_emergency_bearer;

 kal_uint8 linked_ebi;
 kal_uint8 qci;

 ip_addr_struct ip_addr;
 em_apn_struct apn;

} l4c_em_esm_epsbc_struct;




typedef struct
{
 kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
 em_info_enum em_info;

 l4c_em_esm_status_struct esm_status;
 l4c_em_esm_pt_struct esm_pt[10];
 l4c_em_esm_epsbc_struct esm_epsbc[11];
} em_esm_l4c_esm_info_ind_struct;







typedef struct
{
    kal_uint8 src_ip[64];
    kal_uint8 dst_ip[64];
    kal_uint8 src_port[16];
    kal_uint8 dst_port[16];
    kal_uint8 spi[32];
    kal_uint8 dir;
    kal_uint8 padding[3];
} l4c_em_imc_ipsec_info_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
} em_imc_ipsec_info_flush_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    l4c_em_imc_ipsec_info_struct ipsec_info[4];
    kal_uint8 index;
    kal_uint8 transport;
    kal_uint8 mode;
    kal_uint8 protocol;
    kal_uint8 encry_algo;
    kal_uint8 integrity_algo;
    kal_uint8 padding[2];
    kal_uint8 ck[256];
    kal_uint8 ik[256];
} em_imc_ipsec_info_add_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    kal_uint8 index;
    kal_uint8 padding[3];
} em_imc_ipsec_info_delete_ind_struct;




typedef struct
{
    kal_uint8 group_id;
    unsigned char group_name[5];

    module_type mod_id;

    kal_uint32 event_id;
    unsigned char event_name[20];

    kal_uint16 ring_tone_id;
} em_network_event_struct;

extern em_network_event_struct em_network_event_tbl[];

extern kal_uint32 em_get_total_mod(void);

extern kal_uint32 em_get_total_info_req(void);

extern kal_uint32 em_nw_get_total_event(void);


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    ue_mode_enum ue_mode;
    kal_bool is_sms_over_ip;
    ue_usage_setting_enum ue_usage_setting;
    l4_voice_domain_preference_enum eutran_vdp;
} em_rac_info_ind_struct;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   em_info_enum em_info;

   kal_uint8 source_rat;
   kal_uint8 target_rat;
} em_ratcm_23G_rat_change_ind_struct;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   em_info_enum em_info;

   kal_uint8 irat_type;

   kal_uint8 source_rat;
   kal_uint8 target_rat;
} em_l4c_rat_change_ind_struct;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   em_info_enum em_info;
}em_errc_abnormal_event_logging_test_ind_struct;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   em_info_enum em_info;
} em_rac_abnormal_event_no_service_ind_struct;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   em_info_enum em_info;

   kal_uint8 gsm_antenna;
   kal_int16 gsm_current_antenna_rxLevel;
   kal_int16 gsm_other_antenna_rxLevel;
}em_gsm_tas_info_ind_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
    kal_uint16 force_tx_en;
    kal_uint16 force_ant_idx;
    kal_uint16 cur_ant_idx;
    kal_int16 ant0_rscp;
    kal_int16 ant0_rssi;
    kal_int16 ant1_rscp;
    kal_int16 ant1_rssi;
} em_tdd_l1_tas_info_ind_struct;
# 361 "interface/modem/general/em_struct.h" 2



typedef enum
{
   CELL_LOCK_MODE_CONDITIONED = 0,
   CELL_LOCK_MODE_ABSOLUTE
} em_cell_lock_mode_enum;

typedef struct
{
   module_type mod_id;
   em_info_enum em_info_event;
} em_info_req_mod_tbl_struct;


typedef enum
{
 EM_FROM_ELT,
 EM_FROM_RMMI
} em_source_enum;

typedef enum
{
 EM_CAUSE_OK,
 EM_CAUSE_INVALID_INFO_TYPE
} em_err_cause_enum;


typedef enum
{

    EM_MT_NOT_ALLOWED
} em_feature_enum;


typedef enum
{

    EM_FEATURE_ON,
    EM_FEATURE_OFF
} em_feature_state_enum;




typedef struct
{
  kal_uint8 ref_count;
  kal_uint16 msg_len;
  em_source_enum em_src;
  em_info_status_enum info_request[NUM_OF_EM_INFO];
} l4cps_em_update_req_struct;


typedef struct
{
   kal_uint8 ref_count;
   kal_uint16 msg_len;
   kal_uint8 suspend_status;
} l4cps_em_cell_resel_suspend_req_struct;

typedef struct
{
   kal_uint8 ref_count;
   kal_uint16 msg_len;
   kal_bool result;
   kal_uint8 cause;
}l4cps_em_cell_resel_suspend_cnf_struct;

typedef l4cps_em_cell_resel_suspend_cnf_struct l4cps_em_cell_resel_resume_cnf_struct;


typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool band_indicator;
    kal_uint32 enabled_bitmap;
    kal_uint16 lock_arfcn[3];
    em_cell_lock_mode_enum mode;
}l4cps_em_set_cell_lock_req_struct;


typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool result;
}l4cps_em_set_cell_lock_cnf_struct;



typedef struct{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool result;
    kal_bool band_indicator;
    kal_uint32 enabled_bitmap;
    kal_uint16 lock_arfcn[3];
    em_cell_lock_mode_enum mode;
}l4cps_em_get_cell_lock_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    em_feature_enum em_feature;
    em_feature_state_enum em_feature_state;
} l4cps_em_feature_command_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    em_feature_enum em_feature;
    kal_bool result;
} l4cps_em_feature_command_cnf_struct;


typedef struct
{
   kal_uint8 ref_count;
   kal_uint16 msg_len;
   kal_bool result;
   kal_uint8 cause;
   request_info_type info_request;
} l4cps_em_start_cnf_struct;

typedef l4cps_em_start_cnf_struct l4cps_em_stop_cnf_struct;
# 501 "interface/modem/general/em_struct.h"
typedef struct

{
   kal_uint8 ref_count;
   kal_uint16 msg_len;
   em_info_enum em_info;
} l4cps_em_info_req_struct;

typedef l4cps_em_info_req_struct l4cps_em_status_ind_struct;
# 524 "interface/modem/general/em_struct.h"
typedef struct
{
   kal_uint8 ref_count;
   kal_uint16 msg_len;
   kal_uint8 num_of_nc_lai;
   rr_em_lai_info_struct nc_lai[16];
} l4cps_em_set_cell_id_lock_req_struct;

typedef struct
{
   kal_uint8 ref_count;
   kal_uint16 msg_len;
   kal_bool result;
} l4cps_em_set_cell_id_lock_cnf_struct;




typedef struct
{
 kal_uint8 ref_count;
 kal_uint16 msg_len;
 kal_bool is_on;
} l4cps_em_nw_event_notify_req_struct;

typedef struct
{
 kal_uint8 ref_count;
 kal_uint16 msg_len;
 kal_bool result;
} l4cps_em_nw_event_notify_cnf_struct;

typedef struct
{
 kal_uint8 ref_count;
 kal_uint16 msg_len;
 kal_uint8 group_id;
 kal_uint32 event_id;
} l4cps_em_nw_event_notify_ind_struct;
# 574 "interface/modem/general/em_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    em_info_enum em_info;
} l4cps_em_info_ind_hdr_struct;
# 307 "interface/service/dhl/dhl_def.h" 2



# 1 "interface/driver/peripheral/dcl.h" 1
# 272 "interface/driver/peripheral/dcl.h"
typedef char DCL_CHAR;
typedef signed char DCL_INT8;
typedef signed short DCL_INT16;
typedef signed long DCL_INT32;

typedef unsigned char DCL_UCHAR;
typedef unsigned char DCL_UINT8;
typedef unsigned short DCL_UINT16;
typedef unsigned long DCL_UINT32;





   typedef unsigned long long DCL_UINT64;
   typedef signed long long DCL_INT64;


typedef double DCL_DOUBLE;
typedef int DCL_INT;


typedef enum
{
   DCL_FALSE = 0,
   DCL_TRUE
}DCL_BOOLEAN;






# 1 "interface/driver/peripheral/dcl_gpt.h" 1
# 155 "interface/driver/peripheral/dcl_gpt.h"
typedef struct
{
   DCL_UINT16 u2Tick;
   DCL_UINT32 u4Tick;
   void (*pfCallback)(void *);
   void *vPara;
} SGPT_CTRL_START_T;


typedef DCL_UINT16 FGPT_CTRL_RETURN_COUNT_T;

typedef DCL_UINT16 GPT_BUSYWAIT_COUNT;



typedef struct
{
   DCL_UINT16 u2CountValue;
   DCL_BOOLEAN fgAutoReload;
} SGPT2_CTRL_RESET_DATA_T;

typedef struct
{
   DCL_UINT32 u4Clock;
} SGPT2_CTRL_CLK_T;


typedef DCL_UINT32 DCL_EVENT_NEW;

typedef void (*SGPT2_CALLBACK_FUNC)(DCL_EVENT_NEW event);

typedef struct{
 SGPT2_CALLBACK_FUNC gpt2CallBack;
}SGPT2_CALLBACK_FUNC_T;
# 221 "interface/driver/peripheral/dcl_gpt.h"
typedef struct
{
 void (*gpt1_func)(void);
 void (*gpt2_func)(void);
}gpt_func;

typedef struct
{
 kal_uint32 tick;
 void (*gptimer_func)(void *parameter);
 void *parameter;
}gptimer_item;

typedef struct
{
   kal_uint32 status;
   kal_bool GPTSTOP;
   kal_uint32 Hgpt_handle;
   kal_uint16 GPT_TICK;
   kal_uint8 MAX_GPTIMER_ITEMS;
   kal_uint8 GPTUsed[32];

   gptimer_item GPTItems[32];
   gpt_func GPT_FUNC;
   kal_hisrid hisr;
} GPTStruct;



typedef void (*gpt_ms_cb)(void *);
typedef struct
{
 kal_uint16 timeout_tick;
 gpt_ms_cb gpt_ms_callback;
 void * cb_parameter;
}GPT_MS_Struct;
# 306 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_gpio.h" 1
# 126 "interface/driver/peripheral/dcl_gpio.h"
# 1 "driver/drv_def/drv_features_gpio.h" 1



# 1 "driver/drv_def/drv_features_chip_select.h" 1
# 234 "driver/drv_def/drv_features_chip_select.h"
# 1 "driver/drv_def/drv_features_6735.h" 1
# 235 "driver/drv_def/drv_features_chip_select.h" 2
# 5 "driver/drv_def/drv_features_gpio.h" 2
# 127 "interface/driver/peripheral/dcl_gpio.h" 2
# 278 "interface/driver/peripheral/dcl_gpio.h"
typedef enum {
   mode_default = 0,
   mode_f32k_ck = 0x82,
   mode_max_num
 } gpio_clk_mode;
# 317 "interface/driver/peripheral/dcl_gpio.h"
typedef enum {
   div_max_num=16
} gpio_clk_div;
typedef struct
{
   kal_uint8 pin_num;
   kal_uint8 dir;
} GPIOCheckStruct;
# 448 "interface/driver/peripheral/dcl_gpio.h"
typedef struct
{


   DCL_UINT8 u1IOData;
} GPIO_CTRL_READ_T;


typedef struct
{
# 467 "interface/driver/peripheral/dcl_gpio.h"
   DCL_UINT8 u1RetMode;
} GPIO_CTRL_RETURN_MODE_T;


typedef struct
{




   DCL_UINT8 u1RetMode;
} GPO_CTRL_RETURN_MODE_T;


typedef struct
{


   DCL_UINT8 u1RetDirData;
} GPIO_CTRL_RETURN_DIR_T;


typedef struct
{
   DCL_UINT8 u1RetOutData;
} GPIO_CTRL_RETURN_OUT_T;


typedef struct
{
   DCL_UINT8 u1RetApData;
} GPIO_CTRL_RETURN_AP_T;


typedef struct
{


   DCL_UINT8 u1RetOutData;
} GPO_CTRL_RETURN_OUT_T;


typedef struct
{
   DCL_BOOLEAN fgSetDinv;
} GPIO_CTRL_SET_DINV_T;


typedef struct
{
   DCL_BOOLEAN fgSetDebug;
} GPIO_CTRL_SET_DEBUG_T;


typedef struct
{
   DCL_UINT16 u2ClkNum;
   gpio_clk_mode u2Mode;

} GPIO_CTRL_SET_CLK_OUT_T;



typedef struct
{
    DCL_UINT16 u2ClkNum;
    gpio_clk_div u2Div;

}GPIO_CTRL_SET_CLK_DIV_T;


typedef struct
{
   DCL_UINT8 data;
   DCL_UINT16 no;
   DCL_UINT16 remainder_shift;
} GPIO_CTRL_WRITE_FOR_SPI_T;


typedef struct
{




 DCL_UINT8 u1DriveMode;
}GPIO_CTRL_RETURN_DRIVE_T,GPIO_CTRL_SET_DRIVE_T;



typedef struct
{


 DCL_UINT8 u1OwnerShip;
}GPIO_CTRL_RETURN_OWNERSHIP_T;
# 309 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_uart.h" 1
# 254 "interface/driver/peripheral/dcl_uart.h"
# 1 "interface/modem/general/cmux_vp_num.h" 1
# 255 "interface/driver/peripheral/dcl_uart.h" 2
# 451 "interface/driver/peripheral/dcl_uart.h"
typedef enum
{
 DCL_UART_TYPE = 0x00,
 DCL_UART_USB_TYPE,
 DCL_UART_BLUETOOTH_TYPE,
 DCL_UART_CMUX_TYPE,
 DCL_UART_SPPA_TYPE,
 DCL_UART_CCCI_TYPE,
 DCL_UART_CCIF_TYPE,
 DCL_UART_DCC_TYPE,
 DCL_UART_LOGACC_TYPE,
 DCL_UART_LMU_TYPE,
 DCL_UART_SP_USB_TYPE,
 DCL_UART_MINI_LOG_TYPE,
 DCL_UART_DEV_TYPE_MAX
}SIO_TYPE_T;

typedef DCL_UINT32 UART_BAUDRATE_T;
typedef UART_BAUDRATE_T UART_baudrate;
typedef DCL_UINT16 UART_PORT;
# 495 "interface/driver/peripheral/dcl_uart.h"
typedef enum {
      LEN_5=5,
      LEN_6,
      LEN_7,
      LEN_8
} UART_BITS_PER_CHAR_T;

typedef enum {
      SB_1=1,
      SB_2,
      SB_1_5
} UART_STOP_BITS_T;

typedef enum {
      PA_NONE=0,
      PA_ODD,
      PA_EVEN,
      PA_SPACE
} UART_PARITY_T;







typedef enum {
      FC_NONE=1,
      FC_HW,
      FC_SW
} UART_FLOW_CTRL_MODE_T;

typedef enum {
      DCL_NONE_VFIFO,
      DCL_RX_VFIFO,
      DCL_TX_VFIFO,
      DCL_TXRX_VFIFO
} UART_VFIFO_T;

typedef enum {
      uart_sleep_on_tx_allow = 0,
      uart_sleep_on_tx_forbid
} UART_SLEEP_ON_TX;



typedef struct
{
   UART_BAUDRATE_T u4Baud;
   DCL_UINT8 u1DataBits;
   DCL_UINT8 u1StopBits;
   DCL_UINT8 u1Parity;
   DCL_UINT8 u1FlowControl;
   DCL_UCHAR ucXonChar;
   DCL_UCHAR ucXoffChar;
   DCL_BOOLEAN fgDSRCheck;
} UART_CONFIG_T;

typedef enum
{
 DCL_IO_Low=0,
 DCL_IO_High
} IO_LEVEL_T;


typedef enum {
      DCL_RX_BUF,
      DCL_TX_BUF
} UART_BUFFER_T;

typedef enum {
      DCL_UART_SLEEP_ON_TX_ALLOW = 0,
      DCL_UART_SLEEP_ON_TX_FORBID,
} UART_SLEEP_ON_TX_T;

typedef enum {
      DCL_UART_BY_VFIFO,
      DCL_UART_BY_DMA,
      DCL_UART_BY_MCU,
      DCL_UART_BY_UNKNOWN
} UART_WORK_MODE;





typedef struct _tty_io_request_t tty_io_request_t;





struct _tty_io_request_t{



    tty_io_request_t *next_request;



    void *first_gpd;



    void *last_gpd;
};


typedef struct
{
 DCL_UINT32 u4Flag;
}UART_CTRL_INIT_T;


typedef struct
{
  DCL_UINT32 u4OwenrId;
}UART_CTRL_OPEN_T;


typedef struct
{
  DCL_UINT32 u4OwenrId;
}UART_CTRL_CLOSE_T;


typedef struct
{
 DCL_UINT16 u2Length;
 DCL_UINT32 u4OwenrId;
 DCL_UINT16 u2RetSize;
 DCL_UINT8* puBuffaddr;
 DCL_UINT8* pustatus;

}UART_CTRL_GET_BYTES_T;



typedef struct
{
 DCL_UINT16 u2Length;
 DCL_UINT32 u4OwenrId;
 DCL_UINT16 u2RetSize;
 DCL_UINT8* puBuffaddr;
}UART_CTRL_PUT_BYTES_T;

typedef struct
{
 DCL_UINT32 u4OwnerId;
 void *putIor;
}UART_CTRL_PUT_BYTES_IOR_T;


typedef struct
{
 DCL_UINT16 u2RetSize;
}UART_CTRL_RX_AVAIL_T;



typedef struct
{
 DCL_UINT16 u2RetSize;
}UART_CTRL_TX_AVAIL_T;


typedef struct
{
 DCL_UINT32 u4OwenrId;
 UART_BUFFER_T dir;
}UART_CTRL_PURGE_T;



typedef struct
{
 DCL_UINT32 u4OwenrId;
}UART_CTRL_OWNER_T;


typedef struct
{
 DCL_UINT32 u4OwenrId;
 DCL_BOOLEAN bXON;
}UART_CTRL_FLOW_CTRL_T;


typedef struct
{
   DCL_UINT32 u4OwenrId;
   DCL_UINT8 uEscChar;
   DCL_UINT16 u2ESCGuardtime;
} UART_CTRL_CONFIG_ESP_T;




typedef struct
{
 DCL_UINT32 u4OwenrId;
 UART_CONFIG_T rUARTConfig;
} UART_CTRL_DCB_T;



typedef struct
{
 DCL_UINT32 u4OwenrId;
 IO_LEVEL_T rIOLevelDCD;
} UART_CTRL_DCD_T;


typedef struct
{
 DCL_UINT32 u4OwenrId;
 UART_FLOW_CTRL_MODE_T FlowCtrlMode;
}UART_CTRL_GET_FC_T;


typedef struct
{
 DCL_UINT32 chunkSize;
} UART_CTRL_GET_CHUNK_SIZE_T;


typedef struct
{
 DCL_UINT32 u4OwnerId;
 DCL_BOOLEAN needTxDoneCb;
} UART_CTRL_NEED_TX_DONE_CB_T;


typedef struct
{
 DCL_UINT32 ulmtu_sz;
 DCL_UINT32 dlmtu_sz;
} UART_CTRL_GET_MTU_SIZE_T;


typedef struct
{
 DCL_BOOLEAN need_indication;
} UART_CTRL_SET_INDICATION_T;




typedef enum _tty_drv_state {



      DRV_ST_DETACHED = 0,



      DRV_ST_ATTACHED
} tty_drv_state_e;


typedef struct
{
 DCL_UINT32 u4OwnerId;
 tty_drv_state_e drv_state;
} UART_CTRL_GET_DRV_STATE_T;


typedef struct
{
 DCL_UINT32 u4OwnerId;
 void *ior;
} UART_CTRL_ASSIGN_RX_IOR_T;


typedef struct
{
  DCL_UINT32 u4OwenrId;
   IO_LEVEL_T rIOLevelBRK;
} UART_CTRL_BREAK_T;



typedef struct
{
   DCL_UINT32 u4OwenrId;
} UART_CTRL_CLR_BUFFER_T;


typedef struct
{
   DCL_UINT32 u4OwenrId;
   UART_BAUDRATE_T baudrate;
} UART_CTRL_BAUDRATE_T;



typedef struct
{
 DCL_UINT32 u4OwenrId;
 DCL_UINT8* puBuffaddr;
 DCL_UINT16 u2Length;
 DCL_UINT8 umode;
 DCL_UINT8 uescape_char;
 DCL_UINT16 u2RetSize;
}UART_CTRL_SEND_DATA_T;


typedef struct
{
   DCL_UINT32 u4OwenrId;
} UART_CTRL_AUTO_BAUDDIV_T;

typedef void (*DCL_UART_TX_FUNC)(DCL_UINT32 u4Port);
typedef void (*DCL_UART_RX_FUNC)(DCL_UINT32 u4Port) ;



typedef struct
{
   DCL_UINT32 u4OwenrId;
   DCL_UART_TX_FUNC func;
} UART_CTRL_REG_TX_CB_T;



typedef struct
{
   DCL_UINT32 u4OwenrId;

   DCL_UART_RX_FUNC func;
} UART_CTRL_REG_RX_CB_T;

typedef enum
{
 UART_TX = 0,
 UART_RX,
 DSP_TX,
 DSP_RX
}UART_IO_DIR;


typedef struct
{
 UART_IO_DIR dir;
}UART_CTRL_REG_DEF_CB_T;


typedef struct
{
 DCL_UINT8 uByte;
}UART_CTRL_GET_UART_BYTE_T;


typedef struct
{
 DCL_UINT8 u1retByte;
 DCL_UINT8 uByte;
 DCL_UINT32 u4timeout_value;
}UART_CTRL_GET_UART_BYTE_WITH_TIMEOUT_T;


typedef struct
{
 DCL_UINT8 uData;
}UART_CTRL_PUT_UART_BYTE_T;


typedef struct
{
 DCL_UINT8* puBuffaddr;
 DCL_UINT16 u2Length;

}UART_CTRL_PUT_UART_BYTES_T;


typedef struct
{
  DCL_UINT32 u4OwenrId;
 IO_LEVEL_T rIOLevelSRI;

}UART_CTRL_RI_T;


typedef struct
{
  DCL_UINT32 u4OwenrId;
 IO_LEVEL_T rIOLevelDTR;
}UART_CTRL_DTR_T;


typedef struct
{
 IO_LEVEL_T rIOLevelDSR;
 IO_LEVEL_T rIOLevelCTS;
}UART_CTRL_RHS_T;


typedef struct
{
 DCL_UINT16 tx_level;
 DCL_UINT16 rx_level;
}UART_CTRL_SFT_T;


typedef struct
{
 DCL_BOOLEAN bFlag_Poweron;
}UART_CTRL_POWERON_T;


typedef struct
{
 DCL_BOOLEAN bFlag;
}UART_CTRL_CHECK_TBE_T;


typedef struct
{
 DCL_BOOLEAN bFlag;
}UART_CTRL_CHECK_TSO_T;


typedef struct
{
 DCL_UINT32* ptotal_size;
 DCL_UINT32* preturn_size;
}UART_CTRL_GET_TBS_T;



typedef struct
{
 UART_SLEEP_ON_TX_T bFlag;
}UART_CTRL_SLEEP_ON_TX_ENABLE_T;


typedef struct
{
 DCL_BOOLEAN bFlag;
}UART_CTRL_SLEEP_ENABLE_T;



typedef struct
{
 DCL_UINT8* puBuffaddr;
 DCL_UINT16 u2Length;
}UART_CTRL_BOOT_PUTBYTES_T;



typedef struct
{
 DCL_BOOLEAN bUseVFifo;
}UART_CTRL_USE_VFIFO_T;


typedef struct
{
 kal_uint32 max_baudrate;
}UART_CTRL_GET_MAXBAUDRATE_T;


typedef struct
{
 void *first_gpd;
 void *last_gpd;
}TTY_CTRL_EXCP_TX_GPD_T;


typedef struct
{
 void *first_gpd;
 void *last_gpd;
 DCL_UINT32 num;
}TTY_CTRL_EXCP_TX_DONE_INFO_T;


typedef enum _tty_excp_hif_state {
 HIF_STATE_NORMAL = 0,
 HIF_STATE_TXERROR
} tty_excp_hif_state;
typedef struct
{
 tty_excp_hif_state hif_state;
}TTY_CTRL_EXCP_HIF_STATE_T;


typedef struct
{
 void *first_gpd;
 void *last_gpd;
}TTY_CTRL_EXCP_ASSIGN_RX_GPD_T;


typedef struct
{
 void *first_gpd;
 void *last_gpd;
 DCL_UINT32 num;
}TTY_CTRL_EXCP_GET_RX_GPD_T;


typedef struct
{
 void *first_gpd;
 void *last_gpd;
 DCL_UINT32 num;
}TTY_CTRL_EXCP_FLUSH_TX_T;


typedef struct
{
 void *first_gpd;
 void *last_gpd;
 DCL_UINT32 num;
}TTY_CTRL_EXCP_FLUSH_RX_T;


typedef struct
{
 DCL_BOOLEAN reset_event;
}TTY_CTRL_EXCP_HIF_POLL_T;

typedef enum {
      NONE_VFIFO,
      RX_VFIFO,
      TX_VFIFO,
      TXRX_VFIFO
} UART_TxRx_VFIFO_support;

typedef enum {
      RX_BUF,
      TX_BUF
} UART_buffer;

typedef enum {
   Compensate_None = 0,
   Compensate_Wait,
   Compensate_AT,
   Compensate_at
}UART_Compensate_enum;


typedef enum {
      len_5=5,
      len_6,
      len_7,
      len_8
} UART_bitsPerCharacter;

typedef enum {
      sb_1=1,
      sb_2,
      sb_1_5
} UART_stopBits;

typedef enum {
      pa_none=0,
      pa_odd,
      pa_even,
      pa_mark,
      pa_space
} UART_parity;

typedef enum {
      fc_none=1,
      fc_hw,
      fc_sw
} UART_flowCtrlMode;

typedef struct
{
      UART_baudrate baud;
      UART_bitsPerCharacter dataBits;
      UART_stopBits stopBits;
      UART_parity parity;
      UART_flowCtrlMode flowControl;
      kal_uint8 xonChar;
      kal_uint8 xoffChar;
      kal_bool DSRCheck;
} UARTDCBStruct;

typedef struct
{
      kal_uint8 EscChar;
      kal_uint16 GuardTime;
} UART_ESCDetectStruct;

typedef struct
{
      kal_uint8 *rx_buffer;
      kal_uint8 *tx_buffer;
      kal_uint8 *txISR_buffer;
} UART_RingBufferStruct;


   typedef enum {
      uart_null_buffer=0,
      uart_isr_buffer,
      uart_normal_buffer
   } UART_RingBuffer_Type;

   typedef struct
   {
         UART_RingBuffer_Type type;
         kal_uint16 index;
   } UART_RingBuffer_SaveIndex;


typedef struct
{
 kal_uint16 tst_port_ps;
 kal_uint16 ps_port;
 UART_baudrate tst_baudrate_ps;
 UART_baudrate ps_baudrate;
 kal_bool High_Speed_SIM_Enabled;
 kal_uint8 swdbg;
   kal_uint8 uart_power_setting;
   kal_uint8 cti_uart_port;
   UART_baudrate cti_baudrate;
   kal_uint8 tst_port_l1;
   UART_baudrate tst_baudrate_l1;
    kal_uint8 tst_output_mode;
    kal_uint8 usb_logging_mode;
    kal_uint16 tst_port_dsp;
    UART_baudrate tst_baud_rate_dsp;
 kal_uint8 usb_cdrom_config;
 kal_uint16 speech_port;
 kal_uint16 ndis_port;
} port_setting_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
 DCL_UINT16 port;
}uart_ready_to_read_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
 DCL_UINT16 port;
}uart_ready_to_write_ind_struct;

 typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
 DCL_UINT16 port;
}uart_dsr_change_ind_struct;

 typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
 DCL_UINT16 port;
}uart_escape_detected_ind_struct;

 typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
 DCL_UINT16 port;
}uart_plugin_ind_struct;

 typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
 DCL_UINT16 port;
}uart_plugout_ind_struct;
# 312 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_wdt.h" 1
# 140 "interface/driver/peripheral/dcl_wdt.h"
 typedef struct
 {
  DCL_UINT16 rstInterval;
 }WDT_CTRL_GET_RSTINTERVAL_T;


typedef struct
{
   DCL_BOOLEAN fgEnable;
} WDT_CTRL_ENABLE_T;

typedef struct
{
   DCL_BOOLEAN fgIOHigh;
} WDT_CTRL_SET_EXT_POL_T;

typedef struct
{
   DCL_BOOLEAN fgEnable;
} WDT_CTRL_SET_EXT_RESET_T;

typedef struct
{
   DCL_UINT16 u2Value;
} WDT_CTRL_SET_VALUE_T;







typedef struct
{
   DCL_BOOLEAN fgEnable;
} WDT_CTRL_IRQ_T;

typedef struct
{
   DCL_BOOLEAN fgEnable;
}WDT_CTRL_DEBUG_T;
# 315 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_adc.h" 1
# 185 "interface/driver/peripheral/dcl_adc.h"
typedef struct
{
   DCL_UINT32 u4Period;
   DCL_UINT32 u4Sapid;
   DCL_UINT8 u1OwnerId;
   DCL_UINT8 u1AdcChannel;
   DCL_UINT8 u1EvaluateCount;
   DCL_BOOLEAN fgSendPrimitive;
} ADC_CTRL_CREATE_OBJECT_T;


typedef struct
{
   DCL_UINT32 u4Period;
   DCL_UINT8 u1EvaluateCount;
} ADC_CTRL_MODIFY_PARAM_T;





typedef struct
{
   DCL_UINT16 u2Channel;
   DCL_UINT16 u2ADCValue;
} ADC_CTRL_IMM_MEASURE_T;

typedef struct
{
   DCL_UINT16 u2Channel;
   DCL_UINT16 u2ADCValue;
} ADC_CTRL_SYNC_MEASURE_T;

typedef struct
{
   DCL_UINT16 u2Event0;
   DCL_UINT16 u2Event1;
} ADC_CTRL_TDMA_SYNC_SETUP_T;

typedef struct
{
   DCL_BOOLEAN fgEnable;
} ADC_CTRL_POWER_T;


typedef struct
{
   DCL_UINT8 u1Channel;
   DCL_UINT16 u2MeaCount;
   DCL_UINT32 u4ADCData;
} ADC_CTRL_GET_DATA_2_META_T;


typedef struct
{
   DCL_UINT8 u1Channel;
   DCL_UINT32 u4ADCData;
} ADC_CTRL_GET_DATA_T;


typedef struct
{
   DCL_UINT8 u1Channel;
   DCL_UINT16 u2MeaCount;
   DCL_UINT32 u4ADCData;
} ADC_CTRL_GET_META_DATA_T;


typedef struct
{
   DCL_UINT32 u4Channel;
   DCL_UINT32 u4MeaCount;
   DCL_UINT16 *u2ADCData;
} ADC_CTRL_GET_IMM_DATA_ON_BOOTING_T;


typedef struct
{
    DCL_UINT16 u2Channel;
    DCL_INT16 i2Temp;
} ADC_CTRL_GET_TEMP_T;


typedef struct
{
   DCL_BOOLEAN fgPageAlign;
} ADC_CTRL_TIMER_ALIGN_T;


typedef enum {
   DCL_VBAT_ADC_CHANNEL = 0,
   DCL_VISENSE_ADC_CHANNEL,
   DCL_VBATTMP_ADC_CHANNEL,
   DCL_BATTYPE_ADC_CHANNEL,
   DCL_VCHARGER_ADC_CHANNEL,
   DCL_PCBTMP_ADC_CHANNEL,
   DCL_AUX_ADC_CHANNEL,
   DCL_CHR_USB_ADC_CHANNEL,
   DCL_OTG_VBUS_ADC_CHANNEL,
   DCL_RFTMP_ADC_CHANNEL,
   DCL_MDTMP_ADC_CHANNEL,
   DCL_PMICTMP_ADC_CHANNEL,
   DCL_MAX_ADC_CHANNEL
} DCL_ADC_CHANNEL_TYPE_ENUM;

typedef struct
{
   DCL_UINT8 u1AdcPhyCh;
   DCL_UINT16 u2AdcName;
} ADC_CTRL_GET_PHYSICAL_CHANNEL_T;


typedef struct
{
   DCL_DOUBLE d8AdcValue;
   DCL_UINT32 u4Volt;
   DCL_UINT8 u1AdcPhyCh;
} ADC_CTRL_TRANSFORM_INTO_VOLT_T;


typedef struct
{
   DCL_UINT32 u4Volt;
   DCL_UINT32 u4Temp;
} ADC_CTRL_TRANSFORM_INTO_TEMP_T;


typedef struct
{
   DCL_UINT32 u4Volt;
   DCL_UINT32 u4Curr;
} ADC_CTRL_TRANSFORM_INTO_CURR_T;



typedef struct
{
   kal_timer_func_ptr pfMeasure_cb;
} ADC_CTRL_REGISTER_MEASURE_CB_T;

typedef void (*PFN_DCLSADC_COMPLETE_CALLBACK)(DCL_INT32 handle, DCL_INT32 volt_result, DCL_DOUBLE adc_result);
typedef void (*PFN_DCLSADC_COMPLETE_MULTI_CALLBACK)(DCL_INT32 handle, DCL_INT32 *volt_array_result, DCL_DOUBLE *adc_array_result);

typedef struct
{
   PFN_DCLSADC_COMPLETE_CALLBACK pfComplete_cb;
} ADC_CTRL_REGISTER_COMPLETE_CB_T;

typedef struct
{
   PFN_DCLSADC_COMPLETE_MULTI_CALLBACK pfComplete_cb;
} ADC_CTRL_REGISTER_COMPLETE_MULTI_CB_T;



typedef struct{
  DCL_UINT32 u4Ownerid;
  DCL_UINT32 u4Sapid;
 DCL_UINT32 u4Period;
 DCL_UINT8 u1Adc_phy_id;
 DCL_UINT8 u1Adc_logic_id;
 DCL_UINT8 u1Evaluate_count;
 DCL_BOOLEAN bSend_primitive;
 DCL_BOOLEAN bConti_measure;
 DCL_UINT32 u4Adc_sche_event_id;
 void (*complete)(DCL_INT32 adc_handle, DCL_INT32 volt_result, DCL_DOUBLE adc_result);
}DCL_ADC_SCHEDULER_PARA_T;
typedef struct
{
   DCL_UINT32 u4Handle;
   DCL_ADC_SCHEDULER_PARA_T pPara;
} ADC_CTRL_GET_SCHEDULER_PARAMETER_T;


typedef struct
{
 DCL_UINT32 u4Adc_max_ch;
} ADC_CTRL_GET_MAX_PHYSICAL_CH_T;


typedef struct
{
 void *ilm_ptr;
}ADC_CTRL_SET_CALIBRATION_DATA_T;


typedef struct
{
   DCL_INT32 i4ADCSlope[16];
   DCL_INT32 i4ADCOffset[16];
}ADC_CTRL_READ_CALIBRATION_DATA_T;


typedef struct{
  DCL_UINT32 u4Handle;
   DCL_UINT32 u4Adc_sche_id;
}DCL_CTRL_SCHE_ID_GET_HANDLE_T;

typedef struct{
 DCL_UINT8 bEnable;
 DCL_UINT8 *u4ADC_ch_number;
 DCL_UINT8 u4Adc_max_ch_number;
 PFN_DCLSADC_COMPLETE_MULTI_CALLBACK complete_multi_cb;
}DCL_MULTI_CHANNEL_PARA_T;
# 318 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_bmt.h" 1
# 156 "interface/driver/peripheral/dcl_bmt.h"
typedef struct
{
    DCL_UINT8 call_state;
}BMT_CTRL_CALLSTATE_T;


typedef struct
{
    DCL_BOOLEAN bEnable;
}BMT_CTRL_CHARGE_T;


typedef enum
{
    DCL_GET_BATTERY_TYPE,
 DCL_GET_CHECK_BATTERY,
 DCL_GET_CHECK_CHARGER_VOLTAGE,
 DCL_GET_CHECK_BATT_TEMP,
 DCL_GET_MAX_VBAT_LI
}DCL_GET_CUSTOM_CHR_PARA;


typedef struct
{
    DCL_UINT32 u4ChargingParameter;
    DCL_GET_CUSTOM_CHR_PARA eGetParaCmd;
}BMT_CTRL_GET_CUSTOMIZED_PARA_T;


typedef enum
{
    DCL_BMT_EXT_CHR_DRV_INIT = 0,
    DCL_BMT_EXT_CHR_ENABLE_INTR,
    DCL_BMT_EXT_CHR_CHARGE_ENABLE,
    DCL_BMT_EXT_CHR_SET_CHARGE_CURRENT,
    DCL_BMT_EXT_CHR_GET_CHR_FAC_MEASURE_SUPPORT,
    DCL_BMT_EXT_CHR_GET_CHR_FAC_CHECK_SUPPORT,
    DCL_BMT_EXT_CHR_CHECK_CHR_STATUS,
    DCL_BMT_EXT_CHR_GET_CHR_STATUS,
    DCL_BMT_EXT_CHR_GET_VBAT,
    DCL_BMT_EXT_CHR_GET_ISENSE,
    DCL_BMT_EXT_CHR_GET_VCHARGER,
    DCL_BMT_EXT_CHR_GET_BAT_TEMP,
    DCL_BMT_EXT_CHR_GET_CHARGE_FULL,
    DCL_BMT_EXT_CHR_GET_CHARGE_UNDER_EXTREMETMP,
    DCL_BMT_EXT_CHR_GET_CHARGE_EXTREMETMP_FULL,
    DCL_BMT_EXT_CHR_GET_CHARGE_EXTREMETMP_RECHARGE,
    DCL_BMT_EXT_CHR_GET_CHARGE_HOLD,
    DCL_BMT_EXT_CHR_GET_CHR_BATT_STATE_TRANSIT_SUPPORT,
    DCL_BMT_EXT_CHR_CHR_BATT_STATE_TRANSIT,
    DCL_BMT_EXT_CHR_GET_CURR_CHR_BATT_STATE,
    DCL_BMT_EXT_CHR_GET_SPECIFIC_CHR_CURRENT,
    DCL_BMT_EXT_CHR_GET_VBAT_SPECIFIC_FULL_VOLTAGE_STATE
}DCL_BMT_EXT_CHR_CMD;


typedef struct
{
    DCL_BMT_EXT_CHR_CMD eExtChargerCtrl;
}BMT_CTRL_SET_EXT_CHARGER_T;


typedef struct
{
    DCL_BOOLEAN fgBatIsOn;
}BMT_CTRL_IS_BAT_ON_T;


typedef enum
{
    DCL_BMT_CHARGER_IN = 0,
    DCL_BMT_CHARGER_OUT,
    DCL_BMT_OVERVOLPROTECT,
    DCL_BMT_OVERBATTEMP,
    DCL_BMT_LOWBATTEMP,
    DCL_BMT_OVERCHARGECURRENT,
    DCL_BMT_CHARGE_COMPLETE,
    DCL_BMT_INVALID_BAT,
    DCL_BMT_INVALID_CHARGER,
    DCL_BMT_CHARGE_TIMEOUT,
    DCL_BMT_LOWCHARGECURRENT,
    DCL_BMT_CHARGE_BAD_CONTACT,
    DCL_BMT_BATTERY_BAD_CONTACT,
    DCL_BMT_USB_CHARGER_IN,
    DCL_BMT_USB_CHARGER_OUT,
    DCL_BMT_USB_NO_CHARGING_IN,
    DCL_BMT_USB_NO_CHARGING_OUT,
    DCL_BMT_BATT_IN,
    DCL_BMT_BATT_OUT
}DCL_BMT_CHR_MSG;


typedef struct
{
    DCL_BMT_CHR_MSG ChargerMsg;
}BMT_CTRL_SENDMES2UEM_T;


typedef enum {
 DCL_BMT_CHR_IN = 0,
 DCL_BMT_CHR_OUT,
 DCL_BMT_CHR_UNINIT = 0xff
}DCL_BMT_CHR_STAT;


typedef struct
{
    DCL_BMT_CHR_STAT ChargerStat;
}BMT_CTRL_SET_CHR_STATUS_T;
# 321 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_pfc.h" 1
# 114 "interface/driver/peripheral/dcl_pfc.h"
typedef enum {
 PPP_PFC_CHANNEL_0 = 0,
 PPP_PFC_CHANNEL_1,
 PPP_PFC_CHANNEL_2,
} PPP_PFC_CHANNEL;




typedef enum {
 PFC_ENCODE = 0,
 PFC_DECODE,
} PFC_OPERATION_SEL_T;
# 156 "interface/driver/peripheral/dcl_pfc.h"
typedef struct
{
 DCL_UINT32 en_de;
 DCL_UINT32 channel;
} PFC_CTRL_RESET_T;


typedef struct
{
 DCL_UINT32 en_de;
 DCL_UINT32 channel;
 DCL_BOOLEAN f32;
 DCL_BOOLEAN acfc;
 DCL_BOOLEAN pfc;
 DCL_UINT16 max_pkt_sz;
 DCL_UINT16 ptc;
 DCL_UINT32 pfc_accm[7];
} PFC_CTRL_SET_CONFIG_T;


typedef struct
{
 DCL_UINT32 channel;
 void *head;
 void *tail;
} PFC_CTRL_ENCODE_T;


typedef struct
{
 DCL_UINT32 channel;
 void *head;
 void *tail;
} PFC_CTRL_DECODE_T;


typedef struct
{
 DCL_UINT32 en_de;
 DCL_UINT32 channel;
 void **head;
 void **tail;
 DCL_UINT32 *queue_len;
} PFC_CTRL_DEQUEUE_T;


typedef struct
{
 DCL_UINT32 en_de;
 DCL_UINT32 channel;
 void *head;
 void *tail;
 DCL_UINT32 queue_len;
} PFC_CTRL_RELOAD_RX_T;
# 324 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_rtc.h" 1
# 321 "interface/driver/peripheral/dcl_rtc.h"
typedef struct
{
 DCL_UINT8 rtc_sec;
 DCL_UINT8 rtc_min;
 DCL_UINT8 rtc_hour;
 DCL_UINT8 rtc_day;
 DCL_UINT8 rtc_mon;
 DCL_UINT8 rtc_wday;
 DCL_UINT8 rtc_year;
}DCL_RTC_DATA_T;


typedef struct
{
    DCL_BOOLEAN fgBootloaderPowerOn;
}RTC_CTRL_BOOTLOADER_POWERON_T;


typedef enum
{
    DCL_RTC_PDN1 = 0,
    DCL_RTC_PDN2,
 DCL_RTC_MAX_INDEX
}DCL_RTC_PDN_INDEX_T;


typedef struct
{
 DCL_RTC_PDN_INDEX_T PDNIndex;
 DCL_UINT16 fgConfigBit;
 DCL_UINT16 PDNValue;
}RTC_CTRL_CONFIG_PDN_BIT_T;


typedef struct
{
    DCL_UINT8 u1ALEn;
    DCL_UINT8 u1TCEn;
}RTC_CTRL_CONFIG_AL_TC_T;





typedef struct
{
 DCL_BOOLEAN fgMetaReset;
}RTC_CTRL_FT_POWEROFF_T;


typedef struct
{
    DCL_UINT8 u1Sec;
    DCL_UINT8 u1Min;
    DCL_UINT8 u1Hour;
    DCL_UINT8 u1Day;
    DCL_UINT8 u1Mon;
    DCL_UINT8 u1WDay;
    DCL_UINT8 u1Year;
    DCL_BOOLEAN ALEnBit;
}RTC_CTRL_GET_ALARM_TIME_T;


typedef struct
{
    DCL_UINT8 u1Sec;
    DCL_UINT8 u1Min;
    DCL_UINT8 u1Hour;
    DCL_UINT8 u1Day;
    DCL_UINT8 u1Mon;
    DCL_UINT8 u1WDay;
    DCL_UINT8 u1Year;
}RTC_CTRL_GET_TIME_T;


typedef enum {
    DCL_RTC_GPIO_NO_PULL = 0,
    DCL_RTC_GPIO_PULL_DOWN,
    DCL_RTC_GPIO_PULL_UP
}DCL_RTC_GPIO_PULL_TYPE_T;


typedef enum {
    DCL_RTC_GPIO_DS_4mA = 0,
    DCL_RTC_GPIO_DS_8mA,
    DCL_RTC_GPIO_DS_12mA,
    DCL_RTC_GPIO_DS_16mA
}DCL_RTC_GPIO_DRIVING_STRENGTH_T;


typedef struct
{
    DCL_RTC_GPIO_PULL_TYPE_T rPullType;
    DCL_RTC_GPIO_DRIVING_STRENGTH_T rPullStrength;
    DCL_BOOLEAN InputValue;
    DCL_BOOLEAN OutputValue;
    DCL_BOOLEAN is_SmithTrigger;
    DCL_BOOLEAN is_SlewRateControl;
}RTC_CTRL_GPIO_TIME_T;





typedef struct
{
    void (*RTC_TCCallback)(void);
    void (*RTC_ALCallback)(void);
}RTC_CTRL_INIT_T;





typedef struct
{
 DCL_BOOLEAN fgIsValid;
}RTC_CTRL_IS_CONFIG_VALID_T;


typedef struct
{
    DCL_BOOLEAN fgFirstOn;
}RTC_CTRL_IS_FIRST_ON_T;


typedef struct
{
 DCL_BOOLEAN fgMSFirstPowerOn;
}RTC_CTRL_IS_MS_FIRSTPOWERON_T;


typedef struct
{
    DCL_UINT8 u1Sec;
    DCL_UINT8 u1Min;
    DCL_UINT8 u1Hour;
    DCL_UINT8 u1Day;
    DCL_UINT8 u1Mon;
    DCL_UINT8 u1WDay;
    DCL_UINT8 u1Year;
    DCL_BOOLEAN isTimeValid;
}RTC_CTRL_IS_TIME_VALID_T;


typedef struct
{
 DCL_BOOLEAN fgIsPowerOn;
}RTC_CTRL_PWIC_CHECK_POWERON_T;


typedef struct
{
    DCL_UINT8 u1Sec;
    DCL_UINT8 u1Min;
    DCL_UINT8 u1Hour;
    DCL_UINT8 u1Day;
    DCL_UINT8 u1Mon;
    DCL_UINT8 u1WDay;
    DCL_UINT8 u1Year;
}RTC_CTRL_PWIC_FIRST_POWERON_INIT_RTCTIME_T;
# 493 "interface/driver/peripheral/dcl_rtc.h"
typedef enum
{
    DCL_RTC_SPAR0 = 0,
    DCL_RTC_SPAR1,
 DCL_RTC_SPAR_MAX_INDEX
}DCL_RTC_SPAR_INDEX_T;


typedef struct
{
 DCL_RTC_SPAR_INDEX_T SPARIndex;
 DCL_UINT16 WriteValue;
 DCL_UINT16 ReadValue;
}RTC_CTRL_CONFIG_SPAR_T;


typedef struct
{
 DCL_UINT8 XOSCValue;
}RTC_CTRL_READ_XOSC_REG_T;





typedef struct
{
    DCL_UINT8 u1Sec;
    DCL_UINT8 u1Min;
    DCL_UINT8 u1Hour;
    DCL_UINT8 u1Day;
    DCL_UINT8 u1Mon;
    DCL_UINT8 u1WDay;
    DCL_UINT8 u1Year;
}RTC_CTRL_SET_ALARM_TIME_T;


typedef struct
{
 DCL_BOOLEAN fgPowerOn;
}RTC_CTRL_SET_FIRST_POWERON_T;





typedef struct
{
    DCL_UINT8 u1Sec;
    DCL_UINT8 u1Min;
    DCL_UINT8 u1Hour;
    DCL_UINT8 u1Day;
    DCL_UINT8 u1Mon;
    DCL_UINT8 u1WDay;
    DCL_UINT8 u1Year;
}RTC_CTRL_SET_TIME_T;


typedef struct
{
 DCL_UINT16 BBPUReg;
}RTC_CTRL_SETBBPU_T;
# 572 "interface/driver/peripheral/dcl_rtc.h"
typedef struct
{
 DCL_UINT8 XOSC_Reg;
}RTC_CTRL_WRITE_XOSC_REG_T;

typedef struct
{
    DCL_UINT32 dest_mod_id;
    DCL_UINT32 sap_id;
    DCL_UINT32 msg_id;
    DCL_BOOLEAN fgRegisterILM;
}RTC_CTRL_REGISTER_MODULE_ILM_INFO_T;


typedef struct
{
 DCL_UINT16 OSC32CON_Reg;
}RTC_CTRL_WRITE_OSC32CON_REG_T;
# 327 "interface/driver/peripheral/dcl.h" 2
# 338 "interface/driver/peripheral/dcl.h"
# 1 "interface/driver/peripheral/DclH_kbd.h" 1
# 115 "interface/driver/peripheral/DclH_kbd.h"
typedef struct
{
   DCL_UINT16 u2KeyNum;
} HKBD_CTRL_KNUM_T;



typedef struct
{
   DCL_UINT32 kbdmap_reg;
   DCL_UINT32 kbdmap_reg1;
   DCL_UINT32 kbdmap_reg2;
} HKBD_CTRL_STA_MAP_T;


typedef struct
{
 DCL_BOOLEAN sta;
 DCL_UINT8 key;
}HKBD_CTRL_KEY_STA_T;


typedef struct
{
   DCL_BOOLEAN fgPKP;
} HKBD_CTRL_POWKEY_T;
# 339 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/DclS_kbd.h" 1
# 91 "interface/driver/peripheral/DclS_kbd.h"
typedef enum {
      DCL_kbd_onekey_press=0,
      DCL_kbd_onekey_release,




      DCL_kbd_onekey_longpress,
      DCL_kbd_onekey_repeated,
      DCL_kbd_onekey_fullpress,
      DCL_kbd_twokey_detection_enable,
      DCL_kbd_threekey_detection_enable,
      DCL_kbd_multikey_detection_disable
} DCL_KBD_EVENT;


typedef enum {
   DCL_kbd_1_key_det_mode = 0,
   DCL_kbd_2_keys_det_mode,
   DCL_kbd_3_keys_det_mode
}DCL_kbd_key_det_mode;


typedef struct
{
   DCL_BOOLEAN bFlag;
   DCL_UINT8 Det_Mode;
} SKBD_CTRL_MODE_T;


typedef struct
{
 DCL_UINT8 keycnt;
}SKBD_CTRL_KEY_CNT_T;


typedef struct
{
   DCL_KBD_EVENT Keyevent;



   DCL_UINT8 Keydata[1];





} SKBD_CTRL_KEYDATA_T;


typedef struct
{
 SKBD_CTRL_KEYDATA_T* keydata;
 DCL_BOOLEAN specify_read;

 DCL_UINT32 read_pointer;
 DCL_UINT32* current_read_pointer;

}SKBD_CTRL_PEEKDATA_T;



typedef struct
{
   DCL_BOOLEAN fgIMK;
   DCL_UINT8 uKey;
} SKBD_CTRL_MULTIKEY_T;



typedef struct
{
   DCL_UINT8 uKey;
   DCL_BOOLEAN fgIKBS;
} SKBD_CTRL_KEYSUPPORT_T;


typedef struct
{
   DCL_UINT32 u4Tick;
} SKBD_CTRL_TIME_T;


typedef struct
{
 DCL_UINT8 keydata;
}SKBD_CTRL_PUTKEY_T;

typedef struct
{
  DCL_UINT32 *number;
  DCL_UINT8 *two_step;
}SKBD_CTRL_FIND_TWO_STEP_T;
# 342 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_sts.h" 1
# 156 "interface/driver/peripheral/dcl_sts.h"
typedef enum
{
    RTP_Type = 0,
    CTP_Type

}DCL_TP_TYPE_Enum;

typedef struct
{
    DCL_TP_TYPE_Enum TouchPanelType;
}DCL_TP_TYPE_T;



typedef enum
{
    TP_PARAM_GET = 0,
    TP_PARAM_SET,
    TP_PARAM_RESET
}TP_CTRL_PARAM_TYPE;

typedef struct {
   kal_uint32 ts_debounce_time;
   kal_uint32 touch_panel_cali_check_offset;
   kal_uint32 min_pen_move_offset;
   kal_uint32 hand_writing_max_offset;
   kal_uint32 nonhand_writing_max_offset;
   kal_uint32 max_stroke_move_offset;
   kal_uint32 multiple_point_selection;
   kal_uint32 touch_pressure_threshold_high;
   kal_uint32 touch_pressure_threshold_low;
   kal_uint32 pressure_check_boundary;
   kal_uint32 pressure_shifting_boundary;
   kal_uint32 border_pass_criterion;
   kal_uint32 non_border_pass_criterion;
   kal_uint32 border_range;
   kal_uint32 jitter_circuit_interval;
   kal_uint32 Dump_Screen;
   kal_uint32 reserve_parameter1;
   kal_uint32 reserve_parameter2;
   kal_uint32 reserve_parameter3;
   kal_uint32 height;
   kal_uint32 width;
} TouchPanel_EM_custom_data_struct;

typedef struct
{
    TP_CTRL_PARAM_TYPE type;
    TouchPanel_EM_custom_data_struct* pEmData;
}DCL_CTRL_CUSTOM_PARAM_T;



typedef struct
{
 kal_int32 ts_debounce_time_min;
 kal_int32 ts_debounce_time_max;
kal_int32 touch_panel_cali_check_offset_min;
kal_int32 touch_panel_cali_check_offset_max;
kal_int32 min_pen_move_offset_min;
kal_int32 min_pen_move_offset_max;
kal_int32 hand_writing_max_offset_min;
kal_int32 hand_writing_max_offset_max;
kal_int32 nonhand_writing_max_offset_min;
kal_int32 nonhand_writing_max_offset_max;
kal_int32 max_stroke_move_offset_min;
kal_int32 max_stroke_move_offset_max;
kal_int32 multiple_point_selection_min;
kal_int32 multiple_point_selection_max;
kal_int32 touch_pressure_threshold_high_min;
kal_int32 touch_pressure_threshold_high_max;
kal_int32 pressure_check_boundary_min;
kal_int32 pressure_check_boundary_max;
kal_int32 pressure_shifting_boundary_min;
kal_int32 pressure_shifting_boundary_max;
kal_int32 border_pass_criterion_min;
kal_int32 border_pass_criterion_max;
kal_int32 nonborder_pass_criterion_min;
kal_int32 nonborder_pass_criterion_max;
kal_int32 border_range_min;
kal_int32 border_range_max;
kal_uint32 jitter_circuit_interval_min;
kal_uint32 jitter_circuit_interval_max;
kal_uint32 Dump_Screen_min;
kal_uint32 Dump_Screen_max;
kal_int32 reserve_parameter1_min;
kal_int32 reserve_parameter1_max;
kal_int32 reserve_parameter2_min;
kal_int32 reserve_parameter2_max;
kal_int32 reserve_parameter3_min;
kal_int32 reserve_parameter3_max;
}TP_PARAM_RANGE;


typedef struct
{
    TP_CTRL_PARAM_TYPE type;
    TP_PARAM_RANGE* pEmDataRange;
}DCL_CTRL_CUSTOM_PARAM_RANGE_T;


typedef struct
{
    kal_uint32 x_micronmeter;
    kal_uint32 y_micronmeter;
    kal_uint32 x_coord;
    kal_uint32 y_coord;
}DCL_CTRL_MICRONMETER_COORD_T;





typedef enum {
      DCL_PEN_DOWN,
      DCL_PEN_UP,
      DCL_PEN_MOVE,
      DCL_PEN_LONGTAP,
      DCL_PEN_REPEAT,
      DCL_PEN_ABORT,
      DCL_TP_UNKNOWN_EVENT,
      DCL_STROKE_MOVE,
      DCL_STROKE_STATICAL,
      DCL_STROKE_HOLD,
      DCL_PEN_LONGTAP_HOLD,
      DCL_PEN_REPEAT_HOLD,
      DCL_STROKE_DOWN=0xc0,
      DCL_STROKE_LONGTAP=0x7e,
      DCL_STROKE_UP=0x7f
} DCL_TP_Event_enum;
# 297 "interface/driver/peripheral/dcl_sts.h"
typedef struct
{

   DCL_UINT16 u2Event;

   DCL_UINT16 u2x;
   DCL_UINT16 u2y;
   DCL_UINT16 u2z;
} DCL_TP_SINGLE_EVENT_T;

typedef struct
{
   DCL_UINT16 uModel;
   DCL_UINT16 uPadding;
   DCL_UINT32 u2Time_stamp;
   DCL_TP_SINGLE_EVENT_T rPoints[5];
} STS_CTRL_GET_T;


typedef struct
{
   DCL_BOOLEAN fgEnable;
} STS_CTRL_EN_T;

typedef struct
{
 kal_uint8 ref_count;
 kal_uint16 msg_len;
 kal_bool result;
}tp_cali_done_struct;


typedef struct
{
   DCL_INT16 i2x;
   DCL_INT16 i2y;
} TS_COORD_T;
typedef struct
{
   TS_COORD_T *rpPoint;
   DCL_UINT16 u2Num;
} STS_CTRL_SC_T;


typedef struct
{

   double x_slope;
   double x_offset;

   double y_slope;
   double y_offset;
} TS_CALI_T;
typedef struct
{
   TS_CALI_T rCali;
} STS_CTRL_RC_T;


typedef struct
{
   TS_CALI_T rCali;
} STS_CTRL_SETC_T;


typedef struct
{
   DCL_BOOLEAN fgSkipUnreleaseEnable;
} STS_CTRL_RESET_T;


typedef struct
{
   DCL_UINT32 u4Low;
   DCL_UINT32 u4High;
} STS_CTRL_CSP_T;


typedef struct
{
   DCL_UINT16 u2Pen_offset;
   DCL_UINT16 u2Stroke_offset;
   DCL_UINT16 u2Longtap_pen_offset;
   DCL_UINT16 u2Longtap_stroke_offset;
} STS_CTRL_CMO_T;


typedef struct
{
   TS_COORD_T rMin;
   TS_COORD_T rMax;
} TS_HandArea_T;
typedef struct
{
   TS_HandArea_T *rArea;
   DCL_UINT16 u2n;
   TS_HandArea_T *rExtArea;
} STS_CTRL_CHW_T;


typedef struct
{
   DCL_UINT32 u4Longtap;
   DCL_UINT32 u4Repeat;
   DCL_UINT32 u4Handwriting_longtap;
} STS_CTRL_CTP_T;


typedef struct
{
   DCL_BOOLEAN fgPowerOn;
} STS_CTRL_POWER_ON_T;


typedef enum
{
   DCL_CTP_ACTIVE_MODE,
   DCL_CTP_IDLE_MODE,
   DCL_CTP_SLEEP_MODE,
   DCL_CTP_GESTURE_DETECTION_MODE,
   DCL_CTP_MULTIPLE_POINT_MODE,
   DCL_CTP_FIRMWARE_UPDATE,
   DCL_CTP_FM_ENABLE,
   DCL_CTP_FM_DISABLE
}DCL_CTP_DEVICE_MODE_enum;

typedef struct
{
   DCL_CTP_DEVICE_MODE_enum mode;
} STS_CTRL_SET_DEVICE_T;


typedef enum
{
   DCL_CTP_COMMAND_GET_VERSION,
   DCL_CTP_COMMAND_GET_CONFIG,
   DCL_CTP_COMMAND_LOAD_INT_CONFIG,
   DCL_CTP_COMMAND_LOAD_EXT_CONFIG,
   DCL_CTP_COMMAND_GET_DIFF_DATA,
   DCL_CTP_COMMAND_GET_FW_BUFFER,
   DCL_CTP_COMMAND_DO_FW_UPDATE
}DCL_CTP_CTRL_COMMAND_enum;

typedef struct
{
   DCL_UINT32 u4Command;
   void *pVoid1;
   void *pVoid2;
} STS_CTRL_COMMAND_T;
# 345 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_msdc.h" 1
# 154 "interface/driver/peripheral/dcl_msdc.h"
# 1 "interface/driver/peripheral/dcl.h" 1
# 155 "interface/driver/peripheral/dcl_msdc.h" 2
# 168 "interface/driver/peripheral/dcl_msdc.h"
typedef DCL_UINT32 DCL_SDC_CMD_STATUS;



typedef enum{
 DCL_SDIO_FIX,
 DCL_SDIO_INC
}DCL_SDIO_cmd53_op_enum;


typedef enum{
 DCL_SDIO_FUCN_0=0,
 DCL_SDIO_FUCN_1,
 DCL_SDIO_MAX_FUCN_ID,
 DCL_SDIO_FUCN_MEM=0x1000
}DCL_SDIO_function_id_enum;


typedef enum{
 DCL_BIT_1W = 0x0000,
 DCL_BIT_4W = 0x0002
}DCL_SD_BITWIDTH;

typedef void ( *MSDC_CALLBACK) (void);






typedef DCL_SDC_CMD_STATUS (*DCL_SINGLE_BLK_RD) (DCL_UINT32 data_adrs, DCL_UINT32 *rxbuffer);
typedef DCL_SDC_CMD_STATUS (*DCL_MUL_BLK_RD) (DCL_UINT32 data_adrs, DCL_UINT32 *rxbuffer, DCL_UINT32 num);
typedef DCL_SDC_CMD_STATUS (*DCL_SINGLE_BLK_WR) (DCL_UINT32 address, DCL_UINT32 *txbuffer);
typedef DCL_SDC_CMD_STATUS (*DCL_MUL_BLK_WR) (DCL_UINT32 address, DCL_UINT32 *txbuffer, DCL_UINT32 num);
typedef DCL_SDC_CMD_STATUS (*DCL_SD_INITITALIZE) (void);
typedef DCL_SDC_CMD_STATUS (*DCL_SET_PRE_ERASE_CNT) (DCL_UINT32 num);
typedef DCL_SDC_CMD_STATUS (*DCL_SD_SET_CALLBACK)(MSDC_CALLBACK callback1, MSDC_CALLBACK callback2, MSDC_CALLBACK callback3,MSDC_CALLBACK callback4,MSDC_CALLBACK callback5,MSDC_CALLBACK callback6);
typedef DCL_SDC_CMD_STATUS (*DCL_SET_READ_TEST_FLAG)(kal_uint32 readTestFlag);
typedef DCL_SDC_CMD_STATUS(*DCL_SD_READ_TEST)(void);
typedef DCL_SDC_CMD_STATUS(*DCL_SD_SET_UPLL_CLOCK_TEST)(void);
typedef DCL_SDC_CMD_STATUS(*DCL_SD_ERASE_BLK)(DCL_UINT32 startSector, DCL_UINT32 sectorNum);
typedef DCL_SDC_CMD_STATUS (*DCL_GPD_MUL_BLK_RD) (DCL_UINT32 data_addrs,DCL_UINT32 num, void *data_buf);
typedef DCL_SDC_CMD_STATUS (*DCL_GPD_MUL_BLK_WR) (DCL_UINT32 data_addrs,DCL_UINT32 num, void *data_buf);


typedef struct
{
 DCL_SINGLE_BLK_RD singleBlkRd;
 DCL_MUL_BLK_RD mulBlkRd;
 DCL_SINGLE_BLK_WR singleBlkWr;
 DCL_MUL_BLK_WR mulBlkWr;
 DCL_SD_INITITALIZE sdInititalize;
 DCL_SET_PRE_ERASE_CNT setPreEraseCnt;
 DCL_SD_SET_CALLBACK sdSetCallBack;
 DCL_SET_READ_TEST_FLAG sdSetReadTestFlag;
 DCL_SD_READ_TEST sdSetReadTest;
 DCL_SD_SET_UPLL_CLOCK_TEST sdSetUpllClock;
 DCL_SD_ERASE_BLK eraseBlk;
    DCL_GPD_MUL_BLK_RD GpdMulBlkRd;
    DCL_GPD_MUL_BLK_WR GpdMulBlkWr;
}SDDriver_t;


typedef DCL_BOOLEAN (*DCL_SDIO_REG_WR) (DCL_SDIO_function_id_enum function, DCL_UINT32 addr, DCL_UINT32 data, DCL_SDIO_cmd53_op_enum op);
typedef DCL_BOOLEAN (*DCL_SDIO_REG_WR_ISR) (DCL_SDIO_function_id_enum function, DCL_UINT32 addr, DCL_UINT32 data, DCL_SDIO_cmd53_op_enum op);
typedef DCL_BOOLEAN (*DCL_SDIO_DATA_WR) (DCL_SDIO_function_id_enum function, DCL_UINT32 addr, DCL_UINT8 *data, DCL_SDIO_cmd53_op_enum op, DCL_UINT32 count, DCL_BOOLEAN block);
typedef DCL_BOOLEAN (*DCL_SDIO_REG_RD) (DCL_SDIO_function_id_enum function, DCL_UINT32 addr, DCL_UINT32 *data, DCL_SDIO_cmd53_op_enum op);
typedef DCL_BOOLEAN (*DCL_SDIO_DATA_RD) (DCL_SDIO_function_id_enum function, DCL_UINT32 addr, DCL_UINT8 *data, DCL_SDIO_cmd53_op_enum op, DCL_UINT32 count, DCL_BOOLEAN block);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_CHECK_INTR) (DCL_SDIO_function_id_enum function, DCL_BOOLEAN *pending);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_ENABLE_INTR) (DCL_SDIO_function_id_enum function, DCL_BOOLEAN enable);
typedef DCL_UINT32 (*DCL_SDIO_INIT) (void);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_ABORT) (DCL_SDIO_function_id_enum function);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_SW_RST) (void);
typedef DCL_UINT32 (*DCL_SDIO_QRY_BLOCK_SIZE) (DCL_SDIO_function_id_enum function);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_SET_BLOCK_SIZE) (DCL_SDIO_function_id_enum function, DCL_UINT32 size);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_GET_BLOCK_SIZE) (DCL_SDIO_function_id_enum function, DCL_UINT32 *size);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_ENABLE_IO) (DCL_SDIO_function_id_enum function, DCL_BOOLEAN enable);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_SET_BUS_WIDTH) (DCL_SD_BITWIDTH bus);
typedef void (*DCL_SDIO_GET_CCCR) (DCL_UINT8 *buf, DCL_UINT32 bufLen);
typedef void (*DCL_SDIO_GET_FBR) (DCL_UINT8 *buf, DCL_UINT32 bufLen);

typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_CMD52_READ)(DCL_SDIO_function_id_enum function, DCL_UINT32 addr, DCL_UINT8 *rdata, DCL_UINT8 *r5resp);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_CMD52_WRITE)(DCL_SDIO_function_id_enum function, DCL_UINT32 addr, DCL_UINT8 wdata, DCL_UINT8 *r5resp);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_CMD52_WRITE_READ)(DCL_SDIO_function_id_enum function, DCL_UINT32 addr, DCL_UINT8 wdata, DCL_UINT8 *rdata, DCL_UINT8 *r5resp);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_CMD53_READ)(DCL_SDIO_function_id_enum function, DCL_UINT32 addr, DCL_UINT32 data, DCL_SDIO_cmd53_op_enum op, DCL_UINT32 count, DCL_BOOLEAN block, DCL_UINT8 *r5resp);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_CMD53_WRITE)(DCL_SDIO_function_id_enum function, DCL_UINT32 addr, DCL_UINT32 data, DCL_SDIO_cmd53_op_enum op, DCL_UINT32 count, DCL_BOOLEAN block, DCL_UINT8 *r5resp);
typedef void (*DCL_SDIO_int_registration)(DCL_SDIO_function_id_enum function, void (func)(void));
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_MCUDMA_READ)(DCL_UINT32 *rdata);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_MCUDMA_WRITE)(DCL_UINT32 wdata);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_CLKPADRED_READ)(DCL_UINT32 *rdata);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_CLKPADRED_WRITE)(DCL_UINT32 wdata);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_FORCEMCU_READ)(DCL_UINT32 *rdata);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_FORCEMCU_WRITE)(DCL_UINT32 wdata);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_GETCLK)(DCL_UINT32 *rdata);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_SETCLK)(DCL_UINT32 wdata);



typedef struct
{
 DCL_SDIO_REG_WR regWr;
 DCL_SDIO_REG_WR_ISR regWrInIsr;
 DCL_SDIO_DATA_WR dataWr;
 DCL_SDIO_REG_RD regRd;
 DCL_SDIO_DATA_RD dataRd;
 DCL_SDIO_CHECK_INTR checkIntr;
 DCL_SDIO_ENABLE_INTR enableIntr;
 DCL_SDIO_INIT sdioInititalize;
 DCL_SDIO_ABORT abort;
 DCL_SDIO_SW_RST swRst;
 DCL_SDIO_QRY_BLOCK_SIZE qryBlkSize;
 DCL_SDIO_SET_BLOCK_SIZE setBlkSize;
 DCL_SDIO_GET_BLOCK_SIZE getBlkSize;
 DCL_SDIO_ENABLE_IO enableIO;
 DCL_SDIO_SET_BUS_WIDTH setBusWidth;
 DCL_SDIO_GET_CCCR getCCCR;
 DCL_SDIO_GET_FBR getFBR;

    DCL_SDIO_CMD52_READ cmd52_read;
    DCL_SDIO_CMD52_WRITE cmd52_write;
    DCL_SDIO_CMD52_WRITE_READ cmd52_write_read;
    DCL_SDIO_CMD53_READ cmd53_read;
    DCL_SDIO_CMD53_WRITE cmd53_write;
    DCL_SDIO_int_registration hisr_callback;
    DCL_SDIO_MCUDMA_READ mcudma_read;
    DCL_SDIO_MCUDMA_WRITE mcudma_write;
    DCL_SDIO_CLKPADRED_READ clkpadred_read;
    DCL_SDIO_CLKPADRED_WRITE clkpadred_write;
    DCL_SDIO_FORCEMCU_READ forcemcu_read;
    DCL_SDIO_FORCEMCU_WRITE forcemcu_write;
    DCL_SDIO_GETCLK getclk;
    DCL_SDIO_SETCLK setclk;

}SDIODriver_t;

typedef void (* DCL_MSDC_PDN)(DCL_BOOLEAN pwDown);

typedef struct
{

 DCL_MSDC_PDN modulePDN;
}MSDCDriver_t;
# 367 "interface/driver/peripheral/dcl_msdc.h"
typedef struct
{
 DCL_UINT32 u4Sector;
 DCL_UINT32 u4Sectors;
 void *bufferAddr;
} SD_CTRL_READ_T;


typedef struct
{
 DCL_UINT32 u4Sector;
 DCL_UINT32 u4Sectors;
 void *bufferAddr;
} SD_CTRL_WRITE_T;


typedef struct
{
 DCL_UINT32 u4Sector;
 DCL_UINT32 u4Sectors;
 void *bufferHead;
 void *bufferTail;
} SD_CTRL_GPD_READ_T;


typedef struct
{
 DCL_UINT32 u4Sector;
 DCL_UINT32 u4Sectors;
 void *bufferHead;
 void *bufferTail;
} SD_CTRL_GPD_WRITE_T;
typedef struct
{
    DCL_UINT32 max_bd_num;
} SD_CTRL_MAX_BD_STRUCT_NUM_T;


typedef struct
{
 DCL_UINT32 u4Sector;
 DCL_UINT32 u4Size;
 void *bufferAddr;
} SD_CTRL_READ_ODD_T;


typedef struct
{
 DCL_UINT32 u4Sector;
 DCL_UINT32 u4Size;
 void *bufferAddr;
} SD_CTRL_WRITE_ODD_T;


typedef struct
{
 DCL_UINT32 u4TargetInterface;
} SD_CTRL_ANALOG_SWITCH_T;


typedef struct
{
 DCL_BOOLEAN gHighCapacityCard;
 DCL_UINT64 pu8Capacity;
} SD_CTRL_GET_CAPACITY_T;


typedef struct
{
 DCL_BOOLEAN fgInited;
} SD_CTRL_INITED_T;


typedef struct
{
 DCL_BOOLEAN fgPresent;
} SD_CTRL_EXISTENCE_T;


typedef struct
{
 DCL_BOOLEAN fgReadOnly;
} SD_CTRL_WRITE_PROTECTION_T;


typedef struct
{
 DCL_BOOLEAN fgEverPLugOut;
} SD_CTRL_QUERY_EVER_PLUGOUT_T;


typedef struct
{
 DCL_BOOLEAN fgIsItTrue;
} SD_CTRL_FORCE_SINGLE_LINE_T;


typedef struct
{
 DCL_BOOLEAN fgIsCACHEABLE;
} SD_CTRL_CACHEABLE_BUFFER_T;

typedef struct
{
 MSDC_CALLBACK callback1;
 MSDC_CALLBACK callback2;
 MSDC_CALLBACK callback3;
 MSDC_CALLBACK callback4;
 MSDC_CALLBACK callback5;
 MSDC_CALLBACK callback6;
}SD_CTRL_CALLBACK_T;

typedef struct
{
 DCL_UINT32 readTestFlag;
}SD_CTRL_SET_READ_TEST_FLAG_T;

typedef struct
{
 DCL_UINT32 startSector;
 DCL_UINT32 sectorNum;
}SD_CTRL_FLUSH_T;

typedef struct
{
 DCL_BOOLEAN enable;
}SD_CTRL_FAST_FORMAT_T;

typedef struct
{
 DCL_BOOLEAN changed;
}SD_CTRL_MEDIA_CHANGED_T;
# 580 "interface/driver/peripheral/dcl_msdc.h"
typedef struct
{
 DCL_SDIO_function_id_enum function;
 DCL_UINT32 addr;
 DCL_UINT32 data;
 DCL_SDIO_cmd53_op_enum op;
} SDIO_CTRL_REG_RW_T;


typedef struct{
 DCL_SDIO_function_id_enum function;
 DCL_BOOLEAN block;
 DCL_SDIO_cmd53_op_enum op;
 DCL_UINT16 count;
 DCL_UINT32 addr;
 DCL_UINT32 buffer;
}SDIO_CTRL_DAT_RW_T;


typedef struct{
 DCL_SDIO_function_id_enum function;
 DCL_UINT32 size;
}SDIO_CTRL_SET_BLK_SIZE_T;


typedef struct{
 DCL_SDIO_function_id_enum function;
 DCL_BOOLEAN *pending;
}SDIO_CTRL_CHECK_INTR_T;


typedef struct{
 DCL_SDIO_function_id_enum function;
 DCL_BOOLEAN enable;
}SDIO_CTRL_ENABLE_T;


typedef struct{
 DCL_UINT8 *buffer;
 DCL_UINT32 bufferLength;
}SDIO_CTRL_GET_INFO_T;

typedef struct{

 kal_uint8 rw;
 kal_uint8 func;
 kal_uint8 rdata;
 kal_uint8 wdata;
 kal_bool raw;
 kal_bool stop;
 kal_uint32 addr;
    kal_uint8 r5_resp;
}SDIO_CTRL_CMD52_T;

typedef struct{

 kal_uint8 rw;
 kal_uint8 func;
    kal_uint8 r5_resp;

    kal_uint8 op;
    kal_bool block;
    kal_uint16 count;
    kal_uint32 addr;
    kal_uint32 buffer;
}SDIO_CTRL_CMD53_T;

typedef struct{
    kal_uint32 data;
}SDIO_CTRL_CMD_REG_T;
# 348 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h" 1
# 168 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
# 1 "interface/driver/peripheral/dcl.h" 1
# 169 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h" 2
# 275 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
typedef enum
{
 USB_PHY_OWNER_USB = 0,
 USB_PHY_OWNER_BMT,
 USB_PHY_OWNER_MAX = 31
}USB_PHY_OWNER;


typedef enum
{
 USB_DMA0_TYPE = 0,
 USB_DMA1_TYPE,
 USB_DMA2_TYPE
} USB_DMA_TYPE;


typedef enum
{
 USB_TEST_MODE_TYPE_NONE = 0,
 USB_TEST_MODE_TYPE_J,
 USB_TEST_MODE_TYPE_K,
 USB_TEST_MODE_TYPE_SE0_NAK,
 USB_TEST_MODE_TYPE_PACKET
}USB_TEST_MODE_TYPE;



typedef enum
{
 USB_EP_TX_DIR = 0,
 USB_EP_RX_DIR
}USB_EP_DIRECTION;



typedef enum
{
 USB_ENDPT_CTRL = 0,
 USB_ENDPT_BULK,
 USB_ENDPT_INTR,
 USB_ENDPT_ISO
}USB_ENDPT_TXFER_TYPE;



typedef enum
{
 USB_EP_USE_NO_DMA = 0,
 USB_EP_USE_ONLY_DMA,
 USB_EP_USE_DMA_ON_DEMAND
}USB_ENDPT_DMA_USAGE;



typedef enum
{
 USB_EP_STATE_DISABLE = 0,
 USB_EP_STATE_FIFO,
 USB_EP_STATE_DMA
}USB_EP_STATE;




typedef enum
{
 USB_EP0_DRV_STATE_READ_END,
 USB_EP0_DRV_STATE_WRITE_RDY,
 USB_EP0_DRV_STATE_TRANSACTION_END,
 USB_EP0_DRV_STATE_CLEAR_SENT_STALL
}USB_EP0_DRV_STATE;



typedef enum
{
 USB_DRV_HDLR_RESET,
 USB_DRV_HDLR_SUSPEND,
 USB_DRV_HDLR_RESUME,
 USB_DRV_HDLR_EP0,
 USB_DRV_HDLR_EP_TX,
 USB_DRV_HDLR_EP_RX
}USB_DRV_HDLR_TYPE;




typedef enum
{
 USB_SET_ADDR_DATA,
 USB_SET_ADDR_STATUS
}USB_SET_ADDR_STATE;



typedef void (*usb_drv_intr_handler_ptr)(void);

typedef void (*usb_dma_callback)(void);
typedef void (*usb_dmaq_callback)(DCL_UINT32 u4_port);






typedef enum
{
 DCL_USB_PHY_OWNER_USB = 0,
 DCL_USB_PHY_OWNER_BMT,
 DCL_USB_PHY_OWNER_MAX = 31
}DCL_USB_PHY_OWNER;


typedef enum
{
 DCL_USB_DMA0_TYPE = 0,
 DCL_USB_DMA1_TYPE,
 DCL_USB_DMA2_TYPE
}DCL_USB_DMA_TYPE;


typedef enum
{
 DCL_USB_TEST_MODE_TYPE_NONE = 0,
 DCL_USB_TEST_MODE_TYPE_J,
 DCL_USB_TEST_MODE_TYPE_K,
 DCL_USB_TEST_MODE_TYPE_SE0_NAK,
 DCL_USB_TEST_MODE_TYPE_PACKET
}DCL_USB_TEST_MODE_TYPE;



typedef enum
{
 DCL_USB_PDN_OWNER_USB = 0,
 DCL_USB_PDN_OWNER_IRDA,

}DCL_USB_PDN_OWNER;


typedef enum
{
 DCL_USB_EP_TX_DIR = 0,
 DCL_USB_EP_RX_DIR
}DCL_USB_EP_DIRECTION;



typedef enum
{
 DCL_USB_ENDPT_CTRL = 0,
 DCL_USB_ENDPT_BULK,
 DCL_USB_ENDPT_INTR,
 DCL_USB_ENDPT_ISO
}DCL_USB_ENDPT_TXFER_TYPE;




typedef enum
{
 DCL_USB_EP_USE_NO_DMA = 0,
 DCL_USB_EP_USE_ONLY_DMA,
 DCL_USB_EP_USE_DMA_ON_DEMAND
}DCL_USB_ENDPT_DMA_USAGE;



typedef enum
{
 DCL_USB_EP_STATE_DISABLE = 0,
 DCL_USB_EP_STATE_FIFO,
 DCL_USB_EP_STATE_DMA
}DCL_USB_EP_STATE;



typedef enum
{
 DCL_USB_EP0_DRV_STATE_READ_END,
 DCL_USB_EP0_DRV_STATE_WRITE_RDY,
 DCL_USB_EP0_DRV_STATE_TRANSACTION_END,
 DCL_USB_EP0_DRV_STATE_CLEAR_SENT_STALL
}DCL_USB_EP0_DRV_STATE;



typedef enum
{
 DCL_USB_DRV_HDLR_RESET,
 DCL_USB_DRV_HDLR_SUSPEND,
 DCL_USB_DRV_HDLR_RESUME,
 DCL_USB_DRV_HDLR_EP0,
 DCL_USB_DRV_HDLR_EP_TX,
 DCL_USB_DRV_HDLR_EP_RX
}DCL_USB_DRV_HDLR_TYPE;




typedef enum
{
 DCL_USB_SET_ADDR_DATA,
 DCL_USB_SET_ADDR_STATUS
}DCL_USB_SET_ADDR_STATE;


typedef enum
{
 DCL_USB_TOTAL_FIFO_SIZE_4096 = 0,
 DCL_USB_TOTAL_FIFO_SIZE_2304,
 DCL_USB_TOTAL_FIFO_SIZE_NONE
}DCL_USB_TOTAL_FIFO_SIZE;


typedef enum
{
 DCL_USB_IP_V3 = 0,
 DCL_USB_IP_V1,
 DCL_USB_IP_V1_PLUS
}DCL_USB_IP_VERSION;


typedef void (*DCL_USB_FUNC_TYPE_0)(void);
# 643 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_ENDPT_TXFER_TYPE type;
 DCL_USB_EP_DIRECTION direction;
}USB_DRV_CTRL_EP_COMMON_FUNC_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_DRV_HDLR_TYPE type;
 DCL_USB_FUNC_TYPE_0 hdlr;
}USB_DRV_CTRL_REGISTER_DRV_INFO_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_EP_DIRECTION direction;
 DCL_BOOLEAN fg_result;
}USB_DRV_CTRL_EP_CTRL_FUNC_1_T;



typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT8 u1addr;
 DCL_USB_SET_ADDR_STATE state;
}USB_DRV_CTRL_USB_SET_ADDR_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_UINT16 u2data_size;
 DCL_USB_ENDPT_TXFER_TYPE type;
 DCL_BOOLEAN fgdouble_fifo;
}USB_DRV_CTRL_USB_EP_INIT_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_ENDPT_TXFER_TYPE ep_type;
 DCL_USB_ENDPT_DMA_USAGE dma_usage_type;
 DCL_BOOLEAN fgis_flush;
 DCL_BOOLEAN fgis_ft_mode;
}USB_DRV_CTRL_EP_ENABLE_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_ENDPT_DMA_USAGE dma_usage_type;
}USB_DRV_CTRL_EP_DISABLE_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_ENDPT_TXFER_TYPE ep_type;
 DCL_BOOLEAN fg_is_switch_to_dma;
}USB_DRV_CTRL_EP_CONFIG_TYPE_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_EP_STATE result;
}USB_DRV_CTRL_EP_STATE_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_USB_TOTAL_FIFO_SIZE fifo_size;
}USB_DRV_CTRL_GET_FIFO_SIZE_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_USB_IP_VERSION ip_version;
}USB_DRV_CTRL_GET_IP_VERSION_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_ENDPT_TXFER_TYPE ep_type;
 DCL_BOOLEAN fg_reset_toggle;
}USB_DRV_CTRL_EP_CTRL_FUNC_2_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_UINT32 u4result;
}USB_DRV_CTRL_EP_CTRL_FUNC_3_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_ENDPT_TXFER_TYPE ep_type;
 DCL_BOOLEAN fgresult;
}USB_DRV_CTRL_EP_CTRL_FUNC_4_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_EP_DIRECTION direction;
 DCL_UINT32 u4count;
}USB_DRV_CTRL_EP_CTRL_FUNC_6_T;


typedef struct
{
 DCL_UINT8 u1_ip_port;
 DCL_BOOLEAN fg_is_ft_mode;
}USB_DRV_CTRL_EP_CTRL_FUNC_7_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_UINT16 u2nBytes;
 void *paddr;
 DCL_BOOLEAN fg_force_one_byte_access;
}USB_DRV_CTRL_EP_FIFO_RW_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_EP_DIRECTION direction;
 DCL_BOOLEAN fgen;
}USB_DRV_CTRL_EP_STALL_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_BOOLEAN fg_transaction_end;
 DCL_BOOLEAN fg_sent_stall;
}USB_DRV_CTRL_GET_EP_STATUS_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_USB_EP0_DRV_STATE state;
 DCL_BOOLEAN fgstall;
 DCL_BOOLEAN fgend;
}USB_DRV_CTRL_UPDATE_EPSTATE_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_tx_num;
 DCL_UINT32 u4ep_rx_num;
 DCL_USB_EP_DIRECTION direction;
 DCL_BOOLEAN fgsame_chan;
}USB_DRV_CTRL_DMA_FUNC_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT8 u1dma_chan;
 DCL_BOOLEAN fgenable;
 DCL_UINT8 u1timer_ticks;
}USB_DRV_CTRL_DMA_TIMER_FUNC_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT8 u1dma_chan;
 DCL_BOOLEAN fgresult;
}USB_DRV_CTRL_DMA_CTRL_FUNC_1_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_EP_DIRECTION direction;
 DCL_UINT8 u1chan_num;
 DCL_BOOLEAN fgsame_chan;
}USB_DRV_CTRL_DMA_CTRL_FUNC_2_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_EP_DIRECTION direction;
 DCL_USB_ENDPT_TXFER_TYPE ep_type;
 DCL_UINT32 u4addr;
 DCL_UINT32 u4length;
 DCL_USB_FUNC_TYPE_0 callback;
 DCL_BOOLEAN fgcallback_upd_run;
 DCL_BOOLEAN fgknown_size;
 DCL_USB_DMA_TYPE dma_type;
}USB_DRV_CTRL_DMA_SETUP_FUNC_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_EP_DIRECTION direction;
 DCL_BOOLEAN fgstatus;
}USB_DRV_CTRL_DMA_STATUS_FUNC_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_USB_TEST_MODE_TYPE test_selector;
}USB_DRV_CTRL_USB_TEST_MODE_FUNC_T;



typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_USB_PHY_OWNER owner;
}USB_DRV_CTRL_PHY_FUNC_T;

typedef struct
{
  DCL_BOOLEAN is_cdcacm;
} USB_DRV_CTRL_COM_TYPE_QUERY_T;


typedef struct
{
  DCL_BOOLEAN enable;
  DCL_UINT32 u4OwenrId;
  DCL_BOOLEAN u2Retresult;
  DCL_UINT8 ptransfer_type;
} USB_DRV_CTRL_COM_HIGH_SPEED_IF, USB_DRV_CTRL_COM_DIRECT_PATH_IF;


typedef struct
{
 DCL_UINT16 u2Length;
 DCL_UINT32 u4OwenrId;
 DCL_UINT16 u2RetSize;
 DCL_UINT8* puBuffaddr;
 DCL_UINT8 ptransfer_type;
} USB_DRV_CTRL_COM_SEND_DATA;



typedef struct
{
 DCL_UINT16 u2Length;
 DCL_UINT32 u4OwenrId;
 DCL_UINT16 u2RetSize;
 DCL_UINT8* puBuffaddr;
 DCL_UINT8 umode;
 DCL_UINT8 uescape_char;
 DCL_UINT8 ptransfer_type;
} USB_DRV_CTRL_COM_SEND_ISR_DATA;


typedef struct
{
 DCL_UINT16 u2Length;
 DCL_UINT32 u4OwenrId;
 DCL_UINT16 u2RetSize;
 DCL_UINT8** puBuffaddr;
 DCL_UINT8* pustatus;
 DCL_UINT8 ptype;
 DCL_UINT8 ptransfer_type;
} USB_DRV_CTRL_COM_GET_DATA;

typedef struct
{
 DCL_UINT32 u4OwenrId;
} USB_DRV_CTRL_COM_PUSH_DATA;



typedef struct
{
 DCL_BOOLEAN u2Retresult;
} USB_DRV_CTRL_COM_RESPONSE;

typedef struct
{
 DCL_BOOLEAN u2set;
 DCL_BOOLEAN u2Retresult;
} USB_DRV_CTRL_SET;

typedef struct
{
 DCL_BOOLEAN fgbset;
 DCL_UINT32 u4OwenrId;
} USB_DRV_CTRL_COM_RB_THRESHOLD_EN;

typedef struct
{
  DCL_UINT8 u1ftPort;
} USB_DRV_CTRL_COM_FT_PORT;

typedef struct
{
  DCL_UINT32 u4info;
} USB_DRV_CTRL_COM_INFO;

typedef struct
{
 DCL_UINT8 uindex;
 DCL_UINT32 u4max_size;
} USB_VIDEO_CTRL_FUNC1_T;

typedef struct
{
 DCL_UINT8* uaddr;
 DCL_UINT32 u4size;
 DCL_UINT32 u4time;
 DCL_UINT32 u4size_type;
} USB_VIDEO_CTRL_FUNC2_T;

typedef struct
{
 DCL_UINT8* u2Retresult;
} USB_VIDEO_CTRL_FUNC3_T;

typedef struct
{
 DCL_UINT16* u2String;
} USB_IMAGE_CTRL_FUNC1_T;
# 351 "interface/driver/peripheral/dcl.h" 2
# 362 "interface/driver/peripheral/dcl.h"
# 1 "interface/driver/peripheral/dcl_sim.h" 1
# 79 "interface/driver/peripheral/dcl_sim.h"
typedef DCL_UINT16 DCL_SIM_STATUS_WORD;

typedef enum
{
 DCL_ME_UNKNOW =0,
 DCL_ME_18V_30V,
 DCL_ME_30V_ONLY,
 DCL_ME_18V_ONLY
} DCL_SIM_ENV;

typedef enum{
 DCL_USIM_NO_ERROR = 0,


 DCL_USIM_WAITING_EVENT = 1,
 DCL_USIM_BLOCK_REC = 2,
 DCL_USIM_POWER_OFF = 3,
 DCL_USIM_ATR_REC = 4,
 DCL_USIM_S_BLOCK_REC = 5,


 DCL_USIM_NO_INSERT = -1,
 DCL_USIM_VOLT_NOT_SUPPORT = -2,
 DCL_USIM_NO_ATR = -3,
 DCL_USIM_TS_INVALID = -4,
 DCL_USIM_ATR_ERR = -5,
 DCL_USIM_INVALID_ATR = -6,
 DCL_USIM_PTS_FAIL = -7,
 DCL_USIM_RX_INVALID = -8,
 DCL_USIM_BWT_TIMEOUT = -9,
 DCL_USIM_DATA_ABORT = -10,
 DCL_USIM_DEACTIVATED = -11,
 DCL_USIM_S_BLOCK_FAIL = -12,
 DCL_USIM_INVALID_WRST = -13,
 DCL_USIM_GPT_TIMEOUT = -14
}DCL_SIM_STATUS;


typedef enum{
 DCL_UNKNOWN_POWER_CLASS = 0,
 DCL_CLASS_A_50V = 1,
 DCL_CLASS_B_30V = 2,
 DCL_CLASS_AB = 3,
 DCL_CLASS_C_18V = 4,
 DCL_ClASS_BC = 6,
 DCL_CLASS_ABC = 7
}DCL_SIM_POWER;

typedef DCL_UINT32 DCL_SIM_HW_CB;


typedef enum
{
 DCL_SIM_PROTOCOL,
 DCL_USIM_PROTOCOL
}DCL_SIM_APP_PROTOCOL;




typedef enum
{
 DCL_T0_PROTOCOL,
 DCL_T1_PROTOCOL,
 DCL_UNKNOWN_PROTOCOL
}DCL_SIM_PHY_PROTOCOL;


typedef enum{
 DCL_CLOCK_STOP_NOT_SUPPORT = 0x0,
 DCL_CLOCK_STOP_LOW = 0x40,
 DCL_CLOCK_STOP_HIGH = 0x80,
 DCL_CLOCK_STOP_ANY = 0xc0,
 DCL_CLOCK_STOP_MSK = 0xc0,
 DCL_CLOCK_STOP_UNKONW = 0x0f
}DCL_SIM_CLK_STOP;


typedef enum{
 DCL_SPEED_372,
 DCL_SPEED_64,
 DCL_SPEED_32,
 DCL_SPEED_16
}DCL_SIM_CARD_SPEED;


typedef struct{
 DCL_SIM_POWER power;
 DCL_SIM_CARD_SPEED speed;
 DCL_SIM_CLK_STOP clock_stop;
 DCL_SIM_APP_PROTOCOL app_proto;
 DCL_SIM_PHY_PROTOCOL phy_proto;
 kal_bool T0_support;
 kal_bool T1_support;
 kal_uint8 hist_index;
 kal_uint8 *ATR;
       kal_bool TAiExist;
    kal_uint8 ATR_length;
    kal_bool isSW6263;
    kal_uint8 TB15;
}DCL_SIM_INFO;
# 188 "interface/driver/peripheral/dcl_sim.h"
typedef DCL_SIM_STATUS (* DCL_SIM_RST)(DCL_SIM_POWER ExpectVolt, DCL_SIM_POWER *ResultVolt, kal_bool warm, DCL_SIM_HW_CB handle);

typedef DCL_SIM_STATUS_WORD (* DCL_SIM_CMD)(kal_uint8 *txData,kal_uint32 *txSize,kal_uint8 *rxData, kal_uint32 *rxSize, DCL_SIM_HW_CB handle);

typedef void (* DCL_SIM_PWOFF)(DCL_SIM_HW_CB handle);

typedef void (* DCL_SIM_GET_CARD_INFO)(DCL_SIM_INFO *info, DCL_SIM_HW_CB handle);

typedef void (* DCL_SIM_SET_MAX_SPEED)(DCL_SIM_CARD_SPEED speed, DCL_SIM_HW_CB handle);

typedef void (* DCL_SIM_SET_PREFER_PROTOCOL)(DCL_SIM_PHY_PROTOCOL T, DCL_SIM_HW_CB handle);

typedef kal_bool (* DCL_SIM_SET_CLK_STOP_MODE)(DCL_SIM_CLK_STOP mode, DCL_SIM_HW_CB handle);

typedef void (* DCL_SIM_TOUT_TEST)(kal_uint32 toutValue, DCL_SIM_HW_CB handle);

typedef kal_uint32 (* DCL_SIM_ASSIGN_LOGICAL)(kal_uint32 logicalNumber);

typedef DCL_SIM_CARD_SPEED (*DCL_SIM_GAT_CARD_SPEED)(DCL_SIM_HW_CB handle);

typedef DCL_BOOLEAN (*DCL_SIM_QUERY_GET_9000_WHEN_SELECT)(DCL_SIM_HW_CB handle);


typedef void (*DCL_SIM_PLUG_OUT_CALLBACK)(kal_uint32 simIf);

typedef void (*DCL_SIM_PLUG_IN_CALLBACK)(kal_uint32 simIf);




typedef struct
{
 DCL_SIM_RST rst;
 DCL_SIM_CMD cmd;
 DCL_SIM_PWOFF pwOff;
 DCL_SIM_GET_CARD_INFO getCardInfo;
 DCL_SIM_SET_MAX_SPEED setSpeed;
 DCL_SIM_SET_PREFER_PROTOCOL setPreferT;
 DCL_SIM_SET_CLK_STOP_MODE setClockStopMode;
 DCL_SIM_TOUT_TEST toutTest;
 DCL_SIM_ASSIGN_LOGICAL assignLogical;
 DCL_SIM_GAT_CARD_SPEED getCardSpeed;
 DCL_SIM_QUERY_GET_9000_WHEN_SELECT query9000WhenSelect;
}DCL_SIMDriver_t;


typedef enum
{
 SIM_CONFIG_AP_TYPE_PHONE1,
 SIM_CONFIG_AP_TYPE_PHONE2,
 SIM_CONFIG_AP_TYPE_CMMB_SMD,
 SIM_CONFIG_AP_TYPE_PHONE3,
 SIM_CONFIG_AP_TYPE_PHONE4
} DCL_SIM_CONFIG_AP_TYPE;


typedef struct
{
 DCL_SIM_CONFIG_AP_TYPE apType;
    DCL_SIM_PLUG_IN_CALLBACK hotPlugInCb;
 DCL_SIM_PLUG_OUT_CALLBACK hotPlugOutCb;
} SIM_CONFIG_T;
# 299 "interface/driver/peripheral/dcl_sim.h"
typedef struct
{
 DCL_SIM_POWER ExpectVolt;
 DCL_SIM_POWER *ResultVolt;
 kal_bool warm;
 DCL_SIM_STATUS rstResult;
} SIM_CTRL_RST_T;


typedef struct
{
 kal_uint8 *txData;
 kal_uint32 *txSize;
 kal_uint8 *rxData;
 kal_uint32 *rxSize;
 kal_uint16 *statusWord;
} SIM_CTRL_CMD_T;




typedef struct
{
 DCL_SIM_INFO *info;
} SIM_CTRL_GET_CARD_INFO_T;


typedef struct
{
 DCL_SIM_CARD_SPEED speed;
} SIM_CTRL_SET_MAX_SPEED_T;


typedef struct
{
 DCL_SIM_PHY_PROTOCOL T;
} SIM_CTRL_SET_PREFER_PROTOCOL_T;


typedef struct
{
 DCL_SIM_CLK_STOP mode;
} SIM_CTRL_SET_CLK_STOP_MODE_T;


typedef struct
{
 DCL_UINT32 toutValue;
} SIM_CTRL_TOUT_TEST_T;


typedef struct
{
 DCL_SIM_CARD_SPEED *speed;
} SIM_CTRL_GET_SPEED_T;


typedef struct
{
 DCL_BOOLEAN *got9000;
} SIM_CTRL_QUERY_9000_T;


typedef struct
{
 DCL_BOOLEAN rlt;
} SIM_CTRL_SET_SLT_RLT_T;
# 363 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_pmu.h" 1
# 342 "interface/driver/peripheral/dcl_pmu.h"
typedef enum
{
 VA12,
 VRTC,
 VMIC,
 VAUDN,
 VAUDP,
 VRF28,
 VRF=VRF28,
 VRF28_1=VRF28,
 VRF28_2,
 VTCXO,
 VTCXO_1=VTCXO,
 VTCXO_2,
 VA25,
 VCAMA,
 VCAMD,
 VCAM_IO,
 VCAM_AF,
 VIO28,
 VUSB,
 VBT,
 VSIM,
 VSIM1 = VSIM,
 VSIM2,
 VIBR,
 VMC,
 VMC1,
 VMCH,
 VCAMA2,
 VCAMD2,
 VFM,
 VM12,
 VM12_1,
 VM12_2,
 VM12_INT,
 VCORE,
 VCORE2,
 VIO18,
 VPA_SW,
 VPROC,
 VRF18,
 VRF18_1=VRF18,
 VRF18_2,
 VRF1,
 VRF2,
 VA28,
 VM,
 VSF,
 VWIFI2V8,
 VWIFI3V3,
 V3GTX,
 V3GRX,
 VGP,
 VGP2,
 VSDIO,
 VDIG,
 VBUS,
 VA1,
 VA2,
 VMIPI,
 VBACKUP,
 PMU_LDO_BUCK_MAX
}PMU_LDO_BUCK_LIST_ENUM;


typedef enum
{
 VPA,
 VPA1=VPA,
 PMU_VPA_MAX
}PMU_VPA_LIST_ENUM;


typedef enum
{
 PMIC_VRF18,
 PMIC_VRF18_1 = PMIC_VRF18,
 PMIC_VRF18_2,
 PMIC_VRF18_MAX
}PMIC_VRF18_LIST_ENUM;


typedef enum
{
 PMIC_VSIM,
 PMIC_VSIM1 = PMIC_VSIM,
 PMIC_VSIM2,
 PMIC_VSIM_MAX
}PMIC_VSIM_LIST_ENUM;


typedef enum
{
 KPLED,
 PMU_KPLED_MAX
}PMU_KPLED_LIST_ENUM;


typedef enum
{
 CHR,
 PMU_CHR_MAX
}PMU_CHR_LIST_ENUM;


typedef enum
{
 STRUP,
 PMU_STRUP_MAX
}PMU_STRUP_LIST_ENUM;


typedef enum
{
 ISINK0,
 ISINK1,
 ISINK2,
 ISINK3,
 ISINK4,
    ISINK5,
 PMU_ISINK_MAX
}PMU_ISINK_LIST_ENUM;


typedef enum
{
 BOOST,
 BOOST1=BOOST,
 BOOST2,
 PMU_BOOST_MAX
}PMU_BOOST_LIST_ENUM;


typedef enum
{
 SPK,
 PMU_SPK_MAX
}PMU_SPK_LIST_ENUM;


typedef enum
{
 LPOSC,
 PMU_LPOSC_MAX
}PMU_LPOSC_LIST_ENUM;


typedef enum
{
 PMU_VOLT_00_000000_V = 0,
 PMU_VOLT_00_100000_V = 100000,
 PMU_VOLT_00_200000_V = 200000,
 PMU_VOLT_00_300000_V = 300000,
 PMU_VOLT_00_400000_V = 400000,
 PMU_VOLT_00_500000_V = 500000,
 PMU_VOLT_00_550000_V = 550000,
 PMU_VOLT_00_600000_V = 600000,
 PMU_VOLT_00_650000_V = 650000,
 PMU_VOLT_00_700000_V = 700000,
 PMU_VOLT_00_725000_V = 725000,
 PMU_VOLT_00_750000_V = 750000,
 PMU_VOLT_00_775000_V = 775000,
 PMU_VOLT_00_800000_V = 800000,
 PMU_VOLT_00_825000_V = 825000,
 PMU_VOLT_00_850000_V = 850000,
 PMU_VOLT_00_875000_V = 875000,
 PMU_VOLT_00_900000_V = 900000,
 PMU_VOLT_00_925000_V = 925000,
 PMU_VOLT_00_950000_V = 950000,
 PMU_VOLT_00_975000_V = 975000,
 PMU_VOLT_01_000000_V = 1000000,
 PMU_VOLT_01_025000_V = 1025000,
 PMU_VOLT_01_050000_V = 1050000,
        PMU_VOLT_01_060000_V = 1060000,
 PMU_VOLT_01_075000_V = 1075000,
 PMU_VOLT_01_100000_V = 1100000,
 PMU_VOLT_01_125000_V = 1125000,
 PMU_VOLT_01_150000_V = 1150000,
 PMU_VOLT_01_175000_V = 1175000,
 PMU_VOLT_01_200000_V = 1200000,
 PMU_VOLT_01_225000_V = 1225000,
 PMU_VOLT_01_250000_V = 1250000,
 PMU_VOLT_01_275000_V = 1275000,
 PMU_VOLT_01_300000_V = 1300000,
 PMU_VOLT_01_325000_V = 1325000,
 PMU_VOLT_01_350000_V = 1350000,
 PMU_VOLT_01_375000_V = 1375000,
 PMU_VOLT_01_400000_V = 1400000,
 PMU_VOLT_01_425000_V = 1425000,
 PMU_VOLT_01_450000_V = 1450000,
 PMU_VOLT_01_475000_V = 1475000,
 PMU_VOLT_01_500000_V = 1500000,
 PMU_VOLT_01_520000_V = 1520000,
 PMU_VOLT_01_525000_V = 1525000,
 PMU_VOLT_01_540000_V = 1540000,
 PMU_VOLT_01_550000_V = 1550000,
 PMU_VOLT_01_560000_V = 1560000,
 PMU_VOLT_01_575000_V = 1575000,
 PMU_VOLT_01_580000_V = 1580000,
 PMU_VOLT_01_600000_V = 1600000,
 PMU_VOLT_01_620000_V = 1620000,
 PMU_VOLT_01_625000_V = 1625000,
 PMU_VOLT_01_640000_V = 1640000,
 PMU_VOLT_01_650000_V = 1650000,
 PMU_VOLT_01_660000_V = 1660000,
 PMU_VOLT_01_675000_V = 1675000,
 PMU_VOLT_01_680000_V = 1680000,
 PMU_VOLT_01_700000_V = 1700000,
 PMU_VOLT_01_720000_V = 1720000,
 PMU_VOLT_01_725000_V = 1725000,
 PMU_VOLT_01_740000_V = 1740000,
 PMU_VOLT_01_750000_V = 1750000,
 PMU_VOLT_01_760000_V = 1760000,
 PMU_VOLT_01_775000_V = 1775000,
 PMU_VOLT_01_780000_V = 1780000,
 PMU_VOLT_01_800000_V = 1800000,
 PMU_VOLT_01_820000_V = 1820000,
 PMU_VOLT_01_825000_V = 1825000,
 PMU_VOLT_01_840000_V = 1840000,
 PMU_VOLT_01_850000_V = 1850000,
 PMU_VOLT_01_860000_V = 1860000,
 PMU_VOLT_01_875000_V = 1875000,
 PMU_VOLT_01_880000_V = 1880000,
 PMU_VOLT_01_900000_V = 1900000,
 PMU_VOLT_01_920000_V = 1920000,
 PMU_VOLT_01_925000_V = 1925000,
 PMU_VOLT_01_940000_V = 1940000,
 PMU_VOLT_01_950000_V = 1950000,
 PMU_VOLT_01_960000_V = 1960000,
 PMU_VOLT_01_975000_V = 1975000,
 PMU_VOLT_01_980000_V = 1980000,
 PMU_VOLT_02_000000_V = 2000000,
 PMU_VOLT_02_020000_V = 2020000,
 PMU_VOLT_02_025000_V = 2025000,
 PMU_VOLT_02_040000_V = 2040000,
 PMU_VOLT_02_050000_V = 2050000,
 PMU_VOLT_02_060000_V = 2060000,
 PMU_VOLT_02_075000_V = 2075000,
 PMU_VOLT_02_080000_V = 2080000,
 PMU_VOLT_02_100000_V = 2100000,
 PMU_VOLT_02_120000_V = 2120000,
 PMU_VOLT_02_125000_V = 2125000,
 PMU_VOLT_02_140000_V = 2140000,
 PMU_VOLT_02_150000_V = 2150000,
 PMU_VOLT_02_175000_V = 2175000,
 PMU_VOLT_02_200000_V = 2200000,
 PMU_VOLT_02_225000_V = 2225000,
 PMU_VOLT_02_250000_V = 2250000,
 PMU_VOLT_02_275000_V = 2275000,
 PMU_VOLT_02_300000_V = 2300000,
 PMU_VOLT_02_350000_V = 2350000,
 PMU_VOLT_02_425000_V = 2425000,
 PMU_VOLT_02_400000_V = 2400000,
 PMU_VOLT_02_450000_V = 2450000,
 PMU_VOLT_02_500000_V = 2500000,
 PMU_VOLT_02_550000_V = 2550000,
 PMU_VOLT_02_575000_V = 2575000,
 PMU_VOLT_02_600000_V = 2600000,
 PMU_VOLT_02_650000_V = 2650000,
 PMU_VOLT_02_700000_V = 2700000,
 PMU_VOLT_02_725000_V = 2725000,
 PMU_VOLT_02_750000_V = 2750000,
 PMU_VOLT_02_760000_V = 2760000,
 PMU_VOLT_02_800000_V = 2800000,
 PMU_VOLT_02_850000_V = 2850000,
 PMU_VOLT_02_875000_V = 2875000,
 PMU_VOLT_02_900000_V = 2900000,
 PMU_VOLT_02_950000_V = 2950000,
 PMU_VOLT_03_000000_V = 3000000,
 PMU_VOLT_03_025000_V = 3025000,
 PMU_VOLT_03_050000_V = 3050000,
 PMU_VOLT_03_100000_V = 3100000,
 PMU_VOLT_03_150000_V = 3150000,
 PMU_VOLT_03_175000_V = 3175000,
 PMU_VOLT_03_200000_V = 3200000,
 PMU_VOLT_03_250000_V = 3250000,
 PMU_VOLT_03_275000_V = 3275000,
 PMU_VOLT_03_300000_V = 3300000,
 PMU_VOLT_03_325000_V = 3325000,
 PMU_VOLT_03_350000_V = 3350000,
 PMU_VOLT_03_400000_V = 3400000,
 PMU_VOLT_03_450000_V = 3450000,
 PMU_VOLT_03_500000_V = 3500000,
 PMU_VOLT_03_550000_V = 3550000,
 PMU_VOLT_03_600000_V = 3600000,
 PMU_VOLT_03_650000_V = 3650000,
 PMU_VOLT_03_800000_V = 3800000,
 PMU_VOLT_03_950000_V = 3950000,
 PMU_VOLT_04_000000_V = 4000000,
 PMU_VOLT_04_012500_V = 4012500,
 PMU_VOLT_04_025000_V = 4025000,
 PMU_VOLT_04_037500_V = 4037500,
 PMU_VOLT_04_050000_V = 4050000,
 PMU_VOLT_04_062500_V = 4062500,
 PMU_VOLT_04_067500_V = 4067500,
 PMU_VOLT_04_075000_V = 4075000,
 PMU_VOLT_04_087500_V = 4087500,
 PMU_VOLT_04_100000_V = 4100000,
 PMU_VOLT_04_112500_V = 4112500,
 PMU_VOLT_04_115000_V = 4115000,
 PMU_VOLT_04_116000_V = 4116000,
 PMU_VOLT_04_125000_V = 4125000,
 PMU_VOLT_04_137500_V = 4137500,
 PMU_VOLT_04_150000_V = 4150000,
 PMU_VOLT_04_162500_V = 4162500,
 PMU_VOLT_04_175000_V = 4175000,
 PMU_VOLT_04_187500_V = 4187500,
 PMU_VOLT_04_200000_V = 4200000,
 PMU_VOLT_04_212500_V = 4212500,
 PMU_VOLT_04_225000_V = 4225000,
 PMU_VOLT_04_237500_V = 4237500,
 PMU_VOLT_04_250000_V = 4250000,
 PMU_VOLT_04_262500_V = 4262500,
 PMU_VOLT_04_275000_V = 4275000,
 PMU_VOLT_04_287500_V = 4287500,
 PMU_VOLT_04_300000_V = 4300000,
 PMU_VOLT_04_325000_V = 4325000,
 PMU_VOLT_04_350000_V = 4350000,
 PMU_VOLT_04_375000_V = 4375000,
 PMU_VOLT_04_400000_V = 4400000,
 PMU_VOLT_04_411500_V = 4411500,
 PMU_VOLT_04_450000_V = 4450000,
 PMU_VOLT_04_500000_V = 4500000,
 PMU_VOLT_04_550000_V = 4550000,
 PMU_VOLT_04_600000_V = 4600000,
 PMU_VOLT_04_700000_V = 4700000,
 PMU_VOLT_04_800000_V = 4800000,
 PMU_VOLT_04_850000_V = 4850000,
 PMU_VOLT_04_950000_V = 4950000,
 PMU_VOLT_05_000000_V = 5000000,
 PMU_VOLT_05_150000_V = 5150000,
 PMU_VOLT_05_250000_V = 5250000,
 PMU_VOLT_05_300000_V = 5300000,
 PMU_VOLT_05_450000_V = 5450000,
 PMU_VOLT_06_000000_V = 6000000,
 PMU_VOLT_06_500000_V = 6500000,
 PMU_VOLT_06_750000_V = 6750000,
 PMU_VOLT_07_000000_V = 7000000,
 PMU_VOLT_07_250000_V = 7250000,
 PMU_VOLT_07_500000_V = 7500000,
 PMU_VOLT_08_000000_V = 8000000,
 PMU_VOLT_08_500000_V = 8500000,
 PMU_VOLT_09_500000_V = 9500000,
 PMU_VOLT_10_000000_V = 10000000,
 PMU_VOLT_10_500000_V = 10500000,
 PMU_VOLT_MAX,
 PMU_VOLT_INVALID

}PMU_VOLTAGE_ENUM;

typedef enum
{
    PMU_VOLT_CAL_MINUS_00_140000_V = -140000,
    PMU_VOLT_CAL_MINUS_00_120000_V = -120000,
    PMU_VOLT_CAL_MINUS_00_100000_V = -100000,
    PMU_VOLT_CAL_MINUS_00_080000_V = -80000,
    PMU_VOLT_CAL_MINUS_00_060000_V = -60000,
    PMU_VOLT_CAL_MINUS_00_040000_V = -40000,
    PMU_VOLT_CAL_MINUS_00_020000_V = -20000,
 PMU_VOLT_CAL_00_000000_V = 0,
 PMU_VOLT_CAL_00_020000_V = 20000,
    PMU_VOLT_CAL_00_040000_V = 40000,
    PMU_VOLT_CAL_00_060000_V = 60000,
    PMU_VOLT_CAL_00_080000_V = 80000,
    PMU_VOLT_CAL_00_100000_V = 100000,
    PMU_VOLT_CAL_00_120000_V = 120000,
    PMU_VOLT_CAL_00_140000_V = 140000,
    PMU_VOLT_CAL_00_160000_V = 160000,
 PMU_VOLT_CAL_MAX,
 PMU_VOLT_CAL_INVALID
} PMU_VOLTAGE_CALIBRATION_ENUM;


typedef enum
{
 PMIC_SPK_VOL_00_00_dB = 0,
 PMIC_SPK_VOL_00_50_dB = 50,
 PMIC_SPK_VOL_01_00_dB = 100,
 PMIC_SPK_VOL_01_50_dB = 150,
 PMIC_SPK_VOL_02_00_dB = 200,
 PMIC_SPK_VOL_02_50_dB = 250,
 PMIC_SPK_VOL_03_00_dB = 300,
 PMIC_SPK_VOL_03_50_dB = 350,
 PMIC_SPK_VOL_04_00_dB = 400,
 PMIC_SPK_VOL_04_50_dB = 450,
 PMIC_SPK_VOL_05_00_dB = 500,
 PMIC_SPK_VOL_05_50_dB = 550,
 PMIC_SPK_VOL_06_00_dB = 600,
 PMIC_SPK_VOL_06_50_dB = 650,
 PMIC_SPK_VOL_07_00_dB = 700,
 PMIC_SPK_VOL_07_50_dB = 750,
 PMIC_SPK_VOL_08_00_dB = 800,
 PMIC_SPK_VOL_08_50_dB = 850,
 PMIC_SPK_VOL_09_00_dB = 900,
 PMIC_SPK_VOL_09_50_dB = 950,
 PMIC_SPK_VOL_10_00_dB = 1000,
 PMIC_SPK_VOL_10_50_dB = 1050,
 PMIC_SPK_VOL_11_00_dB = 1100,
 PMIC_SPK_VOL_11_50_dB = 1150,
 PMIC_SPK_VOL_12_00_dB = 1200,
 PMIC_SPK_VOL_12_50_dB = 1250,
 PMIC_SPK_VOL_13_00_dB = 1300,
 PMIC_SPK_VOL_13_50_dB = 1350,
 PMIC_SPK_VOL_14_00_dB = 1400,
 PMIC_SPK_VOL_14_50_dB = 1450,
 PMIC_SPK_VOL_15_00_dB = 1500,
 PMIC_SPK_VOL_15_50_dB = 1550,
 PMIC_SPK_VOL_16_00_dB = 1600,
 PMIC_SPK_VOL_16_50_dB = 1650,
 PMIC_SPK_VOL_17_00_dB = 1700,
 PMIC_SPK_VOL_17_50_dB = 1750,
 PMIC_SPK_VOL_18_00_dB = 1800,
 PMIC_SPK_VOL_18_50_dB = 1850,
 PMIC_SPK_VOL_19_00_dB = 1900,
 PMIC_SPK_VOL_19_50_dB = 1950,
 PMIC_SPK_VOL_20_00_dB = 2000,
 PMIC_SPK_VOL_20_50_dB = 2050,
 PMIC_SPK_VOL_21_00_dB = 2100,
 PMIC_SPK_VOL_21_50_dB = 2150,
 PMIC_SPK_VOL_22_00_dB = 2200,
 PMIC_SPK_VOL_22_50_dB = 2250,
 PMIC_SPK_VOL_23_00_dB = 2300,
 PMIC_SPK_VOL_23_50_dB = 2350,
 PMIC_SPK_VOL_24_00_dB = 2400,
 PMIC_SPK_VOL_24_50_dB = 2450,
 PMIC_SPK_VOL_MAX = 9900,

 PMU_SPK_VOL_00_00_dB = 0,
 PMU_SPK_VOL_00_50_dB = 50,
 PMU_SPK_VOL_01_00_dB = 100,
 PMU_SPK_VOL_01_50_dB = 150,
 PMU_SPK_VOL_02_00_dB = 200,
 PMU_SPK_VOL_02_50_dB = 250,
 PMU_SPK_VOL_03_00_dB = 300,
 PMU_SPK_VOL_03_50_dB = 350,
 PMU_SPK_VOL_04_00_dB = 400,
 PMU_SPK_VOL_04_50_dB = 450,
 PMU_SPK_VOL_05_00_dB = 500,
 PMU_SPK_VOL_05_50_dB = 550,
 PMU_SPK_VOL_06_00_dB = 600,
 PMU_SPK_VOL_06_50_dB = 650,
 PMU_SPK_VOL_07_00_dB = 700,
 PMU_SPK_VOL_07_50_dB = 750,
 PMU_SPK_VOL_08_00_dB = 800,
 PMU_SPK_VOL_08_50_dB = 850,
 PMU_SPK_VOL_09_00_dB = 900,
 PMU_SPK_VOL_09_50_dB = 950,
 PMU_SPK_VOL_10_00_dB = 1000,
 PMU_SPK_VOL_10_50_dB = 1050,
 PMU_SPK_VOL_11_00_dB = 1100,
 PMU_SPK_VOL_11_50_dB = 1150,
 PMU_SPK_VOL_12_00_dB = 1200,
 PMU_SPK_VOL_12_50_dB = 1250,
 PMU_SPK_VOL_13_00_dB = 1300,
 PMU_SPK_VOL_13_50_dB = 1350,
 PMU_SPK_VOL_14_00_dB = 1400,
 PMU_SPK_VOL_14_50_dB = 1450,
 PMU_SPK_VOL_15_00_dB = 1500,
 PMU_SPK_VOL_15_50_dB = 1550,
 PMU_SPK_VOL_16_00_dB = 1600,
 PMU_SPK_VOL_16_50_dB = 1650,
 PMU_SPK_VOL_17_00_dB = 1700,
 PMU_SPK_VOL_17_50_dB = 1750,
 PMU_SPK_VOL_18_00_dB = 1800,
 PMU_SPK_VOL_18_50_dB = 1850,
 PMU_SPK_VOL_19_00_dB = 1900,
 PMU_SPK_VOL_19_50_dB = 1950,
 PMU_SPK_VOL_20_00_dB = 2000,
 PMU_SPK_VOL_20_50_dB = 2050,
 PMU_SPK_VOL_21_00_dB = 2100,
 PMU_SPK_VOL_21_50_dB = 2150,
 PMU_SPK_VOL_22_00_dB = 2200,
 PMU_SPK_VOL_22_50_dB = 2250,
 PMU_SPK_VOL_23_00_dB = 2300,
 PMU_SPK_VOL_23_50_dB = 2350,
 PMU_SPK_VOL_24_00_dB = 2400,
 PMU_SPK_VOL_24_50_dB = 2450,
 PMU_SPK_VOL_MAX = 9900
}PMU_SPK_VOL_ENUM;


typedef enum
{
 PMU_CHARGE_CURRENT_0_00_MA = 0,
 PMU_CHARGE_CURRENT_50_00_MA = 5000,
 PMU_CHARGE_CURRENT_62_50_MA = 6250,
 PMU_CHARGE_CURRENT_70_00_MA = 7000,
 PMU_CHARGE_CURRENT_75_00_MA = 7500,
 PMU_CHARGE_CURRENT_87_50_MA = 8750,
 PMU_CHARGE_CURRENT_100_00_MA = 10000,
 PMU_CHARGE_CURRENT_150_00_MA = 15000,
 PMU_CHARGE_CURRENT_200_00_MA = 20000,
 PMU_CHARGE_CURRENT_225_00_MA = 22500,
 PMU_CHARGE_CURRENT_250_00_MA = 25000,
 PMU_CHARGE_CURRENT_300_00_MA = 30000,
 PMU_CHARGE_CURRENT_350_00_MA = 35000,
 PMU_CHARGE_CURRENT_400_00_MA = 40000,
 PMU_CHARGE_CURRENT_425_00_MA = 42500,
 PMU_CHARGE_CURRENT_450_00_MA = 45000,
 PMU_CHARGE_CURRENT_500_00_MA = 50000,
 PMU_CHARGE_CURRENT_550_00_MA = 55000,
 PMU_CHARGE_CURRENT_600_00_MA = 60000,
 PMU_CHARGE_CURRENT_650_00_MA = 65000,
 PMU_CHARGE_CURRENT_700_00_MA = 70000,
 PMU_CHARGE_CURRENT_750_00_MA = 75000,
 PMU_CHARGE_CURRENT_800_00_MA = 80000,
 PMU_CHARGE_CURRENT_850_00_MA = 85000,
 PMU_CHARGE_CURRENT_900_00_MA = 90000,
 PMU_CHARGE_CURRENT_950_00_MA = 95000,
 PMU_CHARGE_CURRENT_1000_00_MA = 100000,
 PMU_CHARGE_CURRENT_1200_00_MA = 120000,
 PMU_CHARGE_CURRENT_1500_00_MA = 150000,
 PMU_CHARGE_CURRENT_1800_00_MA = 180000,
 PMU_CHARGE_CURRENT_2000_00_MA = 200000,
 PMU_CHARGE_CURRENT_MAX
}PMU_CHR_CURRENT_ENUM;



typedef enum
{
 PMU_VPA0,
 PMU_VPA1,
 PMU_VPA2,
 PMU_VPA3,
 PMU_VPA4,
 PMU_VPA5,
 PMU_VPA6,
 PMU_VPA7
}PMU_VPA_ENUM;


typedef enum
{
 ENABLE_WITH_SRCLKEN = 0,
 ENABLE_LDO_BUCK_EN_REGISTER = 1
}PMU_ON_SEL_ENUM;


typedef enum
{
    SW_CONTROL = 0,
    SRCLKEN_CONTROL = 1
}PMIC_ON_SEL_ENUM;


typedef enum
{
    SW_CONTROL_BY_REG = 0,
    HW_CONTROL = 1
}PMIC_ON_CTRL_ENUM;
# 910 "interface/driver/peripheral/dcl_pmu.h"
typedef enum
{
    SRCLKEN_IN0 = 0,
    SRCLKEN_IN1,
 SRCLKEN_IN0_OR_SRCLKEN_IN1,
 SRCLKEN_IN0_AND_SRCLKEN_IN1
}PMU_SRCLKEN_SEL_ENUM;
# 932 "interface/driver/peripheral/dcl_pmu.h"
typedef enum
{
    SRCLKEN_IN0_SEL = 0,
    SRCLKEN_IN1_SEL,
    SRCLKEN_IN0_OR_SRCLKEN_IN1_SEL,
    SRCLKEN_IN0_AND_SRCLKEN_IN1_SEL
}PMIC_SIGNAL_SEL_ENUM;
# 951 "interface/driver/peripheral/dcl_pmu.h"
typedef enum
{
 DEFAULT_LOCAL_SENSE= 0,
 REMOTE_SENSE = 1
}PMU_RS_ENUM;


typedef enum
{
 KPLED_PWM_MODE = 0,
 KPLED_REGISTER_CTRL_MODE = 1
}PMU_CTRL_KPLED_MODE_ENUM;


typedef enum
{
 LDO_EN_SEL_BY_CONTROLLER = 0,
 LDO_EN_SEL_BY_LDO_CON,
 LDO_EN_SEL_MAX = 0xFF
}PMU_CTRL_LDO_CTRL_MODE_ENUM;


typedef enum
{
 BUCK_MODE = 0,
 LDO_MODE
}PMU_CTRL_BUCK_LDO_CTRL_MODE_ENUM;


typedef enum
{
 AUTO_MODE = 0,
 FORCE_PWM_MODE
}PMU_CTRL_BUCK_LDO_CTRL_MODESET_ENUM;

typedef enum
{
 HW_ENABLE = 0,
 SW_ENABLE
}PMU_CTRL_STB_SIO_CTRL_MODE_ENUM;


typedef enum
{
 KPLED_SEL_1_SWITCH = 0,
 KPLED_SEL_2_SWITCH = 1,
 KPLED_SEL_3_SWITCH = 2,
 KPLED_SEL_4_SWITCH = 3,
 KPLED_SEL_5_SWITCH = 4,
 KPLED_SEL_6_SWITCH = 5,
 KPLED_SEL_7_SWITCH = 6,
 KPLED_SEL_8_SWITCH = 7
}PMU_CTRL_KPLED_SEL_ENUM;


typedef enum
{
 FLASHLED_PWM_MODE = 0,
 FLASHLED_REGISTER_CTRL_MODE = 1
}PMU_CTRL_FLASHLED_MODE_ENUM;


typedef enum
{
 FLASHLED_SEL_1_SWITCH = 0,
 FLASHLED_SEL_2_SWITCH = 1,
 FLASHLED_SEL_3_SWITCH = 2,
 FLASHLED_SEL_4_SWITCH = 3,
 FLASHLED_SEL_5_SWITCH = 4,
 FLASHLED_SEL_6_SWITCH = 5,
 FLASHLED_SEL_7_SWITCH = 6,
 FLASHLED_SEL_8_SWITCH = 7
}PMU_CTRL_FLASHLED_SEL_ENUM;


typedef enum
{
 PMU_CHR_WDT_TD_4SEC = 40,
 PMU_CHR_WDT_TD_8SEC = 80,
 PMU_CHR_WDT_TD_16SEC = 160,
 PMU_CHR_WDT_TD_32SEC = 320,
 PMU_CHR_WDT_TD_128SEC = 1280,
 PMU_CHR_WDT_TD_256SEC = 2560,
 PMU_CHR_WDT_TD_512SEC = 5120,
 PMU_CHR_WDT_TD_1024SEC = 10240,
 PMU_CHR_WDT_TD_3000SEC = 30000
}PMU_CHR_WDT_TD_ENUM;


typedef enum
{
 ISINK_PWM_MODE = 0,
 ISINK_REGISTER_CTRL_MODE = 1
}PMU_CTRL_ISINK_MODE_ENUM;


typedef enum
{
 ISINK_STEP_04_MA = 4,
 ISINK_STEP_05_MA = 5,
 ISINK_STEP_08_MA = 8,
 ISINK_STEP_10_MA = 10,
 ISINK_STEP_12_MA = 12,
 ISINK_STEP_15_MA = 15,
 ISINK_STEP_16_MA = 16,
 ISINK_STEP_20_MA = 20,
 ISINK_STEP_24_MA = 24
}PMU_CTRL_ISINK_STEP_ENUM;


typedef enum{
 SPK_CLASS_D_MODE = 0,
 SPK_CLASS_AB_MODE
}PMU_CTRL_SPK_MODE_ENUM;


typedef enum{
 SPK_SLEW_RATE_2_OVER_4 = 0,
 SPK_SLEW_RATE_1_OVER_4,
 SPK_SLEW_RATE_4_OVER_4,
 SPK_SLEW_RATE_3_OVER_4
}PMU_CTRL_SPK_SLEW_RATE_ENUM;


typedef enum{
 SPK_N = 0,
 SPK_P,
}PMU_CTRL_SPK_CALI_PATH_ENUM;


typedef enum{
 PMU_CTRL_STEP1,
 PMU_CTRL_STEP2,
 PMU_CTRL_STEP3,
 PMU_CTRL_STEP4
}PMU_CTRL_STEP_ENUM;


typedef enum
{
 PMIC_MT_6320 = 0x6320,
 PMIC_MT_6323 = 0x6323,
 PMIC_MT_6325 = 0x6325,
 PMIC_MT_6328 = 0x6328,
  PMIC_MT_6329 = 0x6329,
  PMIC_MT_6331 = 0x6331,
 PMIC_MT_6332 = 0x6332,
 PMIC_MT_6339 = 0x6339,
 PMIC_CHIP_MAX
}PMIC_CHIP_LIST_ENUM;

typedef enum
{
 PMIC_ECO_E1 = 0,
 PMIC_ECO_E2,
 PMIC_ECO_E3,
 PMIC_ECO_E4,
 PMIC_ECO_E5,
 PMIC_ECO_E6,
 PMIC_ECO_E7,
 PMIC_ECO_E8,
 PMIC_ECO_E9,
 PMIC_ECO_E10,
}PMU_CTRL_PMIC_ECO_VERSION_ENUM;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_EN;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_GET_EN_STATUS;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN mode;
}PMU_CTRL_LDO_BUCK_GET_QI_MODE;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_EN_FORCE;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_THER_SHDN_EN;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 PMU_VOLTAGE_ENUM voltage;
}PMU_CTRL_LDO_BUCK_SET_VOLTAGE;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 PMU_VOLTAGE_ENUM sleepVoltage;
}PMU_CTRL_LDO_BUCK_SET_SLEEP_VOLTAGE;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 PMU_VOLTAGE_ENUM voltage;
}PMU_CTRL_LDO_BUCK_SET_VOLTAGE_EN;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 PMU_RS_ENUM rs;
}PMU_CTRL_LDO_BUCK_SET_RS;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_UINT16 thresholdIdx;
}PMU_CTRL_LDO_BUCK_SET_BURST_THRESHOLD;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_UINT16 currentLimitIdx;
}PMU_CTRL_LDO_BUCK_SET_CURRENT_LIMIT;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_UINT16 biasCurrentCalibrationCode;
}PMU_CTRL_LDO_BUCK_SET_BIAS_CURRENT_CALIBRATION_CODE;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_UINT16 voltageCalibrationCode;
}PMU_CTRL_LDO_BUCK_SET_VOLTAGE_CALIBRATION_CODE;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_UINT16 delayTimeIdx;
}PMU_CTRL_LDO_BUCK_SET_STB_TD;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_UINT16 deglitchTimeIdx;
}PMU_CTRL_LDO_BUCK_SET_OC_TD;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_OCFB_EN;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_OC_AUTO_OFF;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 PMU_ON_SEL_ENUM onSel;
}PMU_CTRL_LDO_BUCK_SET_ON_SEL;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 PMU_SRCLKEN_SEL_ENUM SrclkenSel;
}PMU_CTRL_LDO_BUCK_SET_SRCLKEN_SEL;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 PMIC_SIGNAL_SEL_ENUM sel;
}PMU_CTRL_LDO_BUCK_SET_SRCLK_EN_SEL;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_STB_EN;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_NDIS_EN;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_VSIM_GPLDO_EN;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_VSIM2_GPLDO_EN;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_SIM2_GPIO_EN;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_CCI_SRCLKEN;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN status;
}PMU_CTRL_LDO_BUCK_GET_OC_STATUS;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN status;
}PMU_CTRL_LDO_BUCK_GET_QI_OC_STATUS;


typedef struct
{
    PMU_LDO_BUCK_LIST_ENUM mod;
    DCL_BOOLEAN oc_int_en;
}PMU_CTRL_LDO_BUCK_SET_OC_INT_EN;


typedef struct
{
    PMU_LDO_BUCK_LIST_ENUM mod;
}PMU_CTRL_LDO_BUCK_CLEAR_OC_FLAG;


typedef struct
{
    PMU_LDO_BUCK_LIST_ENUM mod;
    DCL_BOOLEAN oc_flag;
}PMU_CTRL_LDO_BUCK_GET_OC_FLAG;


typedef struct
{
    PMU_LDO_BUCK_LIST_ENUM mod;
    const DCL_UINT32 *pVals;
    DCL_UINT8 size;
}PMU_CTRL_LDO_BUCK_GET_VOLTAGE_LIST;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_LP_MODE_SET;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 PMIC_ON_SEL_ENUM onSel;
}PMU_CTRL_LDO_BUCK_SET_LP_SEL;


typedef struct
{
    PMU_LDO_BUCK_LIST_ENUM mod;
    DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_GET_LP_MODE;


typedef struct
{
    PMU_LDO_BUCK_LIST_ENUM mod;
    PMIC_ON_CTRL_ENUM mode;
}PMU_CTRL_LDO_BUCK_SET_ON_CTRL;


typedef struct
{
    PMU_LDO_BUCK_LIST_ENUM mod;
    PMU_CTRL_BUCK_LDO_CTRL_MODESET_ENUM mode;
}PMU_CTRL_LDO_BUCK_SET_MODESET;


typedef struct
{
    PMU_LDO_BUCK_LIST_ENUM mod;
    PMIC_ON_CTRL_ENUM mode;
}PMU_CTRL_LDO_BUCK_SET_EN_CTRL;


typedef struct
{
    PMU_LDO_BUCK_LIST_ENUM mod;
    PMIC_SIGNAL_SEL_ENUM sel;
}PMU_CTRL_LDO_BUCK_SET_EN_SEL;


typedef struct
{
    PMU_LDO_BUCK_LIST_ENUM mod;
    PMIC_SIGNAL_SEL_ENUM sel;
}PMU_CTRL_LDO_BUCK_SET_SRCLK_MODE_SEL;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 PMU_VOLTAGE_CALIBRATION_ENUM voltage;
}PMU_CTRL_LDO_SET_CAL;


typedef struct
{
 PMU_VPA_LIST_ENUM vpa;
 DCL_BOOLEAN enable;
}PMU_CTRL_VPA_SET_VOSEL_MAP_EN;


typedef struct
{
 PMU_VPA_LIST_ENUM vpa;
 DCL_BOOLEAN enable;
}PMU_CTRL_VPA_SET_EN;


typedef struct
{
 PMU_VOLTAGE_ENUM voltage;
 PMU_VPA_ENUM vpaIdx;
 PMU_VPA_LIST_ENUM vpa;
}PMU_CTRL_VPA_SET_VOLTAGE;


typedef struct
{
 DCL_BOOLEAN byPASEL;
}PMU_CTRL_VPA_CTRL_SEL;


typedef struct
{
 const DCL_UINT32 *pVoltageList;
 DCL_UINT32 number;
}PMU_CTRL_VPA_GET_VOLTAGE_LIST;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_VPA_SET_BAT_LOW;


typedef struct
{
 PMU_VPA_LIST_ENUM vpa;
 DCL_BOOLEAN enable;
}PMU_CTRL_VPA_SET_FPWM;


typedef struct
{
        PMU_VPA_ENUM table_entry;
 PMU_VOLTAGE_ENUM voltage;
}PMU_CTRL_VPA_SET_VOLTAGE_SELECTION_TABLE;



typedef struct
{
        PMU_VPA_ENUM table_entry;
}PMU_CTRL_VPA_SET_MAP_SEL;


typedef struct
{
 DCL_UINT16 duty;
}PMU_CTRL_VIBR_SET_DIMMING_ON_DUTY;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_VRF18_SET_FPWM;


typedef struct
{
    PMIC_VRF18_LIST_ENUM vrf18Idx;
 DCL_BOOLEAN enable;
}PMU_CTRL_VRF18_SET_MODESET;


typedef struct
{
    PMIC_VRF18_LIST_ENUM vrf18Idx;
 PMU_CTRL_BUCK_LDO_CTRL_MODE_ENUM mode;
}PMU_CTRL_VRF18_SET_BUCK_LDO_MODE;


typedef struct
{
    DCL_UINT16 regval;
}PMU_CTRL_VRF1_SET_MODESET_CKPDN_SET;


typedef struct
{
    DCL_UINT16 regval;
}PMU_CTRL_VRF1_SET_MODESET_CKPDN_CLR;


typedef struct
{
    DCL_UINT16 regval;
}PMU_CTRL_VRF1_GET_MODESET_CKPDN;


typedef struct
{
    PMIC_VSIM_LIST_ENUM vsimIdx;
    DCL_UINT32 regval;
}PMU_CTRL_SIMLS_SET_SRST_CONF;


typedef struct
{
    PMIC_VSIM_LIST_ENUM vsimIdx;
    DCL_UINT32 regval;
}PMU_CTRL_SIMLS_SET_SCLK_CONF;


typedef struct
{
    DCL_UINT32 regval;
}PMU_CTRL_SIMLS_SET_TDSEL;


typedef struct
{
    DCL_UINT32 regval;
}PMU_CTRL_SIMAP_SET_TDSEL;


typedef struct
{
    DCL_UINT32 regval;
}PMU_CTRL_SIMLS_SET_RDSEL;


typedef struct
{
    DCL_UINT32 regval;
}PMU_CTRL_SIMAP_SET_RDSEL;


typedef struct
{
    PMIC_VSIM_LIST_ENUM vsimIdx;
    DCL_UINT32 regval;
}PMU_CTRL_OCTL_SET_SIM_AP_SRST;


typedef struct
{
    PMIC_VSIM_LIST_ENUM vsimIdx;
    DCL_UINT32 regval;
}PMU_CTRL_OCTL_SET_SIM_AP_SCLK;


typedef struct
{
    PMIC_VSIM_LIST_ENUM vsimIdx;
    DCL_UINT32 regval;
}PMU_CTRL_OCTL_SET_SIMLS_SRST;


typedef struct
{
    PMIC_VSIM_LIST_ENUM vsimIdx;
    DCL_UINT32 regval;
}PMU_CTRL_OCTL_SET_SIMLS_SCLK;


typedef struct
{
    PMIC_VSIM_LIST_ENUM vsimIdx;
    PMU_CTRL_STB_SIO_CTRL_MODE_ENUM mode;
}PMU_CTRL_SIM_SET_STB_SIO_MODE;


typedef struct
{
    PMIC_VSIM_LIST_ENUM vsimIdx;
}PMU_CTRL_SIMRST_SET_GPIO_SET;


typedef struct
{
    PMIC_VSIM_LIST_ENUM vsimIdx;
}PMU_CTRL_SIMRST_SET_GPIO_CLR;


typedef struct
{
 PMU_SPK_LIST_ENUM spk;
 DCL_BOOLEAN enable;
 PMU_CTRL_STEP_ENUM step;
}PMU_CTRL_SPK_SET_EN;


typedef struct
{
 PMU_SPK_LIST_ENUM spk;
 PMU_CTRL_SPK_MODE_ENUM mode;
}PMU_CTRL_SPK_SET_MODE;


typedef struct
{
 PMU_SPK_LIST_ENUM spk;
 DCL_UINT16 mode;
}PMU_CTRL_SPK_GET_MODE;


typedef struct
{
 PMU_SPK_LIST_ENUM spk;
 PMU_CTRL_SPK_MODE_ENUM mode;
}PMU_CTRL_SPK_SET_SLEW_RATE;


typedef struct
{
 PMU_SPK_LIST_ENUM spk;
 DCL_BOOLEAN enable;
}PMU_CTRL_SPK_SET_OC_AUTO_OFF;


typedef struct
{
 PMU_SPK_LIST_ENUM spk;
 DCL_UINT16 volValue;
}PMU_CTRL_SPK_SET_VOL_VALUE;


typedef struct
{
 PMU_SPK_LIST_ENUM spk;
 DCL_UINT16 volValue;
}PMU_CTRL_SPK_GET_VOL_VALUE;


typedef struct
{
 PMU_SPK_LIST_ENUM spk;
 PMU_SPK_VOL_ENUM dbm;
}PMU_CTRL_SPK_GET_VOL;


typedef struct
{
 PMU_SPK_LIST_ENUM spk;
 PMU_SPK_VOL_ENUM dbm;
}PMU_CTRL_SPK_SET_VOL;


typedef struct
{
 PMU_SPK_LIST_ENUM spk;
 DCL_BOOLEAN enable;
}PMU_CTRL_SPK_SET_CALIBR_EN;


typedef struct
{
 PMU_SPK_LIST_ENUM spk;
 PMU_CTRL_SPK_CALI_PATH_ENUM path;
}PMU_CTRL_SPK_SET_CALIBR_SEL;


typedef enum
{
 BL_VBOOST_VOLTAGE_CONTROLLER_MODE=0,
 BL_VBOOST_CURRENT_CONVERTER_MODE=1,
 BL_ISINK_MODE=2,
 BL_MODE_1=0,
 BL_MODE_2=1,
 BL_MODE_3=2,
 BL_MODE0=0,
 BL_MODE1=1,
 BL_MODE2=2,
 BL_MODE3=3,
 BL_MODE_NUM
}PMU_CTRL_BL_MODE_ENUM;


typedef struct
{
 PMU_CTRL_BL_MODE_ENUM blMode;
}PMU_CTRL_BL_SET_INIT;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_BL_SET_EN;


typedef struct
{
    DCL_UINT32 blSupportLevel;
}PMU_CTRL_BL_GET_SUPPORT_LEVEL;


typedef struct
{
    DCL_UINT32 blUsePwmQuery;
}PMU_CTRL_BL_GET_USE_PWM_QUERY;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_FLASHLED_SET_EN;


typedef struct
{
 PMU_CTRL_FLASHLED_MODE_ENUM mode;
}PMU_CTRL_FLASHLED_SET_MODE;


typedef struct
{
 PMU_CTRL_FLASHLED_SEL_ENUM sel;
}PMU_CTRL_FLASHLED_SET_SEL;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_KPLED_SET_EN;


typedef struct
{
 PMU_CTRL_KPLED_MODE_ENUM mode;
}PMU_CTRL_KPLED_SET_MODE;


typedef struct
{
 PMU_CTRL_KPLED_SEL_ENUM sel;
}PMU_CTRL_KPLED_SET_SEL;


typedef struct
{
 DCL_UINT16 div;
}PMU_CTRL_KPLED_SET_FREQUENCY_DIVISION;


typedef struct
{
 DCL_UINT16 duty;
}PMU_CTRL_KPLED_SET_DIMMING_ON_DUTY;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_ADC_MEASURE_EN;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_CSDAC_EN;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_CHR_EN;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_CHR_FORCE_EN;


typedef struct
{
 PMU_CHR_CURRENT_ENUM current;
}PMU_CTRL_CHR_GET_CHR_CURRENT;


typedef struct
{
 const DCL_UINT32 *pCurrentList;
 DCL_UINT32 number;
}PMU_CTRL_CHR_GET_CHR_CURRENT_LIST;


typedef struct
{
 PMU_CHR_CURRENT_ENUM current;
}PMU_CTRL_CHR_SET_CHR_CURRENT;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_GET_CHR_DET_STATUS;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_GET_CV_DETECTION_STATUS;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_CV_DETECTION_EN;


typedef struct
{
 PMU_VOLTAGE_ENUM voltage;
}PMU_CTRL_CHR_SET_CV_DETECTION_VOLTAGE;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_GET_IS_BATTERY_ON;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_GET_IS_CHR_VALID;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_WDT_INT_EN;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_WDT_EN;


typedef struct
{
 PMU_CHR_WDT_TD_ENUM secs;
}PMU_CTRL_CHR_SET_WDT_TIMER;


typedef struct
{
 PMU_VOLTAGE_ENUM voltage;
}PMU_CTRL_CHR_SET_HV_DETECTION_VOLTAGE;


typedef struct
{
 const DCL_UINT32 *pVoltageList;
 DCL_UINT32 number;
}PMU_CTRL_CHR_GET_HV_DETECTION_VOLTAGE_LIST;


typedef struct
{
 PMU_VOLTAGE_ENUM voltage;
}PMU_CTRL_CHR_SET_VBAT_OV_DETECTION_VOLTAGE;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_BAT_HT_EN;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_OTG_BVALID_EN;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_BC11_PULLUP_EN;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_CV_MODE;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_CSDAC_MODE;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_TRACKING_EN;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_HWCV_EN;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_ULC_DET_EN;


typedef struct
{
 DCL_UINT16 debounceTime;
}PMU_CTRL_CHR_SET_LOW_ICH_DB;


typedef struct
{
 DCL_INT32 vbat;
}PMU_CTRL_CHR_SET_VBAT_CV_CALIBRATION;


typedef struct
{
 DCL_BOOLEAN vbat_cc_det;
}PMU_CTRL_CHR_GET_CC_DET;


typedef struct
{
 PMU_BOOST_LIST_ENUM boost;
 DCL_BOOLEAN enable;
}PMU_CTRL_BOOST_SET_EN;


typedef struct
{
 PMU_BOOST_LIST_ENUM boost;
 DCL_BOOLEAN currentLimit;
}PMU_CTRL_BOOST_SET_CURRENT_LIMIT;


typedef struct
{
 PMU_BOOST_LIST_ENUM boost;
 DCL_BOOLEAN clkCal;
}PMU_CTRL_BOOST_SET_CLK_CAL;


typedef struct
{
 PMU_BOOST_LIST_ENUM boost;
 DCL_BOOLEAN enable;
}PMU_CTRL_BOOST_SET_SYNC_EN;


typedef struct
{
 PMU_BOOST_LIST_ENUM boost;
 PMU_VOLTAGE_ENUM voltage;
}PMU_CTRL_BOOST_SET_VOLTAGE;


typedef struct
{
 PMU_BOOST_LIST_ENUM boost;
 DCL_UINT16 level;
}PMU_CTRL_BOOST_SET_LEVEL;


typedef struct
{
 PMU_ISINK_LIST_ENUM isink;
 DCL_BOOLEAN enable;
}PMU_CTRL_ISINK_SET_EN;


typedef struct
{
 PMU_ISINK_LIST_ENUM isink;
 PMU_CTRL_ISINK_MODE_ENUM mode;
}PMU_CTRL_ISINK_SET_MODE;


typedef struct
{
 PMU_ISINK_LIST_ENUM isink;
 PMU_CTRL_ISINK_STEP_ENUM step;
}PMU_CTRL_ISINK_SET_STEP;


typedef struct
{
 PMU_ISINK_LIST_ENUM isink;
 DCL_BOOLEAN forceOff;
}PMU_CTRL_ISINK_SET_FORCE_OFF;


typedef struct
{
 PMU_ISINK_LIST_ENUM isink;
 DCL_UINT16 duty;
}PMU_CTRL_ISINK_SET_DIMMING_ON_DUTY;


typedef struct
{
 PMU_ISINK_LIST_ENUM isink;
 DCL_UINT16 div;
}PMU_CTRL_ISINK_SET_FREQUENCY_DIVISION;


typedef struct
{
    DCL_BOOLEAN enable;

}PMU_CTRL_ADC_SET_RQST;


typedef struct
{
    DCL_BOOLEAN enable;

}PMU_CTRL_ADC_CLR_RQST;


typedef struct
{
    DCL_BOOLEAN status;
}PMU_CTRL_ADC_GET_RDY_MD;


typedef struct
{
    DCL_UINT32 data;
}PMU_CTRL_ADC_GET_OUT_MD;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_MISC_SET_BLED_EN;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_MISC_SET_RLED_EN;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_MISC_SET_GLED_EN;


typedef struct
{
 DCL_UINT32 cid_value;
}PMU_CTRL_MISC_GET_CID;


typedef struct
{
 DCL_UINT32 eco_version;
}PMU_CTRL_MISC_GET_ECO_VERSION;



typedef struct
{
    PMIC_CHIP_LIST_ENUM chip_name;
 DCL_UINT32 version;
}PMU_CTRL_MISC_GET_HW_VERSION;


typedef struct
{
 DCL_UINT32 offset;
 DCL_UINT16 value;
}PMU_CTRL_MISC_SET_REGISTER_VALUE;


typedef struct
{
 DCL_UINT32 offset;
 DCL_UINT16 value;
}PMU_CTRL_MISC_GET_REGISTER_VALUE;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
}PMU_CTRL_LDO_BUCK_CTRL;
# 366 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_pw.h" 1
# 130 "interface/driver/peripheral/dcl_pw.h"
typedef enum{
 PWRKEYPWRON = 0,
 CHRPWRON = 1,
 RTCPWRON = 2,
 CHRPWROFF = 3,
 WDTRESET = 4,
 ABNRESET = 5,
 USBPWRON = 6,
 USBPWRON_WDT = 7,
 PRECHRPWRON = 8,
 UNKNOWN_PWRON = 0xF9
}PW_CTRL_POWER_ON_REASON;

typedef enum{
  PWR_FACTOR_POWER_KEY = 0,
 PWR_FACTOR_CHARGER_IN,
  PWR_FACTOR_USB_IN,
  PWR_FACTOR_RTC_EXPIRE,
  PWR_FACTOR_WDT_RESET,
  PWR_FACTOR_NORMAL_RESET_FLG,
  PWR_FACTOR_CHRPWRON_FLG,
  PWR_FACTOR_USBMS_PWRON_FLG,
  PWR_FACTOR_RTCPWRON_FLG,
  PWR_FACTOR_PRECHRPWRON_FLG,
  PWR_FACTOR_SWITCH2IDLE_FLG,
  PWR_FACTOR_SWITCH2CHR_FLG,
  PWR_FACTOR_SWITCH2USB_FLG,
  PWR_FACTOR_MAX
}pwr_factor_enum;

typedef enum{
    PWR_FACTOR_BL_POWER_KEY = 0x1,
    PWR_FACTOR_BL_CABLE_IN = 0x2,
    PWR_FACTOR_BL_RTC_EXPIRE = 0x4,
    PWR_FACTOR_BL_NORMAL_RESET_FLG = 0x8,
    PWR_FACTOR_BL_CHRPWRON_FLG = 0x10,
    PWR_FACTOR_BL_USBMS_PWRON_FLG = 0x20,
    PWR_FACTOR_BL_RTCPWRON_FLG = 0x40,
    PWR_FACTOR_BL_FACTORY_FLG = 0x80,
    PWR_FACTOR_BL_MAX
}pw_factor_bl_enum;

typedef struct
{
 DCL_BOOLEAN val;
} PW_CTRL_IS_USB_BOOT;

typedef struct
{
 PW_CTRL_POWER_ON_REASON powerOnReason;
} PW_CTRL_SET_POWERON_REASON;

typedef struct
{
 PW_CTRL_POWER_ON_REASON powerOnReason;
} PW_CTRL_GET_POWERON_REASON;
# 369 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_chr_det.h" 1
# 122 "interface/driver/peripheral/dcl_chr_det.h"
typedef enum
{
   PW_AC_CHR=0,
   PW_USB_CHR,
   PW_AC_NON_STD_CHR,
   PW_USB_CHARGING_HOST_CHR,
   PW_NO_CHR
}CHR_DET_TYPE_ENUM;


typedef struct
{
 CHR_DET_TYPE_ENUM Chr_det_type;
}CHR_DET_CTRL_QUERY_IS_CHR_IN_BY_PW;


typedef struct
{
 CHR_DET_TYPE_ENUM Chr_det_type;
}CHR_DET_CTRL_QUERY_CHR_TYPE;

typedef struct
{
 void (*usb_det_hisr)(void);
}CHR_DET_CTRL_REGISTER_USB_HISR;
# 194 "interface/driver/peripheral/dcl_chr_det.h"
typedef enum
{
 CHR_DET_EINT_OWNER_USB = 0x01,
 CHR_DET_EINT_OWNER_BMT = 0x02,
 USB_DET_EINT_OWNER_FORCE_UNMASK = 0x80
}CHR_DET_EINT_OWNER;


typedef struct
{
 CHR_DET_TYPE_ENUM (*pw_is_charger_usb_det)(void);
 void (*pw_is_charger_usb_det_eint)(void);
 void (*usb_det_hisr)(void);
}CHR_USB_DET_MGR_T;
# 372 "interface/driver/peripheral/dcl.h" 2





# 1 "interface/driver/peripheral/dcl_sim_gpio.h" 1
# 74 "interface/driver/peripheral/dcl_sim_gpio.h"
typedef enum{
   MT6306_SIM_GPIO1 = 0,
   MT6306_SIM_GPIO2,
   MT6306_SIM_GPIO3,
   MT6306_SIM_GPIO4,
   MT6306_SIM_GPIO5,
   MT6306_SIM_GPIO6,
   MT6306_SIM_GPIO7,
   MT6306_SIM_GPIO8,
   MT6306_SIM_GPIO9,
   MT6306_SIM_GPIO10,
   MT6306_SIM_GPIO11,
   MT6306_SIM_GPIO12,
   MT6306_SIM_GPI13,
   MT6306_SIM_GPI14,
   MT6306_SIM_GPI15,
   MT6306_SIM_GPI16,
   MT6306_SIM_GPI17,
   MT6306_SIM_GPI18,
}DCL_SIMGPIO_PIN_DEF;
# 132 "interface/driver/peripheral/dcl_sim_gpio.h"
typedef struct
{
   DCL_UINT8 u1IOData;
} SIMGPIO_CTRL_READ_T;


typedef struct
{
   DCL_UINT8 u1IOData;
} SIMGPIO_CTRL_WRITE_T;


typedef struct
{
   DCL_UINT16 u2Dir;
} SIMGPIO_CTRL_SET_DIR_T;


typedef struct
{
   kal_bool on;
   kal_uint8 volt;
} SIMGPIO_CTRL_TRUN_ON_POWER;
# 378 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_f32k_clk.h" 1
# 120 "interface/driver/peripheral/dcl_f32k_clk.h"
typedef struct
{
    DCL_BOOLEAN f32k_is_xosc32;
}F32K_CLK_CTRL_F32K_IS_XOSC32_T;

typedef struct
{
    DCL_UINT16 eosc32_cali_val;
}F32K_CLK_CTRL_EOSC32_CALI_VAL_T;
# 381 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_idc.h" 1
# 178 "interface/driver/peripheral/dcl_idc.h"
typedef struct
{
 kal_uint32 u4Baud;
 kal_uint8 u1DataBits;
 kal_uint8 u1StopBits;
 kal_uint8 u1Parity;
} IDC_CTRL_DCB_CONFIG_T;



typedef struct
{
 kal_uint32 baudrate;
} IDC_CTRL_BAUDRATE_T;


typedef struct
{
 kal_uint8 rx_threshold;
} IDC_CTRL_SET_FIFO_TRIGGER_T;



typedef struct
{
 kal_bool start;
 kal_uint8 priority;
 kal_uint8 priority_bit_en;
 kal_uint8 pattern;
 kal_uint8 pattern_bit_en;
} IDC_CTRL_PM_CONFIG_T;


typedef struct
{
 kal_uint8 data[2];
 kal_uint16 offset;
} IDC_EVENT_T;

typedef struct
{
 kal_uint8 schedule_num;
 kal_uint8 num_event;
 IDC_EVENT_T schedule_event[20];
} IDC_CTRL_SCHEDULE_EVENT_T;


typedef struct
{
 kal_uint8 schedule_num;
 kal_uint32 base_time;
} IDC_CTRL_SCHEDULE_START_T;


typedef struct
{
 kal_uint8 schedule_num;
 kal_uint32 bitmap;
} IDC_CTRL_STOP_EVENT_T;


typedef struct
{
 UART_buffer dir;
} IDC_CTRL_PURGE_T;


typedef struct
{
 kal_uint32 schedule_status[2];
} IDC_CTRL_GET_SCHEDULE_STATUS_T;


typedef struct
{
 kal_bool send_out;
} IDC_CTRL_CHECK_EVENT_SEND_OUT_T;


typedef enum
{
 IDC_INTERNAL_PIN,
 IDC_EXTERNAL_PIN,
} IDC_PIN_MODE_T;

typedef struct
{
 IDC_PIN_MODE_T pin_mode;
} IDC_CTRL_PIN_CONFIG_T;
# 300 "interface/driver/peripheral/dcl_idc.h"
typedef struct
{
 kal_bool idc;
 kal_bool gpio;
 kal_bool uart;
} IDC_SUPPORT_T;
# 384 "interface/driver/peripheral/dcl.h" 2
# 397 "interface/driver/peripheral/dcl.h"
typedef DCL_INT32 DCL_STATUS;
typedef enum
{
   STATUS_OK = 0,
   STATUS_FAIL = -1,
   STATUS_INVALID_CMD = -2,
   STATUS_UNSUPPORTED = -3,
   STATUS_NOT_OPENED = -4,
   STATUS_INVALID_EVENT = -5,
   STATUS_INVALID_DCL_HANDLE = -6,
   STATUS_INVALID_CTRL_DATA = -7,
   STATUS_INVALID_CONFIGURATION = -8,
   STATUS_INVALID_ARGUMENT = -9,
   STATUS_ERROR_TIMEOUT = -10,
   STATUS_ERROR_CRCERROR = -11,
   STATUS_ERROR_READONLY = -12,
   STATUS_ERROR_WRONG_STATE = -13,
   STATUS_INVALID_DEVICE = -14,
   STATUS_ALREADY_OPENED = -15,
   STATUS_SET_VFIFO_FAIL = -16,
   STATUS_INVALID_OPERATION = -17,
   STATUS_DEVICE_NOT_EXIST = -18,


   STATUS_DEVICE_NOT_SUPPORT_DMA = -19,
   STATUS_DEVICE_IS_BUSY = -20,
   STATUS_ACKERR = -21,
   STATUS_HS_NACKERR = -22,

   STATUS_BUFFER_EMPTY = 1
} DCL_STATUS_T;




typedef DCL_UINT16 DCL_DEV;
typedef enum
{

   DCL_UART_GROUP_START = 0,
   uart_port1=0x00, uart_port2, uart_port3, uart_port_usb, uart_port_usb2, uart_port_usb3, uart_port_usb4, uart_port_usb5, uart_port_dhl_sp_expt, uart_port_dhl_ctrl_sp_expt, uart_port_dhl_sp, uart_port_dhl_ccci = uart_port_dhl_sp, uart_port_ccci_start = uart_port_dhl_ccci, uart_port_dhl_ctrl_sp, uart_port_tst_ccci = uart_port_dhl_ctrl_sp, uart_port_at_ccci, uart_port_gps_ccci, uart_port_sim_ccci, uart_port_dhl2_ccci, uart_port_ccci_end = uart_port_dhl2_ccci, start_of_virtual_port, end_of_virtual_port = (((((5 + 1) * ((2))) + 0 + 2 + 1 + 0 )) + start_of_virtual_port), uart_port_mini_log, uart_port_dual_talk, uart_port_modis, uart_max_port, uart_port_null = 99,


   DCL_GPIO_GROUP_START = 0x100,
   DCL_GPIO,
   DCL_GPO,
   DCL_GPIO_CLK,


   DCL_GPT_GROUP_START = 0x200,
   DCL_GPT_CB,
   DCL_GPT_CB2,
   DCL_GPT_BusyWait,
   DCL_GPT_FreeRUN3,
   DCL_GPT_FreeRUN4,
   DCL_GPT_DEBUG,
   DCL_XGPT,
   DCL_GPT_CB_MS,
   DCL_GPT_CRITICAL_CB_MS,
# 466 "interface/driver/peripheral/dcl.h"
   DCL_PWM_GROUP_END = 0x400,
   DCL_REST_GROUP_START = DCL_PWM_GROUP_END,

   DCL_BMT_GROUP_START = 0x500,
   DCL_BMT,


   DCL_PFC_GROUP_START = 0x600,
   DCL_PFC,


   DCL_RTC_GROUP_START = 0x700,
   DCL_RTC,


   DCL_ADC_GROUP_START = 0x800,
   DCL_ADC,


   DCL_PMU_GROUP_START = 0x900,
   DCL_PMU,


   DCL_PW_GROUP_START = 0xA00,
   DCL_PW,


   DCL_CHR_USB_DET_GROUP_START = 0xB00,
   DCL_CHR_USB_DET,






   DCL_KBD_GROUP_START = 0xD00,
   DCL_KBD,
# 520 "interface/driver/peripheral/dcl.h"
   DCL_WDT_GROUP_START = 0x1100,
   DCL_WDT,






   DCL_USB_GROUP_START = 0x1300,
   DCL_USB,


   DCL_SIM_GROUP_START = 0x1400,
   DCL_SIM,






   DCL_MS_GROUP_START = 0x1600,
   DCL_MS,


   DCL_SDIO_GROUP_START = 0x1700,
   DCL_SDIO,


   DCL_ONEW_GROUP_START = 0x1800,
   DCL_ONEW,


   DCL_HDQ_GROUP_START = 0x1900,
   DCL_HDQ,






   DCL_SIM_GPIO_GROUP_START = 0x1B00,
   DCL_SIM_GPIO,


   DCL_SIM_GPI_GROUP_START = 0x1C00,
   DCL_SIM_GPI,


   DCL_F32K_CLK_GROUP_START = 0x1D00,
   DCL_F32K_CLK,


   DCL_IDC_GROUP_START = 0x1E00,
   DCL_IDC

} DCL_DEV_T;




typedef DCL_UINT32 DCL_FLAGS;
typedef enum
{
   FLAGS_NONE = 0,
   FLAGS_END
} DCL_FLAGS_T;





typedef DCL_UINT32 DCL_OPTIONS;
typedef enum
{
   OPTIONS_NONE = 0,

   GPT_OPTIONS_START = OPTIONS_NONE,
  


   GPIO_OPTIONS_START = 0x100,
  


   ADC_OPTIONS_START = 0x200,
  


   WDT_OPTIONS_START = 0x300,
  


   BMT_OPTIONS_START = 0x400,
  


   PFC_OPTIONS_START = 0x500,
  


   RTC_OPTIONS_START = 0x600,
  
# 638 "interface/driver/peripheral/dcl.h"
   USB_DRV_OPTIONS_START = 0xA00,
  
# 654 "interface/driver/peripheral/dcl.h"
   PMU_OPTIONS_START = 0xE00,
  


   PW_OPTIONS_START = 0xF00,
  


   CHR_DET_OPTIONS_START = 0x1000,
  






   F32K_CLK_OPTIONS_START = 0x4000,
  


   IDC_OPTIONS_START = 0x5000,
  

   OPTIONS_MAX
} DCL_OPTIONS_T;




typedef DCL_INT32 DCL_HANDLE;







typedef DCL_UINT8 DCL_BUFF;
typedef DCL_UINT32 DCL_BUFF_LEN;




typedef union
{





  



  



  



  



  
# 734 "interface/driver/peripheral/dcl.h"
  
# 750 "interface/driver/peripheral/dcl.h"
  



  



  



   SIM_CONFIG_T rSimConfig;
# 774 "interface/driver/peripheral/dcl.h"
  



  

} DCL_CONFIGURE_T;





typedef DCL_UINT32 DCL_EVENT;
typedef enum
{
   EVENT_NULL = 0,


   GPT_EVENTS_START = EVENT_NULL,
   EVENT_HGPT_TIMEOUT = 0x1,



   GPIO_EVENTS_START = 0x100,
  



   BMT_EVENTS_START = 0x200,
  



   PFC_EVENTS_START = 0x300,
  



   RTC_EVENTS_START = 0x400,
   EVENT_RTC_ALARM = 0x00000001, EVENT_RTC_TC = 0x00000002,



   WDT_EVENTS_START = 0x500,
   EVENT_WDT_TIMEOUT = 0x00000001,



   ADC_EVENTS_START = 0x600,
  
# 839 "interface/driver/peripheral/dcl.h"
   KBDH_EVENTS_START = 0x900,
   DCL_EVENT_HKBD_STATUS_CHANGE = 0x01, DCL_EVENT_HKBD_EX_STATUS_CHANGE = 0X02, DCL_EVENT_HKBD_MAX = 0XFF,
# 849 "interface/driver/peripheral/dcl.h"
   USB_DRV_EVENTS_START = 0xB00,
  
# 869 "interface/driver/peripheral/dcl.h"
   PMU_EVENTS_START = 0xF00,
  



   PW_EVENTS_START = 0x1000,
  



   CHR_DET_EVENTS_START = 0x1100,
  
# 889 "interface/driver/peripheral/dcl.h"
   F32K_CLK_EVENTS_START = 0x1300,
  



   IDC_EVENTS_START = 0x1400,
  

   EVENT_END
} DCL_EVENT_T;




typedef void (*PFN_DCL_CALLBACK)(DCL_EVENT event);







typedef DCL_UINT32 DCL_CTRL_CMD;
typedef enum
{
   CMDS_START = 0,



   GPIO_CMDS_START = CMDS_START,
   GPIO_CMD_READ, GPIO_CMD_WRITE_LOW, GPIO_CMD_WRITE_HIGH, GPIO_CMD_SET_MODE_0, GPIO_CMD_SET_MODE_1, GPIO_CMD_SET_MODE_2, GPIO_CMD_SET_MODE_3, GPIO_CMD_SET_MODE_4, GPIO_CMD_SET_MODE_5, GPIO_CMD_SET_MODE_6, GPIO_CMD_SET_MODE_7, GPIO_CMD_SET_MODE_8, GPIO_CMD_SET_DIR_OUT, GPIO_CMD_SET_DIR_IN, GPIO_CMD_RETURN_MODE, GPIO_CMD_RETURN_DIR, GPIO_CMD_RETURN_OUT, GPIO_CMD_ENABLE_PULL, GPIO_CMD_DISABLE_PULL, GPIO_CMD_SET_PULL_HIGH, GPIO_CMD_SET_PULL_LOW, GPIO_CMD_SET_DINV, GPIO_CMD_SET_DEBUG, GPIO_CMD_SET_CLK_OUT, GPIO_CMD_SET_CLK_DIV, GPIO_CMD_SET_OWNERSHIP_TO_MD, GPIO_CMD_SET_OWNERSHIP_TO_AP, GPIO_CMD_SET_DRIVE, GPIO_CMD_RETURN_DRIVE, GPIO_CMD_RETURN_OWNERSHIP, GPO_CMD_RETURN_MODE, GPO_CMD_RETURN_OUT, GPO_CMD_WRITE_HIGH, GPO_CMD_WRITE_LOW, GPO_CMD_MODE_SET_0, GPO_CMD_MODE_SET_1, GPO_CMD_MODE_SET_2, GPO_CMD_MODE_SET_3, GPIO_CMD_SET_DIR_OUT_NO_IRQ_MASK, GPIO_CMD_SET_DIR_IN_NO_IRQ_MASK, GPIO_CMD_WRITE_HIGH_NO_IRQ_MASK, GPIO_CMD_WRITE_LOW_NO_IRQ_MASK, GPIO_CMD_READ_NO_IRQ_MASK, GPIO_CMD_WRITE_FOR_SPI, GPIO_CMD_GET_AP_PIN,



   UART_CMDS_START = 0x100,
   SIO_CMD_INIT = 0x00, SIO_CMD_OPEN, SIO_CMD_CLOSE, SIO_CMD_GET_BYTES, SIO_CMD_PUT_BYTES, SIO_CMD_GET_RX_AVAIL, SIO_CMD_GET_TX_AVAIL, SIO_CMD_PUT_ISR_BYTES, SIO_CMD_GET_ISR_TX_AVAIL, SIO_CMD_PURGE, SIO_CMD_SET_OWNER, SIO_CMD_SET_FLOW_CTRL, SIO_CMD_CONFIG_ESCAPE, SIO_CMD_SET_DCB_CONFIG, SIO_CMD_CTRL_DCD, SIO_CMD_CTRL_BREAK, SIO_CMD_CLR_RX_BUF, SIO_CMD_CLR_TX_BUF, SIO_CMD_SET_BAUDRATE, SIO_CMD_SEND_ISR_DATA, SIO_CMD_SEND_DATA, SIO_CMD_GET_OWNER_ID, SIO_CMD_SET_AUTOBAUD_DIV, SIO_CMD_REG_TX_CB, SIO_CMD_REG_RX_CB, SIO_CMD_GET_UART_BYTE, SIO_CMD_PUT_UART_BYTE, SIO_CMD_PUT_UART_BYTES, SIO_CMD_READ_DCB_CONFIG, SIO_CMD_CTRL_RI, SIO_CMD_GET_ESCAPE_INFO, SIO_CMD_CTRL_DTR, SIO_CMD_READ_HW_STATUS, SIO_CMD_GET_UART_BYTE_WITH_TIMEOUT, UART_CMD_UART_START = 0x100, UART_CMD_SET_FIFO_TRIGGER, UART_CMD_POWER_ON, UART_CMD_CHECK_TX_BUF_EMPTY, UART_CMD_CHECK_TX_SEND_OUT, UART_CMD_GET_TX_BUF_SIZE, UART_CMD_SLEEP_TX_ENABLE, UART_CMD_CTRL_SLEEP_MODE, UART_CMD_SWITCH_PORT, UART_CMD_BOOTUP_INIT, UART_CMD_BOOT_PUTBYTES, UART_CMD_LOOPBACK, UART_CMD_ASSERT_WAIT_SEND_OUT, UART_CMD_CTRL_USE_VFIFO, UART_CMD_GET_FLOW_CONTROL, UART_CMD_REG_DEF_CB, UART_CMD_BMT_PUT_BYTES, UART_CMD_RECHANDLER_VFIFO, UART_CMD_TRXHANDLER_VFIFO, UART_CMD_RECTIMEOUTHANDLE, UART_CMD_CTRL_TX_DMA, UART_CMD_GET_MAX_BAUDRATE, UART_CMD_UART_END, USB_CMD_UART_START = 0x200, USB_CMD_IS_CDCACM, USB_CMD_HIGH_SPEED_IF_ENABLE, USB_CMD_REG_TX_CB, USB_CMD_TX_DATA_STATUS, USB_CMD_SEND_DATA, USB_CMD_GET_DATA, USB_CMD_SEND_ISR_DATA, USB_CMD_CTRL_SEND_DATA, USB_CMD_CTRL_GET_DATA, USB_CMD_HALT, USB_CMD_FT_PORT, USB_CMD_ACM_RING_BUFF_THRESHOLD_EN, USB_CMD_USB2UART_TX_DMA_CBK, USB_CMD_BOOT_PUTBYTES, USB_CMD_IS_CDCACM_ACTIVE, USB_CMD_UART_END, TTY_CMD_UART_START = 0x300, TTY_CMD_GET_CHUNK_SIZE, TTY_CMD_ASSIGN_RX_IOR, TTY_CMD_NEED_TX_DONE_CB, TTY_CMD_GET_DRV_STATE, TTY_CMD_PUT_BYTES_IOR, TTY_CMD_PUT_BYTES_IOR_LIGHT, TTY_CMD_GET_MTU_SIZE, TTY_CMD_SET_INDICATION, TTY_CMD_UART_END, TTY_CMD_EXCEPTION_START = 0x400, TTY_CMD_EXCEPTION_RESET, TTY_CMD_EXCEPTION_HIF_INIT, TTY_CMD_EXCEPTION_CLEAR_CHANNEL, TTY_CMD_EXCEPTION_TX_GPD, TTY_CMD_EXCEPTION_TX_DONE_INFO, TTY_CMD_EXCEPTION_HIF_STATE, TTY_CMD_EXCEPTION_ASSIGN_RX_GPD, TTY_CMD_EXCEPTION_GET_RX_GPD, TTY_CMD_EXCEPTION_HIF_POLL, TTY_CMD_EXCEPTION_HIF_RESET_LINK, TTY_CMD_EXCEPTION_FLUSH_TX, TTY_CMD_EXCEPTION_FLUSH_RX, TTY_CMD_EXCEPTION_END,



   GPT_CMDS_START = 0x200,
   SGPT_CMD_START, SGPT_CMD_STOP, SGPT_CMD_BUSYWAIT, SGPT2_CMD_START, SGPT2_CMD_STOP, SGPT2_CMD_SET_COUNTVALUE, SGPT2_CMD_REGISTERCALLBACK, SGPT2_CMD_SET_CLK, FGPT_CMD_START, FGPT_CMD_STOP, FGPT_CMD_RETURN_COUNT,




   ADC_CMDS_START = 0x300,
   ADC_CMD_CREATE_OBJECT, ADC_CMD_MODIFY_PARAM, ADC_CMD_START_MEASURE, ADC_CMD_STOP_MEASURE, ADC_CMD_SET_TIMER_PAGE_ALIGN, ADC_CMD_REGISTER_MEASURE_CB, ADC_CMD_REGISTER_COMPLETE_CB, ADC_CMD_GET_CHANNEL, ADC_CMD_SCHE_ID_GET_HANDLE, ADC_CMD_TRANSFORM_INTO_VOLT, ADC_CMD_TRANSFORM_INTO_TEMP, ADC_CMD_TRANSFORM_INTO_CURR, ADC_CMD_GET_SCHEDULER_PARAMETER, ADC_CMD_SET_CALIBRATION_DATA, ADC_CMD_READ_CALIBRATION_DATA, ADC_CMD_READ_CALIBRATION_INFORM_IN_USBBOOT, ADC_CMD_SET_MULTI_CHANNEL_READ,

   HADC_CMDS_START = 0x400,
   ADC_CMD_IMM_MEASURE, ADC_CMD_SYNC_MEASURE, ADC_CMD_TDMA_SYNC_SETUP, ADC_CMD_POWER, ADC_CMD_GET_DATA_2_META, ADC_CMD_GET_DATA, ADC_CMD_GET_META_DATA, ADC_CMD_GET_MAX_PHYSICAL_CH, ADC_CMD_GET_IMM_DATA_ON_BOOTING, ADC_CMD_GET_TEMP, ADC_CMD_GET_PHYSICAL_CHANNEL,



   WDT_CMDS_START = 0x500,
   WDT_CMD_ENABLE , WDT_CMD_SET_EXT_POL, WDT_CMD_SET_EXT_RESET, WDT_CMD_SET_VALUE, WDT_CMD_RESTART, WDT_CMD_DRV_RESET, WDT_CMD_ABN_RESET, WDT_CMD_IRQ, WDT_CMD_GET_RSTINTERVAL, WDT_CMD_ENABLE_DEBUG,



   BMT_CMDS_START = 0x600,
   BMT_CMD_CALLSTATE, BMT_CMD_CHARGE, BMT_CMD_GET_CUSTOMIZED_PARA, BMT_CMD_SET_EXT_CHARGER, BMT_CMD_INITIALIZE, BMT_CMD_IS_BAT_ON, BMT_CMD_SENDMES2UEM, BMT_CMD_SET_CHR_STATUS, BMT_CMD_VBATINHISR, BMT_CMD_WDT_INIT,



   PFC_CMDS_START = 0x700,
   PFC_CMD_RESET, PFC_CMD_SET_CONFIG, PFC_CMD_ENCODE, PFC_CMD_DECODE, PFC_CMD_DEQUEUE, PFC_CMD_RELOAD_RX,



   RTC_CMDS_START = 0x800,
   RTC_CMD_BOOTLOADER_POWERON, RTC_CMD_CLEAR_PDN_BITS, RTC_CMD_CONFIG_AL_TC, RTC_CMD_DELAY, RTC_CMD_FT_POWEROFF, RTC_CMD_GET_ALARM_TIME, RTC_CMD_GET_TIME, RTC_CMD_GPIO_GET_INPUT, RTC_CMD_GPIO_SET_EXPORT_32K, RTC_CMD_GPIO_SET_EXPORT_COREDETB, RTC_CMD_GPIO_SET_INPUT_MODE, RTC_CMD_GPIO_SET_OUTPUT_MODE, RTC_CMD_HW_INIT, RTC_CMD_INIT, RTC_CMD_INIT_TC_AL_INTR, RTC_CMD_IS_CONFIG_VALID, RTC_CMD_IS_FIRST_ON, RTC_CMD_IS_MS_FIRSTPOWERON, RTC_CMD_IS_TIME_VALID, RTC_CMD_PWIC_CHECK_POWERON, RTC_CMD_PWIC_FIRST_POWERON_INIT_RTCTIME, RTC_CMD_PWIC_MASK_AL, RTC_CMD_PWIC_POWEROFF_RTC_INIT, RTC_CMD_PWIC_POWERON_RTC_INIT, RTC_CMD_READ_PDN_BITS, RTC_CMD_READ_SPAR, RTC_CMD_READ_XOSC_REG, RTC_CMD_RELOAD, RTC_CMD_SET_ALARM_TIME, RTC_CMD_SET_FIRST_POWERON, RTC_CMD_SET_PDN_BITS, RTC_CMD_SET_PWR_KEY, RTC_CMD_SET_TIME, RTC_CMD_SETBBPU, RTC_CMD_SETXOSC, RTC_CMD_START_CALI, RTC_CMD_WAIT_DEBOUNCE, RTC_CMD_WRITE_PDN_BITS, RTC_CMD_WRITE_SPAR, RTC_CMD_WRITE_TRIGGER, RTC_CMD_WRITE_TRIGGER_WAIT, RTC_CMD_WRITE_XOSC_REG, RTC_CMD_PROT_UNLOCK, RTC_CMD_REGISTER_MODULE_TO_SEND_RTCTIME, RTC_CMD_WRITE_OSC32CON_REG,
# 974 "interface/driver/peripheral/dcl.h"
   KBDH_CMDS_START = 0xB00,
   HKBD_CMD_GET_KEY_NUMBER, HKBD_CMD_GET_KEY_STA_MAP, HKBD_CMD_GET_KEY_STATUS, HKBD_CMD_GET_POWER_KEY_STATUS,


   KBD_CMDS_START = 0xC00,
   KBD_CMD_SET_LONG_PRESS_TIME, KBD_CMD_SET_REPEAT_PRESS_TIME, KBD_CMD_SET_DETECTION_MODE, KBD_CMD_GET_KEY_DATA, KBD_CMD_PEEK_KEY_DATA, KBD_CMD_GET_DETECTION_MODE, KBD_CMD_CTRL_KEY_SUPPORT, KBD_CMD_CTRL_KEY_MULTIPLE, KBD_CMD_GET_KEY_EVENT_CNT, KBD_CMD_PUT_KEY_DATA, KBD_CMD_FIND_TWO_STEP,
# 1002 "interface/driver/peripheral/dcl.h"
   SDIO_CMDS_START = 0x1100,
   SDIO_CTRL_CMD_REG_WR, SDIO_CTRL_CMD_REG_WR_ISR, SDIO_CTRL_CMD_DATA_WR, SDIO_CTRL_CMD_REG_RD, SDIO_CTRL_CMD_DATA_RD, SDIO_CTRL_CMD_CHECK_INTR, SDIO_CTRL_CMD_ENABLE_INTR, SDIO_CTRL_CMD_INIT, SDIO_CTRL_CMD_ABORT, SDIO_CTRL_CMD_SW_RST, SDIO_CTRL_CMD_QUERY_BLK_SIZE, SDIO_CTRL_CMD_SET_BLK_SIZE, SDIO_CTRL_CMD_GET_BLK_SIZE, SDIO_CTRL_CMD_ENABLE_IO, SDIO_CTRL_CMD_SET_BUS_WIDTH, SDIO_CTRL_CMD_GET_CCCR, SDIO_CTRL_CMD_GET_FBR, SDIO_CTRL_CMD_CMD52_READ, SDIO_CTRL_CMD_CMD52_WRITE, SDIO_CTRL_CMD_CMD52_WRITE_READ, SDIO_CTRL_CMD_CMD53_READ, SDIO_CTRL_CMD_CMD53_WRITE, SDIO_CTRL_CMD_MCUDMA_READ, SDIO_CTRL_CMD_MCUDMA_WRITE, SDIO_CTRL_CMD_CLKPADRED_READ, SDIO_CTRL_CMD_CLKPADRED_WRITE, SDIO_CTRL_CMD_FORCEMCU_READ, SDIO_CTRL_CMD_FORCEMCU_WRITE, SDIO_CTRL_CMD_GETCLK, SDIO_CTRL_CMD_SETCLK,



   USB_DRV_CMDS_START = 0x1300,
   USB_DRV_CMD_INIT_DRV_INFO = 0, USB_DRV_CMD_RESET_DRV_INFO, USB_DRV_CMD_REGISTER_DRV_INFO, USB_DRV_CMD_SET_UNMASK_IRQ, USB_DRV_CMD_GET_UNMASK_IRQ, USB_DRV_CMD_GET_EP_STALL_STATUS, USB_DRV_CMD_DRV_CREATE_ISR, USB_DRV_CMD_DRV_ACTIVATE_ISR, USB_DRV_CMD_DMA_DRV_CREATE_ISR, USB_DRV_CMD_DMA_DRV_ACTIVATE_ISR, USB_DRV_CMD_PDN_ENABLE, USB_DRV_CMD_DP_PULL_UP, USB_DRV_CMD_SET_DISCON_STATUS, USB_DRV_CMD_RESET_DRV, USB_DRV_CMD_INITIALIZE_DRV_PHASE_1, USB_DRV_CMD_INITIALIZE_DRV_PHASE_2, USB_DRV_CMD_RELEASE_DRV, USB_DRV_CMD_SET_ADDRESS, USB_DRV_CMD_GET_FRAME_COUNT, USB_DRV_CMD_TXEP_INIT, USB_DRV_CMD_RXEP_INIT, USB_DRV_CMD_TXEP_EN, USB_DRV_CMD_TXEP_DIS, USB_DRV_CMD_RXEP_EN, USB_DRV_CMD_RXEP_DIS, USB_DRV_CMD_CONFIG_TXEP_TYPE, USB_DRV_CMD_CONFIG_RXEP_TYPE, USB_DRV_CMD_TXEP_CLEAR_DATATOG, USB_DRV_CMD_RxEP_CLEAR_DATATOG, USB_DRV_CMD_TXEP_USAGE, USB_DRV_CMD_RXEP_USAGE, USB_DRV_CMD_TXEP_PK_SIZE, USB_DRV_CMD_RXEP_PK_SIZE, USB_DRV_CMD_EPFIFO_READ, USB_DRV_CMD_EPFIFO_WRITE, USB_DRV_CMD_CTRLEPSTALL, USB_DRV_CMD_GET_EP0_STATUS, USB_DRV_CMD_UPDATE_EP0_STATE, USB_DRV_CMD_GET_EP0_PKT_LEN, USB_DRV_CMD_TXEP_READY, USB_DRV_CMD_GET_RXEP_PKT_LEN, USB_DRV_CMD_RXEP_READY, USB_DRV_CMD_IS_TXEP_EMPTY, USB_DRV_CMD_IS_RXEP_EMPTY, USB_DRV_CMD_CLEAR_TXEP_FIFO, USB_DRV_CMD_CLEAR_RXEP_FIFO, USB_DRV_CMD_GET_DMA_CHANNEL, USB_DRV_CMD_STOP_DMA_CHANNEL, USB_DRV_CMD_FREE_DMA_CHANNEL, USB_DRV_CMD_DMA_SETUP, USB_DRV_CMD_GET_DMA_RUN_STATUS, USB_DRV_CMD_SET_DMA_RUN_STATUS, USB_DRV_CMD_ENABLE_DMA_TIMER, USB_DRV_CMD_CHECK_DMA_TIME_OUT, USB_DRV_CMD_GET_DMA_REAL_COUNT, USB_DRV_CMD_SET_DMA_LIMITER, USB_DRV_CMD_SWITCH_DMA_BURST_MODE, USB_DRV_CMD_REGISTER_DMA_CHANNEL, USB_DRV_CMD_SET_DMA_BURST_MODE, USB_DRV_CMD_USB_IS_HIGH_SPEED, USB_DRV_CMD_ENTER_TESTMODE, USB_DRV_CMD_RESET_FIFO, USB_DRV_CMD_IS_FIFO_Not_Empty, USB_DRV_CMD_IS_SUSPEND_POWER_STATUS, USB_DRV_CMD_POLLING_TX_DONE, USB_DRV_CMD_POLLING_RX_DATA, USB_DRV_CMD_CLR_RXEP_ISR, USB_DRV_CMD_GET_RXEP_ISR_STATUS, USB_DRV_CMD_GET_TX_ISR_STATUS, USB_DRV_CMD_PHY_ENABLE, USB_DRV_CMD_PHY_DISABLE, USB_DRV_CMD_USB_UART_SHARE, USB_DRV_CMD_USBDL_UPDATE_USB_DL_MODE, USB_DRV_CMD_USBDL_IS_USB_DL_MODE, USB_DRV_CMD_DEBUG_INFO, USB_DRV_CMD_DUMP, USB_DRV_CMD_GET_TOTAL_FIFO_SIZE, USB_DRV_CMD_GET_IP_VERSION, USB_DRV_CMD_CHECK_IC_DMA_LIMIT_CAPABILITY, USB_DRV_CMD_CHECK_IC_UART_SHARE_PAD_CAPABILITY, USB_DRV_CMD_USBDL_IS_USB_FAST_META_MODE, USB_DRV_CMD_SET_MENU_CONFIG, USB_DRV_CMD_GET_MENU_CONFIG, USB_CLASS_CMD_START = 0x1000, USB_VIDEO_CLASS_START = 0x1001, USB_Video_CMD_Set_Default_JPEG_Max_Size, USB_Video_CMD_Complete_Still_Buffer, USB_Video_CMD_Complete_Video_Buffer, USB_Video_CMD_Get_Still_Buffer, USB_Video_CMD_Get_Video_Buffer, USB_VIDEO_CLASS_END = 0x10FF, USB_IMAGE_CLASS_START = 0x1100, USB_IMAGE_MTP_CMD_GET_DESCRIPTION_STRING_1_PTR, USB_IMAGE_MTP_CMD_GET_DESCRIPTION_STRING_2_PTR, USB_IMAGE_CLASS_END = 0x11FF,
# 1027 "interface/driver/peripheral/dcl.h"
   SIM_CMDS_START = 0x1700,
   SIM_CTRL_CMD_BASE, SIM_CTRL_CMD_RST = 0, SIM_CTRL_CMD_CMD, SIM_CTRL_CMD_PWOFF, SIM_CTRL_CMD_GET_CARD_INFO, SIM_CTRL_CMD_SET_SPEED, SIM_CTRL_CMD_SET_PREFER_PROTOCOL, SIM_CTRL_CMD_SET_CLK_STOP_MODE, SIM_CTRL_CMD_TOUT_TEST, SIM_CTRL_CMD_GET_SPEED, SIM_CTRL_CMD_QUERY_9000_ON_SELECT, SIM_CTRL_CMD_SET_SLT_RLT, SIM_CTRL_CMD_MAX_VALUE, SIM_CTRL_CMD_DUMMY_END = SIM_CTRL_CMD_BASE + SIM_CTRL_CMD_MAX_VALUE,



   PMU_CMDS_START = 0x1800,
   LDO_BUCK_SET_CMDS_START = 0, LDO_BUCK_CTRL, LDO_BUCK_SET_EN, LDO_BUCK_GET_EN_STATUS, LDO_BUCK_GET_QI_MODE, LDO_BUCK_SET_EN_FORCE, LDO_BUCK_SET_VOLTAGE, LDO_BUCK_SET_VOLTAGE_EN, LDO_BUCK_SET_SLEEP_VOLTAGE, LDO_BUCK_SET_BURST_THRESHOLD = 500, LDO_BUCK_SET_CURRENT_LIMIT, LDO_BUCK_SET_VOLTAGE_CALIBRATION_CODE, LDO_BUCK_SET_BIAS_CURRENT_CALIBRATION_CODE, LDO_BUCK_SET_STB_EN, LDO_BUCK_SET_OC_AUTO_OFF, LDO_BUCK_SET_RS, LDO_BUCK_SET_ON_SEL, LDO_BUCK_SET_SRCLKEN_SEL, LDO_BUCK_SET_STB_TD, LDO_BUCK_SET_NDIS_EN, LDO_BUCK_SET_OC_TD, LDO_BUCK_SET_OCFB_EN, LDO_BUCK_SET_VSIM_GPLDO_EN, LDO_BUCK_SET_VSIM2_GPLDO_EN, LDO_BUCK_SET_SIM2_GPIO_EN, LDO_BUCK_SET_CCI_SRCLKEN, LDO_BUCK_GET_OC_STATUS, LDO_BUCK_GET_QI_OC_STATUS, LDO_BUCK_SET_OC_INT_EN, LDO_BUCK_CLEAR_OC_FLAG, LDO_BUCK_GET_OC_FLAG, LDO_BUCK_GET_VOLTAGE_LIST, LDO_BUCK_SET_THER_SHDN_EN, LDO_BUCK_SET_LP_MODE_SET, LDO_BUCK_GET_LP_MODE, LDO_BUCK_SET_LP_SEL, LDO_BUCK_SET_ON_CTRL, LDO_BUCK_SET_MODESET, LDO_BUCK_SET_EN_CTRL, LDO_BUCK_SET_SRCLK_MODE_SEL, LDO_BUCK_SET_SRCLK_EN_SEL, LDO_BUCK_SET_EN_SEL, LDO_SET_CAL, LDO_BUCK_SET_CMDS_END, VIBR_SET_DIMMING_ON_DUTY = 900, VPA_SET_VOLTAGE = 1000, VPA_SET_VOSEL_MAP_EN, VPA_SET_EN, VPA_CTRL_SEL, VPA_GET_VOLTAGE_LIST, VPA_SET_BAT_LOW, VPA_SET_FPWM, VPA_SET_VOLTAGE_SELECTION_TABLE, VPA_SET_MAP_SEL, VRF18_SET_FPWM, VRF18_SET_MODESET, VRF18_2_SET_FPWM, VRF18_SET_BUCK_LDO_MODE, VRF1_SET_MODESET_CKPDN_SET, VRF1_SET_MODESET_CKPDN_CLR, VRF1_GET_MODESET_CKPDN, SIMLS_SET_SRST_CONF, SIMLS_SET_SCLK_CONF, SIMLS_SET_TDSEL, SIMAP_SET_TDSEL, SIMLS_SET_RDSEL, SIMAP_SET_RDSEL, SIM_SET_STB_SIO_MODE, SIMRST_SET_GPIO_SET, SIMRST_SET_GPIO_CLR, OCTL_SET_SIM_AP_SRST, OCTL_SET_SIM_AP_SCLK, OCTL_SET_SIMLS_SRST, OCTL_SET_SIMLS_SCLK, SPK_SET_EN = 2000, SPK_SET_MODE, SPK_GET_MODE, SPK_SET_OC_AUTO_OFF, SPK_SET_VOL_VALUE, SPK_GET_VOL_VALUE, SPK_SET_VOL, SPK_GET_VOL, SPK_SET_SLEW_RATE, SPK_SET_CALIBR_EN, SPK_SET_CALIBR_SEL, KPLED_SET_EN = 3000, KPLED_SET_MODE, KPLED_SET_SEL, KPLED_SET_FREQUENCY_DIVISION, KPLED_SET_DIMMING_ON_DUTY, FLASHLED_SET_EN = 4000, FLASHLED_SET_MODE, FLASHLED_SET_SEL, BL_SET_INIT = 5000, BL_SET_EN, BL_GET_SUPPORT_LEVEL, BL_GET_USE_PWM_QUERY, BOOST_SET_EN = 6000, BOOST_SET_CURRENT_LIMIT, BOOST_SET_CLK_CAL, BOOST_SET_SYNC_EN, BOOST_SET_VOLTAGE, BOOST_SET_LEVEL, ISINK_SET_EN = 7000, ISINK_SET_MODE, ISINK_SET_STEP, ISINK_SET_FORCE_OFF, ISINK_SET_CHANNEL, ISINK_SET_DIMMING_ON_DUTY, ISINK_SET_FREQUENCY_DIVISION, CHR_SET_ADC_MEASURE_EN = 8000, CHR_SET_WDT_CLEAR, CHR_SET_WDT_TIMER, CHR_SET_WDT_INT_EN, CHR_SET_WDT_EN, CHR_SET_CHR_EN, CHR_SET_CHR_FORCE_EN, CHR_GET_CHR_DET_STATUS, CHR_GET_CHR_CURRENT, CHR_GET_CHR_CURRENT_LIST, CHR_SET_CHR_CURRENT, CHR_GET_CV_DETECTION_STATUS, CHR_SET_CV_DETECTION_EN, CHR_SET_CV_DETECTION_VOLTAGE, CHR_SET_CV_DETECTION_VOLTAGE_CALIBRATION, CHR_SET_CSDAC_EN, CHR_GET_IS_BATTERY_ON, CHR_GET_IS_CHR_VALID, CHR_SET_HV_DETECTION_VOLTAGE, CHR_GET_HV_DETECTION_VOLTAGE_LIST, CHR_SET_VBAT_OV_DETECTION_VOLTAGE, CHR_SET_BAT_HT_EN, CHR_SET_OTG_BVALID_EN, CHR_SET_CV_MODE, CHR_SET_CSDAC_MODE, CHR_SET_TRACKING_EN, CHR_SET_HWCV_EN, CHR_SET_ULC_DET_EN, CHR_SET_LOW_ICH_DB, CHR_SET_CHARGE_WITHOUT_BATTERY, CHR_SET_BC11_PULLUP_EN, CHR_SET_VBAT_CV_CALIBRATION, CHR_GET_CC_DET, ADC_SET_RQST, ADC_CLR_RQST, ADC_GET_RDY_MD, ADC_GET_OUT_MD, MISC_SET_RLED_EN = 9000, MISC_SET_GLED_EN, MISC_SET_BLED_EN, MISC_GET_CID, MISC_GET_ECO_VERSION, MISC_GET_HW_VERSION, MISC_SET_REGISTER_VALUE, MISC_GET_REGISTER_VALUE, PMU_MOD_CMD_MAX,



   PW_CMDS_START = 0x1900,
   PW_CMD_POWERON, PW_CMD_POWEROFF, PW_CMD_SET_POWERON_REASON, PW_CMD_GET_POWERON_REASON, PW_CMD_SET_SWITCH_TO_IDLE, PW_CMD_CLEAR_SWITCH_TO_IDLE, PW_CMD_POWER_INIT, PW_CMD_UPDATE_FLAGS, PW_CMD_NFB_POWERON, PW_CMD_IS_USB_BOOT,



   CHR_DET_CMDS_START = 0x1A00,
   CHR_DET_CMD_QUERY_IS_CHR_IN_BY_PW=0, CHR_DET_CMD_QUERY_CHR_TYPE, CHR_DET_CMD_REGISTER_CHR_USB, CHR_DET_CMD_UNMASK_EINT, CHR_DET_CMD_REGISTER_CHR_USB_EINT, CHR_DET_CMD_REGISTER_USB_HISR,
# 1052 "interface/driver/peripheral/dcl.h"
    SIMGPIO_CMDS_START = 0x1C00,
 SIMGPIO_CMD_READ, SIMGPIO_CMD_WRITE, SIMGPIO_CMD_SET_DIR, SIMGPIO_CMD_TRUN_ON_VCC, SIMGPI_CMD_READ,



   F32K_CLK_CMDS_START = 0x1D00,
   F32K_CLK_CMD_QUERY_IS_XOSC32K, F32K_CLK_CMD_EOSC32_TRIMMING, F32K_CLK_CMD_HW_INIT,



   IDC_CMDS_START = 0x1E00,
   IDC_CMD_SET_DCB_CONFIG, IDC_CMD_GET_DCB_CONFIG, IDC_CMD_SET_BAUDRATE, IDC_CMD_GET_MAX_BAUDRATE, IDC_CMD_SET_FIFO_TRIGGER, IDC_CMD_SET_PM_CONFIG, IDC_CMD_GET_PM_CONFIG, IDC_CMD_SEND_EVENT, IDC_CMD_SCHEDULE_EVENT, IDC_CMD_SCHEDULE_START, IDC_CMD_STOP_EVENT, IDC_CMD_PURGE, IDC_CMD_GET_SCHEDULE_STATUS, IDC_CMD_CHECK_EVENT_SEND_OUT, IDC_CMD_SET_PIN_CONFIG, IDC_CMD_GET_PIN_CONFIG,

   CMD_END
} DCL_CTRL_CMD_T;




typedef union
{


   SGPT_CTRL_START_T rSGPTStart; FGPT_CTRL_RETURN_COUNT_T u2RetCount; GPT_BUSYWAIT_COUNT uBusyWaitcount; SGPT2_CTRL_RESET_DATA_T rHGPTReset; SGPT2_CALLBACK_FUNC_T gpt2_callback; SGPT2_CTRL_CLK_T gpt2_clk;



   UART_CTRL_INIT_T rUARTCtrlInit; UART_CTRL_OPEN_T rUARTCtrlOPEN; UART_CTRL_CLOSE_T rUARTCtrlCLOSE; UART_CTRL_GET_BYTES_T rUARTCtrlGETBYTES; UART_CTRL_PUT_BYTES_T rUARTCtrlPUTBYTES; UART_CTRL_RX_AVAIL_T rUARTCtrlRXAVAIL; UART_CTRL_TX_AVAIL_T rUARTCtrlTXAVAIL; UART_CTRL_PURGE_T rUARTCtrlPURGE; UART_CTRL_OWNER_T rUARTCtrlOWNER; UART_CTRL_FLOW_CTRL_T rUARTCtrlFLOWCTRL; UART_CTRL_CONFIG_ESP_T rUARTCtrlCONFIGESP; UART_CTRL_DCB_T rUARTCtrlDCB; UART_CTRL_DCD_T rUARTCtrlDCD; UART_CTRL_BREAK_T rUARTCtrlBREAK; UART_CTRL_CLR_BUFFER_T rUARTCtrlCLRBUFFER; UART_CTRL_BAUDRATE_T rUARTCtrlBAUDRATE; UART_CTRL_SEND_DATA_T rUARTCtrlSENDDATA; UART_CTRL_AUTO_BAUDDIV_T rUARTCtrlAUTOBAUDDIV; UART_CTRL_REG_TX_CB_T rUARTCtrlREGTXCB; UART_CTRL_REG_RX_CB_T rUARTCtrlREGRXCB; UART_CTRL_GET_UART_BYTE_T rUARTCtrlGETUARTBYTE; UART_CTRL_GET_UART_BYTE_WITH_TIMEOUT_T rUARTCtrlGETUARTBYTEWithTimeOut; UART_CTRL_PUT_UART_BYTE_T rUARTCtrlPUTUARTBYTE; UART_CTRL_PUT_UART_BYTES_T rUARTCtrlPUTUARTBYTES; UART_CTRL_RI_T rUARTCtrlRI; UART_CTRL_DTR_T rUARTCtrlDTR; UART_CTRL_RHS_T rUARTCtrlRHS; UART_CTRL_SFT_T rUARTCtrlSFT; UART_CTRL_POWERON_T rUARTCtrlPoweron; UART_CTRL_CHECK_TBE_T rUARTCtrlCheckBUFEMP; UART_CTRL_CHECK_TSO_T rUARTCtrlCheckTXSendOut; UART_CTRL_GET_TBS_T rUARTCtrlGetTxBufSize; UART_CTRL_SLEEP_ON_TX_ENABLE_T rUARTCtrlSleepOnTxEnable; UART_CTRL_SLEEP_ENABLE_T rUARTCtrlSleepEnable; UART_CTRL_BOOT_PUTBYTES_T rUARTCtrlBootPutBytes; UART_CTRL_USE_VFIFO_T rUARTCtrlUseVFifo; UART_CTRL_REG_DEF_CB_T rUARTCtrlRegDefCB; UART_CTRL_GET_MAXBAUDRATE_T rUARTCtrlGetMaxBaudrate; UART_CTRL_GET_FC_T rUARTCtrlGetFC; UART_CTRL_NEED_TX_DONE_CB_T rUARTCtrlNeedTxDoneCb; UART_CTRL_GET_DRV_STATE_T rUARTCtrlGetDrvState; UART_CTRL_ASSIGN_RX_IOR_T rUARTCtrlAssignRxIor; UART_CTRL_PUT_BYTES_IOR_T rUARTCtrlPUTBYTESIOR; UART_CTRL_GET_CHUNK_SIZE_T rUARTCtrlGETCHUNKSIZE; UART_CTRL_GET_MTU_SIZE_T rUARTCtrlGETMTUSIZE; UART_CTRL_SET_INDICATION_T rUARTCtrlSETINDICATION; TTY_CTRL_EXCP_TX_GPD_T rTTYCtrlExcpTxGPD; TTY_CTRL_EXCP_TX_DONE_INFO_T rTTYCtrlExcpTxDoneInfo; TTY_CTRL_EXCP_HIF_STATE_T rTTYCtrlExcpHifState; TTY_CTRL_EXCP_ASSIGN_RX_GPD_T rTTYCtrlExcpAssignRxGPD; TTY_CTRL_EXCP_GET_RX_GPD_T rTTYCtrlExcpGetRxGPD; TTY_CTRL_EXCP_FLUSH_TX_T rTTYCtrlExcpFlushTx; TTY_CTRL_EXCP_FLUSH_RX_T rTTYCtrlExcpFlushRx; TTY_CTRL_EXCP_HIF_POLL_T rTTYCtrlExcpHifPoll;



   GPIO_CTRL_READ_T rRead; GPIO_CTRL_RETURN_MODE_T rReturnMode; GPIO_CTRL_RETURN_DIR_T rReturnDir; GPIO_CTRL_RETURN_OUT_T rReturnOut; GPIO_CTRL_RETURN_AP_T rReturnAp; GPIO_CTRL_SET_DINV_T rSetDinv; GPIO_CTRL_SET_DEBUG_T rSetDebug; GPIO_CTRL_SET_CLK_OUT_T rSetClkOut; GPIO_CTRL_SET_CLK_DIV_T rSetClkDiv; GPIO_CTRL_WRITE_FOR_SPI_T rWriteSpi; GPIO_CTRL_SET_DRIVE_T rSetDrive; GPIO_CTRL_RETURN_DRIVE_T rReturnDrive; GPIO_CTRL_RETURN_OWNERSHIP_T rReturnOwnership; GPO_CTRL_RETURN_MODE_T oReturnMode; GPO_CTRL_RETURN_OUT_T oReturnOut;



   ADC_CTRL_CREATE_OBJECT_T rADCCreateObj; ADC_CTRL_MODIFY_PARAM_T rADCModifyParam; ADC_CTRL_IMM_MEASURE_T rADCImmMeasure; ADC_CTRL_SYNC_MEASURE_T rADCSyncMeasure; ADC_CTRL_TDMA_SYNC_SETUP_T rADCTDMASyncSetup; ADC_CTRL_POWER_T rADCPower; ADC_CTRL_TIMER_ALIGN_T rADCTimerAlign; ADC_CTRL_REGISTER_MEASURE_CB_T rADCRegisterMeasureCB; ADC_CTRL_REGISTER_COMPLETE_CB_T rADCRegisterCompleteCB; ADC_CTRL_GET_PHYSICAL_CHANNEL_T rADCGetPhyChannel; DCL_CTRL_SCHE_ID_GET_HANDLE_T rADCScheIdGetHandle; ADC_CTRL_TRANSFORM_INTO_VOLT_T rADCTransformVolt; ADC_CTRL_TRANSFORM_INTO_TEMP_T rADCTransformTemp; ADC_CTRL_TRANSFORM_INTO_CURR_T rADCTransformCurr; ADC_CTRL_GET_DATA_2_META_T rADCGetData2Meta; ADC_CTRL_GET_DATA_T rADCGetData; ADC_CTRL_GET_META_DATA_T rADCGetMetaData; ADC_CTRL_GET_SCHEDULER_PARAMETER_T rGetSchedulerPara; ADC_CTRL_GET_MAX_PHYSICAL_CH_T rADCGetMaxPhyCh; ADC_CTRL_SET_CALIBRATION_DATA_T rSetCalibrationData; ADC_CTRL_READ_CALIBRATION_DATA_T rReadCalibrationData; ADC_CTRL_GET_IMM_DATA_ON_BOOTING_T rGetImmDataOnBooting; ADC_CTRL_GET_TEMP_T rGetTempData; DCL_MULTI_CHANNEL_PARA_T rMultiChannelPara;



   WDT_CTRL_ENABLE_T rWDTEnable; WDT_CTRL_SET_EXT_POL_T rWDTSetExtPol; WDT_CTRL_SET_EXT_RESET_T rWDTSetExtReset; WDT_CTRL_SET_VALUE_T rWDTSetValue; WDT_CTRL_IRQ_T rWDTIRQ; WDT_CTRL_DEBUG_T rWDTDebug; WDT_CTRL_GET_RSTINTERVAL_T rRstValue;



   BMT_CTRL_CALLSTATE_T rCallState; BMT_CTRL_CHARGE_T rChargeControl; BMT_CTRL_GET_CUSTOMIZED_PARA_T rGetCustomizedPara; BMT_CTRL_SET_EXT_CHARGER_T rSetExtChr; BMT_CTRL_IS_BAT_ON_T rIsBatOn; BMT_CTRL_SENDMES2UEM_T rSendMes2Uem; BMT_CTRL_SET_CHR_STATUS_T rSetChrStatus;



   PFC_CTRL_RESET_T r_pfc_ctrl_reset; PFC_CTRL_SET_CONFIG_T r_pfc_ctrl_set_config; PFC_CTRL_ENCODE_T r_pfc_ctrl_encode; PFC_CTRL_DECODE_T r_pfc_ctrl_decode; PFC_CTRL_DEQUEUE_T r_pfc_ctrl_dequeue; PFC_CTRL_RELOAD_RX_T r_pfc_ctrl_reload_rx;



   RTC_CTRL_BOOTLOADER_POWERON_T rBootloaderPowerOn; RTC_CTRL_CONFIG_AL_TC_T rConfigALTC; RTC_CTRL_CONFIG_PDN_BIT_T rConfigPDNBit; RTC_CTRL_FT_POWEROFF_T rFTPowerOff; RTC_CTRL_GET_ALARM_TIME_T rGetAlarmTime; RTC_CTRL_GET_TIME_T rGetTime; RTC_CTRL_GPIO_TIME_T rGPIO; RTC_CTRL_INIT_T rInit; RTC_CTRL_IS_CONFIG_VALID_T rIsConfigValid; RTC_CTRL_IS_FIRST_ON_T rIsFirstOn; RTC_CTRL_IS_MS_FIRSTPOWERON_T rIsMSFirstPowerOn; RTC_CTRL_IS_TIME_VALID_T rIsTimeValid; RTC_CTRL_PWIC_CHECK_POWERON_T rPwicCheckPowerOn; RTC_CTRL_PWIC_FIRST_POWERON_INIT_RTCTIME_T rPwicFirstPowerOnInitRTCTime; RTC_CTRL_CONFIG_SPAR_T rConfigSPARReg; RTC_CTRL_READ_XOSC_REG_T rReadXOSCReg; RTC_CTRL_SET_ALARM_TIME_T rSetAlarmTime; RTC_CTRL_SET_FIRST_POWERON_T rSetFirstPowerOn; RTC_CTRL_SET_TIME_T rSetTime; RTC_CTRL_SETBBPU_T rSetBBPU; RTC_CTRL_WRITE_XOSC_REG_T rWriteXOSCRef; RTC_CTRL_REGISTER_MODULE_ILM_INFO_T rRegisterModILMInfo; RTC_CTRL_WRITE_OSC32CON_REG_T rWriteOSC32CONReg;
# 1117 "interface/driver/peripheral/dcl.h"
  SKBD_CTRL_TIME_T rKBDCtrTime; SKBD_CTRL_KEYSUPPORT_T rKBDCtrlKeySupport; SKBD_CTRL_MULTIKEY_T rKBDCtrlMultiple; SKBD_CTRL_PEEKDATA_T rKBDCtrPeekData; SKBD_CTRL_KEYDATA_T rKBDCtrGetData; SKBD_CTRL_MODE_T rKBDCtrMode; SKBD_CTRL_KEY_CNT_T rKBDCtrkeyCnt; SKBD_CTRL_PUTKEY_T rKBDCtrPutKey; SKBD_CTRL_FIND_TWO_STEP_T rKBDCtrlFindTwoStepKey;


   HKBD_CTRL_KNUM_T rKBDCtrlKNUM; HKBD_CTRL_STA_MAP_T rKBDCtrlStaMap; HKBD_CTRL_KEY_STA_T rKBDCtrlKeySta; HKBD_CTRL_POWKEY_T rKBDCtrlPowerKeySta;
# 1139 "interface/driver/peripheral/dcl.h"
   SDIO_CTRL_REG_RW_T rSDIORegRw; SDIO_CTRL_DAT_RW_T rSDIODatRw; DCL_SDIO_function_id_enum rSDIOFunction; SDIO_CTRL_SET_BLK_SIZE_T rSDIOSetBlkSize; SDIO_CTRL_CHECK_INTR_T rSDIOCheckIntr; SDIO_CTRL_ENABLE_T rSDIOEnable; DCL_SD_BITWIDTH rSDIOBusWidth; SDIO_CTRL_GET_INFO_T rSDIOGetInfo; SDIO_CTRL_CMD52_T rSDIOCMD52; SDIO_CTRL_CMD53_T rSDIOCMD53; SDIO_CTRL_CMD_REG_T rSDIOCMDREG;



   USB_DRV_CTRL_EP_COMMON_FUNC_T rUSB_Common_Struct; USB_DRV_CTRL_REGISTER_DRV_INFO_T rDrv_Info; USB_DRV_CTRL_EP_CTRL_FUNC_1_T rEP_Ctrl_Func_1; USB_DRV_CTRL_USB_SET_ADDR_T rUSB_Set_Addr; USB_DRV_CTRL_USB_EP_INIT_T rUSB_Ep_Init; USB_DRV_CTRL_EP_ENABLE_T rEP_Enable; USB_DRV_CTRL_EP_DISABLE_T rEP_Disable; USB_DRV_CTRL_EP_CONFIG_TYPE_T rEP_Config_Type; USB_DRV_CTRL_EP_STATE_T rEP_Get_State; USB_DRV_CTRL_EP_CTRL_FUNC_2_T rEP_Ctrl_Func_2; USB_DRV_CTRL_EP_CTRL_FUNC_3_T rEP_Ctrl_Func_3; USB_DRV_CTRL_EP_CTRL_FUNC_4_T rEP_Ctrl_Func_4; USB_DRV_CTRL_EP_CTRL_FUNC_6_T rEP_Ctrl_Func_6; USB_DRV_CTRL_EP_FIFO_RW_T rEP_Fifo_Rw; USB_DRV_CTRL_EP_STALL_T rEP_Stall; USB_DRV_CTRL_GET_EP_STATUS_T rEP_Status; USB_DRV_CTRL_UPDATE_EPSTATE_T rEP_State; USB_DRV_CTRL_DMA_FUNC_T rDMA_Func; USB_DRV_CTRL_DMA_TIMER_FUNC_T rDMA_Timer_Func; USB_DRV_CTRL_DMA_CTRL_FUNC_1_T rDMA_Ctrl_Func_1; USB_DRV_CTRL_DMA_CTRL_FUNC_2_T rDMA_Ctrl_Func_2; USB_DRV_CTRL_DMA_SETUP_FUNC_T rDMA_Setup_Func; USB_DRV_CTRL_DMA_STATUS_FUNC_T rDMA_Status_Func; USB_DRV_CTRL_USB_TEST_MODE_FUNC_T rTest_Mode_Func; USB_DRV_CTRL_PHY_FUNC_T rPhy_Ctrl_Func; USB_DRV_CTRL_COM_TYPE_QUERY_T rComport_Ctrl_Func; USB_DRV_CTRL_COM_HIGH_SPEED_IF rComport_Ctrl_Fun2; USB_DRV_CTRL_COM_SEND_DATA rComport_Ctrl_Fun3; USB_DRV_CTRL_COM_GET_DATA rComport_Ctrl_Fun4; USB_DRV_CTRL_COM_RESPONSE rComport_Ctrl_Fun5; USB_DRV_CTRL_COM_SEND_ISR_DATA rComport_Ctrl_Fun6; USB_DRV_CTRL_COM_RB_THRESHOLD_EN rComport_Ctrl_Fun7; USB_DRV_CTRL_COM_FT_PORT rComport_Ctrl_Fun8; USB_DRV_CTRL_COM_INFO rComport_Ctrl_Fun10; USB_VIDEO_CTRL_FUNC1_T rVideo_Ctrl_Fun1; USB_VIDEO_CTRL_FUNC2_T rVideo_Ctrl_Fun2; USB_VIDEO_CTRL_FUNC3_T rVideo_Ctrl_Fun3; USB_IMAGE_CTRL_FUNC1_T rImage_Ctrl_Fun1; USB_DRV_CTRL_SET rComport_Ctrl_Fun9; USB_DRV_CTRL_COM_PUSH_DATA rComport_Ctrl_Fun11;
# 1159 "interface/driver/peripheral/dcl.h"
   SIM_CTRL_RST_T rSIMRst; SIM_CTRL_CMD_T rSIMCmd; SIM_CTRL_GET_CARD_INFO_T rSIMGetCardInfo; SIM_CTRL_SET_MAX_SPEED_T rSIMSetMaxSpeed; SIM_CTRL_SET_PREFER_PROTOCOL_T rSIMSetPreferProtocol; SIM_CTRL_SET_CLK_STOP_MODE_T rSIMSetClkStopMode; SIM_CTRL_TOUT_TEST_T rSIMToutTest; SIM_CTRL_GET_SPEED_T rSIMGetSpeed; SIM_CTRL_QUERY_9000_T rSIMQuery9000; SIM_CTRL_SET_SLT_RLT_T rSIMSetSltRlt;



   PMU_CTRL_LDO_BUCK_CTRL rPMULdoBuckCtrl; PMU_CTRL_LDO_BUCK_SET_EN rPMULdoBuckSetEn; PMU_CTRL_LDO_BUCK_GET_EN_STATUS rPMULdoBuckGetEnStatus; PMU_CTRL_LDO_BUCK_GET_QI_MODE rPMULdoBuckGetQiMode; PMU_CTRL_LDO_BUCK_SET_EN_FORCE rPMULdoBuckSetEnForce; PMU_CTRL_LDO_BUCK_SET_VOLTAGE rPMULdoBuckSetVoltage; PMU_CTRL_LDO_BUCK_SET_VOLTAGE_EN rPMULdoBuckSetVoltageEn; PMU_CTRL_LDO_BUCK_SET_SLEEP_VOLTAGE rPMULdoBuckSetSleepVoltage; PMU_CTRL_LDO_BUCK_SET_BURST_THRESHOLD rPMULdoBuckSetBurstThreshold; PMU_CTRL_LDO_BUCK_SET_CURRENT_LIMIT rPMULdoBuckSetCurrentLimit; PMU_CTRL_LDO_BUCK_SET_VOLTAGE_CALIBRATION_CODE rPMULdoBuckSetVoltageCalibrationCode; PMU_CTRL_LDO_BUCK_SET_BIAS_CURRENT_CALIBRATION_CODE rPMULdoBuckSetBiasCurrentCalibrationCode; PMU_CTRL_LDO_BUCK_SET_STB_EN rPMULdoBuckSetStbEn; PMU_CTRL_LDO_BUCK_SET_OC_AUTO_OFF rPMULdoBuckSetOcAutoOff; PMU_CTRL_LDO_BUCK_SET_RS rPMULdoBuckSetRs; PMU_CTRL_LDO_BUCK_SET_ON_SEL rPMULdoBuckSetOnSel; PMU_CTRL_LDO_BUCK_SET_SRCLKEN_SEL rPMULdoBuckSetSrclkenSel; PMU_CTRL_LDO_BUCK_SET_STB_TD rPMULdoBuckSetStbTd; PMU_CTRL_LDO_BUCK_SET_NDIS_EN rPMULdoBuckSetNdisEn; PMU_CTRL_LDO_BUCK_SET_OC_TD rPMULdoBuckSetOcTd; PMU_CTRL_LDO_BUCK_SET_OCFB_EN rPMULdoBuckSetOcfbEn; PMU_CTRL_LDO_BUCK_SET_VSIM_GPLDO_EN rPMULdoBuckSetVsimGpldoEn; PMU_CTRL_LDO_BUCK_SET_VSIM2_GPLDO_EN rPMULdoBuckSetVsim2GpldoEn; PMU_CTRL_LDO_BUCK_SET_SIM2_GPIO_EN rPMULdoBuckSetSim2GpioEn; PMU_CTRL_LDO_BUCK_SET_CCI_SRCLKEN rPMULdoBuckSetCciSrclken; PMU_CTRL_LDO_BUCK_GET_OC_STATUS rPMULdoBuckGetOcStatus; PMU_CTRL_LDO_BUCK_GET_QI_OC_STATUS rPMULdoBuckGetQiOcStatus; PMU_CTRL_LDO_BUCK_SET_OC_INT_EN rPMULdoBuckSetOcIntEn; PMU_CTRL_LDO_BUCK_CLEAR_OC_FLAG rPMULdoBuckClearOcFlag; PMU_CTRL_LDO_BUCK_GET_OC_FLAG rPMULdoBuckGetOcFlag; PMU_CTRL_LDO_BUCK_GET_VOLTAGE_LIST rPMULdoBuckGetVoltageList; PMU_CTRL_LDO_BUCK_SET_THER_SHDN_EN rPMULdoBuckSetTherShdnEn; PMU_CTRL_LDO_BUCK_SET_LP_MODE_SET rPMULdoBuckSetLpModeSet; PMU_CTRL_LDO_BUCK_GET_LP_MODE rPMULdoBuckGetLpMode; PMU_CTRL_LDO_BUCK_SET_LP_SEL rPMULdoBuckSetLpSel; PMU_CTRL_LDO_BUCK_SET_ON_CTRL rPMULdoBuckSetOnCtrl; PMU_CTRL_LDO_BUCK_SET_MODESET rPMULdoBuckSetModeset; PMU_CTRL_LDO_BUCK_SET_EN_CTRL rPMULdoBuckSetEnCtrl; PMU_CTRL_LDO_BUCK_SET_EN_SEL rPMULdoBuckSetEnSel; PMU_CTRL_LDO_BUCK_SET_SRCLK_MODE_SEL rPMULdoBuckSetSrclkModeSel; PMU_CTRL_LDO_BUCK_SET_SRCLK_EN_SEL rPMULdoBuckSetSrclkEnSel; PMU_CTRL_LDO_SET_CAL rPMULdoSetCal; PMU_CTRL_VPA_SET_VOSEL_MAP_EN rPMUVpaSetVoselMapEn; PMU_CTRL_VPA_SET_EN rPMUVpaSetEn; PMU_CTRL_VPA_SET_VOLTAGE rPMUVpaSetVoltage; PMU_CTRL_VPA_CTRL_SEL rPMUVpaCtrlSel; PMU_CTRL_VPA_GET_VOLTAGE_LIST rPMUVpaGetVoltageList; PMU_CTRL_VPA_SET_BAT_LOW rPMUVpaSetBatLow; PMU_CTRL_VPA_SET_FPWM rPMUVpaSetFpwm; PMU_CTRL_VPA_SET_VOLTAGE_SELECTION_TABLE rPMUVpaSetVoltageSelectionTable; PMU_CTRL_VPA_SET_MAP_SEL rPMUVpaSetMapSel; PMU_CTRL_VIBR_SET_DIMMING_ON_DUTY rPMUVibrSetDimmingOnDuty; PMU_CTRL_VRF18_SET_FPWM rPMUVrf18SetFpwm; PMU_CTRL_VRF18_SET_MODESET rPMUVrf18SetModeset; PMU_CTRL_VRF18_SET_BUCK_LDO_MODE rPMUVrf18SetBuckLdoMode; PMU_CTRL_VRF1_SET_MODESET_CKPDN_SET rPMUVrf1SetModesetCkpdnSet; PMU_CTRL_VRF1_SET_MODESET_CKPDN_CLR rPMUVrf1SetModesetCkpdnClr; PMU_CTRL_VRF1_GET_MODESET_CKPDN rPMUVrf1GetModesetCkpdn; PMU_CTRL_SIMLS_SET_SRST_CONF rPMUSimlsSetSrstConf; PMU_CTRL_SIMLS_SET_SCLK_CONF rPMUSimlsSetSclkConf; PMU_CTRL_SIMLS_SET_TDSEL rPMUSimlsSetTdsel; PMU_CTRL_SIMAP_SET_TDSEL rPMUSimapSetTdsel; PMU_CTRL_SIMLS_SET_RDSEL rPMUSimlsSetRdsel; PMU_CTRL_SIMAP_SET_RDSEL rPMUSimapSetRdsel; PMU_CTRL_SIM_SET_STB_SIO_MODE rPMUSimSetStbSioMode; PMU_CTRL_SIMRST_SET_GPIO_SET rPMUSimrstSetGpioSet; PMU_CTRL_SIMRST_SET_GPIO_CLR rPMUSimrstSetGpioClr; PMU_CTRL_OCTL_SET_SIM_AP_SRST rPMUOctlSetSimApSrst; PMU_CTRL_OCTL_SET_SIM_AP_SCLK rPMUOctlSetSimApSclk; PMU_CTRL_OCTL_SET_SIMLS_SRST rPMUOctlSetSimlsSrst; PMU_CTRL_OCTL_SET_SIMLS_SCLK rPMUOctlSetSimlsSclk; PMU_CTRL_SPK_SET_EN rPMUSpkSetEn; PMU_CTRL_SPK_SET_MODE rPMUSpkSetMode; PMU_CTRL_SPK_GET_MODE rPMUSpkGetMode; PMU_CTRL_SPK_SET_OC_AUTO_OFF rPMUSpkSetOcAutoOff; PMU_CTRL_SPK_SET_VOL_VALUE rPMUSpkSetVolValue; PMU_CTRL_SPK_GET_VOL_VALUE rPMUSpkGetVolValue; PMU_CTRL_SPK_SET_VOL rPMUSpkSetVol; PMU_CTRL_SPK_GET_VOL rPMUSpkGetVol; PMU_CTRL_SPK_SET_SLEW_RATE rPMUSpkSetSlewRate; PMU_CTRL_SPK_SET_CALIBR_EN rPMUSpkSetCalibrEn; PMU_CTRL_SPK_SET_CALIBR_SEL rPMUSpkSetCalibrSel; PMU_CTRL_FLASHLED_SET_EN rPMUFlashledSetEn; PMU_CTRL_FLASHLED_SET_MODE rPMUFlashledSetMode; PMU_CTRL_FLASHLED_SET_SEL rPMUFlashledSetSel; PMU_CTRL_KPLED_SET_EN rPMUKpledSetEn; PMU_CTRL_KPLED_SET_MODE rPMUKpledSetMode; PMU_CTRL_KPLED_SET_SEL rPMUKpledSetSel; PMU_CTRL_KPLED_SET_FREQUENCY_DIVISION rPMUKpledSetFrequencyDivision; PMU_CTRL_KPLED_SET_DIMMING_ON_DUTY rPMUKpledSetDimmingOnDuty; PMU_CTRL_CHR_SET_ADC_MEASURE_EN rPMUChrSetAdcMeasureEn; PMU_CTRL_CHR_SET_WDT_TIMER rPMUChrSetWdtTimer; PMU_CTRL_CHR_SET_WDT_INT_EN rPMUChrSetWdtIntEn; PMU_CTRL_CHR_SET_WDT_EN rPMUChrSetWdtEn; PMU_CTRL_CHR_SET_CHR_EN rPMUChrSetChrEn; PMU_CTRL_CHR_SET_CHR_FORCE_EN rPMUChrSetChrForceEn; PMU_CTRL_CHR_GET_CHR_DET_STATUS rPMUChrGetChrDetStatus; PMU_CTRL_CHR_GET_CHR_CURRENT rPMUChrGetChrCurrent; PMU_CTRL_CHR_GET_CHR_CURRENT_LIST rPMUChrGetChrCurrentList; PMU_CTRL_CHR_SET_CHR_CURRENT rPMUChrSetChrCurrent; PMU_CTRL_CHR_GET_CV_DETECTION_STATUS rPMUChrGetCvDetectionStatus; PMU_CTRL_CHR_SET_CV_DETECTION_EN rPMUChrSetCvDetectionEn; PMU_CTRL_CHR_SET_CV_DETECTION_VOLTAGE rPMUChrSetCvDetectionVoltage; PMU_CTRL_CHR_SET_CSDAC_EN rPMUChrSetCsdacEn; PMU_CTRL_CHR_GET_IS_BATTERY_ON rPMUChrGetIsBatteryOn; PMU_CTRL_CHR_GET_IS_CHR_VALID rPMUChrGetIsChrValid; PMU_CTRL_CHR_SET_HV_DETECTION_VOLTAGE rPMUChrSetHvDetectionVoltage; PMU_CTRL_CHR_GET_HV_DETECTION_VOLTAGE_LIST rPMUChrGetHvDetectionVoltageList; PMU_CTRL_CHR_SET_VBAT_OV_DETECTION_VOLTAGE rPMUChrSetVbatOvDetectionVoltage; PMU_CTRL_CHR_SET_BAT_HT_EN rPMUChrSetBatHtEn; PMU_CTRL_CHR_SET_OTG_BVALID_EN rPMUChrSetOtgBvalidEn; PMU_CTRL_CHR_SET_CV_MODE rPMUChrSetCvMode; PMU_CTRL_CHR_SET_CSDAC_MODE rPMUChrSetCsdacMode; PMU_CTRL_CHR_SET_TRACKING_EN rPMUChrSetTrackingEn; PMU_CTRL_CHR_SET_HWCV_EN rPMUChrSetHwcvEn; PMU_CTRL_CHR_SET_ULC_DET_EN rPMUChrSetUlcDetEn; PMU_CTRL_CHR_SET_BC11_PULLUP_EN rPMUChrSetBc11PullupEn; PMU_CTRL_CHR_SET_LOW_ICH_DB rPMUChrSetLowIchDb; PMU_CTRL_CHR_SET_VBAT_CV_CALIBRATION rPMUChrSetVbatCvCalibration; PMU_CTRL_CHR_GET_CC_DET rPMUChrGetCcDet; PMU_CTRL_BL_SET_EN rPMUBlSetEn; PMU_CTRL_BL_SET_INIT rPMUBlSetInit; PMU_CTRL_BL_GET_SUPPORT_LEVEL rPMUBlGetSupportLevel; PMU_CTRL_BL_GET_USE_PWM_QUERY rPMUBlGetUsePwmQuery; PMU_CTRL_BOOST_SET_EN rPMUBoostSetEn; PMU_CTRL_BOOST_SET_CURRENT_LIMIT rPMUBoostSetCurrentLimit; PMU_CTRL_BOOST_SET_CLK_CAL rPMUBoostSetClkCal; PMU_CTRL_BOOST_SET_SYNC_EN rPMUBoostSetSyncEn; PMU_CTRL_BOOST_SET_VOLTAGE rPMUBoostSetVoltage; PMU_CTRL_BOOST_SET_LEVEL rPMUBoostSetLevel; PMU_CTRL_ISINK_SET_EN rPMUIsinkSetEn; PMU_CTRL_ISINK_SET_MODE rPMUIsinkSetMode; PMU_CTRL_ISINK_SET_STEP rPMUIsinkSetStep; PMU_CTRL_ISINK_SET_FORCE_OFF rPMUIsinkSetForceOff; PMU_CTRL_ISINK_SET_DIMMING_ON_DUTY rPMUIsinkSetDimmingOnDuty; PMU_CTRL_ISINK_SET_FREQUENCY_DIVISION rPMUIsinkSetFrequencyDivision; PMU_CTRL_ADC_SET_RQST rPMUAdcSetRqst; PMU_CTRL_ADC_CLR_RQST rPMUAdcClrRqst; PMU_CTRL_ADC_GET_RDY_MD rPMUAdcGetRdyMd; PMU_CTRL_ADC_GET_OUT_MD rPMUAdcGetOutMd; PMU_CTRL_MISC_SET_RLED_EN rPMUMiscSetRledEn; PMU_CTRL_MISC_SET_GLED_EN rPMUMiscSetGledEn; PMU_CTRL_MISC_SET_BLED_EN rPMUMiscSetBledEn; PMU_CTRL_MISC_GET_CID rPMUMiscGetCid; PMU_CTRL_MISC_GET_ECO_VERSION rPMUMiscGetEcoVersion; PMU_CTRL_MISC_GET_HW_VERSION rPMUMiscGetHwVersion; PMU_CTRL_MISC_SET_REGISTER_VALUE rPMUMiscSetRegisterValue; PMU_CTRL_MISC_GET_REGISTER_VALUE rPMUMiscGetRegisterValue;



   PW_CTRL_SET_POWERON_REASON rPWSetPowerOnReason; PW_CTRL_GET_POWERON_REASON rPWGetPowerOnReason; PW_CTRL_IS_USB_BOOT rPWIsUsbBoot;



   CHR_DET_CTRL_QUERY_IS_CHR_IN_BY_PW rChrDetQueryIsChrInByPW; CHR_DET_CTRL_QUERY_CHR_TYPE rChrDetQueryChrType; CHR_DET_CTRL_REGISTER_USB_HISR rChrDetUSBHISR;







   SIMGPIO_CTRL_READ_T rSGRead; SIMGPIO_CTRL_WRITE_T rSGWrite; SIMGPIO_CTRL_SET_DIR_T rSGSetDir; SIMGPIO_CTRL_TRUN_ON_POWER rSGTurnOnPower; SIMGPIO_CTRL_READ_T rSGIRead;



   F32K_CLK_CTRL_F32K_IS_XOSC32_T rF32kIsXOSC32; F32K_CLK_CTRL_EOSC32_CALI_VAL_T rEosc32CaliVal;



   IDC_CTRL_DCB_CONFIG_T r_idc_ctrl_dcb_config; IDC_CTRL_BAUDRATE_T r_idc_ctrl_baudrate; IDC_CTRL_SET_FIFO_TRIGGER_T r_idc_ctrl_set_fifo_trigger; IDC_CTRL_PM_CONFIG_T r_idc_ctrl_pm_config; IDC_CTRL_SCHEDULE_EVENT_T r_idc_ctrl_schedule_event; IDC_CTRL_SCHEDULE_START_T r_idc_ctrl_schedule_start; IDC_CTRL_STOP_EVENT_T r_idc_ctrl_stop_event; IDC_CTRL_PURGE_T r_idc_ctrl_purge; IDC_CTRL_GET_SCHEDULE_STATUS_T r_idc_ctrl_get_schedule_status; IDC_CTRL_CHECK_EVENT_SEND_OUT_T r_idc_ctrl_check_event_send_out; IDC_CTRL_PIN_CONFIG_T r_idc_ctrl_pin_config;

} DCL_CTRL_DATA_T;







# 1 "interface/driver/peripheral/dcl_gpt.h" 1
# 280 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclSGPT_Initialize(void);
# 299 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_HANDLE DclSGPT_Open(DCL_DEV dev, DCL_FLAGS flags);
# 315 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclSGPT_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 331 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclSGPT_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 347 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclSGPT_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 363 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclSGPT_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 397 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclSGPT_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 414 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclSGPT_Close(DCL_HANDLE *handle);
# 430 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclFGPT_Initialize(void);
# 450 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_HANDLE DclFGPT_Open(DCL_DEV dev, DCL_FLAGS flags);
# 466 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclFGPT_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 482 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclFGPT_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 498 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclFGPT_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 514 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclFGPT_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 541 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclFGPT_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 559 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclFGPT_Close(DCL_HANDLE handle);
# 1198 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_gpio.h" 1
# 627 "interface/driver/peripheral/dcl_gpio.h"
extern DCL_STATUS DclGPIO_Initialize(void);
# 644 "interface/driver/peripheral/dcl_gpio.h"
extern DCL_HANDLE DclGPIO_Open(DCL_DEV dev, DCL_FLAGS flags);
# 660 "interface/driver/peripheral/dcl_gpio.h"
extern DCL_STATUS DclGPIO_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 676 "interface/driver/peripheral/dcl_gpio.h"
extern DCL_STATUS DclGPIO_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 692 "interface/driver/peripheral/dcl_gpio.h"
extern DCL_STATUS DclGPIO_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 708 "interface/driver/peripheral/dcl_gpio.h"
extern DCL_STATUS DclGPIO_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 809 "interface/driver/peripheral/dcl_gpio.h"
extern DCL_STATUS DclGPIO_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 825 "interface/driver/peripheral/dcl_gpio.h"
extern DCL_STATUS DclGPIO_Close(DCL_HANDLE handle);
# 1201 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_uart.h" 1
# 1229 "interface/driver/peripheral/dcl_uart.h"
typedef DCL_STATUS(*SeriPort_HANLDER_CB)(DCL_DEV dev, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
typedef struct
{
 SIO_TYPE_T DevType;
 SeriPort_HANLDER_CB SeriportHandlerCb;
}Seriport_HANDLER_T;




typedef enum _tty_flag {



   TTY_FLAG_NEW_TX = (1 << 0),



   TTY_FLAG_NEW_RX = (1 << 1),
} tty_flag_e;

typedef DCL_STATUS(*tty_txdone_cb)(DCL_HANDLE handle, module_type source_id, tty_io_request_t *tx_ior);
typedef DCL_STATUS(*tty_rx_cb)(DCL_HANDLE handle, module_type source_id, tty_io_request_t *rx_ior);
typedef DCL_STATUS(*tty_drv_state_change_cb)(DCL_HANDLE handle, tty_drv_state_e state);
# 1271 "interface/driver/peripheral/dcl_uart.h"
extern DCL_HANDLE DclSerialPort_Open(DCL_DEV dev, DCL_FLAGS flags);
# 1283 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 1295 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 1305 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_Close(DCL_HANDLE handle);
# 1315 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_Initialize(void);
# 1331 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_UpModuleInit(DCL_HANDLE handle, module_type module_id, int flag);
# 1346 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_UpModuleReinit(DCL_HANDLE handle, module_type module_id, int flag);
# 1357 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_UpModuleDeinit(DCL_HANDLE handle);
# 1372 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_UpModuleRegisterCb(DCL_HANDLE handle, tty_rx_cb rx_cb, tty_txdone_cb tx_done_cb, tty_drv_state_change_cb drv_state_change_cb);
# 1383 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_UpModuleTransmit(DCL_HANDLE handle, tty_io_request_t *ior);
# 1395 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_UpModuleTransmitLight(DCL_HANDLE handle, tty_io_request_t *ior);
# 1406 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_UpModuleAssignRxIor(DCL_HANDLE handle, tty_io_request_t *rx_ior);
# 1420 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_DrvRegisterCb(DCL_HANDLE handle, Seriport_HANDLER_T* seriport_handler);
# 1431 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_DrvDeRegisterCb(DCL_HANDLE handle);
# 1441 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_DrvAttach(DCL_HANDLE handle);
# 1451 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_DrvDetach(DCL_HANDLE handle);
# 1463 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_DrvRx(DCL_HANDLE handle, module_type source_id, void *rx_ior);
# 1476 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_DrvTxDone(DCL_HANDLE handle, module_type source_id, void *tx_ior);
# 1204 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_wdt.h" 1
# 226 "interface/driver/peripheral/dcl_wdt.h"
extern DCL_STATUS DclWDT_Initialize(void);
# 243 "interface/driver/peripheral/dcl_wdt.h"
extern DCL_HANDLE DclWDT_Open(DCL_DEV dev, DCL_FLAGS flags);
# 258 "interface/driver/peripheral/dcl_wdt.h"
extern DCL_STATUS DclWDT_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 273 "interface/driver/peripheral/dcl_wdt.h"
extern DCL_STATUS DclWDT_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 288 "interface/driver/peripheral/dcl_wdt.h"
extern DCL_STATUS DclWDT_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 309 "interface/driver/peripheral/dcl_wdt.h"
extern DCL_STATUS DclWDT_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 344 "interface/driver/peripheral/dcl_wdt.h"
extern DCL_STATUS DclWDT_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 359 "interface/driver/peripheral/dcl_wdt.h"
extern DCL_STATUS DclWDT_Close(DCL_HANDLE handle);
# 1207 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_adc.h" 1
# 436 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclSADC_Initialize(void);
# 453 "interface/driver/peripheral/dcl_adc.h"
extern DCL_HANDLE DclSADC_Open(DCL_DEV dev, DCL_FLAGS flags);
# 468 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclSADC_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 483 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclSADC_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 498 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclSADC_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 513 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclSADC_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 540 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclSADC_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 555 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclSADC_Close(DCL_HANDLE handle);
# 571 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclHADC_Initialize(void);
# 588 "interface/driver/peripheral/dcl_adc.h"
extern DCL_HANDLE DclHADC_Open(DCL_DEV dev, DCL_FLAGS flags);
# 603 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclHADC_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 618 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclHADC_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 633 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclHADC_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 648 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclHADC_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 675 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclHADC_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 690 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclHADC_Close(DCL_HANDLE handle);
# 1210 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_bmt.h" 1
# 317 "interface/driver/peripheral/dcl_bmt.h"
extern DCL_STATUS DclBMT_Initialize(void);
# 337 "interface/driver/peripheral/dcl_bmt.h"
extern DCL_HANDLE DclBMT_Open(DCL_DEV dev, DCL_FLAGS flags);
# 352 "interface/driver/peripheral/dcl_bmt.h"
extern DCL_STATUS DclBMT_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 367 "interface/driver/peripheral/dcl_bmt.h"
extern DCL_STATUS DclBMT_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 382 "interface/driver/peripheral/dcl_bmt.h"
extern DCL_STATUS DclBMT_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 397 "interface/driver/peripheral/dcl_bmt.h"
extern DCL_STATUS DclBMT_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 438 "interface/driver/peripheral/dcl_bmt.h"
extern DCL_STATUS DclBMT_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 456 "interface/driver/peripheral/dcl_bmt.h"
extern DCL_STATUS DclBMT_Close(DCL_HANDLE handle);
# 1213 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_pfc.h" 1
# 257 "interface/driver/peripheral/dcl_pfc.h"
extern DCL_STATUS DclPFC_Initialize(void);
# 277 "interface/driver/peripheral/dcl_pfc.h"
extern DCL_HANDLE DclPFC_Open(DCL_DEV dev, DCL_FLAGS flags);
# 292 "interface/driver/peripheral/dcl_pfc.h"
extern DCL_STATUS DclPFC_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 307 "interface/driver/peripheral/dcl_pfc.h"
extern DCL_STATUS DclPFC_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 322 "interface/driver/peripheral/dcl_pfc.h"
extern DCL_STATUS DclPFC_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 342 "interface/driver/peripheral/dcl_pfc.h"
extern DCL_STATUS DclPFC_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 371 "interface/driver/peripheral/dcl_pfc.h"
extern DCL_STATUS DclPFC_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 389 "interface/driver/peripheral/dcl_pfc.h"
extern DCL_STATUS DclPFC_Close(DCL_HANDLE handle);
# 1216 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_rtc.h" 1
# 673 "interface/driver/peripheral/dcl_rtc.h"
extern DCL_STATUS DclRTC_Initialize(void);
# 693 "interface/driver/peripheral/dcl_rtc.h"
extern DCL_HANDLE DclRTC_Open(DCL_DEV dev, DCL_FLAGS flags);
# 708 "interface/driver/peripheral/dcl_rtc.h"
extern DCL_STATUS DclRTC_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 723 "interface/driver/peripheral/dcl_rtc.h"
extern DCL_STATUS DclRTC_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 738 "interface/driver/peripheral/dcl_rtc.h"
extern DCL_STATUS DclRTC_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 763 "interface/driver/peripheral/dcl_rtc.h"
extern DCL_STATUS DclRTC_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 870 "interface/driver/peripheral/dcl_rtc.h"
extern DCL_STATUS DclRTC_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 888 "interface/driver/peripheral/dcl_rtc.h"
extern DCL_STATUS DclRTC_Close(DCL_HANDLE handle);
# 1219 "interface/driver/peripheral/dcl.h" 2
# 1230 "interface/driver/peripheral/dcl.h"
# 1 "interface/driver/peripheral/DclH_kbd.h" 1
# 167 "interface/driver/peripheral/DclH_kbd.h"
typedef void (*KBDH_EVENT_FUNC)(DCL_EVENT event, void* param) ;
# 183 "interface/driver/peripheral/DclH_kbd.h"
extern DCL_STATUS DclHKBD_Initialize(void);
# 206 "interface/driver/peripheral/DclH_kbd.h"
extern DCL_HANDLE DclHKBD_Open(DCL_DEV dev, DCL_FLAGS flags);
# 236 "interface/driver/peripheral/DclH_kbd.h"
extern DCL_STATUS DclHKBD_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 253 "interface/driver/peripheral/DclH_kbd.h"
extern DCL_STATUS DclHKBD_Close(DCL_HANDLE handle);
# 280 "interface/driver/peripheral/DclH_kbd.h"
extern DCL_STATUS DclHKBD_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, KBDH_EVENT_FUNC callback);
# 1231 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/DclS_kbd.h" 1
# 237 "interface/driver/peripheral/DclS_kbd.h"
extern DCL_STATUS DclSKBD_Initialize(void);
# 260 "interface/driver/peripheral/DclS_kbd.h"
extern DCL_HANDLE DclSKBD_Open(DCL_DEV dev, DCL_FLAGS flags);
# 276 "interface/driver/peripheral/DclS_kbd.h"
extern DCL_STATUS DclSKBD_Close(DCL_HANDLE handle);
# 304 "interface/driver/peripheral/DclS_kbd.h"
extern DCL_STATUS DclSKBD_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 324 "interface/driver/peripheral/DclS_kbd.h"
extern DCL_STATUS DclSKBD_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event,PFN_DCL_CALLBACK callback);
# 1234 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_sts.h" 1
# 498 "interface/driver/peripheral/dcl_sts.h"
extern DCL_STATUS DclSTS_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 549 "interface/driver/peripheral/dcl_sts.h"
extern DCL_STATUS DclSTS_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 569 "interface/driver/peripheral/dcl_sts.h"
extern DCL_STATUS DclSTS_Initialize(void);
# 591 "interface/driver/peripheral/dcl_sts.h"
extern DCL_HANDLE DclSTS_Open(DCL_DEV dev, DCL_FLAGS flags);
# 614 "interface/driver/peripheral/dcl_sts.h"
extern DCL_STATUS DclSTS_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 640 "interface/driver/peripheral/dcl_sts.h"
extern DCL_STATUS DclSTS_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 661 "interface/driver/peripheral/dcl_sts.h"
extern DCL_STATUS DclSTS_Close(DCL_HANDLE handle);
# 1237 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_msdc.h" 1
# 676 "interface/driver/peripheral/dcl_msdc.h"
extern DCL_STATUS DclSD_Initialize(void);
extern DCL_HANDLE DclSD_Open(DCL_DEV dev, DCL_FLAGS flags);
extern DCL_STATUS DclSD_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
extern DCL_STATUS DclSD_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
extern DCL_STATUS DclSD_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
extern DCL_STATUS DclSD_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
extern DCL_STATUS DclSD_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
extern DCL_STATUS DclSD_Close(DCL_HANDLE handle);
# 1240 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h" 1
# 1053 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
typedef DCL_STATUS (*DCL_USB_CTRL_API)(DCL_CTRL_DATA_T *data);
typedef void(*DCL_USB_CLASS_API)(DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 1071 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
extern DCL_STATUS DclUSB_DRV_Initialize(void);
# 1088 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
extern DCL_HANDLE DclUSB_DRV_Open(DCL_DEV dev, DCL_FLAGS flags);
# 1103 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
extern DCL_STATUS DclUSB_DRV_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 1118 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
extern DCL_STATUS DclUSB_DRV_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 1133 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
extern DCL_STATUS DclUSB_DRV_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 1148 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
extern DCL_STATUS DclUSB_DRV_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, DCL_UINT8 index,void *class_handler);
# 1175 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
extern DCL_STATUS DclUSB_DRV_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 1190 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
extern DCL_STATUS DclUSB_DRV_Close(DCL_HANDLE handle);
# 1243 "interface/driver/peripheral/dcl.h" 2
# 1254 "interface/driver/peripheral/dcl.h"
# 1 "interface/driver/peripheral/dcl_sim.h" 1
# 422 "interface/driver/peripheral/dcl_sim.h"
DCL_HANDLE DclSIM_Open(DCL_DEV dev, DCL_FLAGS flags);
# 441 "interface/driver/peripheral/dcl_sim.h"
DCL_STATUS DclSIM_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 478 "interface/driver/peripheral/dcl_sim.h"
DCL_STATUS DclSIM_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 496 "interface/driver/peripheral/dcl_sim.h"
DCL_STATUS DclSIM_Close(DCL_HANDLE handle);
DCL_STATUS DclSIM_Initialize(void);
# 1255 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_pmu.h" 1
# 2750 "interface/driver/peripheral/dcl_pmu.h"
typedef DCL_STATUS (*PMU_CONTROL_HANDLER)(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 2766 "interface/driver/peripheral/dcl_pmu.h"
extern DCL_STATUS DclPMU_Initialize(void);
# 2783 "interface/driver/peripheral/dcl_pmu.h"
extern DCL_HANDLE DclPMU_Open(DCL_DEV dev, DCL_FLAGS flags);
# 2798 "interface/driver/peripheral/dcl_pmu.h"
extern DCL_STATUS DclPMU_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 2813 "interface/driver/peripheral/dcl_pmu.h"
extern DCL_STATUS DclPMU_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 2828 "interface/driver/peripheral/dcl_pmu.h"
extern DCL_STATUS DclPMU_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 2843 "interface/driver/peripheral/dcl_pmu.h"
extern DCL_STATUS DclPMU_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 2999 "interface/driver/peripheral/dcl_pmu.h"
extern DCL_STATUS DclPMU_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 3014 "interface/driver/peripheral/dcl_pmu.h"
extern DCL_STATUS DclPMU_Close(DCL_HANDLE handle);
# 1258 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_pw.h" 1
# 278 "interface/driver/peripheral/dcl_pw.h"
extern DCL_STATUS DclPW_Initialize(void);
# 295 "interface/driver/peripheral/dcl_pw.h"
extern DCL_HANDLE DclPW_Open(DCL_DEV dev, DCL_FLAGS flags);
# 310 "interface/driver/peripheral/dcl_pw.h"
extern DCL_STATUS DclPW_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 325 "interface/driver/peripheral/dcl_pw.h"
extern DCL_STATUS DclPW_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 340 "interface/driver/peripheral/dcl_pw.h"
extern DCL_STATUS DclPW_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 355 "interface/driver/peripheral/dcl_pw.h"
extern DCL_STATUS DclPW_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 402 "interface/driver/peripheral/dcl_pw.h"
extern DCL_STATUS DclPW_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 417 "interface/driver/peripheral/dcl_pw.h"
extern DCL_STATUS DclPW_Close(DCL_HANDLE handle);
# 1261 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_chr_det.h" 1
# 236 "interface/driver/peripheral/dcl_chr_det.h"
extern DCL_STATUS Dcl_Chr_Det_Initialize(void);
# 253 "interface/driver/peripheral/dcl_chr_det.h"
extern DCL_HANDLE Dcl_Chr_Det_Open(DCL_DEV dev, DCL_FLAGS flags);
# 268 "interface/driver/peripheral/dcl_chr_det.h"
extern DCL_STATUS Dcl_Chr_Det_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 283 "interface/driver/peripheral/dcl_chr_det.h"
extern DCL_STATUS Dcl_Chr_Det_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 298 "interface/driver/peripheral/dcl_chr_det.h"
extern DCL_STATUS Dcl_Chr_Det_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 313 "interface/driver/peripheral/dcl_chr_det.h"
extern DCL_STATUS Dcl_Chr_Det_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 360 "interface/driver/peripheral/dcl_chr_det.h"
extern DCL_STATUS Dcl_Chr_Det_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 375 "interface/driver/peripheral/dcl_chr_det.h"
extern DCL_STATUS Dcl_Chr_Det_Close(DCL_HANDLE handle);
# 1264 "interface/driver/peripheral/dcl.h" 2





# 1 "interface/driver/peripheral/dcl_sim_gpio.h" 1
# 170 "interface/driver/peripheral/dcl_sim_gpio.h"
DCL_STATUS DclSIMGPIO_Initialize(void);
DCL_HANDLE DclSIMGPIO_Open(DCL_DEV dev, DCL_FLAGS flags);
DCL_STATUS DclSIMGPIO_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
DCL_STATUS DclSIMGPIO_Close(DCL_HANDLE handle);
# 1270 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_f32k_clk.h" 1
# 184 "interface/driver/peripheral/dcl_f32k_clk.h"
extern DCL_STATUS DclF32K_Initialize(void);
# 204 "interface/driver/peripheral/dcl_f32k_clk.h"
extern DCL_HANDLE DclF32K_Open(DCL_DEV dev, DCL_FLAGS flags);
# 229 "interface/driver/peripheral/dcl_f32k_clk.h"
extern DCL_STATUS DclF32K_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 247 "interface/driver/peripheral/dcl_f32k_clk.h"
extern DCL_STATUS DclF32K_Close(DCL_HANDLE handle);
# 1273 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_idc.h" 1
# 334 "interface/driver/peripheral/dcl_idc.h"
extern DCL_STATUS DclIDC_GetSupport(IDC_SUPPORT_T *support);
# 350 "interface/driver/peripheral/dcl_idc.h"
extern DCL_STATUS DclIDC_Initialize(void);
# 372 "interface/driver/peripheral/dcl_idc.h"
extern DCL_HANDLE DclIDC_Open(DCL_DEV dev, kal_uint32 flags);
# 389 "interface/driver/peripheral/dcl_idc.h"
extern DCL_STATUS DclIDC_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 406 "interface/driver/peripheral/dcl_idc.h"
extern DCL_STATUS DclIDC_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 423 "interface/driver/peripheral/dcl_idc.h"
extern DCL_STATUS DclIDC_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 440 "interface/driver/peripheral/dcl_idc.h"
extern DCL_STATUS DclIDC_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 492 "interface/driver/peripheral/dcl_idc.h"
extern DCL_STATUS DclIDC_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 512 "interface/driver/peripheral/dcl_idc.h"
extern DCL_STATUS DclIDC_conn_txrx_count(kal_bool is_start);
# 531 "interface/driver/peripheral/dcl_idc.h"
extern DCL_STATUS DclIDC_Close(DCL_HANDLE handle);
# 1276 "interface/driver/peripheral/dcl.h" 2
# 311 "interface/service/dhl/dhl_def.h" 2

# 1 "interface/service/config/sysconf_statistics.h" 1
# 203 "interface/service/config/sysconf_statistics.h"
# 1 "interface/service/config/stack_config.h" 1
# 204 "interface/service/config/sysconf_statistics.h" 2
# 1 "interface/service/config/ctrl_buff_pool.h" 1
# 429 "interface/service/config/ctrl_buff_pool.h"
# 1 "interface/service/config/kal_user_mem.h" 1
# 533 "interface/service/config/kal_user_mem.h"
# 1 "interface/service/config/stack_buff_pool.h" 1
# 109 "interface/service/config/stack_buff_pool.h"
typedef struct buff_pool_info_struct {
   kal_poolid pool_id;
   kal_uint32 size;
   kal_uint16 no_of_buff;
   kal_uint32 num_of_misses;
} buff_pool_info_struct;




extern void stack_init_buff_pool_info(void);
extern kal_bool stack_resources_init(void);
extern void stack_ps_init_buff_pool_info(void);
extern kal_bool stack_ps_resources_init(void);
# 534 "interface/service/config/kal_user_mem.h" 2
# 622 "interface/service/config/kal_user_mem.h"
typedef enum {
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE32 = 0,
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE64 = 0,
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE128 = 0,
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE256 = 0,
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE512 = 0,
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE1024 = 0,
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE2048 = 0,
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE4096 = 0,

   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE8192 = 0,
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE16384 = 0,
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE32768 = 0,
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE65536 = 0,
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE100000 = 0,

} custom_ctrl_num_buff_pool_size;
# 664 "interface/service/config/kal_user_mem.h"
typedef enum {
   CTRL_BUFF_POOL_SIZE32 = 32,
   CTRL_BUFF_POOL_SIZE64 = 64,
   CTRL_BUFF_POOL_SIZE128 = 128,
   CTRL_BUFF_POOL_SIZE256 = 256,
   CTRL_BUFF_POOL_SIZE512 = 512,
   CTRL_BUFF_POOL_SIZE1024 = 1024,
   CTRL_BUFF_POOL_SIZE2048 = 2048,
   CTRL_BUFF_POOL_SIZE4096 = 4096,

   CTRL_BUFF_POOL_SIZE8192 = 8192,
   CTRL_BUFF_POOL_SIZE16384 = 16384,
   CTRL_BUFF_POOL_SIZE32768 = 32768,
   CTRL_BUFF_POOL_SIZE65536 = 65536,
   CTRL_BUFF_POOL_SIZE100000 = 100000,
   CTRL_BUFF_POOL_MAX_BUFF_SIZE = CTRL_BUFF_POOL_SIZE100000



} ctrl_buff_pool_size;
# 719 "interface/service/config/kal_user_mem.h"
typedef enum {
   NUM_CTRL_BUFF_POOL_SIZE32 = 920,
   NUM_CTRL_BUFF_POOL_SIZE64 = 390,
   NUM_CTRL_BUFF_POOL_SIZE128 = 230,
   NUM_CTRL_BUFF_POOL_SIZE256 = 210,
   NUM_CTRL_BUFF_POOL_SIZE512 = 85,



   NUM_CTRL_BUFF_POOL_SIZE1024 = 55,

   NUM_CTRL_BUFF_POOL_SIZE2048 = 50,
   NUM_CTRL_BUFF_POOL_SIZE4096 = 15,
   NUM_CTRL_BUFF_POOL_SIZE8192 = 12,
   NUM_CTRL_BUFF_POOL_SIZE16384 = 10,
   NUM_CTRL_BUFF_POOL_SIZE32768 = 6,
   NUM_CTRL_BUFF_POOL_SIZE65536 = 5,

   NUM_CTRL_BUFF_POOL_SIZE100000 = 0



} ctrl_num_buff_pool_size;
# 1060 "interface/service/config/kal_user_mem.h"
extern buff_pool_info_struct ctrl_buff_pool_info_g[ 13];




extern void config_ctrl_buff_info( void );
# 430 "interface/service/config/ctrl_buff_pool.h" 2
# 205 "interface/service/config/sysconf_statistics.h" 2
# 215 "interface/service/config/sysconf_statistics.h"
enum {
 STACK_STATS_NONE,
 STACK_STATS_UPDATE,
 STACK_STATS_END
};

enum
{
    STACK_STATS_HISR_NAME = 0,
    STACK_STATS_HISR_MAX_NAME = 8
};

typedef struct clib_heap_statistics_t {
    kal_uint32 curr_alloc_mem;
    kal_uint32 max_alloc_mem;
    kal_uint32 alloc_count;
    kal_uint32 alloc_fail_count;
    kal_uint32 config_size;
} clib_heap_statistics_struct;




struct kal_mod_res_cnt
{
    module_type owner_module;
    kal_uint16 count;
};

typedef struct
{
    kal_uint32 *adm_cb;
    kal_uint32 adm_cb_size;
    kal_uint32 max_mbsize_of_mini_left_size;
    kal_uint32 mini_left_size;
    kal_uint32 creator_caller;


}ADM_PROFILE;



typedef struct all_timers_stat_s
{



    kal_uint32 stack_timer_no;
    kal_uint32 kal_timer_no;
    kal_uint32 es_timer_no;
}all_timer_stat_s;


typedef struct runtime_sysmem_size
{
 kal_uint16 evshed;
 kal_uint16 mutex;
 kal_uint16 sem;
 kal_uint16 event_group;
 kal_uint16 stack_timer;
 kal_uint16 kal_timer;
 kal_uint16 enh_mutex;
} runtime_sysmem_size_s;

typedef struct runtime_max_amount
{
 kal_uint32 task_name;
 kal_uint8 evshed;
 kal_uint8 mutex;
 kal_uint8 sem;
 kal_uint8 event_group;
 kal_uint8 stack_timer;
 kal_uint8 kal_timer;
 kal_uint8 enh_mutex;
} runtime_max_amount_s;

typedef struct stack_statistics_t {
 kal_uint16 stack_stats_status;
 kal_uint32 max_sys_mem_used;
 kal_uint32 max_sysdebug_mem_used;

    kal_uint32 max_mutex_number;
    kal_uint32 max_event_number;
    kal_uint32 max_eventgroup_number;

    clib_heap_statistics_struct clib_heap_stats;
 kal_uint16 max_task_stack_used[255];
 kal_uint16 max_hisr_stack_used[((20)+(128))];

 kal_uint8 max_task_extq_enqued[255];
    kal_uint8 max_task_intq_enqued[255];


 kal_uint16 max_ctrl_buff_num_allocated[13];
# 319 "interface/service/config/sysconf_statistics.h"
    all_timer_stat_s timers_stat;



    runtime_sysmem_size_s runtime_sysmem_size;
    runtime_max_amount_s system_runtime_max_amount;
    runtime_max_amount_s task_runtime_max_amount[255];
    ADM_PROFILE top_adm_profile[(5)];
    ADM_PROFILE top_adm_user_profile[(5)];

} stack_statistics_struct;






extern kal_int32 stack_get_stats_info(kal_uint32 stats, void *buff, kal_uint32 buff_size);
extern void clib_get_heap_statistics(clib_heap_statistics_struct *pstat);
# 313 "interface/service/dhl/dhl_def.h" 2


# 1 "interface/service/nvram/nvram_interface.h" 1
# 307 "interface/service/nvram/nvram_interface.h"
# 1 "interface/service/nvram/nvram_defs.h" 1
# 308 "interface/service/nvram/nvram_interface.h" 2

typedef struct
{
    kal_bool (*callback)(void *user_data);
    void *user_data;
    module_type module;
    nvram_lid_enum file_id;
    kal_bool processed;
}nvram_read_callback_struct;
# 341 "interface/service/nvram/nvram_interface.h"
extern nvram_errno_enum nvram_get_info(nvram_lid_enum LID, kal_uint16 *total, kal_uint16 *size);
# 354 "interface/service/nvram/nvram_interface.h"
extern void nvram_write_exception(kal_uint16 length, long *ex_data);
# 366 "interface/service/nvram/nvram_interface.h"
extern nvram_lid_enum nvram_get_lid_num(void);
# 380 "interface/service/nvram/nvram_interface.h"
extern kal_uint8 nvram_check_backup(nvram_lid_enum LID, kal_char **prefix, kal_char **verno);
# 395 "interface/service/nvram/nvram_interface.h"
extern nvram_errno_enum nvram_validate_file(nvram_lid_enum LID, kal_wchar *path);
# 407 "interface/service/nvram/nvram_interface.h"
void nvram_shutdown_handler(void);
# 419 "interface/service/nvram/nvram_interface.h"
extern kal_bool nvram_test_lock(void);
# 431 "interface/service/nvram/nvram_interface.h"
extern void nvram_space_reserve(kal_uint32 *size_from_code);
# 445 "interface/service/nvram/nvram_interface.h"
extern kal_bool nvram_usb_read_data(nvram_lid_enum LID, kal_uint8 *buffer, kal_uint32 buffer_size);
# 457 "interface/service/nvram/nvram_interface.h"
extern kal_bool nvram_sec_port_is_enable(void);
# 475 "interface/service/nvram/nvram_interface.h"
extern nvram_default_value_enum nvram_get_default_value(nvram_lid_enum LID,
                                                        kal_uint16 rec_index,
                                                        kal_uint8 **p_buffer);
# 491 "interface/service/nvram/nvram_interface.h"
extern kal_wchar * nvram_get_file_fullname(kal_uint8 folder_idx,
                                           kal_char *nvramname,
                                           kal_wchar *filename);
# 505 "interface/service/nvram/nvram_interface.h"
extern kal_uint8 nvram_get_folder_idx(nvram_lid_enum LID);
# 517 "interface/service/nvram/nvram_interface.h"
extern kal_char *nvram_get_work_path(kal_uint8 folder_idx);
# 529 "interface/service/nvram/nvram_interface.h"
extern kal_uint8 nvram_get_folder_total_amount(void);
# 548 "interface/service/nvram/nvram_interface.h"
extern kal_bool nvram_external_read_data(nvram_lid_enum LID, kal_uint16 rec_index, kal_uint8 *buffer, kal_uint32 buffer_size);
# 568 "interface/service/nvram/nvram_interface.h"
extern kal_bool nvram_external_read_chksum(nvram_lid_enum LID, kal_uint16 rec_index, kal_uint16 rec_amount, kal_uint8 *buffer, kal_uint32 buffer_size);
# 587 "interface/service/nvram/nvram_interface.h"
extern kal_bool nvram_external_write_data(nvram_lid_enum LID, kal_uint16 rec_index, kal_uint8 *buffer, kal_uint32 buffer_size);
# 605 "interface/service/nvram/nvram_interface.h"
kal_bool nvram_external_reset_data(nvram_lid_enum LID, kal_uint16 rec_index, kal_uint16 rec_amount);
# 628 "interface/service/nvram/nvram_interface.h"
    extern kal_bool nvram_check_hidden_file(const kal_wchar* filename, kal_bool backup);
# 643 "interface/service/nvram/nvram_interface.h"
extern kal_uint8 nvram_get_imei_type(void);
# 659 "interface/service/nvram/nvram_interface.h"
extern kal_bool nvram_get_imei_value(kal_uint8 length, kal_uint8 *imei_buf, kal_uint16 rec_index);
# 671 "interface/service/nvram/nvram_interface.h"
extern kal_uint16 nvram_get_imei_record_num(void);
# 684 "interface/service/nvram/nvram_interface.h"
extern kal_bool nvram_is_imei_unset(kal_uint16 rec_index);
# 704 "interface/service/nvram/nvram_interface.h"
extern kal_int32 nvram_compare_to_default_value(nvram_lid_enum LID, kal_uint16 rec_index);



extern kal_uint8 *nvram_get_custpack_version(void);







extern kal_bool nvram_set_restore_factory_flag(nvram_restore_flag_enum restore_flag);
# 725 "interface/service/nvram/nvram_interface.h"
extern kal_bool nvram_check_restore_factory_flag(void);
# 734 "interface/service/nvram/nvram_interface.h"
extern void nvram_ltable_register(nvram_ltable_entry_struct *table);
# 744 "interface/service/nvram/nvram_interface.h"
extern kal_bool nvram_register_read_req(nvram_read_callback_struct *entry);





extern kal_bool nvram_util_next_data_item(nvram_ltable_entry_struct **entry);
extern kal_bool nvram_util_get_data_item(nvram_ltable_entry_struct **ldi, nvram_lid_enum LID);
# 316 "interface/service/dhl/dhl_def.h" 2

# 1 "interface/service/nvram/nvram_enums.h" 1
# 318 "interface/service/dhl/dhl_def.h" 2
# 1 "interface/service/nvram/nvram_struct.h" 1
# 100 "interface/service/nvram/nvram_struct.h"
typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    kal_uint8 poweron_mode;
} nvram_startup_req_struct;





typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    kal_uint8 result;
    kal_uint8 data[8];
} nvram_startup_cnf_struct;





typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    nvram_reset_category_enum reset_category;
    nvram_app_id_enum app_id;
    nvram_lid_enum LID;
    kal_uint16 rec_index;
    kal_uint16 rec_amount;
} nvram_reset_req_struct;





typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    kal_uint8 result;
} nvram_reset_cnf_struct;





typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    nvram_lid_enum file_idx;
    kal_uint16 para;
    kal_uint16 rec_amount;
} nvram_read_req_struct;





typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    nvram_lid_enum file_idx;
    kal_uint16 para;
    kal_uint16 length;
    kal_uint8 result;
} nvram_read_cnf_struct;





typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    nvram_lid_enum file_idx;
    kal_uint16 para;
} nvram_write_req_struct;





typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    nvram_lid_enum file_idx;
    kal_uint16 para;
    kal_uint8 result;
} nvram_write_cnf_struct;





typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    kal_uint16 record_index;
    kal_uint8 imei[8];
    kal_uint8 svn;
} nvram_write_imei_req_struct;





typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    kal_uint16 record_index;
    kal_uint8 result;
} nvram_write_imei_cnf_struct;






typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 lock_en;
    kal_uint32 reserved;
} nvram_set_lock_req_struct;





typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 result;
} nvram_set_lock_cnf_struct;





typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    nvram_lid_enum file_idx;
    kal_uint16 para;
    kal_uint16 rec_amount;
    kal_uint8 *buffer;
    kal_uint32 buf_size;
} nvram_read_sm_req_struct;





typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    nvram_lid_enum file_idx;
    kal_uint16 para;
    kal_uint32 length;
    kal_uint8 result;
} nvram_read_sm_cnf_struct;





typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    nvram_lid_enum file_idx;
    kal_uint16 para;
    kal_uint8 *buffer;
    kal_uint32 buf_size;
} nvram_write_sm_req_struct;





typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    nvram_lid_enum file_idx;
    kal_uint16 para;
    kal_uint8 result;
} nvram_write_sm_cnf_struct;





typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    nvram_image_type_enum image_type;





} nvram_create_image_req_struct;






typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    nvram_errno_enum result;
} nvram_create_image_cnf_struct;






typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    nvram_image_type_enum image_type;





} nvram_recover_image_req_struct;







typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    nvram_errno_enum result;
} nvram_recover_image_cnf_struct;






typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    nvram_image_type_enum image_type;





    kal_bool fast_verify;

} nvram_verify_image_req_struct;






typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    nvram_errno_enum result;



} nvram_verify_image_cnf_struct;






typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint32 suspend_time;
} nvram_suspend_req_struct;





typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    nvram_errno_enum result;
} nvram_suspend_cnf_struct;





typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    nvram_sds_access_enum access_mode;
} nvram_sds_req_struct;







typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    nvram_errno_enum result;

} nvram_sds_cnf_struct;






typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    nvram_bin_region_access_enum access_mode;
} nvram_bin_region_req_struct;






typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    nvram_errno_enum result;
} nvram_bin_region_cnf_struct;





typedef struct
{

    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 access_id;
    void *cfun_addr;
} nvram_callback_req_struct;
# 319 "interface/service/dhl/dhl_def.h" 2


# 1 "interface/service/dhl/tst.h" 1
# 99 "interface/service/dhl/tst.h"
extern void tst_init_filters(char *src, unsigned short len);
extern void tst_save_filter_to_nvram(void);

typedef struct
{
  kal_bool spare_logging_enabled;
  kal_bool usb_dma_logging_enable;
  kal_bool malmo_disable;
  kal_bool dnt_enable;
  kal_uint8 meta_mode_trace_enable;
}
tst_config_struct_t;
# 322 "interface/service/dhl/dhl_def.h" 2
# 338 "interface/service/dhl/dhl_def.h"
extern kal_eventgrpid dhl_event_group;
# 352 "interface/service/dhl/dhl_def.h"
extern kal_eventgrpid dhl_rt_event_group;
# 415 "interface/service/dhl/dhl_def.h"
extern DCL_DEV tst_L1Trc_port;
extern DCL_DEV tst_PsTrc_port;
extern DCL_DEV tst_rx_port;
extern UART_FLOW_CTRL_MODE_T tst_l1_flowCtrlMode;
extern UART_FLOW_CTRL_MODE_T tst_ps_flowCtrlMode;
extern UART_BAUDRATE_T tst_L1Trc_baudrate;
extern UART_BAUDRATE_T tst_PsTrc_baudrate;
extern kal_bool tst_is_L1Trc_open;
extern kal_bool tst_is_PsTrc_open;
extern kal_bool tst_is_l1_writing_uart;
extern kal_bool tst_is_ps_writing_uart;


extern kal_bool tst_is_uart_open;
extern kal_bool tst_is_writing_uart;
# 443 "interface/service/dhl/dhl_def.h"
extern kal_uint8 tst_ring_buffer[];

extern kal_uint32 tst_ptr_buffer_start;
extern kal_uint32 tst_ptr_buffer_end;

extern kal_uint32 tst_ptr_buffer_sent;
# 457 "interface/service/dhl/dhl_def.h"
typedef enum {
    TST_NULL_COMMAND
} tst_command_type;

typedef kal_uint8 tst_null_command_struct;

typedef struct
{
   tst_command_type command_type;
   kal_uint16 cmd_len;
} tst_command_header_struct;

typedef struct
{
    kal_uint32 dummy;
} tst_log_prim_header_struct;

typedef struct
{
    kal_uint32 dummy;
} tst_index_trace_header_struct;

typedef struct
{
    kal_uint32 dummy;
} tst_prompt_trace_header_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint8 string[(128)];
} tst_inject_string_struct;

typedef tst_inject_string_struct dhl_inject_string_struct;



typedef stack_timer_struct timer_expiry_struct;
# 518 "interface/service/dhl/dhl_def.h"
typedef enum {





    V0_7_2_W1346

} dhl_protocol_version;


typedef enum {
  V2_1439_0
} elt_min_version;

typedef enum {
  NO_CHECKSUM,
  NO_HEADER_COMPRESSION,
} dhl_protocol_info;

typedef enum {
    DHL_PRIMITIVE = 0,
    DHL_INDEX_TRACE = 1,
    DHL_RAW_BYTE_TRACE = 2,
    DHL_RAW_STRING_TRACE = 3,
    DHL_DISCARD_INFO = 4,
    DHL_TIME_INFO = 5,
    DHL_RLE_PRIMITIVE = 6,
    DHL_PRIMITIVE_ADT = 7,
    DHL_L1_TRACE = 8,
    DHL_META_CNF_PRIMITIVE = 9,
    DHL_L2_TRACE = 10,
} dhl_type;
# 560 "interface/service/dhl/dhl_def.h"
typedef struct {
    kal_uint8 flag;
    kal_uint8 type;
    kal_uint16 len;
} dhl_header_struct;


typedef struct {
    kal_uint8 type;
    kal_uint8 len;
} dhl_compact_header_struct;

typedef struct {
    kal_uint8 type;
} dhl_ultra_compact_header_struct;

typedef struct {
    kal_uint32 msg_index;
    trace_class_enum trace_class;
    kal_uint8 access_level;

    module_type module_id;

} dhl_index_trace_header_struct;

typedef struct {
    kal_uint16 key_len;
    kal_uint16 data_len;
} dhl_index_trace_ext_header_struct;

typedef struct {
    kal_uint32 msg_index;
    trace_class_enum trace_class;

  module_type module_id;

} dhl_raw_byte_trace_header_struct;

typedef struct {
    module_type module_id;
    trace_class_enum trace_class;
} dhl_raw_string_trace_header_struct;

typedef struct {
    module_type src_mod_id;
    module_type dest_mod_id;
    sap_type sap_id;
    msg_type msg_id;
    kal_uint16 local_len;
    kal_uint16 peer_len;
    kal_uint32 local_addr;
    kal_uint32 peer_addr;
} dhl_primitive_header_struct;

typedef dhl_primitive_header_struct dhl_rle_primitive_header_struct;

typedef struct {
    module_type src_mod_id;
    module_type dest_mod_id;
    sap_type sap_id;
    msg_type msg_id;
    kal_uint16 local_len;
    kal_uint16 peer_len;
    kal_uint32 local_addr;
    kal_uint32 peer_addr;
    kal_uint8 local_access_type;
    kal_uint8 peer_access_type;
} dhl_ex_primitive_header_struct;

typedef struct {
    kal_uint32 src_mod_id;
    kal_uint32 dest_mod_id;
    kal_uint32 sap_id;
    kal_uint32 msg_id;
    kal_uint16 local_len;
    kal_uint16 peer_len;
} dhl_meta_cnf_primitive_header_struct;

typedef struct {



    kal_uint8 count;

} dhl_discard_info_header_struct;
# 655 "interface/service/dhl/dhl_def.h"
typedef enum {
    PS_TRACE = 1,
    PRIMITIVE = 2,
    TIMESTAMP = 3,
    L1_TRACE = 4,
    L1_BUFFER = 5,
    L2_TRACE = 6,
    L2_BUFFER = 7,
} dhl_discard_info_type;

typedef struct {
    kal_uint32 count;
} dhl_discard_info_type_ps_trace;

typedef struct {
    kal_uint32 count;
} dhl_discard_info_type_primitive;

typedef struct {
    kal_uint16 count;
} dhl_discard_info_type_timestamp;

typedef struct {
    kal_uint32 count;
} dhl_discard_info_type_l1_trace;

typedef struct {
    kal_uint16 count;
} dhl_discard_info_type_l1_buffer;

typedef struct {
    kal_uint8 count;
} dhl_discard_info_type_l2_trace;

typedef struct {
    kal_uint16 count;
} dhl_discard_info_type_l2_buffer;

typedef struct {



    kal_uint8 count;

} dhl_time_info_header_struct;





typedef enum {
    RTOS_TIME = 1,
} dhl_time_info_type;

typedef struct {
    kal_uint32 timestamp;
} dhl_time_info_type_rtos_time;

typedef struct {
    kal_uint16 count;
} dhl_l1_trace_header_struct;
# 737 "interface/service/dhl/dhl_def.h"
extern void dhl_ex_internal_trace_impl(trace_class_enum trc_class, kal_uint32 user_flag, kal_uint8 access_level, kal_uint32 msg_index, kal_uint32 module_id, const char *arg_type, va_list argument_info);

extern void dhl_ex_print_impl(trace_class_enum trc_class, kal_uint32 user_flag, module_type mod_id, const char *fmt, va_list argument_info);


extern void dhl_log_primitive(ilm_struct *ilm);
extern void dhl_log_primitive_without_filter_check(ilm_struct *ilm);
extern void dhl_FT_log_primitive(ilm_struct *ilm);
# 776 "interface/service/dhl/dhl_def.h"
typedef struct {
    kal_uint8 access_type;
    kal_int32 len;
    kal_uint8 *data;
} buf_des;

extern void dhl_log_primitive_impl(kal_uint32 user_flag, dhl_primitive_header_struct *hdr, buf_des *des, kal_int32 count, kal_bool compressed);
extern void dhl_print_primitive(kal_uint32 user_flag, dhl_primitive_header_struct *hdr);
extern void dhl_print_primitive_impl(
        kal_uint32 user_flag,
        dhl_primitive_header_struct *hdr,
        kal_uint8 *local_data,
        kal_int32 local_len,
        kal_uint8 *peer_data,
        kal_int32 peer_len);
extern void dhl_ex_print_primitive(kal_uint32 user_flag, dhl_ex_primitive_header_struct *hdr);


typedef enum {
    UMTS_3G_GEMINI_TIME = 0,
    UMTS_3G_TIME,
    UMTS_2G_GEMINI_TIME,
    UMTS_2G_TIME,
    UMTS_2G_HANDOVER_TIME,
    UMTS_3G_HANDOVER_TIME,
    LTE_4G_TIME = 6,
    LTE_4G_TIME_2 = 7,
    LTE_4G_L2_TIME = 8,
} dhl_l1_time_trace_type;

typedef enum {
    L1_TRACE_LOST_COUNT,
    L1_BUFFER_LOST_COUNT,
    L2_TRACE_LOST_COUNT,
    L2_BUFFER_LOST_COUNT,
} dhl_l1_lost_count_type;

extern kal_bool dhl_log_l1_trace_group(kal_uint32 user_flag, kal_uint16 count, kal_uint8 *buf, kal_uint32 len);
extern kal_bool dhl_log_l2_trace_group(kal_uint32 user_flag, kal_uint16 count, kal_uint8 *buf, kal_uint32 len);
extern kal_bool dhl_log_l1_lost_count(dhl_l1_lost_count_type type, kal_uint8 count);

extern void dhl_ex_log_l1_trace_group(kal_uint32 user_flag, kal_uint16 count, kal_uint8 *buf, kal_uint32 buf_len);
extern void dhl_ex_log_l2_trace_group(kal_uint32 user_flag, kal_uint16 count, kal_uint8 *buf, kal_uint32 buf_len);
extern void dhl_ex_log_l1_lost_count(dhl_l1_lost_count_type type, kal_uint8 count);

# 1 "interface/service/dhl/adt.h" 1
# 70 "interface/service/dhl/adt.h"
typedef struct adt_node {
    kal_int32 data_len;
    void *data;
    struct adt_node *first_child;
    struct adt_node *next_sibling;
} adt_node_t;







int adt_pack(adt_node_t *root, unsigned char **buf);
# 92 "interface/service/dhl/adt.h"
int adt_unpack(adt_node_t **root, unsigned char *buf, int buf_len);





void adt_free(adt_node_t *root);
# 822 "interface/service/dhl/dhl_def.h" 2


extern void dhl_log_primitive_with_adt(ilm_struct *ilm_ptr, translator_adt_enc_callback_t translator_cb, kal_bool filter);


typedef void (*translator_adt_dec_callback_t)(const ilm_struct *ilm_adt_ptr, ilm_struct **ilm_ptr);
kal_bool register_translator_adt_decoder(msg_type msg_id, translator_adt_dec_callback_t cb);
translator_adt_dec_callback_t get_adt_decoder(msg_type msg_id);
kal_bool register_translator_adt_encoder(msg_type msg_id, translator_adt_enc_callback_t translator_cb);
translator_adt_enc_callback_t get_adt_encoder(msg_type msg_id);


extern void dhl_sync();
extern void dhl_time();







typedef enum {
    DHL_CMD_NULL = 0,
    DHL_CMD_META_REQ_PRIMITIVE = 1,
    DHL_CMD_CHECK_DATABASE_SIGNATURE = 2,
    DHL_CMD_MD_MONITOR_CMD = 3,



    DHL_CMD_SET_PRIM_MOD_FILTER,
    DHL_CMD_SET_PRIM_SAP_FILTER,
    DHL_CMD_SET_TRAP_FILTER,
    DHL_CMD_SET_PS_TRC_FILTER,
    DHL_CMD_SET_L1_TRC_FILTER,
    DHL_CMD_READ_GLOBAL_VARIABLE,
    DHL_CMD_WRITE_GLOBAL_VARIABLE,
    DHL_CMD_REBOOT_TARGET,
    DHL_CMD_INJECT_ILM,
    DHL_CMD_REDIRECT,
    DHL_CMD_FT_MODE_CONFIG,
    DHL_CMD_NVRAM,
    DHL_CMD_READ_STACK_STATISTICS,
    DHL_CMD_FILE_TRANSFER,
    DHL_CMD_FILE_SAVE,
    DHL_CMD_READ_MEMORY_ADDR,
    DHL_CMD_QUERY_MEMORY_RANGE,
    DHL_CMD_WRITE_MEMORY,
    DHL_CMD_QUERY_CTRL_BUF_MONITOR_DATA,
    DHL_CMD_QUERY_FLC_BUF_MONITOR_DATA,
    DHL_CMD_FORCE_ASSERT,
    DHL_CMD_INJECT_ILM_ADT,
    DHL_CMD_MSG_BKPT,
    DHL_CMD_INJECT_STRING_TO_MODULE,
    DHL_CMD_INJECT_AT_CMD,
    DHL_CMD_SIM_FILE_INFO_REQ,
    DHL_CMD_SIM_READ_REQ,
    DHL_CMD_SIM_WRITE_REQ,
    DHL_CMD_SWLA_START,
    DHL_CMD_SWLA_STOP,
    DHL_CMD_SWLA_QUERY_HEADER,
    DHL_CMD_SWLA_EMI_MONITOR_MASTER_SELECT,
    DHL_CMD_VIRTUAL_CHANNEL,
    DHL_CMD_EM_MODE_CONFIG,
    DHL_CMD_SET_TRAP_MSG,
    DHL_CMD_UBDB,
    DHL_CMD_REBOOT_FOR_MMI_AUTO_TEST,
    DHL_CMD_SET_PARTIAL_PRIM_MOD_FILTER,
    DHL_CMD_SET_PARTIAL_PRIM_SAP_FILTER,
    DHL_CMD_SET_PARTIAL_PS_TRC_FILTER,
    DHL_CMD_SET_PARTIAL_L1_TRC_FILTER,
        DHL_CMD_SET_2G_DSP_FILTER,
  DHL_CMD_ELT_CONNECT,
  DHL_CMD_ELT_DISCONNECT,
  DHL_CMD_LOOP_BACK,
    DHL_CMD_CUSTOM_READ_MEMORY,
    DHL_CMD_CUSTOM_WRITE_MEMORY,
} dhl_command_type;

typedef dhl_header_struct dhl_cmd_header_struct;

typedef struct {
    dhl_cmd_header_struct hdr;
    kal_uint32 cksum;
    kal_uint8 extra_len;
    kal_uint8 *extra;
    kal_uint16 recv_len;
    kal_uint8 *value;
} dhl_cmd_frame_buffer_struct;

typedef kal_uint8 dhl_cmd_null_struct;

typedef struct {
    kal_uint8 mod_filter[((END_OF_MOD_ID+8)/8)];
} dhl_cmd_set_prim_mod_filter_struct;

typedef struct {
    kal_uint8 sap_filter[(LAST_SAP_CODE+1)];
} dhl_cmd_set_prim_sap_filter_struct;

typedef struct {
    kal_uint16 sap_id;
    kal_uint8 is_trap;
} dhl_cmd_set_trap_filter_struct;

typedef struct {
    kal_uint16 sap_filter[END_OF_MOD_ID+1];
} dhl_cmd_set_ps_trc_filter_struct;

typedef dhl_cmd_set_ps_trc_filter_struct dhl_test_struct;

typedef kal_uint8 dhl_cmd_set_l1_trc_filter_struct;

typedef struct {
    kal_uint32 gv_name_len;
    kal_char data[1];
} dhl_cmd_read_global_variable_struct;

typedef kal_uint8 dhl_ind_read_variable_return_struct;

typedef struct {
    kal_uint16 size1;
    kal_uint16 size2;
} dhl_cmd_write_global_variable_struct;

typedef kal_uint8 dhl_cmd_reboot_target_struct;

typedef kal_uint8 dhl_cmd_reboot_for_mmi_auto_test_struct;

typedef struct {
    kal_uint16 no_peer_buff_ptr;
    kal_uint16 peer_buff_ptr_size;
    kal_uint8 *peer_buff_ptr;
    kal_uint8 ref_count;
    kal_uint8 header_len;
    kal_uint8 tail_len;
    kal_uint8 unused1;
} asn_peer_buff_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 no_local_params_ptr;
    kal_uint16 local_params_ptr_size;
    kal_uint8 *local_params_ptr;
} asn_local_para_struct;

typedef struct {
    module_type src_mod_id;
    module_type dest_mod_id;
    sap_type sap_id;
    msg_type msg_id;
    asn_local_para_struct local_params;
    asn_peer_buff_struct peer_buff;
} ilmessage;

typedef kal_uint8 dhl_cmd_inject_ilm_struct;

typedef struct {
    kal_uint32 src_mod_id;
    kal_uint32 dest_mod_id;
    kal_uint32 sap_id;
    kal_uint32 msg_id;
    kal_uint16 local_len;
    kal_uint16 peer_len;
} dhl_cmd_meta_req_primitive_struct;

typedef struct {
    kal_uint8 virtual_channel_id;
    kal_uint8 pData[1];
} dhl_cmd_redirect_struct;

typedef struct {
    kal_uint8 enable;
} dhl_cmd_ft_mode_config_struct;

typedef enum {
    NVRAM_READ,
    NVRAM_RESET,
    NVRAM_WRITE,
    NVRAM_RESET_FLAG

} nvram_actions;

typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    nvram_actions act;
    kal_uint32 file_id;
} dhl_cmd_nvram_struct;

typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
} dhl_cmd_read_stack_statistics_struct;

typedef stack_statistics_struct dhl_ind_stack_statistics_struct;





typedef nvram_read_cnf_struct dhl_ind_nvram_read_cnf_struct;
typedef nvram_reset_cnf_struct dhl_ind_nvram_reset_cnf_struct;


typedef struct {
    kal_uint32 HISR_pair_num;
    kal_char HISR_Name[((20)+(128)) * STACK_STATS_HISR_MAX_NAME];
} dhl_HISR_name_struct;

typedef struct {
    stack_statistics_struct statistic;
    dhl_HISR_name_struct hisr_name_struct;
} dhl_nvram_statistics_struct;

typedef dhl_nvram_statistics_struct tst_stack_statistics_struct;

typedef struct {
    kal_uint32 token;
    kal_uint32 start_address;
    kal_uint32 buf_length;
    kal_uint8 buf[1];
} dhl_cmd_file_transfer_struct;

typedef struct {
    kal_uint32 time_stamp;
    kal_uint32 token;
    kal_uint32 start_address;
    kal_uint32 path_length;
    kal_uint32 data_length;
} dhl_ind_file_transfer_report_struct;

typedef enum {
  DHL_FS_DELETE_FILE = -1,
  DHL_FS_ALWAYS_CREATE,
  DHL_FS_APPEND_END,
  DHL_FS_SEEK_AND_APPEND
} dhl_file_save_action_t;

typedef struct {
    kal_uint32 token;
    dhl_file_save_action_t action;
    kal_int32 seek_pos;
    kal_uint32 data_len;
    kal_uint32 content_offset;
    kal_uint8 data[1];
} dhl_cmd_file_save_struct;

typedef struct {
  kal_uint32 token;
  kal_uint32 action;
  kal_uint32 fill_data_len;
} dhl_ind_file_save_report_struct;

typedef enum {
  DHL_READ_MEMORY_ACCESS_TYPE_NOT_SPECIFIED = 0,
  DHL_READ_MEMORY_ACCESS_TYPE_BYTE = 1,
  DHL_READ_MEMORY_ACCESS_TYPE_HALF_WORD = 2,
  DHL_READ_MEMORY_ACCESS_TYPE_WORD = 4
} dhl_read_memory_access_type;

typedef struct {
    kal_uint8 token;
    kal_uint8 reserved;
    kal_uint16 chunk_size;
    void *address;
    kal_uint32 length;
    kal_uint32 mem_type;
    dhl_read_memory_access_type access_type;
} dhl_cmd_read_memory_addr_struct;

typedef struct {
    kal_uint8 token;
    kal_uint8 encoded;
    const void *address;
    kal_uint32 length;
    kal_uint32 mem_type;
    dhl_read_memory_access_type access_type;
} dhl_ind_read_memory_report_struct;


typedef dhl_ind_read_memory_report_struct dhl_auto_memory_dump_in_ilm_struct;

typedef kal_uint8 dhl_cmd_query_memory_range_struct;

typedef struct {
    kal_uint32 mem_type_num;
    kal_uint8 token;
    kal_bool last;
} dhl_ind_query_memory_range_struct;

typedef struct {
    void *address;
    kal_uint32 length;
    kal_uint8 data[1];
} dhl_cmd_write_memory_struct;

typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 token;
} dhl_cmd_query_ctrl_buf_monitor_data_struct;

typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 token;
} dhl_cmd_query_flc_buf_monitor_data_struct;

typedef struct {
    kal_uint32 token;
    kal_uint32 ack_type;
} dhl_ind_query_buf_monitor_report_struct;

typedef enum {
    MSG_BKPT_SET = 0,
    MSG_BKPT_CLR,
    MSG_BKPT_RESUME,
    MSG_BKPT_CLR_ALL,
    MSG_BKPT_CONFIG_MODE,
} dhl_msg_bkpt_action;

typedef enum {
    MSG_BKPT_CONFIG_SENDER_HOLD = 0,
    MSG_BKPT_CONFIG_RECEIVER_HOLD,
    MSG_BKPT_CONFIG_SENDER_BREAK,
    MSG_BKPT_CONFIG_RECEIVER_BREAK,
    MSG_BKPT_CONFIG_BUFFER,
    MSG_BKPT_CONFIG_SINGLE,
} dhl_msg_bkpt_config;

typedef struct _dhl_cmd_msg_bkpt {
    dhl_msg_bkpt_config config;
    module_type src_mod_id;
    module_type dest_mod_id;
    msg_type msg_id;
    struct _dhl_cmd_msg_bkpt *next;
} dhl_cmd_msg_bkpt;

typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    dhl_msg_bkpt_action action;
    dhl_msg_bkpt_config config;
    module_type src_mod_id;
    module_type dest_mod_id;
    msg_type msg_id;
} dhl_cmd_msg_bkpt_struct;

typedef enum {
    MSG_BREAK_SENDER_HOLD = 0,
    MSG_BREAK_RECEIVER_HOLD,
    MSG_BREAK_SENDER_BREAK,
    MSG_BREAK_RECEIVER_BREAK,
    MSG_BREAK_SINGLE_STEP,
} dhl_msg_break_type;

typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    dhl_msg_break_type type;
    module_type src_mod_id;
    module_type dest_mod_id;
    msg_type msg_id;
} dhl_dbg_msg_break_struct;

typedef dhl_dbg_msg_break_struct dhldbg_msg_break_struct;

typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    module_type dest_mod;
    kal_uint8 index;
    kal_uint8 string[(128)];
} dhl_cmd_inject_string_to_module_struct;

typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 atcmd[(128)];
} dhl_cmd_inject_at_cmd_struct;

typedef struct {
    kal_uint32 sim_num;
    kal_uint16 file_idx;
    kal_uint8 file_path[6];
} dhl_cmd_sim_file_info_req_struct;

typedef struct {
    kal_uint32 sim_num;
    kal_uint16 file_idx;
    kal_uint16 para;
    kal_uint16 length;
    kal_uint8 file_path[6];
} dhl_cmd_sim_read_req_struct;

typedef struct {
    kal_uint32 sim_num;
    kal_uint16 file_idx;
    kal_uint16 para;
    kal_uint8 data[260];
    kal_uint16 length;
    kal_uint8 file_path[6];
} dhl_cmd_sim_write_req_struct;

typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 token;
    kal_bool enable;
} dhl_cmd_swla_start_struct;

typedef dhl_cmd_swla_start_struct dhl_cmd_swla_stop_struct;

typedef struct {
    kal_uint32 token;
    dhl_command_type ack_cmd_type;
    kal_uint32 return_code;
    kal_uint32 is_cmd_msg;
    msg_type ack_cmd_msg_id;
} dhl_ind_general_query_cmd_ack_struct;

typedef kal_uint8 dhl_cmd_swla_query_header_struct;

typedef struct {
    kal_uint32 main_desc_len;
    kal_uint32 addon_desc_len;
    kal_uint32 init_blk_len;
} dhl_ind_swla_query_header_report_struct;


typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 master_select[(3)];
} dhl_cmd_swla_emi_monitor_master_select_cmd_struct;

typedef struct {
    kal_uint8 channel_id;
    kal_uint8 pData[1];
} dhl_cmd_virtual_channel_struct;

typedef struct {
    kal_uint8 channel_id;
} dhl_ind_virtual_channel_struct;

typedef struct {

    em_info_status_enum info_request[NUM_OF_EM_INFO];
    kal_uint32 sim_selection;





} dhl_cmd_em_mode_config_struct;

typedef struct {
    kal_uint16 nCount;
    kal_uint16 MsgIDs[1];
} dhl_cmd_set_trap_msg_struct;

typedef struct {
    kal_uint8 token;
    kal_uint8 command;

    kal_uint16 length;
    kal_uint8 sim_num;
    kal_uint8 buf[1];
} dhl_cmd_ubdb_struct;

typedef struct {
    kal_uint8 token;
    kal_uint8 command;
    kal_uint16 length;
} dhl_ind_ubdb_struct;


typedef struct {
   kal_uint8 ref_count;
   kal_uint16 msg_len;
   kal_uint32 trace_id;
   sap_type raw_data_sap;
   kal_uint16 offset;
} tst_r8_dl_pkt_single_gpd_ind_struct;

typedef struct {
  kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
  kal_uint8 token;

  kal_int32 trace_time_scale;
  kal_bool all_task;
  kal_bool trace_register;
  kal_bool trace_call_stack;
  kal_bool trace_data;
  kal_int32 task_filter[6];
  kal_int32 trace_stack_size;
  kal_int32* data_address[16];
  kal_int32 reserved[16];
} dhl_cmd_st_start_struct;

typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 token;
} dhl_cmd_st_stop_struct;

typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 token;
} dhl_cmd_st_query_header_struct;

typedef struct
{
    kal_uint8 token;
  kal_uint32 time_stamp;

  kal_int32 start_time1;
  kal_int32 start_time2;
  kal_int32* buffer_start_addr;
  kal_int32* buffer_end_addr;
  kal_int32* buffer_current_index_addr;
  kal_int32 time_scale_for_one_sec;
  kal_int32 reserved[4];
  kal_bool buffer_wrap_around;
} dhl_cmd_st_stop_report_struct;

typedef struct {
  void *m_Addr;
  kal_uint16 m_Value;
} dhl_2g_dsp_filter_setting;

typedef struct
{
  kal_uint32 count;
  dhl_2g_dsp_filter_setting* filter;
} dhl_cmd_set_2g_dsp_filter_struct;

typedef enum {
  TST_GPD_LOG_GPD_TYPE=0,
  TST_GPD_LOG_BD_TYPE,
  TST_GPD_LOG_RAW_TYPE,
  TST_GPD_LOG_LAST_TYPE,
} tst_gpd_log_type_t;

typedef enum {
    DHL_DRV_DETACH,
    DHL_DRV_ATTACH,
    DHL_DRV_INIT,
} dhl_drv_state;

typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    DCL_HANDLE handle;
    dhl_drv_state state;
} dhl_driver_state_change_struct;

typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    DCL_HANDLE handle;
    tty_io_request_t *ior;
} dhl_tty_rx_done_struct;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
tst_l2copro_filter_retrieval_struct;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
tst_l2copro_filter_save_struct;

typedef struct {
    kal_uint32 count;
} dhl_cmd_set_partial_prim_mod_filter_struct;

typedef struct {
    kal_uint32 count;
} dhl_cmd_set_partial_prim_sap_filter_struct;

typedef struct {
    kal_uint32 count;
} dhl_cmd_set_partial_ps_trc_filter_struct;

typedef struct {
    kal_uint32 count;
} dhl_cmd_set_partial_l1_trc_filter_struct;

typedef enum {
    DHL_MUX_ID_MCU_CODE_BEGIN = 0, DHL_MUX_ID_MCU_CODE_TAIL = 2,
    DHL_MUX_ID_DSP_CODE_BEGIN = 3, DHL_MUX_ID_DSP_CODE_TAIL = 127,
    DHL_MUX_ID_HW_CODE_BEGIN = 128, DHL_MUX_ID_HW_CODE_TAIL = 255,
    DHL_MUX_ID_END = 256,
} dhl_mux_id_range;



typedef enum {
    DHL_MUX_ID_MCU = 0,
    DHL_MUX_ID_MCU_ASM = 1,
    DHL_MUX_ID_MCU_MON = 2,
    DHL_MUX_ID_DSP_FMC_1 = DHL_MUX_ID_DSP_CODE_BEGIN,
    DHL_MUX_ID_DSP_FMC_2,
    DHL_MUX_ID_DSP_FNC_1,
    DHL_MUX_ID_DSP_FNC_2,
    DHL_MUX_ID_DSP_BC_1,
    DHL_MUX_ID_DSP_BC_2,
    DHL_MUX_ID_DSP_MC_1,
    DHL_MUX_ID_DSP_MC_2,
    DHL_MUX_ID_DSP_MMC_1,
    DHL_MUX_ID_DSP_MMC_2,
    DHL_MUX_ID_DSP_MSC_1,
    DHL_MUX_ID_DSP_MSC_2,
    DHL_MUX_ID_DSP_MD32_1,
    DHL_MUX_ID_DSP_MD32_2,
    DHL_MUX_ID_DSP_CODE_END = DHL_MUX_ID_DSP_MD32_2,
    DHL_MUX_ID_HW_IRDBG = DHL_MUX_ID_HW_CODE_BEGIN,
    DHL_MUX_ID_NO_MUX = 255
} dhl_mux_id;



typedef struct {
    kal_uint32 bytes_sent;
    kal_uint32 last_update;
} dhl_trace_stats;

typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 select[32];
    kal_uint8 value[32];
} dhl_cmd_set_dhl_mux_filter_struct;

typedef enum
{
  DHL_PORT_NULL,
  DHL_PORT_UART,
  DHL_PORT_USB,
  DHL_PORT_SP,
  DHL_PORT_OTHER
} DHL_PORT_SETTING;
# 1466 "interface/service/dhl/dhl_def.h"
typedef enum {
  INIT_CMDS_RESEND_EXCEPTION_INFO = 0,
  INIT_CMDS_MEMORY_DUMP_SWITCH,
  INIT_CMDS_QUERY_SWLA_HEADER,
  INIT_CMDS_QUERY_TARGET_VERSION,
  INIT_CMDS_ECHO_SIM_MAPPING,
  INIT_CMDS_QUERY_LOAD_VERSION,
  INIT_CMDS_QUERY_CALIBRATION,
  INIT_CMDS_QUERY_SWLA_INFO,
  INIT_CMDS_QUERY_SWTR_HEADER,
  INIT_CMDS_MAX = 31,
} dhl_init_cmd_set_enum_type;

typedef enum {
  DISCONNECT_CMDS_MEMORY_DUMP_SWITCH = 0,
  DISCONNECT_CMDS_MAX = 31,
} dhl_disconnect_cmd_set_enum_type;

typedef struct {
  kal_uint32 init_cmds;
} dhl_cmd_elt_connect_struct;

typedef struct {
  kal_uint32 disconnect_cmds;
} dhl_cmd_elt_disconnect_struct;

typedef struct {
  kal_uint32 token;
  kal_uint32 data_len;
  kal_uint8 data[1];
} dhl_cmd_loop_back_struct;

typedef struct {
  kal_uint32 token;
} dhl_cmd_loop_back_response_struct;



typedef struct {
    kal_uint32 magic;
    kal_uint32 length;
    kal_uint8 data[(64)];
} dhl_cmd_check_database_signature_struct;

typedef enum {
    QUERY_FAIL,
    QUERY_CONTINUE,
    QUERY_END
} query_mem_range_result;

typedef enum
{
  MEM_SYS,
  MEM_DSP,
  MEM_SLA,
  MEM_CSDSP,



  MEM_BB,
  MEM_TYPE_END,
} DHL_MEM_TYPE;

typedef enum {
default__size__0xFFFFFFFF,
sys_mem__size__0xFFFFFFFF,
dsp_mem__size__0xFFFFFFFF,
bb_reg__size__0xFFFFFFFF,
swla__size__0xFFFFFFFF,
coresonic_mem__size__0xFFFFFFFF,



tst_mem_type_string_end} tst_mem_type_string_enum;

typedef struct {
    kal_uint8 token;
    kal_uint8 reserved;
    kal_uint16 chunk_size;
    void *address;
    kal_uint32 length;
    DHL_CUSTOM_MEM_TYPE custom_mem_type;
    kal_uint32 custom_option;
} dhl_cmd_custom_read_memory_struct;

typedef struct {
    kal_uint8 token;
    void *address;
    kal_uint32 length;
    DHL_CUSTOM_MEM_TYPE custom_mem_type;
    kal_uint32 custom_option;
} dhl_ind_custom_read_memory_report_struct;

typedef struct {
    void *address;
    kal_uint32 length;
    DHL_CUSTOM_MEM_TYPE custom_mem_type;
    kal_uint32 custom_option;
    kal_uint8 data[1];
} dhl_cmd_custom_write_memory_struct;

typedef enum
{
  data_channel,
  monitor_channel,
} dhl_channel_type;
# 13 "./driver/tty/inc/tty_trace.h" 2
# 22 "./driver/tty/inc/tty_trace.h"
START_MODULE_MSG MOD_TTY 20
   TTY_TR_CTRL "[TTY] DclSerialPort_Control, cmd: %d "
   TTY_TR_DEV_NOT_EXIST "[TTY] Device doesn't exist "
   TTY_TR_INVALID_HANDLE "[TTY] Invalid handle!"
   TTY_TR_CONV_INIT "[TTY] Conventional module init "
   TTY_TR_NEW_INIT "[TTY] New module init, module id: %d,  port: %d "
   TTY_TR_REINIT "[TTY] re-init, new module id: %d "
   TTY_TR_DEINIT "[TTY] de-init, port: %d "
   TTY_TR_DRV_ATTACH "[TTY] Driver attach, port: %d"
   TTY_TR_DRV_DETACH "[TTY] Driver detach, port: %d"
   TTY_TR_DRV_REGISTER_CB "[TTY] Driver register callback function (uart handler), port: %d"
   TTY_TR_DRV_CB_IS_NULL "[TTY] Driver serial port %d callback handler is NULL!!"
   TTY_TR_NEW_RX_CB_IS_NULL "[TTY] Rx use new path but doesn't register callback!!"
   TTY_TR_GPD_EXHAUST "[TTY]   GPD is exhausted!!"
   TTY_TR_RX_GPD_IS_NULL "[TTY] Rx GPD is NULL!!"
   TTY_TR_TX_IOR_IS_NULL "[TTY] Tx IOR is NULL!!"
   TTY_TR_CMD_ERR_ASSIGN_RX_IOR "[TTY] Command error!! command: assign rx ior"
   TTY_TR_CMD_ERR_PUT_BYTES_IOR "[TTY] Command error!! command: put bytes ior"
   TTY_TR_CMD_ERR_NEED_TX_DONE_CB "[TTY] Command error!! command: need tx done cb"
   TTY_TR_CMD_ERR_GET_CHUNK_SIZE "[TTY] Command error!! command: get chunk size"
   TTY_TR_CMD_ERR_CLR_TX_BUF "[TTY] Command error!! command: clear tx buffer"
   TTY_TR_CMD_ERR_CLR_RX_BUF "[TTY] Command error!! command: clear rx buffer"
   TTY_TR_CMD_REG_CB_FAIL "[TTY] Register callback failed"
   TTY_TR_DRV_DEREGISTER_CB "[TTY] Driver de-register callback function (uart handler)"
   TTY_TR_CMD_CONV_TX "[TTY] Command conventional putbytes, length: %d, port: %d"
   TTY_TR_CMD_CONV_RX "[TTY] Command conventional getbytes, length: %d, port: %d"
   TTY_TR_CMD_CONV_TX_NOT_RDY "[TTY] Command conventional putbytes not ready, tx gpd current used: %d, port: %d"
   TTY_TR_CMD_DCL_CONTROL "[TTY] DclSerialPort_Control in, command: %d, port: %d"
   TTY_TR_WRONG_STATE "[TTY] Wrong state, driver not attached or flush operation not finished"
   TTY_TR_CMD_CONV_RX_NOT_RDY "[TTY] Command conventional getbytes not ready, no available data, port: %d"
   TTY_TR_CMD_REG_CB "[TTY] Register user callback, port: %d"
   TTY_TR_CMD_ASSIGN_RX_IOR "[TTY] Command assign RX ior, port: %d"
   TTY_TR_DRV_RX_ALLOW_LEN "[TTY] RX_ALLOW_LEN: %d, port: %d"
END_MODULE_MSG
# 31 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./driver/devdrv/idc/inc/idc_trace.h" 1
# 16 "./driver/devdrv/idc/inc/idc_trace.h"
START_MODULE_MSG MOD_IDC 20
 IDC_START_COUNT_MSG "[DRV_IDC] Start counting CONNSYS TX/RX"
 IDC_END_COUNT_MSG "[DRV_IDC] End counting CONNSYS TX/RX (%d/%d)"
 IDC_TDM_HI_MSG "[DRV_IDC] TDM_REQ_HI_Entry"
 IDC_TDM_LO_MSG "[DRV_IDC] TDM_REQ_LO_Entry"
 IDC_TDM_INIT_MSG "[DRV_IDC] TDM_REQ Init"
 IDC_UART_INIT_MSG "[DRV_IDC] IDC UART Init"
 IDC_SCHEDULE_0_MSG "[DRV_IDC] Schedule Event, schedule_num %d, num_event %d"
 IDC_SCHEDULE_1_MSG "[DRV_IDC] Schedule Offset = %d"
 IDC_SCHEDULE_START_MSG "[DRV_IDC] Start Schedule %d 0x%x"
 IDC_SCHEDULE_STATUS_MSG "[DRV_IDC] Get Schedule Status 0x%x 0x%x"
 IDC_INTERNAL_PIN_MSG "[DRV_IDC] Switch to internal pins"
 IDC_EXTERNAL_PIN_MSG "[DRV_IDC] Switch to external pins"
 IDC_RX_HISR_MSG "[DRV_IDC] HISR without Read Data, IIR = %x, LSR = %x, RXTRIG = %x, (%d, %d, %d)"
 IDC_RX_EXCEPTION_MSG "[DRV_IDC] Exception occur, IIR = %x, LSR = %x, RXTRIG = %x, (%d, %d, %d)"
 IDC_RX_HISTORY_MSG "[DRV_IDC] Receive %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x"
 IDC_RX_80211_RX_MSG "[DRV_IDC] Receive 802_11_RX %x %x"
 IDC_RX_80211_TX_MSG "[DRV_IDC] Receive 802_11_TX %x %x"
 IDC_RX_SEND_ILM_MSG "[DRV_IDC] MSG Send to EL1: %x, type:%x, msg:%x"
 IDC_RX_SUSPEND_MSG "[DRV_IDC] UART RX suspends due to too many IDC commands received in 100 us"
 IDC_RX_RESUME_MSG "[DRV_IDC] UART RX resume"
 IDC_WAIT_IER_OFF_MSG "[DRV_IDC] Writing IER is not complete, count = %d"
END_MODULE_MSG
# 32 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./driver/devdrv/mdipc/inc/mdipc_trace.h" 1
# 87 "./driver/devdrv/mdipc/inc/mdipc_trace.h"
typedef enum {
    MSG_ID_MDIPC_SYS_STATE_INIT,
    MSG_ID_MDIPC_SYS_STATE_RUNNING,
    MSG_ID_MDIPC_SYS_STATE_ASYNC
} mdipc_msg_sys_state_enum;


START_MODULE_MSG MOD_LISR2HISR_CC_IRQ_MD2MD1_SYS 20
    MDIPC_SYS_STATE_TRANS "[MDIPC] State transsion: %Mmdipc_msg_sys_state_enum to %Mmdipc_msg_sys_state_enum"
    MDIPC_SYS_STATE_RX_INIT_HS "[MDIPC] Receive Init Handshake Packet"
    MDIPC_SYS_STATE_RX_EXCEP_HS "[MDIPC] Receive Exception Handshake Packet"
    MDIPC_SYS_STATE_PEER_HANG "[MDIPC] Peer has no response"
    MDIPC_SYS_USER_CB "[MDIPC] User CB"
    MDIPC_SYS_HISR "[MDIPC] HISR - %d"
    MDIPC_MSG "[MDIPC] CCMSG"
    MDIPC_SYS_PING_TX "[MDIPC] Send Status Ping Log"
    MDIPC_SYS_PING_RX "[MDIPC] Receive Status Ping Log"
    MDIPC_SYS_EPOF_SYNC "[MDIPC] Receive EPOF Sync Packet"
END_MODULE_MSG
# 33 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./driver/drv/include/drv_trc.h" 1
# 396 "./driver/drv/include/drv_trc.h"
START_MODULE_MSG MOD_RTC_HISR 20

   RTC_REPEAT_CALI_ADJUST_COUNT "RTC adjust %d count for repeat calibration register"
   RTC_REPEAT_CALI_VALUE "RTC repeat calibration register value: %x"
   RTC_REPEAT_CALI_VALUE_EXCEED_MAX "RTC repeat calibration value %d exceed max"
   RTC_REPEAT_CALI_VALUE_EXCEED_MIN "RTC repeat calibration value %d exceed min"
   RTC_REPEAT_CALI_PERFORM_CALI "RTC repeat calibration perform for %d counts"

   RTC_ONESHOT_CALI_PERFORM_COUNT "RTC one shot calibration for %d counts, remains %d counts"
   RTC_ONESHOT_CALI_VALUE "RTC oneshot calibration register value: %x"
   RTC_ONESHOT_CALI_FINISH "RTC oneshot calibration finish"

   RTC_HW_CALI_START_MEASURE_INACCURATE "RTC HW cali, start to measure rtc inaccurate: (%d:%d:%d)"
   RTC_HW_CALI_INIT_MEASURE_ACCURATE_L1_TICK "RTC HW cali, init L1 tick: %d"
   RTC_HW_CALI_FINISH_MEASURE_INACCURATE "RTC HW cali, finish measuring rtc inaccurate: (%d:%d:%d)"
   RTC_HW_CALI_FINISH_MEASURE_ACCURATE_L1_TICK "RTC HW cali, finish L1 tick: %d, inaccurate ticks: %d"
   RTC_HW_CALI_NO_NEED_TO_CALI "RTC HW cali, no need to perform calibration, no diff count: %d"
   RTC_HW_CALI_IN_PROGRESS "RTC HW cali, in progress: (%d:%d:%d)"
   RTC_HW_CALI_INIT_REPEAT_CALI_COUNT "RTC HW cali, init repeat cali count: %d"

   RTC_SW_CALI_START_POWEROFF_CALI "RTC SW cali, start to do power off cali"
   RTC_SW_CALI_START_POWEROFF_CALI_TIME "RTC SW cali, current time before power off cali: (%d:%d:%d)"
   RTC_SW_CALI_FINISH_POWEROFF_CALI_TIME "RTC SW cali, current time after power off cali: (%d:%d:%d)"
   RTC_SW_CALI_FINISH_2ND_POWEROFF_CALI "RTC SW cali, wait %d ticks to perform 2nd power off cali"
   RTC_SW_CALI_AFTER_2ND_POWEROFF_CALI "RTC SW cali, current time after 2nd power off cali: (%d:%d:%d)"
   RTC_SW_CALI_START_POWERON_CALI_TIME "RTC SW cali, start power on cali: (%d:%d:%d), init tick: %d"
   RTC_SW_CALI_POWERON_CALI_START_INACCURACY_MEASURE "RTC SW cali, start accuracy measure"
   RTC_SW_CALI_POWERON_CALI_FINISH_INACCURACY_MEASURE "RTC SW cali, accuracy for one hour: %d ticks"
   RTC_SW_CALI_POWERON_CALI_START "RTC SW cali, start power on cali: (%d:%d:%d), init tick: %d"
   RTC_SW_CALI_WRITE_NVRAM "RTC SW cali, write to NVRAM"
   RTC_SW_CALI_KAL_EXPIRE_EARLY "RTC SW cali, KAL_timer expired early, expected: %d (tick), now: %d"
   RTC_SW_CALI_TIMOUE_NOT_IN_SEC_BOUNDARY "RTC SW cali, timeout not in second boundary: %d (tick)"
   RTC_SW_CALI_TIMOUE_OUT "RTC SW cali timeout (%d:%d:%d), current frame tick: %d"
   RTC_SW_CALI_UPDATE_TIME "RTC SW cali, update time (%d:%d:%d), current frame tick: %d"
   RTC_SW_CALI_POWEROFF_CALI_INIT1 "RTC SW cali, NVRAM time valid: %d"
   RTC_SW_CALI_POWEROFF_CALI_INIT2 "RTC SW cali, NVRAM time: %d-%d-%d (%d:%d:%d)"
   RTC_SW_CALI_POWEROFF_CALI_INIT3 "RTC SW cali, NVRAM tick diff valud: %d"
   RTC_SW_CALI_POWEROFF_CALI_INIT4 "RTC SW cali, NVRAM ticks_diff_per_hour: %d"
   RTC_SW_CALI_POWEROFF_PERIOD_VALID "RTC SW cali, poweroff period - valid: %d, hours: %d, minutes: %d"

   RTC_SW_CALI_CURR_POWER_TIME "RTC SW cali, curr power on time: %d-%d-%d (%d:%d:%d)"
   RTC_SW_CALI_RTC_TIME_IN_MINUTE_BOUNDARY "RTC SW cali, rtc time in minute boundary: %d, delay 6 sec"
   RTC_SW_CALI_RTC_TIME_IN_ALARM_BOUNDARY "RTC SW cali, rtc time in alarm boundary: %d, delay 6 sec"
   RTC_SW_CALI_INACCURATE_TICK_DURING_POWEROFF "RTC cali, inaccurate ticks during power off: %d"
   RTC_SW_CALI_ALARM_POWERON_AND_NEED_BACKWARD_TIME "RTC cali, alarm power on, but we need to backward time"
   RTC_SW_CALI_ALARM_POWERON_AND_POWEROFF "RTC cali, alarm power on but we backward time so power off"

   RTC_TC_INTR_FOR_USER "RTC TC intr for user"
   RTC_AL_INTR "RTC AL intr"

   RTC_FORWARD_TIME_1 "RTC forward time: (%d:%d:%d) forward %d hour, %d min, %d sec"
   RTC_FORWARD_TIME_2 "RTC forward time done: (%d:%d:%d)"
   RTC_BACKWARD_TIME_1 "RTC backward time: (%d:%d:%d) backward %d hour, %d min, %d sec"
   RTC_BACKWARD_TIME_2 "RTC backward time done: (%d:%d:%d)"

   RTC_INIT_TC_TIME "RTC initTC time, curr time: %d-%d-%d (%d:%d:%d)"
   RTC_WRITE_TO_NVRAM "RTC write to nvram, nvram time: %d-%d-%d (%d:%d:%d)"
   RTC_CALI_TIME "RTC cali time: %d-%d-%d (%d:%d:%d)"
   RTC_GET_TIME "RTC get time: %d-%d-%d (%d:%d:%d)"
   RTC_SET_ALARM "RTC set alarm: %d-%d-%d (%d:%d:%d)"
   RTC_GET_AL_TIME "RTC get alarm time: %d-%d-%d (%d:%d:%d)"
   RTC_IS_CONFIG_VALID_ALARM "RTC is config valid alarm: %d-%d-%d (%d:%d:%d)"
   RTC_IS_CONFIG_VALID_TIME "RTC is config valid time: %d-%d-%d (%d:%d:%d)"
   RTC_NOT_CONFIG_VALID_ALARM "RTC not config valid alarm: %d-%d-%d (%d:%d:%d)"
   RTC_NOT_CONFIG_VALID_TIME "RTC not config valid time: %d-%d-%d (%d:%d:%d)"
   RTC_IS_NOT_CONFIG_INVALID_TIME "RTC is not config invalid time: %d-%d-%d (%d:%d:%d)"
   RTC_TIME_VALID "RTC time valid: %d-%d-%d (%d:%d:%d)"
   RTC_TIME_NOT_VALID "RTC time not valid: %d-%d-%d (%d:%d:%d)"

END_MODULE_MSG

START_MODULE_MSG MOD_MSDC_HISR 20

   MSDC_ERROR_CMDTIMEOUT "MSDC error: cmd timeout with %x at %x, regs: %x, %x"
   MSDC_ERROR_RSPCRC "MSDC error: cmd resp crcerror with %x at %x, regs: %x, %x"
   MSDC_ERROR_DATTIMEOUT "MSDC error: dat timeout with %x at %x, regs: %x, %x"
   MSDC_ERROR_DATCRC "MSDC error: dat crcerror with %x at %x, regs: %x, %x"
   MSDC_ERROR_TUNECLKFAIL "MSDC error: failed to tune a suitable clk, using MSDC_CFG: %x , MSDC_IOCON:%x currently"
   MSDC_ERROR_CARDINTERNALECCFAIL "MSDC error: card has internal ECC fail on sectors, %x"


   MSDC_GENERAL_FAIL "MSDC fail: fail in file %d, line %d"
   MSDC_FAIL_WAITNOTBUSY_TIMEOUT "MSDC fail: polling r1b timeout %x"
   MSDC_FAIL_CMD18_DMA_TRANSFER "MSDC CMD18 DMA transfer fail :%x "


   MSDC_INFORM_READSECTOR_START "MSDC info: readSectors start at %x , %d tril with %d RD error before, IOCON: %x"
   MSDC_INFORM_READSECTOR_END "MSDC info: readSectors end with %x at %x by %x, with throughput %d KB/s"
   MSDC_INFORM_READSECTOR_ENTRY "MSDC info: readSectors(%x,%x,%x,%x), by %x, pdn: %x, present: %x, init: %x"
   MSDC_INFORM_WRITESECTOR_START "MSDC info: writeSectors start at %x, %d tril with %d WR error before"
   MSDC_INFORM_WRITESECTOR_END "MSDC info: writeSectors end with %x at %x by %x, with throughput %d KB/s"
   MSDC_INFORM_WRITESECTOR_ENTRY "MSDC info: writeSectors(%x,%x,%x,%x), by %x, pdn: %x, present: %x, init: %x"
   MSDC_INFORM_R0 "MSDC info: response0 :%x at %d line"
   MSDC_INFORM_CID "card's MID : %x,  OIDD : %x "
   MSDC_INFORM_ACMD41OCR "MSDC info: ACMD41 OCR :%x"
   MSDC_INFORM_CMD1OCR "MSDC info: MMC CMD1 OCR :%x"
   MSDC_INFORM_HOTPLUG "MSDC info: memory card hot plug, (%x, %x) with card's present:%x at time %x"
   MSDC_INFORM_HOTPLUGILM "MSDC info: send ilm for %x card, send_ilm: %x"
   MSDC_INFORM_BEFORE_SEND_CMD "MSDC info: SDC_CMDSTA %x, SDC_DATASTA %x, SDC_CMD %x, at line %d"
   MSDC_INFORM_CARD_PROGRAMMING "MSDC info: period time (including programming): %d ms, %d polling/T"
   MSDC_INFORM_R1B_DEBUG "r1b status direct entry :%d, LISR %d"
   MSDC_INFORM_R1B_DEBUG_2 "SDCMDIRQ_Entry_Count %d,SDMCIRQ_Entry_Count %d,SDDATIRQ_Entry_Count %d,SDR1bIRQ_Entry_count %d,SDIOIRQ_Entry_Count %d, SDPINIRQ_Entry_Count %d,%d,%d"

   MSDC_EVENTGP_MONITOR "MSDC info: event group status %x at line %d"


   MSDC_DCL_SD_OPEN "SD DCL open: flag : 0x%x, retAddr 0x%x from task 0x%x at time %d"
   MSDC_DCL_SDIO_OPEN "SDIO DCL open: flag : 0x%x, retAddr 0x%x from task 0x%x at time %d"


   MSDC_SDIO_API_DREAD "MSDC info: SDIO data read begin(%x,%x,%x,%x,%x,%x), pdn:%x, MSDC_CFG:%x"
   MSDC_SDIO_API_DREAD_END "MSDC info: SDIO data read end with status %d, %d blocks(bytes)/s, MSDC_IOCON:%x, SDC_CFG:%x"
   MSDC_SDIO_API_CMD52 "MSDC info: SDIO CMD52 begin(%x,%x,%x,%x,%x,%x), pdn:%x, MSDC_CFG:%x"
   MSDC_SDIO_API_CMD52_END "MSDC info: SDIO CMD52 end with %d, rsp0:%x"
   MSDC_SDIO_API_SET_BLK_SIZE "MSDC info: SDIO set function %d block size to %d, status %d"
   MSDC_SDIO_API_INIT "MSDC info: SDIO init begin"
   MSDC_SDIO_API_INIT_END "MSDC info: SDIO init end with %d"

 MSDC_INFORM_DMA_TRANSFER_CACHED_WRITE "MSDC info: count>MSDC_WRITE_THD_POLL,count=%d,threadID=%x "
 MSDC_INFORM_DMA_TRANSFER_CACHED_READ "MSDC info: count>MSDC_READ_THD_POLL,count=%d,threadID=%x "

END_MODULE_MSG

START_MODULE_MSG MOD_PPP_HW 20
   PPP_ENCODE_MSG "PFC Encode"
   PPP_ENCODE_HISR_MSG "PFC Encode HISR"
   PPP_ENCODE_PARA_MSG "PFC Encode parameters: scp:%d, ecp:%d, op:%d, dest->size:%d"
   PPP_ENCODE_PARA_ERROR_MSG "PFC Encode parameters error: scp:%d, ecp:%d, op:%d, dest->size:%d"
   PPP_ENCODE_STATE_ERROR_MSG "PFC Encode Error PFC not under OK status! stat:%d"
   PPP_ENCODE_STATE_MSG "PFC Encode PFC stat:%d   HW encode src comsume:%d  dst output:%d  duration(tick):%d"
   PPP_ENCODE_FINISH_MSG "PFC Encode API duration(tick):%d"

   PPP_DECODE_MSG "PFC Decode"
   PPP_DECODE_HISR_MSG "PFC Decode HISR"
   PPP_DECODE_PARA_MSG "PFC Decode parameters: scp:%d, ecp:%d, op:%d, dest->used:%d"
   PPP_DECODE_PARA_ERROR_MSG "PFC Decode parameters error: scp:%d, ecp:%d, op:%d, dest->used:%d"
   PPP_DECODE_STATE_MSG "PFC Decode PFC stat:%d   HW decode src comsume:%d  dst output:%d  duration(tick):%d"
   PPP_DECODE_STATE_ERROR_MSG "PFC Decode Error PFC not under OK status! stat:%d"
   PPP_DECODE_AT_ERROR_MSG "PFC WARNING_PPP_ESC_ATO_SEEMS_DETECT_AT_IN_PPP_FRAME_DECODE"
   PPP_DECODE_ESC_ERROR_MSG "PFC WARNING_PPP_ESC_ATO_SEEMS_DETECT_ESC_IN_PPP_FRAME_DECODE"
   PPP_DECODE_FINISH_MSG "PFC Decode API duration(tick):%d"

   PPP_WEITE_BUFFER_FULL_MSG "PFC write buffer full error"
   PPP_OK_MSG "PFC OK"
   PPP_ZERO_LENGTH_MSG "PFC Zero length"
   PPP_BUSY_MSG "PFC BUSY"
   PPP_FCS_ERROR_MSG "PFC FCS_ERROR"
   PPP_NOT_0X7E_MSG "PFC NOT_0X7E"
   PPP_ADR_CON_ERROR_MSG "PFC ADR_CON_ERROR"
   PPP_INVALID_MSG "PFC INVALID 0x7d 0x7e"
   PPP_RESUME_MSG "PFC RESUME"
   PPP_PROTOCOL_ERROR_DECODING_MSG "PFC PROTOCOL error in decoding"
   PPP_UNKNOWN_ERROR_MSG "PFC unknown error"

   PPP_START_MSG "PFC_START:   addr:%x, value: %x"
   PPP_CON_MSG "PFC_CON:     addr:%x, value: %x"
   PPP_PTC_MSG "PFC_PTC:     addr:%x, value: %x"
   PPP_DSCR_MSG "PFC_DSCR:    addr:%x, value: %x"
   PPP_SADDR_MSG "PFC_SADDR:   addr:%x, value: %x"
   PPP_SRC_MSG "PFC_SRC:     addr:%x, value: %x"
   PPP_USLEN_MSG "PFC_USLEN:   addr:%x, value: %x"
   PPP_DES_MSG "PFC_DES:     addr:%x, value: %x"
   PPP_UDLEN_MSG "PFC_UDLEN:   addr:%x, value: %x"
   PPP_INTEN_MSG "PFC_INTEN:   addr:%x, value: %x"
   PPP_STAT_MSG "PFC_STAT:    addr:%x, value: %x"
   PPP_SDRAT_MSG "PFC_SDRAT:   addr:%x, value: %x"
   PPP_ACCM0_MSG "PFC_ACCM0:   addr:%x, value: %x"
   PPP_ACCM1_MSG "PFC_ACCM1:   addr:%x, value: %x"
   PPP_ACCM2_MSG "PFC_ACCM2:   addr:%x, value: %x"
   PPP_ACCM3_MSG "PFC_ACCM3:   addr:%x, value: %x"
   PPP_ACCM4_MSG "PFC_ACCM4:   addr:%x, value: %x"
   PPP_ACCM5_MSG "PFC_ACCM5:   addr:%x, value: %x"
   PPP_ACCM6_MSG "PFC_ACCM6:   addr:%x, value: %x"
   PPP_DSCR2_MSG "PFC_DSCR2:   addr:%x, value: %x"
   PPP_DES2_MSG "PFC_DES2:    addr:%x, value: %x"
   PPP_UDLEN2_MSG "PFC_UDLEN2:  addr:%x, value: %x"
   PPP_USB1_MSG "PFC_USB1:    addr:%x, value: %x"
   PPP_USB2_MSG "PFC_USB2:    addr:%x, value: %x"

   PPP_ACCM_MSG "PFC_ACCM:    addr:%x, value: %x"
   PPP_ACFC_MSG "Set PFC_CON = PFC_CON | PFC_ACFC"
   PPP_PFC_MSG "Set PFC_CON = PFC_CON | PFC_PFC"

END_MODULE_MSG



START_MODULE_MSG MOD_DRV_HISR 20
   UART_RX_VFIFO_TIMEOUT_INT "UART port:%d  recive %d data---VFIFO Rx timeOut interrupt"
   UART_RX_VFIFO_INT "UART port:%d  recive %d data---VFIFO Rx interrupt"
   UART_RX_MCU_MODE_INT "UART port:%d  recive %d data---MCU mode Rx MCU mode interrupt"

   UART_TX_VFIFO_U_SendISRData_VFIFO "UART VFIFO Tx  U_SendISRData_VFIFO()---len %d,left %d"
   UART_TX_VFIFO_U_SendData_VFIFO "UART VFIFO Tx  U_SendData_VFIFO()---len %d,left %d"
   UART_TX_VFIFO_U_PutBytes_VFIFO "UART VFIFO Tx  U_PutBytes_VFIFO()---len %d,left %d"
   UART_TX_VFIFO_U_PutISRBytes_VFIFO "UART VFIFO Tx  U_PutISRBytes_VFIFO()---len %d,left %d"
END_MODULE_MSG
# 34 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2

# 1 "./driver/audio/src/v1/inc/l1sp_trc.h" 1
# 34 "./driver/audio/src/v1/inc/l1sp_trc.h"
START_MODULE_MSG MOD_L1SP 20


   MCU_DTMF_PLAY "[DTMF]DTMF_MCU_Play, DTMF_SW.pHandle: 0x%X"
   MCU_DTMF_STOP "[DTMF]DTMF_MCU_Stop, DTMF_SW.pHandle: 0x%X"
   MCU_DTMF_STOP_AND_WAIT "[DTMF]DTMF_MCU_StopAndWait, DTMF_SW.pHandle: 0x%X, I: %d, IsAudioPlaying: %d, SoundRuning: %d"
   MCU_DTMF_DATA_REQUEST "[DTMF]DTMF_MCU_DataRequestCallback, DTMF_SW.pHandle: 0x%X"
   MCU_DTMF_GET_DATA_COUNT "[DTMF]DTMF_MCU_GetDataCount, uDataWord: %d"
   MCU_DTMF_READ_DATA_DONE "[DTMF]DTMF_MCU_ReadDataDone, uDataWord: %d"
   MCU_DTMF_GET_REAR_BUFFER "[DTMF]DTMF_MCU_GetReadBuffer, uDataWord: %d"
   MCU_DTMF_DESTROY "[DTMF]dtmf_mcu_Destroy, DTMF_SW.pHandle: 0x%X, fNewDTMF: %d, fEnding: %d, fForceStop: %d"
   MCU_DTMF_INIT "[DTMF]dtmf_mcu_Init, uSampleRate: %d, uPcmBufSize(byte): %d, uTotalBufferSize(byte): %d"
   MCU_DTMF_PROCESS_ENTRY "[DTMF]dtmf_mcu_Process.entry, fNewDTMF: %d, fClearDTMF: %d, fEnding: %d, uBufLen(byte): %d"
   MCU_DTMF_PROCESS_STATUS "[DTMF]dtmf_mcu_Process.status, fIsPlaying: %d, uCurrentData: %d, uFlushSilenceCount: %d"
   MCU_DTMF_NEWKEY "[DTMF]dtmf_mcu_ActivatNewKey, uCurIdx: %d, IsQTMF: %d, Freq: [%d] [%d] [%d] [%d]"
   MCU_DTMF_NEWKEY_FORCE_END_2 "[DTMF]dtmf_mcu_ActivatNewKey, Force stop: uPreIndex2: %d, uRemainDuration: %d"
   MCU_DTMF_NEWKEY_FORCE_END_1 "[DTMF]dtmf_mcu_ActivatNewKey, Reduce Dur: uPreIndex1: %d, uRemainDuration: %d, uTotalDuration:%d"
   MCU_DTMF_UPDATE_TONE_PREV_END "[DTMF]dtmf_mcu_UpdateTone, prev_end: uIndex: %d"
   MCU_DTMF_UPDATE_TONE_CURR_END "[DTMF]dtmf_mcu_UpdateTone, curr_end: uIndex: %d"
   MCU_DTMF_UPDATE_TONE_CURR_OFF "[DTMF]dtmf_mcu_UpdateTone, curr_off: uIndex: %d"
   MCU_DTMF_UPDATE_TONE_CURR_ON "[DTMF]dtmf_mcu_UpdateTone, curr_on : uIndex: %d"
   MCU_DTMF_UPDATE_TONE_RAMPDOWN "[DTMF]dtmf_mcu_UpdateTone, RAMPDOWN: uIndex: %d"


   AFE_SWITCH_FIR "AFE Switch FIR %c for aud_func %X"
   AFE_SWITCH_LOOPBACK "AFE Switch Loopback %c"
   AFE_SWITCH_MIC "AFE Switch MIC %c for aud_func %X"
   AFE_SET_INPUT_SRC "AFE SetInputSource: %X"
   AFE_GAIN "AFE_VAG_CON:%X, AFE_AAG_CON:%X, DP_SIDETONE:%X"
   AFE_DIGI_GAIN "DP_VOL_OUT_PCM:%X, DP_DigiGain_Setting:%X, DP_EnhRefDigiGain_Setting:%X"
   AFE_SET_MIC_VOLUME "AFE SetMicrophoneVolume: %d"
   AFE_SET_SIDETONE_VOLUME "AFE SetSideToneVolume: %X"
   AFE_SET_OUTPUT_DEVICE "AFE Set aud_func %X OutputDevice %X"
   AFE_SET_OUTPUT_VOLUME "AFE Set aud_func %X OutputVolume %d %d"
   AFE_SET_LEVEL_VOLUME "AFE Set aud_func %X MaxAnalogGain %d , step %d, level %d"
   AFE_SET_GIDI_GAIN "AFE Set aud_func %X digital gain level %d"
   AFE_SET_SPH_REF_GIDI_GAIN "AFE Set speech enhancement reference digital gain %d"
   AFE_MUTE_SPEAKER "AFE mute aud_func %X speaker %d"
   AFE_SET_EDI "AFE Set EDI dir %d cycle %d fmt %d"
   AFE_SWITCH_HW_MUTE_SLEEP "AFE Switch HW mute sleep %d"
   AFE_EXT_AU_AMP_CHANNEL_AND_DEVICE "External audio amplifer debug: v_lowest=%d,v_device=%d, a_lowest=%d, a_lowest=%d"
   AFE_EXT_AU_AMP_FOUND_TWO_CHANNEL "External audio amplifer debug: v_lowest=%d,a_lowest=%d, v_cmd=%d, a_cmd=%d"
   AFE_CHG_STATE "AFE Change State (%d -> %d)"
   AFE_TURN_ON_AUDIO_CLK "AFE Turn On Audio Clock: %d"
   AFE_STATE_INFO "In AFE State(%d), v(%d, %d), a(%d, %d)"
   AFE_SET_DUAL_PATH_GAIN "AFE set dual path gain 0x%X"
   AFE_SET_MIC_GAIN_CONTROL "AFE set mic gain_ctrl Ana %d Dig %d(%d)"
   AFE_SET_OUTPUT_GAIN_CONTROL "AFE set func %d gain_ctrl Ana %d Dig %d(%d) Ext 0x%x"


   AFE_SWITCH_2_CLASSD "AFE Switch to Class-D"
   AFE_SWITCH_2_CLASSAB "AFE Switch to Class-AB"
   AFE_ACLK_SET_HARDWARE_MUTE "_AfeAclkSetHardwareMute (%d)"
   AFE_HARDWARE_MUTE_CTRL "_AfeHardwareMuteCtrl (%d)"
   AFE_SWITCH_VCM "Switch VCM = (%d)"


   L1CTM_OPEN "Call L1Ctm_Open"
   L1CTM_CLOSE "Call L1Ctm_Close"
   L1CTM_SET_INTERFACE "Call L1Ctm_SetInterface"
   L1CTM_START_NEGOTIATION "Call L1Ctm_StartNegotiation"
   L1CTM_TX_PUT_TEXT "Call L1Ctm_TxPutText"
   L1CTM_RX_GET_TEXT "Call L1Ctm_RxGetText"

   L1CTM_FAR_END_CTM_DETECTED "L1Ctm far-end CTM detected"
   L1CTM_NEGOTIATION_SUCCESS "L1Ctm negotiation success"
   L1CTM_NEGOTIATION_FAIL "L1Ctm negotiation fail"
   L1CTM_DEMAND_CTM_ACK "L1Ctm is demanded to send CTM ACK"
   L1CTM_UL_SEND_IDLE_AS_ACK "L1CtmTx ul-path send IDLE as ACK"
   L1CTM_DL_DETECT_CTM_SYNC "L1Ctm dl-path detect CTM Sync"
   L1CTM_DL_CTM_BURST_END "L1Ctm dl-path detect CTM burst-end"

   L1CTM_UL_SEND_ENQUIRY_CHAR "L1Ctm ul-path send %d-time ENQUIRY char"
   L1CTM_UL_GET_DECODED_TTY_CHAR "L1Ctm ul-path get decoded TTY-char 0x%02X"
   L1CTM_UL_SEND_CTM_CHAR "L1Ctm ul-path send CTM-char 0x%02X"
   L1CTM_DL_GET_RECEIVED_CTM_CHAR "L1Ctm dl-path get received CTM-char 0x%02X"
   L1CTM_DL_SEND_TTY_CHAR "L1Ctm dl-path send TTY-char 0x%02X"
   L1CTM_REC_DIR_NO "L1Ctm record to dir REC_%02u"
   L1CTM_SAVE_DECODED_CHAR "L1Ctm dl-path save decoded char 0x%02X"

   L1CTM_DEBUG_SHOW_SETTING1 "[CTM Setting 6229] AEC, EES, ES (Address 0x1A0~0x1A2): %d,%d,%d"
   L1CTM_DEBUG_SHOW_SETTING2 "[CTM Setting 6229] AMR codebook threshold=%d, gain=%d"
   L1CTM_DEBUG_SHOW_SETTING3 "[CTM Setting 6229] DSP_AFS/AHS_SP_BFI_THRESHOLD 0: %d,%d"
   L1CTM_DEBUG_SHOW_SETTING4 "[CTM Setting 6229] DSP_AFS/AHS_SP_BFI_THRESHOLD 1: %d,%d"
   L1CTM_DEBUG_SHOW_SETTING5 "[CTM Setting 6229] DSP_AFS/AHS_SP_BFI_THRESHOLD 2: %d,%d"
   L1CTM_DEBUG_SHOW_SETTING6 "[CTM Setting 6229] DSP_AFS/AHS_SP_BFI_THRESHOLD 3: %d,%d"
   L1CTM_DEBUG_SHOW_SETTING7 "[CTM Setting]: Audio Coefficient for input : %d, %d, %d, %d"
   L1CTM_DEBUG_SHOW_SETTING8 "[CTM Setting]: Audio Coefficient for output: %d, %d, %d, %d"
   L1CTM_FAKE_COSIM "Turning on COSIM bit in DP_CTM_COSIM_CTRL"
   L1CTM_BUF_OVFLOW "l1ctm buffer overflow"
   L1CTM_COSIM "Turning on COSIM bit in DP_CTM_COSIM_CTRL"
   L1CTM_BFI_INFO "l1ctm_in_hisr in cosim mode(buf_idx=%x, bfi_store_idx=%x, dsp_tch_bfi=%x, bfi flag=%x)"
   L1CTM_HCO_MODE "Opening ctm in HCO mode."
   L1CTM_VCO_MODE "Opening ctm in VCO mode."
   L1CTM_COSIM_MODE "Opening CTM in cosim mode"
   L1CTM_NORMAL_MODE "Opening ctm in normal mode (no HCO/VCO)."
   L1CTM_OPEN_PARAM "ctm param is not null, cprm_debug_flag=%x"


   SPC_BGSND_WRITEDATADONE_ENTER "[spc_bgSnd_writeDataDone] Enter"
   SPC_BGSND_WRITEDATADONE_LEAVE "[spc_bgSnd_writeDataDone] Leave"
   SPC_BGSND_REQUESTDATA_ENTER "[spc_bgSnd_requestData] Enter"
   SPC_BGSND_REQUESTDATA_INFO "[spc_bgSnd_requestData] bLen=%d BGSND_RB_DEFAULT_THRESHOLD=%d"
 SPC_BGSND_REQUESTDATA_LEAVE "[spc_bgSnd_requestData] Leave"
   SPC_BGSND_DLHDR_ENTER "[spc_BGSND_DLHdr] Enter"
 SPC_BGSND_DLHDR_LEAVE "[spc_BGSND_DLHdr] Leave"
   SPC_BGSNDSTART_ENTER "[spc_BgSndStart] Enter"
 SPC_BGSNDSTART_LEAVE "[spc_BgSndStart] Leave"
   SPC_BGSNDSTOP_ENTER "[spc_BgSndStop] Enter"
 SPC_BGSNDSTOP_LEAVE "[spc_BgSndStop] Leave"
   SPC_BGSNDCONFIG_ENTER "[spc_BgSndConfig] Enter"
 SPC_BGSNDCONFIG_LEAVE "[spc_BgSndConfig] Leave"

   L1SND_DSP_BUFFER_INFO "BGSND buf count:%d; dsp_buf_addr(toPtr): %x, dsp_buf_len: %d word"
   L1SND_FILLBUFFER "BGSND[%d] Filled %d word to DSP, bgSnd.bufRead=%d, bgSnd.bufWrite=%d"
   L1SND_PUT_SILENCE "BGSND Filled %d word to DSP with silence pattern %x"
   L1SND_WRITE_DATA "[EXT_BGSND_WriteSrcBuffer_%d] selected_src_id=%d type=%d Write data %d word to buffer %d, bgSnd.bufRead=%d, bgSnd.bufWrite=%d"
   L1SND_STOP_FLUSH_COUNT "BGSND Flush count: %d word"
   L1SND_STOP_FLUSH_LEAVE "BGSND Flush Still Leave: %d word"

   L1SND_ENTER_BGSND_START "Enter BGSND_Start"
   L1SND_ENTER_BGSND_STOP "Enter BGSND_Stop"
   L1SND_ENTER_EVENT_HANDLER "Enter bgsndEventHandler with state=%d"
   L1SND_CONFIG_ULMIXER "BGSND ConfigULMixer, flag:%d, gain:%d"
   L1SND_CONFIG_DLMIXER "BGSND ConfigDLMixer, flag:%d, gain:%d"

   L1SND_REENTER_HISR "SND re-enter HISR with isDlHisrCome=%d, isUlHisrCome=%d"


   TONESTOP_FLUSHQUEUE1 "[TONE]toneStop_FlushQueue_1 %x %x"
   TONESTOP_FLUSHQUEUE2 "[TONE]toneStop_FlushQueue_2 %x %x"
   TONESTOP1 "[TONE]toneStop1 return"
   TONESTOP2 "[TONE]toneStop2 %x %x"
   TONEMUTE "[TONE]toneMute %x %x"
   TONEPLAY "[TONE]TONE_Play[%d]"
   TONESTOP "[TONE]TONE_Stop"
   TONESTOPANDWAIT1 "[TONE]TONE_StopAndWait_1"
   TONESTOPANDWAIT2 "[TONE]TONE_StopAndWait_2"
   KTSTOPFLUSHQUEUE1 "[KT]ktStop_FlushQueue_1 %x"
   KTSTOPFLUSHQUEUE2 "[KT]ktStop_FlushQueue_2 %x"
   KTSTOP1 "[KT]ktStop_1 return"
   KTSTOP2 "[KT]ktStop_2 %x"
   KTPLAY "[KT]KT_Play[%d]"
   KTSTOP "[KT]KT_Stop"
   KTSTOPANDWAIT1 "[KT]KT_StopAndWait_1"
   KTSTOPANDWAIT2 "[KT]KT_StopAndWait_2"


   L1AUDIO_OPEN_FILE "Enter AUD_Open file, type = %d"
   L1AUDIO_OPEN_STREAM "Enter AUD_Open stream, type = %d"
   L1AUDIO_PLAY_FILE "Enter AUD_Play file, type = %d"
   L1AUDIO_PLAY_STREAM "Enter AUD_Play stream, type = %d"
   L1AUDIO_RECORD "Enter AUD_Record stream, type = %d"
   L1AUDIO_PROCESS "Enter AUD_Process, type = %d"
   L1AUDIO_PAUSE "Enter AUD_Pause, type = %d"
   L1AUDIO_RESUME "Enter AUD_Resume, type = %d"
   L1AUDIO_STOP "Enter AUD_Stop, type = %d"
   L1AUDIO_CLOSE "Enter AUD_Close, type = %d"
   L1AUDIO_SEEK "Enter AUD_Seek, type = %d"
   L1AUDIO_SET_START_TIME "Set audio start time, start time = %d ms, type = %d"
   L1AUDIO_SET_STOP_TIME "Set audio stop time, stop time = %d ms, type = %d"
   L1AUDIO_CONTENT "Enter AUD_GetContentDescInfo, type = %d"

   L1AUDIO_INIT_STATE "Audio function in initial state"
   L1AUDIO_RUNNING_STATE "Audio function in running state"
   L1AUDIO_STOP_STATE "Audio function in stop state"
   L1AUDIO_END_STATE "Audio function in end state"
   L1AUDIO_IDLE_STATE "Audio function in idle state"

   L1AUDIO_READ_BYTE "Read %d bytes from media buffer"
   L1AUDIO_WRITE_DSP_FIRST_SEGMENT "1stDSPStrAddr=%d, Len=%d"
   L1AUDIO_WRITE_DSP_SECOND_SEGMENT "2ndDSPStrAddr=%d, Len=%d"
   L1AUDIO_WRITE_MCU_FIRST_SEGMENT "1st, MBR=%d, %dW"
   L1AUDIO_WRITE_MCU_SECOND_SEGMENT "2nd, MBR=%d, %dW"

   L1AUDIO_DSP_ERROR "ERROR! DSP decodes bitstream"
   L1AUDIO_MCU_ERROR "ERROR! MCU parses packet"
   L1AUDIO_READ_FILE_ERROR "ERROR! File Error = %d"
   L1AUDIO_PARAMETER_ERROR "ERROR! DSP returns parameter error"
   L1AUDIO_TRIM_INFO "[L1AU][INFO]Infoindex: %d, (1) %d, (2): %d, (3): %d"
   L1AUDIO_TRIM_RANGE "[L1AU][TRIM]Start: %d END: %d, time(0)/offset(1): %d"


   L1AUDIO_MD2G_PWR_CTRL "MD2G PWR CTRL, audioid= %d, flag = %d"
   L1AUDIO_MD2G_PWR_CTRL_DONE "MD2G PWR CTRL DONE, audioid= %d, flag = %d"

   L1AUDIO_SETFLAG_A "[AUDMD2G] L1Audio_SetFlag , audioid= %d, dspUser = %d"
   L1AUDIO_CLEARFLAG_A "[AUDMD2G] L1Audio_ClearFlag, audioid= %d, dspUser = %d"
 L1AUDIO_SETFLAG_MD2G_A "[AUDMD2G] L1Audio_SetFlag_MD2G , audioid= %d, dspUser = %d"
 L1AUDIO_CLEARFLAG_MD2G_A "[AUDMD2G] L1Audio_ClearFlag_MD2G, audioid= %d, dspUser = %d"
# 234 "./driver/audio/src/v1/inc/l1sp_trc.h"
   L1SP_PHONE_CALL "[PHONECALL]pos=%d, %d, %d"
   L1SP_MODE_VALUE "[PHONECALL]Mode value: m0=%d, m1=%d, m2=%d, m3=%d, m4=%d, m5=%d, m6=%d, m7=%d, m8=%d, m9=%d, m10=%d, m11=%d, m12=%d, m13=%d, m14=%d, m15=%d"
   L1SP_COMMON_PARAM_VALUE "[PHONECALL]Common Param value: c0=%d, c1=%d, c2=%d, c3=%d, c4=%d, c5=%d, c6=%d, c7=%d, c8=%d, c9=%d, c10=%d, c11=%d"
   L1SP_SET_MODE "L1SP set mode=%d, spk_lev=%d, mic_lev=%d"
   L1SP_APPLY_MODE "L1SP on=%d, mode=%d, spk_lev=%d, mic_lev=%d"
   L1SP_SPEECH_ENHANCEMENT "L1SP turn on speech enhancement flag=%d, m0=%d, m1=%d, c0=%d, c1=%d"
   L1SP_SET_MIC_VOL "L1SP Set Mic Vol %d, sph_par %d"
   L1SP_ADAPT_MIC_VOL "L1SP Adapt Mic Vol %d"
   L1SP_INC_SPK_VOL "L1SP DSP Inc Spk Vol to %d, report %d"
   L1SP_L4C_SEND_CODEC "L1SP L4C Send Codec codec=%x l4c_codec=%x"
   L1SP_L4C_EVENT "L1SP L4C Event %d mode=%d pre_mode=%d"
   L1SP_MUTE_CONTROL_STATUS "L1SP MuteControl(%x) apULmute=%x apDLmute=%x codec_mute=%x forcedUnmute=%x"
   L1SP_FORCED_UNMUTE_CONTROLLER "SP_SetForcedUnMuteController forcedUnmuteController %x mask %x b = %x"
   L1SP_FORCED_UNMUTE_CONTROLLER_1 "SP_SetForcedUnMuteController forcedUnmuteController %x "

   DACA_EXCEPTION "[DATACARD]Expection %d"
   DACA_OPEN_PORT "[DATACARD]mode=%d port %d"
   DACA_GET_DATA "[DATACARD]Audl Get %d Bytes from mode=%d, ori req %d"
   DACA_PUT_DATA "[DATACARD]Audl Put %d Bytes to mode=%d"
   DACA_BUFFER_IDX "[DATACARD]ss_buf_idx %d"
   DACA_PLUGIN "[DATACARD]PlugIn mode=%d"
   DACA_STRM_ENABLE "[DATACARD]Enable mode=%d"
   DACA_STRM_DISABLE "[DATACARD]Disable mode=%d"

   DACA_ENTER_REQUEST_EXCHANGE_DL_DATA "[DataCard]##l1audio Enter MSG_SAC2L1AUDIO_SPEECH_DATACARD_REQUEST_EXCHANGE_DL_DATA is_strmOn=%d dl_ready=%d"
   DACA_ENTER_REQUEST_EXCHANGE_UL_DATA "[DataCard]##l1audio Enter MSG_SAC2L1AUDIO_SPEECH_DATACARD_REQUEST_EXCHANGE_UL_DATA is_strmOn=%d ul_ready=%d"
   DACA_UL_HAS_NO_DATA "[DataCard]##l1audio UL has no data"
   DACA_UL_HAS_DATA "[DataCard]##l1audio UL has data"
   DACA_LEAVE_REQUEST_EXCHANGE_UL_DATA "[DataCard]##l1audio Leave MSG_SAC2L1AUDIO_SPEECH_DATACARD_REQUEST_EXCHANGE_UL_DATA"
   DACA_ENTER_STRMONHANDLER "[DataCard]##spStrmOnHandler"
   DACA_ENTER_STRMOFFHANDLER "[DataCard]##spStrmOffHandler"
   DACA_ENTER_GETDATA1 "[DataCard]##Enter GetData1 is_strmOn=%d ul_ready=%d"
   DACA_ENTER_GETDATA2 "[DataCard]##Enter GetData2"
   DACA_ENTER_PUTDATA1 "[DataCard]##Enter PutData1 is_strmOn=%d dl_ready=%d"
   DACA_GET_SUFFICIENT_DATA "[DataCard]##GetData Data sufficient"
   DACA_GET_INSUFFICIENT_DATA "[DataCard]##GetData Data Insufficient"
   DACA_LEAVE_GETDATA "[DataCard]##Leave GetData"

   L1SP_DEC_SPK_VOL "L1SP DSP Dec Spk Vol to %d, report %d"
   L1SP_2MIC_STATE "L1SP 2Mic Enter Speech Mode %d, sph_state %d"
   L1SP_2MIC_SLEEP "L1SP 2Mic Enter Sleep Mode"
   L1SP_2MIC_ENTER_BYPASS "L1SP 2Mic Enter Bypass mode"
   L1SP_2MIC_EXIT_BYPASS "L1SP 2Mic Exit Bypass Mode(Enter Sleep mode)"

 L1SP_USELESS_SET "SPH[ENH] %d, %d, %d, %d"
 SPC_ILLEGAL_SPC_APP_BEHAVIOR_CHECK "[SPC] Illegle app control to turn on %MMSG_SPC_APP_T when (%d)%MMSG_SPC_APP_T, gSpc.spcAppUsage=%x"
 SPC_ILLEGAL_SPC_APP_BEHAVIOR "[SPC] Illegle app control with (%d)%MMSG_SPC_APP_T, to On/Off=%d %MMSG_SPC_APP_T"
 SPC_APP_DATA_SEND_FAIL "[SPC] (%d)%MMSG_SPC_APP_T app send data fail at pos %d"
 SPC_M2A_DROP "[SPC] Drop app (%d)%MMSG_SPC_APP_T data send, %d"
 SPC_INVALID_MSG "[SPC]INVALID CCCI A2M MSG (%08X)"
 SPC_M2A_DONE "[SPC] CCCI A2M %x done"
 SPC_SPEECH_ON "Spc_Speech_On %d"
 SPC_SPEECH_OFF "Spc_Speech_Off"
 SPC_SET_DROP_UL_MUTE "spc_gain_UlMuteSet mute is not apply"
 SPC_SET_DROP_DL_MUTE "spc_gain_DlMuteSet mute is not apply"
 SPC_SET_DROP_UL_ENH_RESULT_MUTE "spc_gain_UlEnhResultMuteSet mute is not apply"
 SPC_SET_DROP_UL_SOURCE_MUTE "spc_gain_UlSourceMuteSet mute is not apply"
 SPC_SET_SPEECHMODE_ADAPT "Spc_SetSpeechMode_Adaptation mode = %d"
 SPC_EM_DEFAULT_INIT "spc_EmInit, default used common=%d, wb=%d, dmnr=%d, lspkDmnr=%d"
 SPC_DROP_SET "[SPC] drop seting 0x%08X [(0x%04X)%MAUD_CCCI_MSG_T], data16 = 0x%04X, data32 = 0x%08X"
 SPC_EPOF_NOTIFY "[SPC] Receive EPOF from L4C, application usage = %x"

 SPC_AC_LOOPBACK_FROM_MIC "[SPC AC Loopback]FromMic %d %d %d %d"
   SPC_AC_LOOPBACK_SKIP_MIC "[SPC AC Loopback]Skip FromMic"
   SPC_AC_LOOPBACK_TO_SE "[SPC AC Loopback]ToSE %d %d %d %d"
   SPC_AC_LOOPBACK_FILL_SE "[SPC AC Loopback]FillSE"
   SPC_AC_LOOPBACK_FROM_SD "[SPC AC Loopback]FromSD %d %d %d %d"
   SPC_AC_LOOPBACK_SKIP_SD "[SPC AC Loopback]Skip FromSD"
   SPC_AC_LOOPBACK_TO_SPK "[SPC AC Loopback]ToSPK %d %d %d %d"
   SPC_AC_LOOPBACK_FILL_SPK "[SPC AC Loopback]FillSpk"
   SPC_AC_LOOPBACK_UL_DL_INDEX "[SPC AC Loopback]Dw, Dr, Uw, Ur %d %d %d %d"

 SPC_NOTIFY_RF_INFO "[SPC NOTIFY RF INFO]rf_info:%x 2g:%x 3g:%x 4g:%x"
 SPC_NOTIFY_NETWORK_STATUS "[SPC_NOTIFY_NETWORK_STATUS]tmp:%x isWB:%x RAT:%x"

   L1SP_SET_ENHANCEMENT "L1SP Set Enhancement keep=0x%x, turnOn=0x%x, turnOff=0x%x"
   L1SP_SET_ENHANCEMENT_SUB_MASK "L1SP Set Enhancement submask[%d]=%x"
   L1SP_ENHANCE_ON_OFF "[SPE]L1SP turn enhance =%d, with state=%x"
   SPE_AGC_CONFIG_INFO "[SPE]AGC turnOn/Off=%d, gain=0x%x, isNxpPaOn=%d, micInfo=0x%x, dspParam=0x%x, enhMasEchoRef=%d"
   L1SP_SET_ENH_FIR "SPH[ENH] enhancement mode %d, enhance Index %d, inFIR Index %d, outFIR Index %d, updateMask %d to value %d"
   L1SP_CHANGE_ENH_MODE "SPH[ENH] ChangeSpeechMode premode=%d, aftermode=%d, currentMode=%d"
   L1SP_WRITE_FIR "SPH[ENH] Write FIR isWB=%d"
   L1SP_UPDATE_SPE_MASKS "SPH[ENH] Update spe Masks[%d], spe_app_mask=%x, spe_usr_mask=%x, spe_usr_sub_mask=%x, newVale=%x, on/off=%x"
   L1SP_SET_MIC_GAIN_CONTROL "[MIC GAIN CONTROL]L1SP set mic gain control %x"
   L1SP_ADAPT_MIC_GAIN_CONTROL "[MIC GAIN CONTROL]L1SP adapt mic gain control %x"
 L1SP_MUTE_DSP_UL_CODEC_CONTROL "[MUTE] AM_Mute_UL_Codec_Speech: %x"
 L1SP_MUTE_DSP_DL_TRAFFIC_CONTROL "[MUTE] AM_Mute_DL_Speech_Traffic: %x"
 L1SP_MUTE_DSP_DL_8K_CONTROL "[MUTE] AM_Mute_DL_8k_Speech: %x"
 L1SP_MUTE_DSP_UL_ENH_RESULT_CONTROL "[MUTE] mute dsp uplink enhancement result(inAM): %x"
 L1SP_MUTE_DSP_UL_SOURCE_CONTROL "[MUTE] mute dsp uplink source(inAM): %x"



   SP3G_CODEC_READY_SKIP "SP3G Skip Callback of Codec_Ready  %d"
   SP3G_CODEC_CLOSE_SKIP "SP3G Skip Callback of Codec_Close  %d"
   SP3G_CODEC_READY_OK "SP3G OK Callback of Codec_Ready  %d"
   SP3G_CODEC_CLOSE_OK "SP3G OK Callback of Codec_Close  %d"
   SP3G_DL_PUT_SPEECH_FRAME_DEBUG "SP3G DL return %d"
   SP3G_UL_PUT_SPEECH_FRAME_DEBUG "SP3G UL return %d"
   L1D_RESYNC_UPDATE "[SP3G L1D Resync]Update %d"
   L1D_RESYNC_RESET "[SP3G L1D Resync]Reset"
   SP3G_L1D_Resync "[SP3G L1D Resync] %d offeset=%d"
   SP3G_DEBUG_UL_SETFRAMETYPE "[DEBUG]SP3G_UL_SetFrameType%d %d %d ftype=%d"
   SP3G_DEBUG_UL_GETSPEECHFRAME "Debug_UL_GetSpeechFrame %d"
   SP3G_SYNC "SP3G_HISR 3g_sync=%x"
   SP3G_DEBUG_UL_BUFF "#debug_ul_buff(6) %d "
   SP3G_RAB_EST_0 "[PhoneCall3G] SP3G_Rab_Est state=%d "
   SP3G_RAB_DEEST_0 "[PhoneCall3G] SP3G_Rab_Deest state=%d "
   SP3G_RAB_EST "SP3G CSR notify RAB establish"
   SP3G_RAB_DEEST "SP3G CSR notify RAB De-establish"
   SP3G_TX_SID_FIRST "SP3G_HISR TX SID FISRT"
   SP3G_RX_FORCE_NO_DATA_WHEN_CHANGE_BAND "SP3G_HISR RX Band Change,force speech frame to NO_DATA"
   SP3G_TX_SID_UPDATE "SP3G_HISR TX SID UPDATE"
   SP3G_RX_SID_FIRST "SP3G_HISR RX SID FISRT"
   SP3G_RX_SID_UPDATE "SP3G_HISR RX SID UPDATE"
   SP3G_RX_NO_DATA "SP3G_HISR RX GET NO DATA FRAME"
   SP3G_DTX_NO_DATA "SP3G_HISR INSERT NO DATA"
   SP3G_BUFFER_STATUS "SP3G_HISR DL r = %d, w = %d, num = %d, 1st byte = %x"
   SP3G_UL_DELAY "SP3G UL delay %d"
   SP3G_REQUEST "SP3G Request"
   SP3G_REQUEST_UL_FRAME_TYPE "SP3G set UL frame type %MtSP3G_SpeechCodecType"
   SP3G_UL_GET_SPEECH_FRAME "SP3G UL GetSpFrame"
   SP3G_DL_BUFFER_FINISH "SP3G DL Buffering finished"
   SP3G_DL_PUT_SPEECH_FRAME "SP3G DL sub_flow %d, frame_type %MtSP3G_SpeechCodecType, crc_status %d"
   SP3G_LOG_L1_INFO "SP3G CFN=%x, l1info=%x, crc = %x, s_val =%x, %x, %x"
   SP3G_L1A_UPDATE_INFO "SP3G Update Info bitmap %d, val %d"
   SP3G_INVALID_UL_CODEC_MODE "SP3G invalid UL codec mode %d"
   SP3G_SET_DTX "SP3G Set DTX %d"

   SP3G_UL_BIT_TRUE_DSP_F8 "SP3GHISR UL DSP len %d, %hx %hx %hx %hx %hx %hx %hx %hx"
   SP3G_UL_BIT_TRUE_DSP_N8 "SP3GHISR UL DSP %hx %hx %hx %hx %hx %hx %hx %hx"
   SP3G_TX_SPEECH_GOOD "SP3G_HISR UL is TX_SPEECH_GOOD"
   SP3G_UL_NO_DATA "SP3G_HISR UL is NO DATA"
   SP3G_UL_BIT_TRUE_F8 "SP3G_HISR=%d UL Type %dtSP3G_SpeechCodecType, Frm %hx %hx %hx %hx %hx %hx %hx %hx"
   SP3G_UL_BIT_TRUE_N13 "SP3G UL %hx %hx %hx %hx %hx %hx %hx %hx %hx %hx %hx %hx %hx"
   SP3G_UL_BUFFER "SP3GVT UL cnt=%d,r=%d,w=%d"
   SP3G_DL_BIT_TRUE "SP3G_HISR DL Type %d, Frm %x %x %x %x %x"
   SP3G_DL_BIT_TRUE_TASK "SP3G DL Frm %x %x %x %x %x"
   SP3G_DL_BIT_TRUE_DSP_F8 "SP3GHISR DL DSP len %d, %hx %hx %hx %hx %hx %hx %hx %hx"
   SP3G_DL_BIT_TRUE_DSP_N8 "SP3GHISR DL DSP %hx %hx %hx %hx %hx %hx %hx %hx"
   SP3GVT_FAKE_NODATA "SP3GVT Fake NoData"
   SP3G_DL_TIMING "SP3G DL Timing %d"
   SP3G_UL_TIMING "SP3G UL Timing %d"
   SP3G_D2M_UL_TIMING "SP3G D2M UL Timing %d"
   SP3G_D2M_DL_TIMING "SP3G D2M DL Timing %d"
   SP3G_FORCE_NODATA_WHEN_RESYNC "SP3G force one AMR_NO_DATA frame before resync"
   SP3G_UL_DSP_NOT_READY_WARNING_AND_FILL_SILENCE "SP3G_HISR UL NOT READY, Force Using Silence Pattern"
   SP3G_FOUND_UL_SYNC_TIMING_ERROR "SP3G found UL resync timing error"
   SP3G_FOUND_DL_SYNC_TIMING_ERROR "SP3G found DL resync timing error"


   SP3G_HSPA_UL_GET_SPEECH_FRAME "SP3GHSPA UL GetSpFrame type %MtSP3G_SpeechCodecType, len %d, %hx %hx"
   SP3G_HSPA_DL_PUT_SPEECH_FRAME "SP3GHSPA DL PutSpFrame type %MtSP3G_SpeechCodecType, CFN %d, crc %d, %hx %hx"
   SP3G_HSPA_DL_MAX_CS_DELAY "SP3GHSPA set Max CS delay %d"


   SP3GVT_UL_GET_SPEECH_FRAME "SP3GVT UL GetSpFrm, CurFrmCount %d"
   SP3GVT_UL_FRAME_INFO "SP3GVT UL Frm len %d, first 3 byte %x %x %x"
   SP3GVT_DL_FRAME_INFO "SP3GVT DL Frm len %d, first 3 byte %x %x %x"
   SP3GVT_DL_FRAME_ERROR "SP3GVT DL FrmType Err Warning %d !!"
   SP3GVT_SET_DELAY "SP3GVT SetDelay %d ms, about %d frame"


   SP4G_UL_SKIP_NOTIFY "SP4G_UL_SKIP_NOTIFICATION_FOR_PSR"
   SP4G_UL_GETSPEECHFRAME "SP4G_UL_GetSpeechFrame codec=%x *ptr1(%x)=%x *ptr2(%x)=%x"
   SP4G_DL_PUTSPEECHFRAME "SP4G_DL_PutSpeechFrame codec=%x *ptr1(%x)=%x ptr2=ptr2"
   SP4G_RAB_EST "SP4G CSR notify RAB establish id=%x codec=%x"
   SP4G_RAB_DEEST "SP4G CSR notify RAB De-establish id=%d"
   SP4G_TX_SID_FIRST "SP4G_HISR TX SID FISRT"
   SP4G_RX_FORCE_NO_DATA_WHEN_CHANGE_BAND "SP4G_HISR RX Band Change,force speech frame to NO_DATA"
   SP4G_TX_SID_UPDATE "SP4G_HISR TX SID UPDATE"
   SP4G_RX_SID_FIRST "SP4G_HISR RX SID FISRT"
   SP4G_RX_SID_UPDATE "SP4G_HISR RX SID UPDATE"
   SP4G_RX_NO_DATA "SP4G_HISR RX GET NO DATA FRAME"
   SP4G_RX_LOST_DATA "SP4G_HISR RX GET LOST DATA FRAME"

   SP4G_DTX_NO_DATA "SP4G_HISR INSERT NO DATA"
   SP4G_BUFFER_STATUS "SP4G_HISR DL r = %d, w = %d, num = %d, 1st byte = %x"
   SP4G_UL_DELAY "SP4G UL delay %d"
   SP4G_REQUEST "SP4G Request"
   SP4G_REQUEST_UL_FRAME_TYPE "SP4G set UL frame type %MtSP4G_SpeechCodecType"
   SP4G_UL_GET_SPEECH_FRAME "SP4G UL GetSpFrame"
   SP4G_DL_BUFFER_FINISH "SP4G DL Buffering finished"
   SP4G_DL_PUT_SPEECH_FRAME "SP4G DL sub_flow %d, frame_type %MtSP4G_SpeechCodecType, crc_status %d"
   SP4G_LOG_L1_INFO "SP4G CFN=%x, l1info=%x, crc = %x, s_val =%x, %x, %x"
   SP4G_L1A_UPDATE_INFO "SP4G Update Info bitmap %d, val %d"
   SP4G_INVALID_UL_CODEC_MODE "SP4G invalid UL codec mode %d"
   SP4G_SET_DTX "SP4G Set DTX %d"

   SP4G_UL_BIT_TRUE_DSP_F8 "SP4GHISR UL DSP len %d, %hx %hx %hx %hx %hx %hx %hx %hx"
   SP4G_UL_BIT_TRUE_DSP_N8 "SP4GHISR UL DSP %hx %hx %hx %hx %hx %hx %hx %hx"
   SP4G_TX_SPEECH_GOOD "SP4G_HISR UL is TX_SPEECH_GOOD"
   SP4G_UL_NO_DATA "SP4G_HISR UL is NO DATA"
   SP4G_UL_BIT_TRUE_F8 "SP4G_HISR=%d UL Type %dtSP4G_SpeechCodecType, Frm %hx %hx %hx %hx %hx %hx %hx %hx"
   SP4G_UL_BIT_TRUE_N13 "SP4G UL %hx %hx %hx %hx %hx %hx %hx %hx %hx %hx %hx %hx %hx"
   SP4G_UL_BUFFER "SP4GVT UL cnt=%d,r=%d,w=%d"
   SP4G_DL_BIT_TRUE "SP4G_HISR DL Type %d, Frm %x %x %x %x %x"
   SP4G_DL_BIT_TRUE_TASK "SP4G DL Frm %x %x %x %x %x"
   SP4G_DL_BIT_TRUE_DSP_F8 "SP4GHISR DL DSP len %d, %hx %hx %hx %hx %hx %hx %hx %hx"
   SP4G_DL_BIT_TRUE_DSP_N8 "SP4GHISR DL DSP %hx %hx %hx %hx %hx %hx %hx %hx"
   SP4GVT_FAKE_NODATA "SP4GVT Fake NoData"
   SP4G_DL_TIMING "SP4G DL Timing %d"
   SP4G_UL_TIMING "SP4G UL Timing %d"
   SP4G_D2M_UL_TIMING "SP4G D2M UL Timing %d"
   SP4G_D2M_DL_TIMING "SP4G D2M DL Timing %d"
   SP4G_FORCE_NODATA_WHEN_RESYNC "SP4G force one AMR_NO_DATA frame before resync"
   SP4G_UL_DSP_NOT_READY_WARNING_AND_FILL_SILENCE "SP4G_HISR UL NOT READY, Force Using Silence Pattern"
   SP4G_FOUND_UL_SYNC_TIMING_ERROR "SP4G found UL resync timing error"
   SP4G_FOUND_DL_SYNC_TIMING_ERROR "SP4G found DL resync timing error"


   SP4G_HSPA_UL_GET_SPEECH_FRAME "SP4GHSPA UL GetSpFrame type %MtSP4G_SpeechCodecType, len %d, %hx %hx"
   SP4G_HSPA_DL_PUT_SPEECH_FRAME "SP4GHSPA DL PutSpFrame type %MtSP4G_SpeechCodecType, CFN %d, crc %d, %hx %hx"
   SP4G_HSPA_DL_MAX_CS_DELAY "SP4GHSPA set Max CS delay %d"


   VM_SENDVMDATA_INFO "vm prints: %x, %d, %x, %d"
   VM_CONTROL "[VMREC] vm_con : %x"
   VM_SP3G_VM_L1T "[VMREC] SP3G VM L1T %x"
   VM_REC_DEBUG_INFO "[VMREC] VM_DEBUG_INFO = %x"
   VM_REC_HISR_VM_DATA_LOST "[VMREC] hisr data lost with count=%d, pos = %d"
   VM_REC_HISR_PCM_DATA_LOST "[VMREC] some vm's pcm data is missing, pos = %d"


   SPCIO_A2M_HISR "SPCIO [%d]A2M HISR bufp addr: %08x, len = %x"
   SPCIO_GETDATAFROMAP_INONETIME_1 "length: %d, headerLen: %d"
   SPCIO_GETDATAFROMAP_INONETIME_2 "header[0]=%x, header[1]=%x, header[2]=%x"
   SPCIO_ORG_RECEIVE_COMMAND "SPCIO rece ORG A2M Msg 0x%08X [(%d)%MSPC_MSG_ID_T][(%d)%MAUD_CCCI_MSG_TYPE_T][(%d)%MAUD_CCCI_MSG_T]"
   SPCIO_ORG_RECEIVE_DATA_NOTIFY "SPCIO rece ORG A2M data_ntf 0x%08X [(%d)%MSPC_MSG_ID_T][(%d)%MAUD_CCCI_MSG_TYPE_T][(%d)%MAUD_CCCI_MSG_T], offset 0x%x, len 0x%x"
   SPCIO_ORG_PROCESS_COMMAND "SPC proc ORG A2M Msg 0x%08X [(%d)%MSPC_MSG_ID_T][(%d)%MAUD_CCCI_MSG_TYPE_T][(%d)%MAUD_CCCI_MSG_T]"
   SPCIO_ORG_PROCESS_DATA_NOTIFY "SPC proc ORG A2M data_ntf 0x%08X [(%d)%MSPC_MSG_ID_T][(%d)%MAUD_CCCI_MSG_TYPE_T][(%d)%MAUD_CCCI_MSG_T], offset 0x%x, len 0x%x"
   SPCIO_ORG_FINISH_COMMAND "SPC done ORG A2M Msg 0x%08X [(%d)%MSPC_MSG_ID_T][(%d)%MAUD_CCCI_MSG_TYPE_T][(%d)%MAUD_CCCI_MSG_T]"
   SPCIO_ORG_FINISH_DATA_NOTIFY "SPC done ORG A2M data_ntf 0x%08X [(%d)%MSPC_MSG_ID_T][(%d)%MAUD_CCCI_MSG_TYPE_T][(%d)%MAUD_CCCI_MSG_T], offset 0x%x, len 0x%x"

 SPCIO_RECEIVE_MSG "SPC rece A2M 0x%08X [(%d)%MSPC_MSG_ID_T][(0x%04X)%MAUD_CCCI_MSG_T], data16 = 0x%04X, ata32 = 0x%08X"
 SPCIO_PROCESS_MSG "SPC proc A2M 0x%08X [(%d)%MSPC_MSG_ID_T][(0x%04X)%MAUD_CCCI_MSG_T], data16 = 0x%04X, ata32 = 0x%08X"
 SPCIO_FINISH_MSG "SPC done A2M 0x%08X [(%d)%MSPC_MSG_ID_T][(0x%04X)%MAUD_CCCI_MSG_T], data16 = 0x%04X, ata32 = 0x%08X"

   SPCIO_INVALID_MSG "INVALID SPCIO MSG ID(%08X), data (%08X) with reserved (%08X)"
   SPCIO_INVALID_MSG_BEFORE_QUEUE_READY "Before queue ready, INVALID SPCIO MSG ID(%08X), data (%08X) with reserved (%08X)"

 SPCIO_RECEIVE_MODEM_INTERNAL "SPCIO rece speeach internal msg 0x%08X [%MSPC_MSG_ID_T]"
 SPCIO_PROCESS_MODEM_INTERNAL "SPCIO proc speeach internal msg 0x%08X [%MSPC_MSG_ID_T]"
 SPCIO_FINISH_MODEM_INTERNAL "SPCIO done speeach internal msg 0x%08X [%MSPC_MSG_ID_T]"
   SPCIO_SEND_M2A_MESSAGE "SPCIO send M2A msg %08X, rev %08X"
   SPCIO_SEND_M2A_MESSAGE_FAIL "SPCIO send M2A message %08X fail, ret %d"
   SPCIO_SEND_M2A_MESSAGE_FAIL_END "SPCIO send M2A message %08X fail with retry three times"
   SPCIO_SEND_M2A_DATA "SPCIO send M2A data %08X"
   SPCIO_SEND_M2A_DATA_FAIL "SPCIO send M2A data %08X fail, ret %d"
   SPCIO_SEND_M2A_DATA_FAIL_END "SPCIO send M2A data %08X fail with retry three times"

   SPCIO_SDIO_DEBUG1 "SPCIO[SDIO] totalIdx(%d)=%d srcLen1=%d srcLen2=%d"
   SPCIO_SDIO_WRITE2AP_ENTER "SPCIO[SDIO] Write2AP enter"
   SPCIO_SDIO_WRITE2AP_INFO1 "SPCIO[SDIO] Write2AP r_srcLen1=%d r_srcLen2=%d curIdx=%d"
   SPCIO_SDIO_WRITE2AP_INFO2 "SPCIO[SDIO] Write2AP headerLen=%d t1=%d t2=%d length=%d"
   SPCIO_SDIO_WRITE2AP_LEAVE "SPCIO[SDIO] Write2AP leave"


   L1AUDIO_TONE_LOOPBACK_REC_CALLBACK_MODE "TONE_LOOPBACK_REC: callback Mode=%d"
   L1AUDIO_TONE_LOOPBACK_REC_MODE "TONE_LOOPBACK_REC: Mode=%d"



   L1AUDIO_GENERAL_INFO "[AUD][%MAudio_Trace_Index] %d, %d, %d, %d, %d, %d"


   L1AUDIO_DDLOAD_STATUS_FAIL "[DDLoad]DSP Status Not Clear"
   L1AUDIO_DDLOAD_STATUS_SUCCESS "[DDLoad]DDLoad success"
   L1AUDIO_DDLOAD_ID "[DDLoad]DDLoad ID = %d"


   ECALL_IVS_DRV_CATCH_EVENT "[eCall]IVS Driver Catch Event %d"
   ECALL_IVS_DRV_HLACK "[eCall]IVS Driver HLACK. Expect %d, Received %d"
   ECALL_PSAP_DRV_CATCH_EVENT "[eCall]PSAP Driver Catch Event %d"
   ECALL_PSAP_DRV_RECEIVE_MSD "[eCall]PSAP Driver Received MSD"
   ECALL_PSAP_DRV_MSD_DATA "[eCall]PSAP MSD %3d %3d %3d %3d %3d %3d %3d"
   ECALL_IVS_MODEM_SENDSTART "[eCall]IVS SendStart received from control"
   ECALL_IVS_MODEM_SENDSTART_IGNORE "[eCall]IVS SendStart received from control, ignored"
   ECALL_IVS_MODEM_RX_RESET "[eCall]IVS reset receiver"
   ECALL_IVS_MODEM_TX_RESET "[eCall]IVS reset transmitter"
   ECALL_IVS_MODEM_TX_RESET_MSD_PROVIDED "[eCall]IVS reset transmitter (MSD provided)"
   ECALL_IVS_MODEM_SENDSTART_DUR_MSD_IGNORE "[eCall]IVS SendStart during MSD transmission, ignored."
   ECALL_IVS_MODEM_SENDING_SEND "[eCall]IVS sending  SEND"
   ECALL_IVS_MODEM_FULL_RESET "[eCall]IVS full reset (no sync detected)"
   ECALL_IVS_MODEM_IGNORING_HLACK "[eCall]IVS ignoring additional HLACK (data: 0x0%X, metric: %3d)"
   ECALL_IVS_MODEM_RECEIVED_HLACK_FINISHED "[eCall]IVS received HLACK (data: 0x0%X, metric: %3d), finished."
   ECALL_IVS_MODEM_RECEIVED_HLACK_WAITING "[eCall]IVS received HLACK (data: 0x0%X, metric: %3d), waiting..."
   ECALL_IVS_MODEM_RECEIVED_START_LOW_RELIABILITY "[eCall]IVS received START !> ignoring message (reliability too low)"
   ECALL_IVS_MODEM_RECEIVED_START_TOO_OFTEN "[eCall]IVS received START (metric: %3d) too often starting over..."
   ECALL_IVS_MODEM_RECEIVED_START_STARTING "[eCall]IVS received START (metric: %3d), starting..."
   ECALL_IVS_MODEM_FAST_MODULATOR "[eCall]IVS fast modulator chosen (NACK count: %d)"
   ECALL_IVS_MODEM_ROBUST_MODULATOR "[eCall]IVS robust modulator chosen (NACK count: %d)"
   ECALL_IVS_MODEM_RECEIVED_START "[eCall]IVS received START (metric: %3d)"
   ECALL_IVS_MODEM_START_AFTER_ACK "[eCall]IVS START ... !> assuming previous ACK was wrong"
   ECALL_IVS_MODEM_START_AFTER_HLACK "[eCall]IVS START ... !> assuming previous HLACK was wrong"
   ECALL_IVS_MODEM_RECEIVED_NACK_EXCEPTING_START "[eCall]IVS received NACK  !> ignoring message (expecting START)"
   ECALL_IVS_MODEM_RECEIVED_NACK_LOW_RELIABILITY "[eCall]IVS received NACK  !> ignoring message (reliability too low)"
   ECALL_IVS_MODEM_RECEIVED_NACK_ASSUME_IDLE "[eCall]IVS received NACK  !> ignoring message (assume IDLE)"
   ECALL_IVS_MODEM_RECEIVED_NACK_FIRST_TIME "[eCall]IVS received NACK  (metric: %3d), first time"
   ECALL_IVS_MODEM_RECEIVED_NACK "[eCall]IVS received NACK  (metric: %3d)"
   ECALL_IVS_MODEM_NACK_AFTER_ACK "[eCall]IVS NACK ... !> assuming previous ACK was wrong"
   ECALL_IVS_MODEM_NACK_AFTER_HLACK "[eCall]IVS NACK ... !> assuming previous HLACK was wrong"
   ECALL_IVS_MODEM_RECEIVED_ACK_EXPECTING_START "[eCall]IVS received ACK   !> ignoring message (expecting START)"
   ECALL_IVS_MODEM_RECEIVED_ACK_RECORDED "[eCall]IVS received ACK   !> ignoring message (already recorded)"
   ECALL_IVS_MODEM_RECEIVED_ACK_LOW_RELIABILITY "[eCall]IVS received ACK   !> ignoring message (reliability too low)"
   ECALL_IVS_MODEM_RECEIVED_ACK_ASSUME_IDLE "[eCall]IVS received ACK   !> ignoring message (assume IDLE)"
   ECALL_IVS_MODEM_RECEIVED_ACK "[eCall]IVS received ACK   (metric: %3d), ACK recorded, wait for HLACK"
   ECALL_IVS_MODEM_RECEIVED_ACK_WAITING "[eCall]IVS received ACK   (metric: %3d), waiting..."
   ECALL_IVS_MODEM_ACK_AFTER_HLACK "[eCall]IVS ACK ... !> assuming previous HLACK was wrong"
   ECALL_IVS_MODEM_RECEIVED_IDLE_EXPECTING_START "[eCall]IVS received IDLE  !> ignoring message (expecting START)"
   ECALL_IVS_MODEM_RECEIVED_IDLE_IGNORE "[eCall]IVS received IDLE  !> ignoring message"
   ECALL_IVS_MODEM_RECEIVED_IDLE_REMAINING "[eCall]IVS remaining in IDLE mode"
   ECALL_SYNC_DETECTED "[eCall]sync detected; delay: %+4d; npeaks: %+4d (inverted sync)"
   ECALL_SYNC_DETECTED_REGULAR "[eCall]sync detected; delay: %+4d; npeaks: %+4d (regular sync)"
   ECALL_SYNC_MAX_RANGE "[eCall]maximum sync checking range is [-480...480] samples"
   ECALL_SYNC_DETECTE_SLIP "[eCall]sync check detects sample slip! [%+1d sample(s)]"
   ECALL_SYNC_PSAP_MAX_RANGE "[eCall][PSAP] maximum sync tracking range is [-240...240] samples"
   ECALL_SYNC_PSAP_SLIP "[eCall][PSAP] sync tracking detects sample slip! [%+1d sample(s)]"
   ECALL_CONTROL_PORT_UNDEFINE "[eCall]control callback: port owner undefined."
   ECALL_CONTROL_SYNC_LOCKED "[eCall]sync locked, starting control message detection"
   ECALL_CONTROL_CODEC_INVERSION "[eCall]codec inversion detected!"
   ECALL_CONTROL_MESSAGE_IGNORE "[eCall]message ignored (bad sync check)"
   ECALL_PSAP_MODEM_RECEIVED_SEND_CONTROL "[eCall][PSAP] SendStart received from control"
   ECALL_PSAP_MODEM_RECEIVED_SEND_OVER "[eCall][PSAP] SendStart received, starting over..."
   ECALL_PSAP_MODEM_RECEIVED_SEND_IGNORE "[eCall][PSAP] SendStart received from control, ignored."
   ECALL_PSAP_MODEM_RECEIVED_HLACK "[eCall][PSAP] HLACK data received from control"
   ECALL_PSAP_MODEM_RECEIVED_HLACK_IGNORE "[eCall][PSAP] HLACK data received from control, ignored."
   ECALL_PSAP_MODEM_RESET_RECEIVER "[eCall][PSAP] reset receiver"
   ECALL_PSAP_MODEM_RESET_TRANSMITTER "[eCall][PSAP] reset transmitter"
   ECALL_PSAP_MODEM_RECEIVED_SEND "[eCall][PSAP] received SEND (metric: %3d), initiating START trigger"
   ECALL_PSAP_MODEM_INVERSION_DETECT "[eCall][PSAP] codec inversion detected!"
   ECALL_PSAP_MODEM_INVERSION_SYNC "[eCall][PSAP] codec inversion detected (sync observer)!"
   ECALL_PSAP_MODEM_RESTART "[eCall][PSAP] restart due to tracking failures!"
   ECALL_PSAP_MODEM_CRC_FAIL "[eCall][PSAP] CRC failed; rv = %d"
   ECALL_PSAP_MODEM_RECEIVED_MSD "[eCall][PSAP] MSD successfully received; redundancy versions: %d"
   ECALL_PSAP_MODEM_SENDING_HLACK "[eCall][PSAP] sending HLACK; data: 0x0%X"
   ECALL_PSAP_MODEM_SENDING_START "[eCall][PSAP] sending START"
   ECALL_PSAP_MODEM_SENDING_NACK "[eCall][PSAP] sending NACK"
   ECALL_PSAP_MODEM_SENDING_ACK "[eCall][PSAP] sending ACK"
   ECALL_PSAP_MODEM_SENDING_ACK_PEND "[eCall][PSAP] sending ACK (HLACK pending)"
   ECALL_PSAP_MODEM_FAST_REMAIN_IDLE "[eCall][PSAP] remaining in IDLE mode"
   ECALL_PSAP_MODEM_FAST_MODULATION "[eCall][PSAP] fast modulator chosen (metric: %d)"
   ECALL_PSAP_MODEM_ROBUST_MODULATION "[eCall][PSAP] robust modulator chosen (metric: %d)"
   ECALL_IVS_PUT_MSD "[eCall][IVS] eCall_IVS_PutMSD,%d,%d,%d,%d,%d,%d,%d"


 PCMREC_HISR_DATA_DROP_DSP "[pcmRec] Drop dsp data due to buffer full, wFrameIdx = %d, rFrameIdx = %d"
 PCMREC_HISR_DATA_FROM_DSP "[pcmRec] SE buffer = %x, len = %x"
 PCMREC_GET_MIC_DATA_BUFS "[pcmRec] procFrameNum=%d, bufBeginIdx=%d, curWriteFrame=%d, pcmRec.bufReadFrame=%d"
 PCMREC_GET_DATA_BUFS "[pcmRec] Get data buffers add1 = %x, len1 = %d, add2 = %x, len2 = %d"
 PCMREC_GET_EMPTY_DATA "[pcmRec] Get data empty buffer"


 RAWPCMREC_HISR_DATA_DROP_DSP "[rawPcmRec] Drop dsp data due to buffer is in using"
 RAWPCMREC_HISR_DATA_FROM_DSP "[rawPcmRec] SE buffer = %x, len = %x"
 RAWPCMREC_GET_MIC_DATA_BUFS "[rawPcmRec] RawPcmRec_GetMicDataBufs: add=%x, header len=%d, UL data len=%d, DL data len=%d"
 RAWPCMREC_GET_DATA_BUFS "[rawPcmRec] Get data buffers add1 = %x, len1 = %d, add2 = %x, len2 = %d"
 RAWPCMREC_GET_DATA_INFO "[rawPcmRec] Get data info %d: UL_fs=%d, UL_byte_len=%d, DL_fs=%d, DL_byte_len=%d"
 RAWPCMREC_GET_EMPTY_DATA "[rawPcmRec] Get data empty buffer"


   SIDETONE_START "[sidetone] Enter SIDETONE_UpdateStart with solutionVer = %d"
   SIDETONE_STOP "[sidetone] Enter SIDETONE_UpdateStop with solutionVer = %d"
   SIDETONE_WRITE_TO_HW "[sidetone] write AFE_SIDETONE_GAIN with 0x%04X"



   L1AUDIO_BTSCO_SP_ON "[SCO][DRV]Speech On, state: %d, fWideBand = %d"
   L1AUDIO_BTSCO_SP_OFF "[SCO][DRV]Speech Off, state: %d"
   L1AUDIO_BTSCO_START "[SCO][DRV]Start, state: %d, fWideBand = %d"
   L1AUDIO_BTSCO_STOP "[SCO][DRV]Stop, state: %d"
   L1AUDIO_BTSCO_PROCESS "[SCO][DRV]Process, state: %d, pRX: 0x%X, pTX: 0x%X"
   L1AUDIO_BTSCO_HISR "[SCO][DRV]HISR, state: %d"
   L1AUDIO_BTSCO_CONTROL "[SCO][DRV]Control: 0x%X, PacketType: %d, W_Address: 0x%X, R_Address: 0x%X"
   L1AUDIO_BTSCO_COPY_RX "[SCO][DRV]Copy_RX, overflow : %d, iPacket_w: %d, iPacket_r: %d, uBufferCount: %d"
   L1AUDIO_BTSCO_COPY_TX "[SCO][DRV]Copy_TX, underflow: %d, iPacket_w: %d, iPacket_r: %d, uBufferCount: %d"
   L1AUDIO_BTSCO_GET_MEM "[SCO][DRV]GetMemory, uModule: %d, uSize(byte): %d"
   L1AUDIO_BTSCO_PROC_TX_RAW "[SCO][DRV]PROC_TX_RAW, RawDataLen(byte): %d,uPcmBuf_w(byte): %d"
   L1AUDIO_BTSCO_PROC_TX_SRC "[SCO][DRV]PROC_TX_SRC, uConsumeByte: %d, uOutByte: %d"
   L1AUDIO_BTSCO_PROC_TX_CVSD "[SCO][DRV]CVSD_TX_CVSD, iPacket_w: %d, iPacket_r: %d, fEnableFilter: %d"
   L1AUDIO_BTSCO_PROC_RX_RAW "[SCO][DRV]PROC_RX_RAW, CurrentFreeSpace(byte): %d, TotalFreeSpace(byte): %d, uPcmBuf_r(byte): %d"
   L1AUDIO_BTSCO_PROC_RX_PLC "[SCO][DRV]PROC_RX_PLC"
   L1AUDIO_BTSCO_PROC_RX_CVSD "[SCO][DRV]CVSD_RX_CVSD, iPacket_w: %d, iPacket_r: %d, fEnableFilter: %d, fEnablePLC: %d"
   L1AUDIO_BTSCO_ALLOC_MEM "[SCO][DRV]Alloc Memory, Size: %d, ptr: 0x%X"
   L1AUDIO_BTSCO_HISR_GPT "[SCO][DRV][CVSD]btsco_hisr, btsco.fBtError: %d, uCVSDGPT: %d"
   L1AUDIO_BTSCO_TIMER "[SCO][DRV][K2_MD2] Set timer, timer ID = %x, delay = %d, reschedule = %d"
   L1AUDIO_BTSCO_CANCEL_TIMER_ID "[SCO][DRV][K2_MD2] Cancel timer, timer ID = %x"
   L1AUDIO_BTSCO_CREATE_TIMER_ID "[SCO][DRV][K2_MD2] Create timer, timer ID = %x"

   L1AUDIO_BTSCO_AP_SPEECH_TX_DATA "[SCO][APP]Speech TX data, uCurrentSpace(Byte): %d, uTotalSpace(Byte): %d"
   L1AUDIO_BTSCO_AP_SPEECH_TX_OF "[SCO][APP]Speech TX Overflow, freespace(byte): %d"
   L1AUDIO_BTSCO_AP_SPEECH_RX_DATA "[SCO][APP]Speech RX data, uCurrentData(Byte): %d, uTotalData(Byte): %d"
   L1AUDIO_BTSCO_AP_SPEECH_RX_UF "[SCO][APP]Speech RX Underflow, datacount(byte): %d"

END_MODULE_MSG
# 36 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./driver/audio/src/v1/inc/l1audio_sph_trc.h" 1
# 16 "./driver/audio/src/v1/inc/l1audio_sph_trc.h"
START_MODULE_MSG MOD_L1AUDIO_SPH_SRV 20


   VM_DATA "VM data"
   RECORD_LENGTH "Recording VM length = %u bytes"
   SET_EPL_PARA "EPL common parameter0 is set to %d"
   EPL_PARA_ERROR "Invalid EPL common parameter0"
   DEBUG_NUMBER "Debug number = %d"

END_MODULE_MSG
# 37 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./interface/driver/storage/sim/sim_drv_trc.h" 1
# 92 "./interface/driver/storage/sim/sim_drv_trc.h"
START_MODULE_MSG MOD_SIM_DRV 20


    SIM_GEMINI_CMD1 "[SIM_CMD1] %x %x %x %x, %x %x %x %x"
    SIM_GEMINI_CMD2 "[SIM_CMD2] %x %x %x %x, %x %x %x %x"
    SIM_GEMINI_CMD3 "[SIM_CMD3] %x %x %x %x, %x %x %x %x"
    SIM_GEMINI_GEN1 "[SIM_GEN1] file %x, line %x, %x %x, %x %x %x %x"
    SIM_GEMINI_GEN2 "[SIM_GEN2] %x %x, %x %x"

END_MODULE_MSG
# 38 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2

# 1 "./service/sys_svc/dspfm_lte/inc/dspfm_trace.h" 1
# 17 "./service/sys_svc/dspfm_lte/inc/dspfm_trace.h"
START_MODULE_MSG MOD_DSPFM 20
   DSPFM_REGION_NOT_FOUND "[DSPFM] Cannot find DSP region in flash layout"
   DSPFM_FILE_NOT_OPEN "[DSPFM] DSP file not opened "
   DSPFM_PTR_NOT_ALIGN "[DSPFM] DSP ptr not aligned "
   DSPFM_OFFSET_NOT_ALIGN "[DSPFM] DSP offset not aligned  "
   DSPFM_INVALID_GFH_FILE_INFO "[DSPFM] Invalid GFH file info"
   DSPFM_FILE_SIZE_TOO_LARGE "[DSPFM] DSP file size exceeds bound page"
   DSPFM_WRONG_GFH_FILE_TYPE "[DSPFM] GFH file type is not LTE_DSP_ROM "
   DSPFM_LENGTH_TOO_LARGE "[DSPFM] Read length exceeds file size "
   DSPFM_READ_FLASH_FAILED "[DSPFM] Read error at block %d, page %d"
   DSPFM_FLASH_BAD_BLOCK "[DSPFM] Bad block at block %d"
   DSPFM_FILE_READ_FAILED "[DSPFM] DSP file read failed"
   DSPFM_FILE_SEEK_FAILED "[DSPFM] DSP file seek failed"
   DSPFM_VERSION_CHECK_FAIL "[DSPFM] DSP version check failed"
   DSPFM_MAUI_GFH_NO_PLT_ID "[DSPFM] MAUI platform id not found"
   DSPFM_MAUI_GFH_NO_PROJ_ID "[DSPFM] MAUI project id not found"
   DSPFM_DSP_GFH_NO_FOUND "[DSPFM] DSP GFH file info not found"
   DSPFM_DSP_GFH_NO_PLT_ID "[DSPFM] DSP platform id not found"
   DSPFM_DSP_GFH_NO_PROJ_ID "[DSPFM] DSP project id not found"
   DSPFM_DSP_PLT_ID_NOT_MATCH "[DSPFM] DSP platform id is not matched"
   DSPFM_DSP_PROJ_ID_NOT_MATCH "[DSPFM] DSP project id is not matched"
END_MODULE_MSG
# 40 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./service/hif/hmu/include/hmu_trace.h" 1
# 77 "./service/hif/hmu/include/hmu_trace.h"
START_MODULE_MSG MOD_HMU 20


    HMU_CHANGE_TIMER_DSP "[HMU] hmu_switch_hif_timer to DSP \n"
    HMU_CHANGE_TIMER_GPT "[HMU] hmu_switch_hif_timer to GPT \n"

END_MODULE_MSG
# 41 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./middleware/hif/ipcore/include/ipc_trace.h" 1
# 21 "./middleware/hif/ipcore/include/ipc_trace.h"
START_MODULE_MSG MOD_IPCORE 20
    IPC_TR_ILM_WRONG_DEST_MOD "[IPCORE] ipc_on_ilm(): wrong dest_mod_id(%d)!"
    IPC_TR_NETIF_ATTACHING "[IPCORE] ipc_attach(): module_id(%d), netif_id(%d), callback_context(0x%x), features(0x%x)..."
    IPC_TR_NETIF_ATTACHED "[IPCORE] ipc_new_netif(): module_id(%d), netif_id(%d) has attached successfully"
    IPC_TR_NETIF_ATTACH_OUT_OF_SPACE "[IPCORE] ipc_new_netif(): module_id(%d), netif_id(%d) failed for out of space!"
    IPC_TR_NETIF_ATTACH_DUPLICATED "[IPCORE] ipc_new_netif(): module_id(%d), netif_id(%d) has attached before!"
    IPC_TR_NETIF_DETACHING "[IPCORE] ipc_detach(): handle(0x%x)..."
    IPC_TR_NETIF_DETACHED "[IPCORE] ipc_detach(): module_id(%d), netif_id(%d) has detached successfully"
    IPC_TR_NETIF_DETACH_INVALID "[IPCORE] ipc_del_netif(): invalid netif to detach!"
    IPC_TR_RESET_START "[IPCORE] ipc_reset(): Start to handle IPCore reset"
    IPC_TR_GET_QBM_DATAHEAD_ZERO_LENGTH_BD "[IPCORE] ipc_get_qbm_datahead(): Found non-zero length GPD with all-zero length BD list, this should not happen: gpd(0x%x), gpd_len(%d)"
    IPC_TR_DEL_SESSION "[IPCORE] ipc_reset(): Delete session[0x%x] for idx[%d]"
    IPC_TR_DEL_SESSION_INFO "[IPCORE] ipc_reset(): Delete session information(type[%d], ip_id[%d]) for idx[%d]"
    IPC_TR_DEL_NETIF "[IPCORE] ipc_reset(): Delete netif[0x%x] for idx[%d]"
    IPC_TR_RESET_END "[IPCORE] ipc_reset(): Handle IPCore reset is done"
    IPC_TR_SESSION_BINDING_START "[IPCORE] ipc_on_pdn_bind(): binding request received"
    IPC_TR_SESSION_BINDING_INFO "[IPCORE] ipc_on_pdn_bind(): network_interface_id(0x%X), pdn_id(0x%X), ip_addr_type(%d)..."
    IPC_TR_SESSION_BINDING_CFG_IP_INFO "[IPCORE] ipc_on_pdn_bind(): Configure IP information for network_interface_id(0x%X), pdn_id(0x%X), ip_addr_type(%d):Mapped NMU ip_id(%d)"
    IPC_TR_SESSION_BINDING_CFG_IPV6_DNS "[IPCORE] ipc_on_pdn_bind(): Add IPv6 DNS to NMU ip_id(%d):[%02X] %02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x"
    IPC_TR_SESSION_BINDING_CFG_IPV6_DNS_NUM "[IPCORE] ipc_on_pdn_bind(): Set IPv6 DNS number(%d) to NMU ip_id(%d)"
    IPC_TR_SESSION_BINDING_CFG_IPV6_ZERO_IID_LEN "[IPCORE] ipc_on_pdn_bind(): Set IPv6 IID length of NMU ip_id(%d) to ZERO"
    IPC_TR_SESSION_BINDING_CFG_IPV6_IID "[IPCORE] ipc_on_pdn_bind(): Set IPv6 IID to NMU ip_id(%d):IID length(%d) %02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x"
    IPC_TR_SESSION_BINDING_CFG_IPV6_DOWN "[IPCORE] ipc_on_pdn_bind(): NMU ip_id(%d) - IPv6 DOWN"
    IPC_TR_SESSION_BINDING_CFG_IPV6_UP "[IPCORE] ipc_on_pdn_bind(): NMU ip_id(%d) - IPv6 UP"
    IPC_TR_SESSION_BINDING_CFG_IPV4_DNS "[IPCORE] ipc_on_pdn_bind(): Add IPv4 DNS to NMU ip_id(%d):[%02X] %d.%d.%d.%d"
    IPC_TR_SESSION_BINDING_CFG_IPV4_DNS_NUM "[IPCORE] ipc_on_pdn_bind(): Set IPv4 DNS number(%d) to NMU ip_id(%d)"
    IPC_TR_SESSION_BINDING_CFG_IPV4_ADDR "[IPCORE] ipc_on_pdn_bind(): Set IPv4 address to NMU ip_id(%d): %d.%d.%d.%d"
    IPC_TR_SESSION_BINDING_CFG_IPV4_FAKE_INFO "[IPCORE] ipc_on_pdn_bind(): NMU ip_id(%d) - Trigger IPv4 fake info generation for IPv4 address %d.%d.%d.%d"
    IPC_TR_SESSION_BINDING_CFG_IPV4_UP "[IPCORE] ipc_on_pdn_bind(): NMU ip_id(%d) - IPv4 UP"
    IPC_TR_SESSION_BINDING_CFG_IPV4_DOWN "[IPCORE] ipc_on_pdn_bind(): NMU ip_id(%d) - IPv4 DOWN"
    IPC_TR_SESSION_BINDING_DHCP4C "[IPCORE] ipc_on_pdn_bind(): Enable DHCP4C for netif_id(%d), features(0x%X)"
    IPC_TR_SESSION_BIND_SESSION_RLOCK_FAIL "[IPCORE] ipc_on_pdn_bind(): session readlock is failed for network_card(0x%X), pdn_id(0x%X), ip_type(0x%X)!"
    IPC_TR_SESSION_BIND_NEW_SESSION_FAIL "[IPCORE] ipc_on_pdn_bind(): session allocation is failed for network_card(0x%X), pdn_id(0x%X), ip_type(0x%X)!"
    IPC_TR_SESSION_BIND_INVALID_NETIF "[IPCORE] ipc_on_pdn_bind(): no netif found for network_card(0x%X)!"
    IPC_TR_SESSION_BIND_UNSUPPORTED_IP_ADDR_TYPE "[IPCORE] ipc_on_pdn_bind(): unsupported ip_addr_type(%d)! pdn_id(0x%X)"
    IPC_TR_SESSION_BIND_NULL_PARAM "[IPCORE] ipc_on_pdn_bind(): NULL parameter!"
    IPC_TR_SESSION_BIND_START "[IPCORE] ipc_new_session(): New session - session_context(0x%X), session_type(0x%X), session_state(0x%X)."
    IPC_TR_SESSION_BIND_NETIF_BOUND_MIXED "[IPCORE] ipc_new_session():(IPV4V6) netif(0x%x)/netif_id(%d) has already bound with session (map[v4]=0x%x, map[v6]=0x%x)! session_context(0x%X), session_type(0x%X), session_state(0x%X) bind fail."
    IPC_TR_SESSION_BIND_NETIF_BOUND_SPECIFIC_IP_VER "[IPCORE] ipc_new_session():(v4_or_v6) netif(0x%x)/netif_id(%d) has already bound with session (map[v4]=0x%x, map[v6]=0x%x)! session_context(0x%X), session_type(0x%X), session_state(0x%X) bind fail."
    IPC_TR_SESSION_BIND_DUPLICATED "[IPCORE] ipc_new_session(): session_context(0x%X), session_type(0x%X), session_state(0x%X) has already bound!"
    IPC_TR_SESSION_BIND_OUT_OF_SPACE "[IPCORE] ipc_new_session(): session_context(0x%X), session_type(0x%X), session_state(0x%X) failed for out of space!"
    IPC_TR_SESSION_BINDING_RESULT "[IPCORE] ipc_on_pdn_bind(): binding request handling - result(0x%X)"
    IPC_TR_SESSION_BINDING_RSP_PARAM_GEN "[IPCORE] ipc_on_pdn_bind(): Generate binding response parameter - network_interface_id(%d), pdn_id(%d), sizeof(ip_addr_struct)=%d, sizeof(dns_struct)=%d, sizeof(upcm_ipcore_back_info_t)=%d"
    IPC_TR_SESSION_BINDING_RSP "[IPCORE] ipc_on_pdn_bind(): sending response for binding request - result(0x%X), dst_module(0x%X)"
    IPC_TR_SESSION_BOUND "[IPCORE] ipc_new_session(): session_context(0x%X), session_type(0x%X), session_state(0x%X) has bound successfully => ip_id(%d)"
    IPC_TR_SESSION_DEACTIVATING "[IPCORE] ipc_on_pdn_deact(): pdn_id(0x%X)..."
    IPC_TR_SESSION_DEACTIVATE_NO_SESSION_FOUND "[IPCORE] ipc_on_pdn_deact(): no session found for pdn_id(0x%X)!"
    IPC_TR_SESSION_DEACTIVATE_NULL_PARAM "[IPCORE] ipc_on_pdn_deact(): NULL parameter!"
    IPC_TR_SESSION_DEACTIVATE_INVALID_SESSION "[IPCORE] ipc_del_session(): it's not a valid session!"
    IPC_TR_SESSION_DEACTIVATED "[IPCORE] ipc_del_session(): session_context(0x%X), session_type(0x%X), ip_id(%d) has deactivated successfully"
    IPC_TR_UPDATE_SESSION_STATE_START "[IPCORE] ipc_update_session_state(): Update session_context(0x%X) to state(%d) start"
    IPC_TR_UPDATE_SESSION_STATE_ORG_AND_NEW "[IPCORE] ipc_update_session_state(): Session_context(0x%X) session_type(0x%X) of netif_context(0x%X) from org_state(%d) to new_state(%d)"
    IPC_TR_UPDATE_SESSION_STATE_TRANSITION_SUCCESS "[IPCORE] ipc_update_session_state(): Session_context(0x%X) update to state(%d) successfully"
    IPC_TR_UPDATE_SESSION_STATE_WRITE_FAIL "[IPCORE] ipc_update_session_state(): Session_context(0x%X) update to state(%d) fail"
    IPC_TR_UPDATE_SESSION_STATE_SST_NA "[IPCORE] ipc_update_session_state(): Session_context(0x%X), state(%d)->(%d), do nothing else"
    IPC_TR_UPDATE_SESSION_STATE_SST_LUI "[IPCORE] ipc_update_session_state(): Session_context(0x%X), state(%d)->(%d), LinkUpIndication"
    IPC_TR_UPDATE_SESSION_STATE_SST_LUR "[IPCORE] ipc_update_session_state(): Session_context(0x%X), state(%d)->(%d), LinkUpRequest(netif[0x%X], IPType[%d])"
    IPC_TR_UPDATE_SESSION_STATE_SST_LDR "[IPCORE] ipc_update_session_state(): Session_context(0x%X), state(%d)->(%d), LinkDownRequest(netif[0x%X], IPType[%d])"
    IPC_TR_UPDATE_SESSION_STATE_SST_IUI "[IPCORE] ipc_update_session_state(): Session_context(0x%X), state(%d)->(%d), IpUpIndication"
    IPC_TR_UPDATE_SESSION_STATE_SST_IUR "[IPCORE] ipc_update_session_state(): Session_context(0x%X), state(%d)->(%d), IpUpRequestion(netif[0x%X], IPType[%d])"
    IPC_TR_UPDATE_SESSION_STATE_SST_IDR "[IPCORE] ipc_update_session_state(): Session_context(0x%X), state(%d)->(%d), IpDownRequestion(netif[0x%X], IPType[%d])"
    IPC_TR_UPDATE_SESSION_STATE_ILLEGAL_TRANSITION "[IPCORE] ipc_update_session_state(): Session_context(0x%X), state(%d)->(%d), Unknown action(%d)!"
    IPC_TR_UPDATE_SESSION_STATE_OUT_OF_RANGE "[IPCORE] ipc_update_session_state(): Session_context(0x%X), state(%d)->(%d), Illegal transaction!(Min state[%d], Max state[%d])"
    IPC_TR_UPDATE_SESSION_STATE_READ_FAIL "[IPCORE] ipc_update_session_state(): Session_context(0x%X), session state read error !"
    IPC_TR_UPDATE_SESSION_STATE_CHK_FAIL "[IPCORE] ipc_update_session_state(): Session_context(0x%X), session check error !"
    IPC_TR_UPDATE_SESSION_STATE_END "[IPCORE] ipc_update_session_state(): Update session_context(0x%X) to state(%d) end with retval(%d)"
    IPC_TR_UL_INVALID_PARAM "[IPCORE] invalid parameters for uplink handle(0x%X), ior (0x%X)!"
    IPC_TR_UL_DROP_FOR_SESSION_DEACT "[IPCORE] netif_id(%d) drops ior(0x%X) ip_type(%d) uplink packets for session deactivated!"
    IPC_TR_UL_DROP_FOR_INVALID_NETIF "[IPCORE] netif(0x%X) drops uplink packets [ior(0x%X)] for invalid netif!"
    IPC_TR_UL_DROP_FOR_INVALID_IOR "[IPCORE] netif_id(%d) drops uplink packets for invalid ior(0x%X) first_gpd(0x%X) last_gpd(0x%X)!"
    IPC_TR_DL_DROP_FOR_NETIF_INFO_LOCK_FAIL "[IPCORE] pdn_id(%d) ip_id(%d) drops type(%d) [p_head(0x%X), p_tail(0x%X)] downlink packets : netif detach found during getting netif information!"
    IPC_TR_DL_DROP_FOR_NETIF_DETACH "[IPCORE] pdn_id(%d) ip_id(%d) drops type(%d) [p_head(0x%X), p_tail(0x%X)] downlink packets for netif detached!"
    IPC_TR_DL_DROP_FOR_INVALID_SESSION "[IPCORE] pdn_id(%d) drops downlink packets [p_head(0x%X), p_tail(0x%X)] for invalid session!"
    IPC_TR_NOTIFY_LINK_CHANGE_BEGIN "[IPCORE] ipc_notify_link_change(): Link change notification start: netif_id(%d) ip_type(%d) link_update(%d) is_up(%d)"
    IPC_TR_NOTIFY_LINK_CHANGE_FOR_NETIF_BEGIN "[IPCORE] ipc_notify_link_change(): Link change for found netif(0x%x) for netif_id(%d) start"
    IPC_TR_NOTIFY_LINK_CHANGE_FOR_NETIF_END "[IPCORE] ipc_notify_link_change(): Link change for found netif(0x%x) for netif_id(%d) done"
    IPC_TR_NOTIFY_LINK_CHANGE_UNKNOWN_NETIF "[IPCORE] ipc_notify_link_change(): Unknown netif_id(%d)"
    IPC_TR_NOTIFY_LINK_CHANGE_END "[IPCORE] ipc_notify_link_change(): Link change notification done: netif_id(%d) ip_type(%d) link_update(%d) is_up(%d)"
    IPC_TR_REG_UL_FILTER_CBK_BEGIN "[IPCORE] ipc_register_ul_filter_cbk(): rules(0x%X) callback_func(0x%X) callback_context(0x%X)"
    IPC_TR_REG_DL_FILTER_CBK_BEGIN "[IPCORE] ipc_register_dl_filter_cbk(): rules(0x%X) callback_func(0x%X) callback_context(0x%X)"
    IPC_TR_REG_UL_FILTER_MSG_BEGIN "[IPCORE] ipc_register_ul_filter_msg(): rules(0x%X) callback_module(0x%X) callback_context(0x%X)"
    IPC_TR_REG_DL_FILTER_MSG_BEGIN "[IPCORE] ipc_register_dl_filter_msg(): rules(0x%X) callback_module(0x%X) callback_context(0x%X)"
    IPC_TR_REG_UL_FILTER_WITH_INFO_CBK_BEGIN "[IPCORE] ipc_register_ul_filter_with_info_cbk(): rules(0x%X) callback_func(0x%X) callback_context(0x%X)"
    IPC_TR_REG_DL_FILTER_WITH_INFO_CBK_BEGIN "[IPCORE] ipc_register_dl_filter_with_info_cbk(): rules(0x%X) callback_func(0x%X) callback_context(0x%X)"
    IPC_TR_REG_UL_FILTER_WITH_INFO_MSG_BEGIN "[IPCORE] ipc_register_ul_filter_with_info_msg(): rules(0x%X) callback_module(0x%X) callback_context(0x%X)"
    IPC_TR_REG_DL_FILTER_WITH_INFO_MSG_BEGIN "[IPCORE] ipc_register_dl_filter_with_info_msg(): rules(0x%X) callback_module(0x%X) callback_context(0x%X)"
    IPC_TR_DEREG_UL_FILTER_BEGIN "[IPCORE] ipc_deregister_ul_filter(): filter_id(%d)"
    IPC_TR_DEREG_DL_FILTER_BEGIN "[IPCORE] ipc_deregister_dl_filter(): filter_id(%d)"
    IPC_TR_INVALID_RULES_ZERO_VALID_FIELD "[IPCORE] ipc_validate_rules(): valid_fields cannot be 0!"
    IPC_TR_INVALID_RULES_FOR_UL "[IPCORE] ipc_validate_rules(): uplink(%d), valid_fields(0x%X) and ip_type(%d) are invalid for uplink filter!"
    IPC_TR_INVALID_RULES_FOR_DL "[IPCORE] ipc_validate_rules(): uplink(%d), valid_fields(0x%X) and ip_type(%d) are invalid for downlink filter!"
    IPC_TR_INVALID_RULES_FOR_IPV4 "[IPCORE] ipc_validate_rules(): uplink(%d), valid_fields(0x%X) and ip_type(%d) are invalid for IPv4 or MIXED type!"
    IPC_TR_INVALID_RULES_FOR_IPV6 "[IPCORE] ipc_validate_rules(): uplink(%d), valid_fields(0x%X) and ip_type(%d) are invalid for IPv6 or MIXED type!"
    IPC_TR_INVALID_RULES_FOR_UNSUPPORTED_PROTOCOL "[IPCORE] ipc_validate_rules(): unsupported protocol(%d)!"
    IPC_TR_NEW_FILTER_INVALID_PARAMS "[IPCORE] ipc_new_filter(): failed with invalid parameters: rules(0x%X), callback_func(0x%X), module_id(0x%X)"
    IPC_TR_NEW_FILTER_UNAVAILABLE "[IPCORE] ipc_new_filter(): failed with all filters are busy now!"
    IPC_TR_REGISTER_FILTER_VALIDATE_FAIL "[IPCORE] ipc_register_filter(): filter rule validate fail: uplink?(%d)"
    IPC_TR_REGISTER_FILTER_OK "[IPCORE] ipc_register_filter(): created a new filter successfully: uplink?(%d), filter_id(%d), features(0x%X), ip_type(%d) valid_fields(0x%X), with_ipv4(%d), with_ipv6(%d)"
    IPC_TR_REGISTER_FILTER_NG "[IPCORE] ipc_register_filter(): failed to create a new filter!"
    IPC_TR_REGISTER_FILTER_ADD_TO_LIST "[IPCORE] ipc_register_filter(): add filter_id(%d) to IPv%d filter list. uplink?(%d)"
    IPC_TR_DEL_FILTER_INVALID_OBJECT "[IPCORE] ipc_del_filter(): filter (0x%x) an invalid object!"
    IPC_TR_DEREGISTER_FILTER_WITH_INVALID_ID "[IPCORE] ipc_deregister_filter(): this filter invalid filter_id(%d)!"
    IPC_TR_DEREGISTER_FILTER_NOT_FOUND "[IPCORE] ipc_deregister_filter(): filter_id(%d) is not found!"
    IPC_TR_DEREGISTER_FILTER_INFO "[IPCORE] ipc_deregister_filter(): deleting a filter: filter_id(%d), features(0x%X), valid_fields(0x%X), with_ipv4(%d), with_ipv6(%d)"
    IPC_TR_REMOVE_DL_FILTER_FROM_LIST "[IPCORE] ipc_deregister_filter(): remove filter_id(%d) from IPv%d filter list"
    IPC_TR_DHCP4C_EN_REG_DL_FILTER_OK "[IPCORE] ipc_enable_dhcp4c(): session context(%d) type(%d) registered DL filter_id(%d)"
    IPC_TR_DHCP4C_EN_REG_DL_FILTER_NG "[IPCORE] ipc_enable_dhcp4c(): session context(%d) type(%d) failed to register DL filter(%d)"
    IPC_TR_DHCP4C_EN_FAILED_WITH_INVALID_PARAMETER "[IPCORE] ipc_enable_dhcp4c(): invalid session_ptr!"
    IPC_TR_DHCP4C_DIS_INFO "[IPCORE] ipc_disable_dhcp4c(): session context(%d) type(%d) dhcp4c: running(%d)/dhcp_id(%d)/filter_id(%d)"
    IPC_TR_DHCP4C_DIS_DEREG_DL_FILTER_OK "[IPCORE] ipc_disable_dhcp4c(): session context(%d) type(%d) deregistered DL filter_id(%d)"
    IPC_TR_DHCP4C_DIS_FAILED_WITH_INVALID_PARAMETER "[IPCORE] ipc_disable_dhcp4c(): invalid session_ptr!"
    IPC_TR_DHCP4C_ACT_RSP_FIND_NO_SESSION "[IPCORE] ipc_on_dhcp4c_activate_rsp(): failed to find session for ip_id(%d)!"
    IPC_TR_DHCP4C_ACT_RSP_OK "[IPCORE] ipc_on_dhcp4c_activate_rsp(): session context(%d) type(%d) gets dhcp4c_id(%d)"
    IPC_TR_DHCP4C_ACT_RSP_INVALID_SESSION "[IPCORE] ipc_on_dhcp4c_activate_rsp(): the session for ip_id(%d) became invalid!"
    IPC_TR_DHCP4C_ACT_RSP_NG "[IPCORE] ipc_on_dhcp4c_activate_rsp(): session context(%d) type(%d) failed to activate DHCPv4!"
    IPC_TR_DHCP4C_IP_UP_IND_START "[IPCORE] ipc_on_dhcp4c_ip_up_ind(): Start to handle DHCPv4 IP up indication : dhcp4c_ip_up_ind_ptr(0x%x)"
    IPC_TR_DHCP4C_IP_UP_IND_FIND_SESSION_RESULT "[IPCORE] ipc_on_dhcp4c_ip_up_ind(): Result of finding session to for ip up indication : session(0x%x), ip_id(%d)"
    IPC_TR_DHCP4C_IP_UP_IND_SESSION_STATE "[IPCORE] ipc_on_dhcp4c_ip_up_ind(): Current session state : session(0x%x), session_state(%d)"
    IPC_TR_DHCP4C_IP_UP_IND_END "[IPCORE] ipc_on_dhcp4c_ip_up_ind(): Handle DHCPv4 IP up indication is done : dhcp4c_ip_up_ind_ptr(0x%x)"
    IPC_TR_DHCP4C_IP_UP_IND_SESSION_STATE_INCORRECT "[IPCORE] ipc_on_dhcp4c_ip_up_ind(): session state is incorrect for ip_id(%d) : session(0x%x), state(%d)!"
    IPC_TR_DHCP4C_IP_UP_IND_FIND_NO_SESSION "[IPCORE] ipc_on_dhcp4c_ip_up_ind(): failed to find session for ip_id(%d)!"
    IPC_TR_DHCP4C_IP_DOWN_IND_START "[IPCORE] ipc_on_dhcp4c_ip_down_ind(): Start to handle DHCPv4 IP down indication : dhcp4c_ip_down_ind_ptr(0x%x)"
    IPC_TR_DHCP4C_IP_DOWN_IND_FIND_SESSION_RESULT "[IPCORE] ipc_on_dhcp4c_ip_down_ind(): Result of finding session to for ip down indication : session(0x%x), ip_id(%d)"
    IPC_TR_DHCP4C_IP_DOWN_IND_SESSION_STATE "[IPCORE] ipc_on_dhcp4c_ip_down_ind(): Current session state : session(0x%x), session_state(%d)"
    IPC_TR_DHCP4C_IP_DOWN_IND_END "[IPCORE] ipc_on_dhcp4c_ip_down_ind(): Handle DHCPv4 IP down indication is done : dhcp4c_ip_down_ind_ptr(0x%x)"
    IPC_TR_DHCP4C_IP_DOWN_IND_SESSION_STATE_INCORRECT "[IPCORE] ipc_on_dhcp4c_ip_down_ind(): session state is incorrect for ip_id(%d) : session(0x%x), state(%d)!"
    IPC_TR_DHCP4C_IP_DOWN_IND_FIND_NO_SESSION "[IPCORE] ipc_on_dhcp4c_ip_down_ind(): failed to find session for ip_id(%d)!"
    IPC_TR_DHCP4C_IP_PACKET_IND_UPLINK_NG "[IPCORE] ipc_on_dhcp4c_packet_ind(): failed to send the uplink GPD(0x%x) to session with ip_id(%d)!"
    IPC_TR_DHCP4C_IP_PACKET_IND_FIND_NO_SESSION "[IPCORE] ipc_on_dhcp4c_packet_ind(): failed to find session for ip_id(%d)!"
    IPC_TR_DHCP4C_ON_DL_PACKET_FIND_NO_SESSION "[IPCORE] ipc_on_dl_dhcp4_packet(): failed to find the session(0x%x)!"
    IPC_TR_DHCP4C_ON_DL_PACKET_INVALID_GPD_LIST "[IPCORE] ipc_on_dl_dhcp4_packet(): discard the downlink IP datagram since head_gpd(0x%x) != tail_gpd(0x%x), length(%d)"
    IPC_TR_DO_FILTER_INVALID_GPD "[IPCORE] ipc_do_filter(): got an invalid GPD(0x%X)!"
    IPC_TR_PACK_PKT_UDP_SIZE_NG "[IPCORE] ipc_pack_pkt(): uplink(%d) : ip_header(%u)+udp_header(%u)+data_len(%u) exceeds %u-byte!"
    IPC_TR_PACK_PKT_ALLOC_GPD_NG "[IPCORE] ipc_pack_pkt(): failed to allocate NET_UL_GPD for %u-byte of packet to send!"
    IPC_TR_PACK_PKT_SKIP_INVALID_GPD "[IPCORE] ipc_pack_pkt(): skip header pack for invalid GPD : gpd(0x%x), gpd_len(%d)"
    IPC_TR_UL_PKT_PKT_PACK_FAILED "[IPCORE] ipc_send_ul_pkt(): failed to pack uplink packet : isGPD(%d), hdr(0x%X)!"
    IPC_TR_DL_PKT_PKT_PACK_FAILED "[IPCORE] ipc_send_dl_pkt(): failed to pack downlink packet : isGPD(%d), hdr(0x%X)!"
    IPC_TR_DL_PKT_NETIF_NOT_FOUND "[IPCORE] ipc_send_dl_pkt(): destination network interface for ID(%d) is not found!"
    IPC_TR_REG_NTFY_BEGIN "[IPCORE] ipc_register_ntfy(): register notification callback : callback(0x%X), callback context(0x%X)"
    IPC_TR_REG_NTFY_END "[IPCORE] ipc_register_ntfy(): gotten ntfy ID(%d)"
    IPC_TR_DEREG_NTFY_BEGIN "[IPCORE] ipc_deregister_ntfy(): uinstall notification callback : ntfy ID(%d)"
    IPC_TR_DEREG_NTFY_END "[IPCORE] ipc_deregister_ntfy(): uinstall notification callback complete : ntfy ID(%d)"
    IPC_TR_ALLOCATE_NTFY_INVALID_PARAMS "[IPCORE] ipc_allocate_ntfy(): failed with invalid parameters: callback(0x%X), callback context(0x%X)"
    IPC_TR_ALLOCATE_NTFY_UNAVAILABLE "[IPCORE] ipc_allocate_ntfy(): failed with all notification entries are busy now! : callback(0x%X), callback context(0x%X)"
    IPC_TR_FREE_NTFY_INVALID_OBJECT "[IPCORE] ipc_free_ntfy(): it's an invalid object!"
    IPC_TR_FIND_NTFY_BY_ID_INVALID_ID "[IPCORE] ipc_find_ntfy_by_id(): ntfy ID(%d) is invalid ( %d <= [ntfy ID] < %d )!"
    IPC_TR_ADD_NTFY_TO_LIST_INVALID_LIST "[IPCORE] ipc_add_ntfy_to_list(): invalid list(0x%x)!"
    IPC_TR_REMOVE_NTFY_FROM_LIST_INVALID_LIST "[IPCORE] ipc_remove_ntfy_from_list(): invalid list(0x%x)!"
    IPC_TR_NTFY_INIT_POOL_INFO "[IPCORE] ipc_ntfy_init(): IP CORE ntfy entry pool : addr(0x%X), count(%d)"
    IPC_TR_NTFY_INIT_LIST_INFO "[IPCORE] ipc_ntfy_init(): IP CORE ntfy list[%d] : addr(0x%X)"
    IPC_TR_NEW_NTFY_ADD_TO_LIST "[IPCORE] ipc_new_ntfy(): Add new ntfy with ID(%d) successfully for callback(0x%X) context(0x%X)"
    IPC_TR_NEW_NTFY_NG "[IPCORE] ipc_new_ntfy(): Add new ntfy for callback(0x%X) context(0x%X) is failed"
    IPC_TR_DEL_NTFY_WITH_INVALID_ID "[IPCORE] ipc_del_ntfy(): ntfy ID(%d) is invalid"
    IPC_TR_DEL_NTFY_INFO "[IPCORE] ipc_del_ntfy(): entry with ntfy ID(%d) to delete : callback(0x%X), context(0x%X)"
    IPC_TR_DEL_NTFY_REMOVE_FROM_LIST "[IPCORE] ipc_del_ntfy(): Remove entry with ntfy ID(%d) from list"
    IPC_TR_DEL_NTFY_FREE_NTFY "[IPCORE] ipc_del_ntfy(): Free entry with ntfy ID(%d)"
    IPC_TR_DEL_NTFY_NOT_FOUND "[IPCORE] ipc_del_ntfy(): Entry with ntfy ID(%d) is not found/already invalid"
    IPC_TR_DO_NTFY_INFO "[IPCORE] ipc_do_ntfy(): Execute callback(0x%X) context(0x%X) for ntfy ID(%d)"
    IPC_TR_DO_NTFY_NTFY_INFO "[IPCORE] ipc_do_ntfy(): ntfy type(%d), netif_id(0x%X), ip_id(0x%X)"
    IPC_TR_IPCORE_LINK_UP_IND_START "[IPCORE] ipc_on_ipcore_link_up_ind(): Start of default LINK_UP_IND handling for netif_id(0x%X), ip_id(0x%X), ip_type(0x%X)"
    IPC_TR_IPCORE_LINK_UP_IND_SEND_LINK_UP_RSP "[IPCORE] ipc_on_ipcore_link_up_ind(): Send LINK_UP_RSP ILM for netif_id(0x%X), ip_id(0x%X), ip_type(0x%X)"
    IPC_TR_IPCORE_LINK_UP_IND_END "[IPCORE] ipc_on_ipcore_link_up_ind(): End of default LINK_UP_IND handling for netif_id(0x%X), ip_id(0x%X), ip_type(0x%X)"
    IPC_TR_IPCORE_IP_UP_IND_START "[IPCORE] ipc_on_ipcore_ip_up_ind(): Start of default IP_UP_IND handling for netif_id(0x%X), ip_id(0x%X), ip_type(0x%X)"
    IPC_TR_IPCORE_IP_UP_IND_SEND_IP_UP_RSP "[IPCORE] ipc_on_ipcore_ip_up_ind(): Send IP_UP_RSP ILM for netif_id(0x%X), ip_id(0x%X), ip_type(0x%X)"
    IPC_TR_IPCORE_IP_UP_IND_END "[IPCORE] ipc_on_ipcore_ip_up_ind(): End of default IP_UP_IND handling for netif_id(0x%X), ip_id(0x%X), ip_type(0x%X)"
    IPC_TR_IPCORE_UP_RSP_START "[IPCORE] ipc_on_ipcore_up_rsp(): Start of LINK/IP_UP_RSP handling for netif_id(0x%X), ip_id(0x%X), ip_type(0x%X)"
    IPC_TR_IPCORE_UP_RSP_UPDATE_SESSION_STATE_TO_LINKUP "[IPCORE] ipc_on_ipcore_up_rsp(): Update session(0x%X) state to LINKUP"
    IPC_TR_IPCORE_UP_RSP_SESSION_NOT_FOUND "[IPCORE] ipc_on_ipcore_up_rsp(): Session not found for netif(0x%X), netif_id(0x%X), ip_id(0x%X), ip_type(0x%X)"
    IPC_TR_IPCORE_UP_RSP_NETIF_NOT_FOUND "[IPCORE] ipc_on_ipcore_up_rsp(): network interface not found for netif_id(0x%X), ip_id(0x%X), ip_type(0x%X)"
    IPC_TR_IPCORE_UP_RSP_END "[IPCORE] ipc_on_ipcore_up_rsp(): End of LINK/IP_UP_RSP handling for netif_id(0x%X), ip_id(0x%X), ip_type(0x%X)"
    IPC_TR_REG_LINK_UP_IND_HDLR_BEGIN "[IPCORE] ipc_register_link_up_ind_handler(): Register LINK_UP_IND ILM handler : Module (%d)"
    IPC_TR_REG_LINK_UP_IND_HDLR_END "[IPCORE] ipc_register_link_up_ind_handler(): Register LINK_UP_IND ILM handler complete : Module (%d)"
    IPC_TR_DEREG_LINK_UP_IND_HDLR_BEGIN "[IPCORE] ipc_deregister_link_up_ind_handler(): Uninstall registered LINK_UP_IND ILM handler"
    IPC_TR_DEREG_LINK_UP_IND_HDLR_END "[IPCORE] ipc_deregister_link_up_ind_handler(): Uninstall registered LINK_UP_IND ILM handler complete"
    IPC_TR_REG_IP_UP_IND_HDLR_BEGIN "[IPCORE] ipc_register_ip_up_handler(): Register IP_UP_IND ILM handler : Module (%d)"
    IPC_TR_SET_UL_THROTTLE_BEGIN "[IPCORE] ipc_set_ul_throttle(): Set UL throttle, old_state(%d), new_conf_enabled(%d), new_conf_activate(%d), new_conf_suspend(%d)"
    IPC_TR_SET_UL_THROTTLE_END "[IPCORE] ipc_set_ul_throttle(): Set UL throttle, new_state(%d), new_conf_enabled(%d), new_conf_activate(%d), new_conf_suspend(%d)"
    IPC_TR_UL_THROTTLE_SYSMSGSRV_CBK "[IPCORE] ipc_ul_throttle_sysmsgsvc_cbk(): CCCI_SYSMSG Set UL throttle, new_state(%d), new_conf_enabled(%d), new_conf_activate(%d), new_conf_suspend(%d)"
    IPC_TR_REG_IP_UP_IND_HDLR_END "[IPCORE] ipc_register_ip_up_handler(): Register IP_UP_IND ILM handler complete : Module (%d)"
    IPC_TR_DEREG_IP_UP_IND_HDLR_BEGIN "[IPCORE] ipc_deregister_ip_up_handler(): Uninstall registered IP_UP_IND ILM handler"
    IPC_TR_DEREG_IP_UP_IND_HDLR_END "[IPCORE] ipc_deregister_ip_up_handler(): Uninstall registered IP_UP_IND ILM handler complete"
    IPC_TR_UPDATE_LINK_UP_IND_HDLR_START "[IPCORE] ipc_update_link_up_ind_handler(): Update LINK_UP_IND ILM handler : Module (%d)"
    IPC_TR_UPDATE_IP_UP_IND_HDLR_START "[IPCORE] ipc_update_ip_up_ind_handler(): Update IP_UP_IND ILM handler : Module (%d)"
    IPC_TR_QUERY_INFO_START "[IPCORE] ipc_on_query_info(): Start to query information: src_mod_id(%d), local_para_ptr(0x%x)"
    IPC_TR_QUERY_INFO_CNF "[IPCORE] ipc_on_query_info(): Send confirmation back to src_mod_id(%d)"
    IPC_TR_QUERY_INFO_NO_MOD_ID_FOR_CFN "[IPCORE] ipc_on_query_info(): No source module ID to send confirmation back ! src_mod_id(%d) is MOD_NIL(%d)"
    IPC_TR_QUERY_INFO_END "[IPCORE] ipc_on_query_info(): Query information handling is done"
    IPC_TR_QUERY_NETIF_LIST_START "[IPCORE] ipc_query_netif_list(): Query netif list : netif_list_p(0x%x)"
    IPC_TR_QUERY_NETIF_LIST_INFO "[IPCORE] ipc_query_netif_list(): Attached netif: idx(%d) netif_id(%d)"
    IPC_TR_QUERY_NETIF_LIST_SUCCESS "[IPCORE] ipc_query_netif_list(): Netif list query success. Total attached netif count(%d)"
    IPC_TR_QUERY_NETIF_LIST_FAILED "[IPCORE] ipc_query_netif_list(): No structure to store netif list status, failed !"
    IPC_TR_CLARIFY_ZERO_LENGTH_PKT "[IPCORE] ipc_clarify_gpd(): Found zero length packet during clarification : curr_gpd(0x%x), length(%d)"
    IPC_TR_CLARIFY_ZERO_LENGTH_BD "[IPCORE] ipc_clarify_gpd(): Found packet with ALL ZERO-length BD list during clarification : curr_gpd(0x%x), gpd length(%d)"
    IPC_TR_CLARIFY_NONE_IP_PKT "[IPCORE] ipc_clarify_gpd(): Found non-IPv4/IPv6 packet, drop : curr_gpd(0x%x), gpd length(%d)"
    IPC_TR_CLARIFY_ZERO_LENGTH_PKT_DROP "[IPCORE] ipc_clarify_gpd(): Drop packet with invalid payload : curr_gpd(0x%x), gpd length(%d)"
    IPC_TR_GPD_COPY_BEGIN "[IPCORE] ipc_gpd_copy(): Start to copy GPD: dst_buffer(0x%x), dst_max_len(%d), dst_len_copied(0x%x), src_head_gpd(0x%x), src_tail_gpd(0x%x)"
    IPC_TR_GPD_COPY_END "[IPCORE] ipc_gpd_copy(): GPD copy result: retval(%d), dst_max_len(%d), *dst_len_copied(%d)"
    IPC_TR_GPD_UNITE_NULL_BD_LIST "[IPCORE] ipc_gpd_unite(): Null BD list (no BD have data) is found: uplink(%d), p_gpd_in(0x%x)"
    IPC_TR_GPD_UNITE_ZERO_LENGTH_GPD "[IPCORE] ipc_gpd_unite(): zero length GPD is found: uplink(%d), p_gpd_in(0x%x)"
    IPC_TR_GPD_UNITE_ALLOC_GPD_NG "[IPCORE] ipc_gpd_unite(): Allocate new GPD for uniting is FAILED: uplink(%d), p_gpd_in(0x%x), total_len(%d)"
    IPC_TR_GPD_UNITE_GPD_COPY_NG "[IPCORE] ipc_gpd_unite(): GPD copy is FAILED: uplink(%d), p_buff(0x%x), total_len(%d), copied_len(%d), p_gpd_in(0x%x)"
    IPC_TR_GPD_UNITE_FAILED "[IPCORE] ipc_gpd_unite(): GPD uniting is FAILED: uplink(%d), p_gpd_in(0x%x)"
    IPC_TR_SHIFT_OFFSET_FAILED "[IPCORE] ipc_shift_gpd_content_ptr(): GPD is too short to get offset! gpd(0x%x) base_bd(0x%x) curr_bd(0x%x) curr_bd_len(%d) remaining_offset(%d) base_addr_p(0x%x) offset(%d)"
    IPC_TR_CONTENT_LENGTH_TOO_SHORT "[IPCORE] ipc_get_continuous_content(): GPD is too short to shift offset! gpd(0x%x) base_bd(0x%x) curr_bd(0x%x) base_addr_p(0x%x) offset(%d) length(%d)"
    IPC_TR_CONTENT_LENGTH_TOO_SHORT_TO_COPY "[IPCORE] ipc_get_continuous_content(): GPD is too short to copy specific continuous content! gpd(0x%x) base_bd(0x%x) curr_bd(0x%x) curr_bd_len(%d) remaining_length(%d) base_addr_p(0x%x) offset(%d) length(%d)"
    IPC_TR_GET_INFO_V4_IPV4_HDR_FAILED "[IPCORE] ipc_get_packet_info(): V4 get IPv4 header continuous content failed: ip_packet(0x%x), offset(%d), gpd(0x%x), curr_bd(0x%x), length(%d)"
    IPC_TR_GET_INFO_V4_UDP_HDR_FAILED "[IPCORE] ipc_get_packet_info(): V4 get UDP header continuous content failed: ip_packet(0x%x), offset(%d), gpd(0x%x), curr_bd(0x%x), length(%d)"
    IPC_TR_GET_INFO_V4_TCP_HDR_FAILED "[IPCORE] ipc_get_packet_info(): V4 get TCP header continuous content failed: ip_packet(0x%x), offset(%d), gpd(0x%x), curr_bd(0x%x), length(%d)"
    IPC_TR_GET_INFO_V4_ICMP_HDR_FAILED "[IPCORE] ipc_get_packet_info(): V4 get ICMP header continuous content failed: ip_packet(0x%x), offset(%d), gpd(0x%x), curr_bd(0x%x), length(%d)"
    IPC_TR_GET_INFO_V6_IPV6_HDR_FAILED "[IPCORE] ipc_get_packet_info(): V6 get IPv6 header continuous content failed: ip_packet(0x%x), offset(%d), gpd(0x%x), curr_bd(0x%x), length(%d)"
    IPC_TR_GET_INFO_V6_UDP_HDR_FAILED "[IPCORE] ipc_get_packet_info(): V6 get UDP header continuous content failed: ip_packet(0x%x), offset(%d), gpd(0x%x), curr_bd(0x%x), length(%d)"
    IPC_TR_GET_INFO_V6_TCP_HDR_FAILED "[IPCORE] ipc_get_packet_info(): V6 get TCP header continuous content failed: ip_packet(0x%x), offset(%d), gpd(0x%x), curr_bd(0x%x), length(%d)"
    IPC_TR_GET_INFO_V6_ICMP_HDR_FAILED "[IPCORE] ipc_get_packet_info(): V6 get ICMP header continuous content failed: ip_packet(0x%x), offset(%d), gpd(0x%x), curr_bd(0x%x), length(%d)"
    IPC_TR_GET_INFO_FIND_V6_EXT_HDR_FAILED "[IPCORE] ipc_get_packet_info(): V6 extension header continuous content get failed: gpd(0x%x) base_bd(0x%x) next_header(0x%x) offset(%d) curr_bd(0x%x)"
    IPC_TR_GET_INFO_FIND_V6_EXT_HDR_SHIFT_FAILED "[IPCORE] ipc_get_packet_info(): V6 header next header shift failed: gpd(0x%x) base_bd(0x%x) ip_packet(0x%x) offset(%d) next_header(0x%x) curr_bd(0x%x)"




    PFM_TR_GET_FILTER_SET_INVALID_PARAMS "[PFM] pfm_get_filter_set_by_id(): Invalid parameters: filter_set_list(0x%x), list_size(%d), filter_set_id(%d)"
    PFM_TR_GET_FILTER_SET_NEW_FILTER_SET "[PFM] pfm_get_filter_set_by_id(): New filter set: filter_set_list(0x%x), filter_set_id(%d), filter_set(0x%x)"
    PFM_TR_DEL_FILTER_SET_BEGIN "[PFM] pfm_delete_filter_set(): Delete filter set: filter_set(0x%x)"
    PFM_TR_DISPATCH_REGISTER_CMD_INVALID_PARAMS "[PFM] pfm_dispatch_register_cmd(): Invalid parameters: local_para_ptr(0x%x), filter_set_id(%d), filter_cnt(%d)!"
    PFM_TR_DISPATCH_REGISTER_CMD_BEGIN "[PFM] pfm_dispatch_register_cmd(): Dispatch register cmd: filter_set_id(0x%x), filter_cnt(%d)"
    PFM_TR_DEREG_FILTER_BEGIN "[PFM] pfm_deregister_filter(): Deregister the filter: uplink(%d), filter_set(0x%x), filter_id(%d), ipc_filter_id(%d)"
    PFM_TR_DEREG_FILTER_WITH_INVALID_PARAMS "[PFM] pfm_deregister_filter(): Invalid parameters: uplink(%d), filter_set(0x%x), filter_id(%d)!"
    PFM_TR_DEREG_FILTERS_INVALID_PARAMS "[PFM] pfm_deregister_filters(): Invalid parameters: local_para_ptr(0x%x), filter_set_id(%d), filter_cnt(%d)!"
    PFM_TR_DEREG_FILTERS_INFO "[PFM] pfm_deregister_filters(): Deregister some filters: uplink(%d), filter_set_id(%d), filter_cnt(%d)"
    PFM_TR_DEREG_FILTERS_FILTER_SET_NOT_FOUND "[PFM] pfm_deregister_filters(): uplink(%d), filter_set_id(%d) is not found!"
    PFM_TR_REG_FILTER_INVALID_PARAMS "[PFM] pfm_register_filter(): Invalid parameters: filter_set_id(%d), filter_id(%d), rules(0x%x)!"
    PFM_TR_REG_FILTER_FAILED "[PFM] pfm_register_filter(): Register filter is failed!"
    PFM_TR_REG_FILTER_FILTER_SET_NOT_FOUND "[PFM] pfm_register_filter(): uplink(%d), filter_set_id(%d) is not found!"
    PFM_TR_REG_FILTER_CBK_BEGIN "[PFM] pfm_register_filter_cbk(): filter_set_id(%d), filter_id(%d), uplink(%d), rules(0x%x) callback_func(0x%x) callback_context(0x%x)"
    PFM_TR_REG_FILTER_MSG_BEGIN "[PFM] pfm_register_filter_msg(): filter_set_id(%d), filter_id(%d), uplink(%d), rules(0x%x) callback_module(0x%x) callback_context(0x%x)"
    PFM_TR_REG_FILTER_WITH_INFO_CBK_BEGIN "[PFM] pfm_register_filter_with_info_cbk(): filter_set_id(%d), filter_id(%d), uplink(%d), rules(0x%x) callback_func(0x%x) callback_context(0x%x)"
    PFM_TR_REG_FILTER_WITH_INFO_MSG_BEGIN "[PFM] pfm_register_filter_with_info_msg(): filter_set_id(%d), filter_id(%d), uplink(%d), rules(0x%x) callback_module(0x%x) callback_context(0x%x)"


    PFM_TR_GARBAGE_FILTER_ZERO_LENGTH_GPD "[PFM] pfm_garbage_filter_deregister_callback(): Get zero length GPD(0x%x)."
    PFM_TR_GARBAGE_FILTER_NON_TCP_PACKET "[PFM] pfm_garbage_filter_deregister_callback(): Should get TCP packets only! GPD(0x%x), proto(%d)"
    PFM_TR_GARBAGE_FILTER_NON_IPV4_PACKET "[PFM] pfm_garbage_filter_deregister_callback(): Should get IPv4 packets only! GPD(0x%x)"
    PFM_TR_GARBAGE_FILTER_REPLY_RST_FAIL "[PFM] pfm_garbage_filter_deregister_callback(): Replay TCP RST is failed! Can't alloc HIF_UL_TYPE_S GPD! dst_address(0x%x), src_port(%d)"
    PFM_TR_GARBAGE_FILTER_REPLY_RST "[PFM] pfm_garbage_filter_deregister_callback(): Replay TCP RST dst_address(0x%x), src_port(%d)"
    PFM_TR_GARBAGE_FILTER_REG_PARSER "[PFM] pfm_garbage_filter_register_parser(): Register filter rules: filter_id(%d), ip_type(%d), protocol(%d), dst_port(%d)"
    PFM_TR_GARBAGE_FILTER_WRONG_MAGIC_CODE "[PFM] pfm_garbage_filter_register_parser(): Wrong magic code is detected when registering filter(%d)!"
    PFM_TR_GARBAGE_FILTER_INVALID_PARAMS "[PFM] pfm_garbage_filter_register_parser(): Invalid parameters is detected: ip_type(%d), protocol(%d)!"
    PFM_TR_GARBAGE_FILTER_INVALID_FILTER_ID "[PFM] pfm_garbage_filter_register_parser(): Invalid Filter ID!"

END_MODULE_MSG
# 42 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./service/hif/ccci/include/ccci_trace.h" 1
# 121 "./service/hif/ccci/include/ccci_trace.h"
START_MODULE_MSG MOD_CCCI 20

    CCCI_TR_ULBUFF_RST_MD "[CCCI_ERR] ccci_ulbuff_cb <AP>[CCCI_FORCE_RESET_MODEM_CHANNEL] ..\r\n"
    CCCI_TR_ULIOR_RST_MD "[CCCI_ERR] ccci_ulior_cb <AP>[CCCI_FORCE_RESET_MODEM_CHANNEL] ..\r\n"
    CCCI_TR_DLIOR_RST_MD "[CCCI_ERR]ccci_dlior_agg_cb log_chann=%d >= CCCI_MAX_CHANNEL=%d ...\r\n"
    CCCI_TR_ULCB_FUNP_ERR "[CCCI_ERR] ccci_ulbuff_cb ccci_ctrl_pool[%d].funp == NULL\r\n"
    CCCI_TR_ULIORCB_FUNP_ERR "[CCCI_ERR] <Rx data to an inactive GPD mode channel> ccci_ulior_cb[%d] iorcb_funp == NULL\r\n"
    CCCI_TR_ULIORCB_IORFUNP_ERR "[CCCI_ERR] <Rx data to an inactive GPD mode channel> ccci_ulior_cb[%d] iorcb_funp == NULL\r\n"
    CCCI_TR_ULIORNETCB_IORFUNP_ERR "[CCCI_ERR] <Rx data to an inactive GPD mode channel> ccci_ulior_net_cb[%d] iorcb_funp == NULL\r\n"
    CCCI_TR_DLIOR_FUNP_ERR "[CCCI_ERR] ccci_dlior_agg_cb[%d] iorcb_funp == NULL -1\r\n"
    CCCI_TR_DLIOR_IORFUNP_ERR "[CCCI_ERR] ccci_dlior_agg_cb[%d] iorcb_funp == NULL -2\r\n"


    CCCI_TR_DEINIT_STATE_ERR "[CCCI_ERR] ccci_ctrl_pool[%d].state = %d should remain CCCI_IDLE(=0)\r\n"
    CCCI_TR_DEINIT_ATTCNT_ERR "[CCCI_ERR] ccci channel [%d] detach fail due to hwq_detach fail (%d#%d#%d)\r\n"
    CCCI_TR_ULCB_BUFF_ERR "[CCCI_ERR] ccci_ulbuff_cb pbuff == NULL \r\n"
    CCCI_TR_ULCB_CH_ERR "[CCCI_ERR] ccci_ulbuff_cb log_chann=%d >= CCCI_MAX_CHANNEL=%d ...\r\n"
    CCCI_TR_ULIORCB_IOR_ERR "[CCCI_ERR] ccci_ulior_cb io_request == NULL \r\n"
    CCCI_TR_ULIORCB_FGPD_ERR "[CCCI_ERR] ccci_ulior_cb io_request->first_gpd == NULL \r\n"
    CCCI_TR_ULIORCB_TGPD_ERR "[CCCI_ERR] ccci_ulior_cb io_request->last_gpd == NULL \r\n"
    CCCI_TR_ULIORCB_CH_ERR "[CCCI_ERR] ccci_ulior_cb logic_channel=%d >= CCCI_MAX_CHANNEL=%d ...\r\n"
    CCCI_TR_ULIORCB_Q_ERR "[CCCI_ERR] ccci_ulior_cb receives gpd with wrong hwqid queue_no=%d != ccci_ctrl_pool.hwq_id=%d ...\r\n"
    CCCI_TR_ULIORCB_CH_INAC "[CCCI_ERR] <Rx data to an inactive Legacy mode channel> ccci_ulior_cb[%d] cb_funp == NULL\r\n"
    CCCI_TR_ULIORCB_TYPE_ERR "[CCCI_ERR] ccci_ulior_cb ccci_ctrl_pool[%d].owner == %d\r\n"

    CCCI_TR_ULIORNET_IOR_ERR "[CCCI_ERR] ccci_ulior_net_cb io_request == NULL \r\n"
    CCCI_TR_ULIORNET_HGPD_ERR "[CCCI_ERR] ccci_ulior_net_cb io_request->first_gpd == NULL \r\n"
    CCCI_TR_ULIORNET_TGPD_ERR "[CCCI_ERR] ccci_ulior_net_cb io_request->last_gpd == NULL \r\n"

    CCCI_TR_DLIOR_IOR_ERR "[CCCI_ERR] ccci_dlior_agg_cb io_request == NULL \r\n"
    CCCI_TR_DLIOR_HGPD_ERR "[CCCI_ERR] ccci_dlior_agg_cb io_request->first_gpd == NULL \r\n"
    CCCI_TR_DLIOR_TGPD_ERR "[CCCI_ERR] ccci_dlior_agg_cb io_request->last_gpd == NULL \r\n"

    CCCI_TR_HSHK1_ERR "The initial message error MB = (%x, %x, %x, %x) .. \r\n"
    CCCI_TR_BOOTACK_ERR "The initial channel %d and value %d\n"
    CCCI_TR_SYSPERI_CB_ERR "[CCCI_ERR] ====>ccci_system_channel_periodic_callback ccci_write return %x \r\n"
    CCCI_TR_SET_POLA "[CCCI_ERR] =========>EINT_Set_Polarity \r\n"
    CCCI_TR_SET_EINT "[CCCI_ERR] ====>CCMSG_ID_MD_EINT_ON_OFF ccci_write return %x \r\n"

    CCCI_TR_HSHK1_WNG "[CCCI_ERR] ====>CCCI_SDIO_HANDSHAKE1 ccci_write return %x \n"
    CCCI_TR_HSHK2_DRV_VERERR "[CCCI_ERR] CCMSG_ID_DRV_VERSION_ERR %X \n"
    CCCI_TR_HSHK2_WNG "[CCCI_ERR] ====>CCCI_SDIO_HANDSHAKE2 ccci_write return %X \n"
    CCCI_TR_ILM_MSG_ERR "[CCCI_ERR] Received wrong msg id in ILM msg: %d \n"


    CCCI_TR_INITB_ERR "[CCCI_ERR] ccci_init[%d].ccci_uldl_iorcb_funp != NULL Buffer mode user should NOT request CCCI_TYPE_TX callback!! funp will be treated as NULL\r\n"
    CCCI_TR_INITB_ERR_CH_NO "[CCCI_ERR] ccci_init channel=%d MOD_ID=%d Channel number error \n"
    CCCI_TR_INITB_ERR_FUNP "[CCCI_ERR] ccci_init channel=%d MOD_ID=%d Function point is NULL \n"
    CCCI_TR_INITB_ERR_MODE "[CCCI_ERR] ccci_init channel=%d MOD_ID=%d Channel Mode error \n"
    CCCI_TR_INITB_ERR_TYPE "[CCCI_ERR] ccci_init channel=%d MOD_ID=%d Hardware Type(%d) error \n"
    CCCI_TR_INITB_ERR_INUSE "[CCCI_ERR] ccci_init channel=%d MOD_ID=%d Channel is inuse \n"


    CCCI_TR_WRB_CH "[CCCI_ERR] ccci_write ch(%d) MOD(%d) channel>=CCCI_MAX_CHANNEL ret CCCI_INALID_PARAM \n"
    CCCI_TR_WRB_BN "[CCCI_ERR] ccci_write ch(%d) MOD(%d) buff == NULL ret CCCI_INALID_PARAM \n"
    CCCI_TR_WRB_OWNDIS "[CCCI_ERR] ccci_write ch(%d) MOD(%d) ch.owner == CCCI_CH_DISABLE ret CCCI_INALID_PARAM \n"
    CCCI_TR_WRB_OWNGPD "[CCCI_ERR] ccci_write ch(%d) MOD(%d) onwer(%d) not buffer user\n"
    CCCI_TR_WRB_MBXLEN "[CCCI_ERR] ccci_write ch(%d) MOD(%d) mbx len (%d) error\n"
    CCCI_TR_WRITE_NO_TGPD_ERR "[CCCI_ERR] ccci_write ch(%d) ran out of TGPD \r\n"
    CCCI_TR_WRITE_LEN_ERR "[CCCI_ERR] ccci_write ch(%d) buffer len (%d) >  GPD allow_len (%d)\r\n"
    CCCI_TR_WRITE_IORCB_NULL_ERR "[CCCI_ERR] ccci_write ch(%d) ccci_ctrl_pool[channel].ioreq_funp == NULL\r\n"


    CCCI_TR_WR_CH "[CCCI_ERR] ccci_write_gpd ch(%d) MOD(%d) channel>=CCCI_MAX_CHANNEL ret CCCI_INALID_PARAM \n"
    CCCI_TR_WR_FGPDN "[CCCI_ERR] ccci_write_gpd ch(%d) MOD(%d) ior->first_gpd == NULL ret CCCI_INALID_PARAM \n"
    CCCI_TR_WR_LGPDN "[CCCI_ERR] ccci_write_gpd ch(%d) MOD(%d) ior->last_gpd == NULL ret CCCI_INALID_PARAM \n"
    CCCI_TR_WR_OWNDIS "[CCCI_ERR] ccci_write_gpd ch(%d) MOD(%d) ch.owner == CCCI_CH_DISABLE ret CCCI_INALID_PARAM \n"
    CCCI_TR_WR_OWNBUFF "[CCCI_ERR] ccci_write_gpd ch(%d) MOD(%d) ch.owner != CCCI_CH_USER_GPD ret CCCI_INALID_PARAM \n"
    CCCI_TR_WR_HIFREQ_NG "[CCCI_ERR] ccci_write_gpd ch(%d) MOD(%d) ioreq_funp ret(%d)\n"


    CCCI_TR_INIT_ERR_CH_NO "[CCCI_ERR] ccci_gpd_init channel=%d MOD_ID=%d Channel number error \n"
    CCCI_TR_INIT_ERR_FUNP "[CCCI_ERR] ccci_init channel=%d MOD_ID=%d ior_funp function point is NULL \n"
    CCCI_TR_INIT_ERR_USR "[CCCI_ERR] ccci_init channel=%d MOD_ID=%d usermode(%d) != CCCI_CH_USER_GPD \n"
    CCCI_TR_INIT_ERR_TYPE "[CCCI_ERR] ccci_init channel=%d MOD_ID=%d Hardware Type(%d) error \n"
    CCCI_TR_INIT_ERR_INUSE "[CCCI_ERR] ccci_init channel=%d MOD_ID=%d Channel is inuse \n"
    CCCI_TR_INIT_ERR_HIFA "[CCCI_ERR] ccci_init channel=%d MOD_ID=%d gpdhwq_attach fail(%d \n"


    CCCI_INIT_TRACE "[CCCI_TRACE] ccci_init channel=%d MOD_ID=%d \n"
    CCCI_TR_RECEIVE_ILM "[CCCI_TRACE] CCCI Receive ILM msg: %d \n"

    CCCI_TR_WRITE_NO_FLUSH "[CCCI_TRACE] ccci_write (CCCI_TYPE_TX_NO_FLUSH) \r\n"
    CCCI_TR_ULIOR_CB_DBG "[CCCI] ccci_ulior_cb local_queue_channel=%d, queue count= %d...\r\n"
    CCCI_TR_DLIOR_AGG_CB_DBG "[CCCI] ccci_dlior_cb local_queue_channel=%d, queue count= %d...\r\n"

    CCCI_TR_SDIOCS_SIOR "[CCCI_ERR] =========>dummy sdioc_submit_ior\r\n"
    CCCI_TR_SDIOCS_QATT "[CCCI_ERR] =========>dummy sdioc_q_attach\r\n"
    CCCI_TR_SDIOCS_QDEATT "[CCCI_ERR] =========>dummy sdioc_q_detach\r\n"
    CCCI_TR_SDIOCS_POLLING "[CCCI_ERR] =========>dummy sdioc_polling_submit_one_gpd\r\n"

    CCCI_TR_CCIFCS_SIOR "[CCCI_ERR] =========>dummy ccifc_submit_ior\r\n"
    CCCI_TR_CCIFCS_SBUFF "[CCCI_ERR] =========>dummy ccifc_submit_buff\r\n"
    CCCI_TR_CCIFCS_GPDATT "[CCCI_ERR] =========>dummy ccifc_q_gpd_attach\r\n"
    CCCI_TR_CCIFCS_BUFFATT "[CCCI_ERR] =========>dummy ccifc_q_buff_attach\r\n"
    CCCI_TR_CCIFCS_QDEATT "[CCCI_ERR] =========>dummy ccifc_q_detach\r\n"

    CCCI_TR_CAIFCS_SIOR "[CCCI_ERR] =========>dummy caifc_submit_ior\r\n"
    CCCI_TR_CAIFCS_GPDATT "[CCCI_ERR] =========>dummy caifc_q_gpd_attach return KAL_TRUE\r\n"
    CCCI_TR_CAIFCS_BUFFATT "[CCCI_ERR] =========>dummy caifc_q_buff_attach return KAL_TRUE\r\n"
    CCCI_TR_CAIFCS_QDEATT "[CCCI_ERR] =========>dummy caifc_q_detach return KAL_TRUE\r\n"
    CCCI_TR_CAIFCS_SBUFF "[CCCI_ERR] =========>dummy caifc_submit_buff\r\n"

    CCCI_TR_CLDMACS_SIOR "[CCCI_ERR] =========>dummy cldmac_submit_ior\r\n"
    CCCI_TR_CLDMACS_QATT "[CCCI_ERR] =========>dummy cldmac_q_attach\r\n"
    CCCI_TR_CLDMACS_QDEATT "[CCCI_ERR] =========>dummy cldmac_q_detach\r\n"

    CCCI_TR_DUMMY_SIOR "[CCCI_ERR] =========>!!! DROP_PKT !!! dummy_submit_ior\r\n"
    CCCI_TR_DUMMY_QATT "[CCCI_ERR] =========> dummy_q_attach\r\n"
    CCCI_TR_DUMMY_QDEATT "[CCCI_ERR] =========> dummy_q_detach\r\n"
    CCCI_TR_DUMMY_POLLING_IO "[CCCI_ERR] =========> dummy_q_polling_io\r\n"

    CCCI_ISNT_INIT "[CCCI_ERR] =========>ccci_inst_init\r\n"

    CCCI_TR_HSHK1_IN "===> lte_ccci_init_handshake_phase1\n"
    CCCI_TR_HSHK1_WAIT_ACK "wait for AP ACK"
    CCCI_TR_HSHK1_AP_ACK "\n===>AP ACK RCVED %d !!\n"

    CCCI_TR_HSHK2_IN "\n===> lte_ccci_init_handshake_phase2\n"
    CCCI_TR_HSHK2_DRV_VER "[CCCI_HS] CCMSG_ID_DRV_VERSION %X \n"
    CCCI_DUMP_DATA_4HEX "[CCCI_DUMP] %X %X %X %X \n"

    CCCI_UT_SERIAL_ERR "[CCCI_ERR][CCCI_UT] %d 1st packet is not 0 **** %x#%x#%x#%x#%x \n"
    CCCI_UT_OUT_OF_ORDER_ERR "[CCCI_ERR][CCCI_UT] %d out-of-order **** %x#%x#%x#%x#%x \n"
    CCCI_UT_MAGICID_ERR "[CCCI_ERR][CCCI_UT] %d MAGIC ID error **** %x#%x#%x#%x#%x \n"
    CCCI_UT_FUNC_TRA "[CCCI_UT] ====>BEGIN %d \n"
    CCCI_UT_FUNC_STEP_TRA "[CCCI_UT] %d test step %x \n"
    CCCI_UT_FUNC_PASS_TRA "[CCCI_UT] %d PASS \n"
    CCCI_UT_ERR "[CCCI_UT][ERROR] %d \n"
    CCCI_UT_FUNC_STEP_PASS_TRA "[CCCI_UT] %d test step %d PASS, LB_COUNT %d##%d \n"
    CCCI_UT_FUNC_INIT_STEP_DEINIT_TRA "[CCCI_UT] %d %d, start deinit from %d \n"
    CCCI_UT_CCCI_WRITE_ERR "[CCCI_UT] step %d: loop %d curr_txch return %d LB_COUNT %d##%d retry %d \n"
    CCCI_UT_CALLBACK_TRA "[CCCI_UT] %d **** %x#%x#%x#%x \n"





   CCCI_TR_DEBUG_GETSTATUS_START "[CCCI DEBUG] Get status start \n"
   CCCI_TR_DEBUG_GETSTATUS_DONE "[CCCI DEBUG] Get status done \n"
   CCCI_TR_DEBUG_GETSTATUS_WRITE_FAIL "[CCCI DEBUG ERR] Get status write gpd fail \n"
   CCCI_TR_DEBUG_TX_CB "[CCCI DEBUG] Tx CB:%d \n"
   CCCI_TR_DEBUG_RX_CB_START "[CCCI DEBUG] Rx CB start:%d \n"
   CCCI_TR_DEBUG_RX_CB_DONE "[CCCI DEBUG] Rx CB done:%d \n"
   CCCI_TR_DEBUG_RELOAD_GPD_ERR "[CCCI DEBUG ERR] Can't reload gpd:%d \n"
END_MODULE_MSG
# 43 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./middleware/hif/cccidev/cccidev_task/include/cccidev_trace.h" 1
# 81 "./middleware/hif/cccidev/cccidev_task/include/cccidev_trace.h"
START_MODULE_MSG MOD_CCCIDEV 20
   CCCIDEV_TR_ILM_WRONG_DEST_MOD "[CCCIDEV] cccidev_task_on_ilm(): wrong dest_mod_id(%u)!"
   CCCIDEV_TR_UL_CCCI_CH_ERR "[CCCIDEV] UL GPD contains CCCI_CH (%d) not match the input channel (%d)"
END_MODULE_MSG
# 44 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./middleware/hif/cccidev/ccci_tty/include/cccitty_trace.h" 1
# 89 "./middleware/hif/cccidev/ccci_tty/include/cccitty_trace.h"
START_MODULE_MSG MOD_CCCITTY 20

   CCCI_TTY_TR_CCCI_CH_INIT_FATAL_ERROR "[CCCI_TTY] CCCI CH init fatal error. device id:(%d) err_code: (%d)"
   CCCI_TTY_TR_TTYC_INIT_FATAL_ERROR "[CCCI_TTY] TTY Core init fatal error. device id:(%d) err_code: (%d)"
   CCCI_TTY_TR_TTYC_RGPD_Q_TYPE_ERR "[CCCI_TTY] TTYC_RGPD_Q for ccci_ch(%d)ttyport(%d) has length (%d) but with invalid GPDtype(%x)"
   CCCI_TTY_TR_TTYC_NEW_RX_ERR "[CCCI_TTY] CCCI_TTY not support NEW_RX for ccci_ch(%d) ttyport(%d) GPDtype(%x)"
   CCCI_TTY_TR_TTYC_RGPD_LEAK "[CCCI_TTY] dev_id (%d) CCCI_TTY cannot allocate the RPGD just freed, should be (%d) but have (%d)"
   CCCI_TTY_TR_TTYC_RGPD_INIT_ERR "[CCCI_TTY] Fail to allocate RGPD for HIF reload at initialization, to_alloc(%d) num_alloc(%d)"
   CCCI_TTY_TR_UL_INVALID_IOR "[CCCI_TTY] cccitty_ccci_ul_cb(): dev_id (%d), invalid IOR(%X), first_gpd(%X) last_gpd(%X) => Possible RGPD leakage, ASSERT"
   CCCI_TTY_TR_TTYC_ERR_RGPD_LEAK "[CCCI_TTY] dev_id (%d) CCCI_TTY UL error rgpd number error , err_gpd_q size (%d), number of error gpd (%d)"

   CCCI_TTY_ADD_DL_SEQ_FAIL "[CCCI_TTY] Add cccitty sequence number Failed(%d) ch_num(%d)!"
   CCCI_TTY_CHK_UL_SEQ_FAIL "[CCCI_TTY] Check cccitty sequence number Failed(%d) ch_num(%d)!"
   CCCI_TTY_TR_SM_INVALID_EVENT "[CCCI_TTY] dev_id (%d) current state(%d) receive a unexpected event(%d)!"
   CCCI_TTY_TR_SM_UNHANDLED_MSG "[CCCI_TTY] unhandled MSG (%x)!"
   CCCI_TTY_TR_HDR_UNKNOWN_CMD "[CCCI_TTY] unknown TTY Command (%x)!"
   CCCI_TTY_TR_DATA_DUMMY_CH_TRIG "[CCCI_TTY] cccitty ccci dummy ch receive data ch(%d)"
   CCCI_TTY_TR_OPEN_OWNER_IS_NOT_NULL "[CCCI_TTY] SIO_CMD_OPEN requests to open an occupied port New owner(%d) Original owner(%d)"
   CCCI_TTY_TR_HIF_UL_Q_NUM_ERR "[CCCI_TTY] HIF_UL_Q gpd number error, actual number(%d) hif_ul_rgpd_cnt(%d)"
   CCCI_TTY_TR_TTYC_RGPD_Q_NUM_ERR "[CCCI_TTY] TTYC_RGPD_Q gpd number error, actual q len(%d) ttyc_rgpd_cnt(%d)"
   CCCI_TTY_TR_TTYC_RGPD_Q_NUM_ERR_ACT1 "[CCCI_TTY] TTYC_RGPD_Q gpd number error set ttyc_rgpd_cnt = actual q len(%d)"
   CCCI_TTY_TR_TTYC_RGPD_Q_NUM_ERR_ACT2 "[CCCI_TTY] TTYC_RGPD_Q gpd number error set ttyc_rgpd_cnt = 0"
   CCCI_TTY_TR_ASSIGN_RX_IOR_STATE_ERR "[CCCI_TTY] TTY_CMD_ASSIGN_RX_IOR received at WRONG CCCI_TTY state, ccci_tty_state(%d) "
   CCCI_TTY_TR_UL_RELOAD_NULL_IOR "[CCCI_TTY] cccitty_ttyc_hdr_cmd_assign_rx_ior(): port (%d) receives NULL = * IOR => drop it"
   CCCI_TTY_TR_RLD_CCCI_WRITE_FAIL "[CCCI_TTY] cccitty_ttyc_hdr_cmd_assign_rx_ior ccci_write_gpd fail (%d)"
   CCCI_TTY_TR_DEQ_CCCI_WRITE_FAIL "[CCCI_TTY] cccitty_ul_deq_hdr: dev_id (%d) ccci_write_gpd fail (%d), might have gpd leakage"
   CCCI_TTY_TR_UL_CCCI_WRITE_FAIL "[CCCI_TTY] cccitty_ccci_ul_cb: dev_id (%d) ccci_write_gpd fail (%d), might have gpd leakage"

   CCCI_TTY_TR_UL_INVALID_PKT "[CCCI_TTY] cccitty_ccci_ul_cb: dev_id (%d) receive invalid RGPD num(%d) totoal invalid RGPD (%d)"
   CCCI_TTY_TR_UL_RELOAD_EMPTY_IOR "[CCCI_TTY] cccitty_ttyc_hdr_cmd_assign_rx_ior(): port (%d) receives empty IOR => drop it"
   CCCI_TTY_TR_UL_NULL_IOR "[CCCI_TTY] cccitty_ccci_ul_cb(): dev_id (%d) ccci_channel (%d) receives NULL = * IOR => drop it"
   CCCI_TTY_TR_UL_RPGD_ERR "[CCCI_TTY] UL GPD ERROR ,CCCI channel not match or len == 0, --> drop, need to relod RGPD cnt(%d), accumulating error count (%d)"
   CCCI_TTY_TR_UL_DISCARD_IN_DISCONNECTED "[CCCI_TTY] cccitty_ccci_ul_cb(): dev_id (%d) DISCARD uplink GPD: %d in (%x) state!, need to relod RGPD cnt(%d)"
   CCCI_TTY_TR_UL_EMPTY_IOR "[CCCI_TTY] cccitty_ccci_ul_cb(): dev_id (%d) receives empty IOR => drop it"
   CCCI_TTY_TR_UL_DEV_NOT_OPEN "[CCCI_TTY] cccitty_ccci_ul_cb: dev_id (%d) receive ul rgpds while device is not open, state (%d)"

   CCCI_TTY_TR_DL_EMPTY_IOR "[CCCI_TTY] cccitty_ttyc_hdr_cmd_put_bytes_ior(): dev_id (%d) receives empty IOR => drop it"
   CCCI_TTY_TR_DL_TXDONE_NULL_IOR "[CCCI_TTY] cccitty_ccci_dl_cb(): dev_id (%d) ccci_channel (%d) receives NULL = * IOR => drop it"
   CCCI_TTY_TR_DL_DEV_NOPEN "[CCCI_TTY] cccitty_ttyc_hdr_cmd_put_bytes_ior(): dev_id (%d) receives IOR while device state(%d) is not open(%d) => drop it"

   CCCI_TTY_TR_UL_CCCICH_ERR "[CCCI_TTY] cccitty_get_ul_devid(): cannot find valid dev_id for ccci_ch (%d), return CCCI_TTY_DEV_CNT"
   CCCI_TTY_TR_DL_CCCICH_ERR "[CCCI_TTY] cccitty_get_dl_devid(): cannot find valid dev_id for ccci_ch (%d), return CCCI_TTY_DEV_CNT"



   CCCI_TTY_TR_UL_RGPD_EMPTY "[CCCI_TTY] dev_id (%d) Received RGPD own by others from HIF, current RGPD hwo_rgpd_cnt (%d)"
   CCCI_TTY_TR_HDR_NONSUPPORT_CMD "[CCCI_TTY] non-supported TTY Command (%x)!"


   CCCI_TTY_TR_SM_VALID_EVENT "[CCCI_TTY] dev_id (%d) current state(%d) -> event(%d) -> new state(%d)"


   CCCI_TTY_TR_HMU_INIT "[CCCI_TTY] cccitty_hmu_init dev_id (%d)"
   CCCI_TTY_TR_HMU_PREINIT "[CCCI_TTY] cccitty_hmu_pre_init dev_id (%d)"
   CCCI_TTY_TR_HMU_POSTINIT "[CCCI_TTY] cccitty_hmu_post_init dev_id (%d)"
   CCCI_TTY_TR_HMU_DEINIT "[CCCI_TTY] cccitty_hmu_deinit dev_id (%d)"
   CCCI_TTY_TR_HMU_PREDEINIT "[CCCI_TTY] cccitty_hmu_pre_deinit dev_id (%d)"
   CCCI_TTY_TR_HMU_POSTDEINIT "[CCCI_TTY] cccitty_hmu_post_deinit dev_id (%d)"
   CCCI_TTY_TR_HDR_RCV_CMD "[CCCI_TTY] hdr receive TTY command (%x)!"

   CCCI_TTY_TR_DL_CCCIH_TRACE "[CCCI_TTY] cccitty_ttyc_hdr_cmd_put_bytes_ior(): dev_id (%d) ccci_write_gpd with CCCI HEADER (%x # %x # %x # %x)"
   CCCI_TTY_TR_DL_TXDONE_CB "[CCCI_TTY] cccitty_ccci_dl_cb(): dev_id (%d) ccci_channel (%d) p_cccitty->dcl_txdone callback"
   CCCI_TTY_TR_DL_TXDONE_CB_DIS "[CCCI_TTY] cccitty_ccci_dl_cb(): dev_id (%d) ccci_channel (%d) tty_need_tx_done_cb == FALSE, drop IOR"


   CCCI_TTY_TR_RGPD_DEQ "[CCCI_TTY] cccitty_ul_deq_hdr: DEQUEUE dev_id (%d) ttyc_rgpd_cnt (%d) hif_ul_rgpd_cnt (%d) dequeue_num (%d) "

   CCCI_TTY_TR_RGPD_RELOAD "[CCCI_TTY] dev_id (%d) Reload ttyc_rgpd_q RGPD (%d) current RGPD (%d) "


   CCCI_TTY_TR_HIF_RGPD_RELOAD1 "[CCCI_TTY] dev_id (%d) Reload HIF RGPD Type 1 - 1st time Reload HIF RGPD cnt (%d) current RGPD hwo_rgpd_cnt (%d) "
   CCCI_TTY_TR_HIF_RGPD_RELOAD2 "[CCCI_TTY] dev_id (%d) Reload HIF RGPD Type 2 - After UL GPD to TTYCore Reload RGPD cnt (%d) current RGPD hwo_rgpd_cnt (%d) "
   CCCI_TTY_TR_HIF_RGPD_RELOAD3 "[CCCI_TTY] dev_id (%d) Reload HIF RGPD Type 3 - Flush return RGPD cnt (%d) to HIF,  current RGPD hwo_rgpd_cnt (%d) "
   CCCI_TTY_TR_HIF_RGPD_RELOAD4 "[CCCI_TTY] dev_id (%d) Reload HIF RGPD Type 4 - cccitty_ccci_ul_cb Reload ERROR RGPD cnt (%d) current RGPD hwo_rgpd_cnt (%d) "
   CCCI_TTY_TR_HIF_RGPD_RELOAD5 "[CCCI_TTY] dev_id (%d) Reload HIF RGPD Type 5 - cccitty_ccci_ul_cb Reload DEV not open cnt (%d) current RGPD hwo_rgpd_cnt (%d) "

   CCCI_TTY_TR_UL_RCV_GPD "[CCCI_TTY] dev_id (%d) Received RGPD , cnt (%d), from HIF, current RGPD hwo_rgpd_cnt (%d)"
   CCCI_TTY_TR_UL_SEND_DEQ "[CCCI_TTY] dev_id (%d) sent MSG_ID_CCCI_TTY_UL_DEQUEUE_REQ"




END_MODULE_MSG
# 45 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./service/hif/cccisrv/ccci_ipc/include/ccci_ipc_trace.h" 1
# 102 "./service/hif/cccisrv/ccci_ipc/include/ccci_ipc_trace.h"
START_MODULE_MSG MOD_CCCIIPC 20


    CCCI_RECEIVE_MSG_FUNC_TRA "[CCCI_IPC] ccci_ipc_receive_msg_cb START \n"
    CCCI_RECEIVE_MSG_FUNC_PASS_TRA "[CCCI_IPC] ccci_ipc_receive_msg_cb PASS \n"
    CCCI_SEND_MSG_FUNC_TRA "[CCCI_IPC] ccci_ipc_send_msg START \n"
    CCCI_SEND_MSG_FUNC_PASS_TRA "[CCCI_IPC] ccci_ipc_send_msg PASS \n"
    CCCI_SEND_MSG_CB_FUNC_TRA "[CCCI_IPC] ccci_ipc_send_msg_cb START \n"
    CCCI_SEND_MSG_CB_FUNC_PASS_TRA "[CCCI_IPC] ccci_ipc_send_msg_cb PASS \n"
    CCCI_IPC_ERROR_CB_FUNC_ERR "[CCCI_IPC][ERROR] ccci_ipc_error_cb Not implement, should not be called\n"
    CCCI_IPC_ERROR_ILM_MSGID_ERR "[CCCI_IPC][ERROR] ccci_ipc_main ILM msgid = %d \n"
    CCCI_SEND_MSG_FUNC_ILM_ERROR "[CCCI_IPC][ERROR] ccci_ipc_send_msg ILM is not alloc from ipc_msgsvc_allocate_ilm \n"
    CCCI_SEND_MSG_FUNC_TASKID_ERROR "[CCCI_IPC][ERROR] ccci_ipc_send_msg error taskid, dest = %d, src = %d \n"
    CCCI_SEND_MSG_FUNC_DESTID_ERROR "[CCCI_IPC][ERROR] ccci_ipc_send_msg error destnation id, dest = %d\n"
    CCCI_ALLOC_ILM_FUNC_ERROR "[CCCI_IPC][ERROR] ipc_msgsvc_allocate_ilm error mutile alloc ilm, MOD_ID = %d\n"
    CCCI_IPC_RECEIVE_SEND_ILM_ERR "[CCCI_IPC][ERROR] ccci_ipc_receive_msg_cb ext_msg_queue exhausted \n"
    CCCI_SEND_MSG_FUNC_ALLOC_GPD_ERROR "[CCCI_IPC][ERROR] ccci_ipc_send_msg Allocate GPD fail\n"


    CCCI_RECEIVE_MSG_TRA_CCCI "[CCCI_IPC][UL] CCCI(%08x %08x %08x %08x)\n"
    CCCI_RECEIVE_MSG_TRA_ILM "[CCCI_IPC][UL] ILM %08x src=%08x dest=%08x sap=%08x msg=%08x local=%08x peer=%08x \n"
    CCCI_RECEIVE_MSG_TRA_ILM_SEND "[CCCI_IPC][UL] dest=%08x msg=%08x local=%08x ref_count=%08x \n"
    CCCI_SEND_MSG_TRA_CCCI "[CCCI_IPC][DL] CCCI(%08x %08x %08x %08x)\n"
    CCCI_SEND_MSG_TRA_ILM "[CCCI_IPC][DL] ILM %08x src=%08x dest=%08x sap=%08x msg=%08x local=%08x peer=%08x \n"
    CCCI_ALLOC_ILM_FUNC "[CCCI_IPC] ipc_msgsvc_allocate_ilm MOD_ID = %d\n"
    CCCI_IPC_PROCESS_CB_START "[CCCI_IPC] ccci_ipc_process_cb_funp START msg_id = %d msg_pos = %d \n"
    CCCI_IPC_PROCESS_CB_PASS "[CCCI_IPC] ccci_ipc_process_cb_funp PASS msg_id = %d msg_pos = %d exe_time = %d \n"






END_MODULE_MSG
# 46 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./service/hif/cccisrv/ccci_rpc/include/ccci_rpc_trace.h" 1
# 90 "./service/hif/cccisrv/ccci_rpc/include/ccci_rpc_trace.h"
START_MODULE_MSG MOD_CCCIRPC 20


    CCCI_RPC_IPC_RPC_CCCI_Write_FUNC_TRA "[CCCI_RPC] IPC_RPC_CCCI_Write START \n"
    CCCI_RPC_IPC_RPC_CCCI_Write_FUNC_PASS_TRA "[CCCI_RPC] IPC_RPC_CCCI_Write PASS \n"
    CCCI_RPC_IPC_RPC_CCCI_Read_FUNC_TRA "[CCCI_RPC] IPC_RPC_CCCI_Read START \n"
    CCCI_RPC_IPC_RPC_CCCI_Read_FUNC_PASS_TRA "[CCCI_RPC] IPC_RPC_CCCI_Read PASS \n"
    CCCI_RPC_IPC_RPC_Process_CMD_FUNC_TRA "[CCCI_RPC] IPC_RPC_Process_CMD START \n"
    CCCI_RPC_IPC_RPC_Process_CMD_FUNC_PASS_TRA "[CCCI_RPC] IPC_RPC_Process_CMD PASS \n"
    CCCI_RPC_IPC_RPC_Wrapper_FUNC_TRA "[CCCI_RPC] IPC_RPC_Wrapper START \n"
    CCCI_RPC_IPC_RPC_Wrapper_FUNC_PASS_TRA "[CCCI_RPC] IPC_RPC_Wrapper PASS \n"
    CCCI_RPC_ccci_rpc_send_cb_FUNC_TRA "[CCCI_RPC] ccci_rpc_send_cb START \n"
    CCCI_RPC_ccci_rpc_send_cb_FUNC_PASS_TRA "[CCCI_RPC] ccci_rpc_send_cb PASS \n"
    CCCI_RPC_ccci_rpc_receive_cb_FUNC_TRA "[CCCI_RPC] ccci_rpc_receive_cb START \n"
    CCCI_RPC_ccci_rpc_receive_cb_FUNC_PASS_TRA "[CCCI_RPC] ccci_rpc_receive_cb PASS \n"
    CCCI_RPC_CCCI_HEADER_TRA "[CCCI_RPC] CCCI Header %#X %#X %#X %#X \n"
    CCCI_RPC_HEADER_TRA "[CCCI_RPC] RPC Header OPID=%#X NUM_PARA=%#X \n"
    CCCI_RPC_EVENT_WAKEUP_FUNC_TRA "[CCCI_RPC] ccci_rpc_receive_cb event wakeup:%d \n"
    CCCI_RPC_GET_FREE_INDEX_TRA "[CCCI_RPC] ccci get free index:%d \n"
    CCCI_RPC_WRITE_FAIL_TRA "[CCCI_RPC] ccci write gpd fail \n"
    CCCI_RPC_GPD_POOL_FULL_ERR "[CCCI_RPC][ERROR] Index:%d GPD have received \n"
    CCCI_RPC_ALLOC_GPD_ERROR "[CCCI_RPC][ERROR] IPC_RPC_CCCI_Write alloc GPD error \n"
    CCCI_RPC_RECEIVE_OPID_ERR "[CCCI_RPC][ERROR] IPC_RPC_CCCI_Read OPID error, expect %#X receive %#X\n"
    CCCI_RPC_PRAR_NUM_ERR "[CCCI_RPC][ERROR] IPC_RPC_CCCI_Read PARA NUM error, expect %d receive %d\n"
    CCCI_RPC_PRAR_LENGTH_ERR "[CCCI_RPC][ERROR] IPC_RPC_CCCI_Read PARA Length too long error, prar %d expect %d receive %d\n"
    CCCI_RPC_PARA_NUM_FULL_ERROR "[CCCI_RPC][ERROR] MAX: %d Input: %d \n"






END_MODULE_MSG
# 47 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./service/hif/cccisrv/cccisrv_task/include/cccisrv_trace.h" 1
# 85 "./service/hif/cccisrv/cccisrv_task/include/cccisrv_trace.h"
START_MODULE_MSG MOD_CCCISRV 20
   CCCISRV_TR_ILM_WRONG_DEST_MOD "[CCCISRV] cccisrv_task_on_ilm(): wrong dest_mod_id(%u)!"
   CCCISRV_TR_UL_CCCI_CH_ERR "[CCCISRV] UL GPD contains CCCI_CH (%d) not match the input channel (%d)"
END_MODULE_MSG
# 48 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./service/hif/cccisrv/ccci_sys_msg/include/ccci_sys_msg_trace.h" 1
# 77 "./service/hif/cccisrv/ccci_sys_msg/include/ccci_sys_msg_trace.h"
START_MODULE_MSG MOD_CCCIMSG 20



   CCCI_SYS_MSG_INIT "[CCCISYSMSG] Init done !"
   CCCI_SYS_MSG_REG_CB "[CCCISYSMSG] Register msgid( %x) callback Funp(%x) successfully !"
   CCCI_SYS_MSG_INVK_CB "[CCCISYSMSG] Invoke  msgid( %x ) callback!"
   CCCI_SYS_MSG_SEND_SLEEPMASKING_MSG "[CCCISYSMSG] Send SYSMSG CCMSG_ID_SYSMSGSVC_L1_SLEEPMASKING, data ( %d )"
   CCCI_SYS_MSG_SEND_ILM_D "[CCCISYSMSG] Send ILM TO L4C with data, msgid( %x ), data( %d )"
   CCCI_SYS_MSG_SEND_ILM "[CCCISYSMSG] Send ILM TO L4C, msgid( %x )"


   CCCI_SYS_MSG_SLEEPMASKING "[CCCISYSMSG] CCCI_SLEEPMASKING : warning1\0"
   CCCI_SYS_MSG_UNKNOW_MB_ID "[CCCISYSMSG] Unknow mailbox ID : %d"
   CCCI_SYS_MSG_INVALID_PARM "[CCCISYSMSG] Invalid parameter for ccci_register_sysmsgsvc_callback, ( %d ), ( %x )"
   CCCI_SYS_MSG_INVALID_ID "[CCCISYSMSG] Invalid Message ID from AP, ( %x )"
   CCCI_SYS_MSG_INVALID_REG_CB "[CCCISYSMSG] No Registered Call Back Function, ( %x )"


   CCCI_SYS_MSG_ABNORMAL_DL_CB "[CCCISYSMSG] Abnormal TX (Downlink) callback"
   CCCI_SYS_MSG_UL_CHANNEL_INIT_RESULT "[CCCISYSMSG] Uplink channel (%d) init, %d"
   CCCI_SYS_MSG_DL_CHANNEL_INIT_RESULT "[CCCISYSMSG] Downlink channel (%d) init, %d"


   CCCI_SYS_MSG_CCCI_MD_SLEEP_LOCK "[CCCISYSMSG] CCCI MD SLEEP LOCK Request, sleepHd(%d)"
   CCCI_SYS_MSG_CCCI_MD_SLEEP_UNLOCK "[CCCISYSMSG] CCCI MD SLEEP UNLOCK Request, sleepHd(%d)"
   CCCI_SYS_MSG_CCCI_MD_SLEEP_INVALID "[CCCISYSMSG] CCCI MD SLEEP INVALID Value, %d"

END_MODULE_MSG
# 49 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./service/hif/cccisrv/ccci_fs/include/ccci_fs_trace.h" 1
# 110 "./service/hif/cccisrv/ccci_fs/include/ccci_fs_trace.h"
START_MODULE_MSG MOD_CCCIFS 20


   CCCIFS_TR_PUT_BUF_ERR "[CCCI_FS] size over FS shared buffer size in ccci_fs_put_buff"
   CCCIFS_TR_OPID_NG "[CCCI_FS] the mismatch op id in ccci_fs_get_buff"
   CCCIFS_TR_VNUM_NG "[CCCI_FS] the mismatch variable number in ccci_fs_get_buff"
   CCCIFS_TR_LV_LEN_NG "[CCCI_FS] user reserved not enough memory space for carrying AP response at index (%d) (pLV[i].len (%d) < pTmp->len (%d))"
   CCCIFS_TR_RXEVNT_NG "[CCCI_FS] ccci_fs_wait_rx received event NG with error code (%x)"
   CCCIFS_TR_RGPD_RELOAD_1ST_ERR "[CCCI_FS] ccci_fs_task_init: cannot alloc enough gpd for CCCI_FS UL to_alloc(%d) num_alloc(%d)"


   CCCIFS_TR_GET_PORT_ERR "[CCCI_FS] ccci_fs_get_port no free port busy port number (%d) return CCCI_FAIL"
   CCCIFS_TR_RGPD_DL_GET_TGPD_ERR "[CCCI_FS] ccci_fs_put_buff allocate TGPD fail to_alloc(%d) num_alloc(%d)"
   CCCIFS_TR_DL_CCCI_W_ERR "[CCCI_FS] ccci_fs_put_buff ccci_write fail return (%x)"
   CCCIFS_TR_WRAPPER_RET_ERR "[CCCI_FS] CCCI_FS_OP_Wrapper return error (%d) port_index (%d)"
   CCCIFS_TR_CMPTREAD_OPIDMAP_ERR "[CCCI_FS] NVRAM_CMPT_READ OPID bitmap error (%x)"


   CCCIFS_TR_NO_COPY "[CCCI_FS] Note the this is the NO COPY == 1 condition"




   CCCIFS_TR_RX_INFO "[CCCI_FS] ccci_fs_ul_buff_process: CCCI_H addr(%x) CCCI_H(%x)(%x)(%x)(%x) "
   CCCIFS_TR_RGPD_RELOAD_1ST "[CCCI_FS] ccci_fs_task_init: initialize reload RGPD (%d) current hwo_rgpd_count (%d) "
   CCCIFS_TR_RGPD_RELOAD "[CCCI_FS] ccci_fs_ul_cb: reload RGPD (%d) current hwo_rgpd_count (%d) "
   CCCIFS_TR_DL_LT_4K "[CCCI_FS] ccci_fs_put_buff: meet the case that downlink buffer size > MTU(4K). DL size(%d) TGPD request num(%d)"



   CCCIFS_TR_WRAPPER_GET_PORT_OK "[CCCI_FS] CCCI_FS_OP_Wrapper [GET_PORT] PASS return (%d) port_index (%d)"
   CCCIFS_TR_WRAPPER_PUT_BUF_OK "[CCCI_FS] CCCI_FS_OP_Wrapper [PUT_BUF] PASS return (%d) port_index (%d) op_id (0x%x) in_para_cnt (%d)"
   CCCIFS_TR_WRAPPER_WAIT_RX_OK "[CCCI_FS] CCCI_FS_OP_Wrapper [WAIT_RX] PASS port_index (%d) "
   CCCIFS_TR_WRAPPER_GET_BUF_OK "[CCCI_FS] CCCI_FS_OP_Wrapper [GETT_BUF] PASS return (%d) port_index (%d) op_id (0x%x) out_para_cnt (%d)"
   CCCIFS_TR_WRAPPER_PUT_PORT_OK "[CCCI_FS] CCCI_FS_OP_Wrapper [PUT_PORT] PASS return (%d) port_index (%d)"
   CCCIFS_TR_WRAPPER_RET_OK "[CCCI_FS] CCCI_FS_OP_Wrapper PASS total(%d) op(0x%x) ret(%d) idx(%d) time(%dus)(%d total_t)## s(%d)e(%d)dur(%d)"
   CCCIFS_TR_WRAPPER_DL_SEQ "[CCCI_FS] CCCI_FS_OP_Wrapper [DL SEQ] (%d)"


   CCCIFS_TR_CMPTREAD_IN "[CCCI_FS] ===> MD_NVARM_FS_CMPT_Read "
   CCCIFS_TR_CMPTREAD_RET "[CCCI_FS] MD_NVARM_FS_CMPT_Read LV ret_val[%x][%x][%x] FileSize[%x][%x] read_bytes[%x][%x] read_data[%x][%x]"
   CCCIFS_TR_CMPTREAD_OUT "[CCCI_FS] <=== MD_NVARM_FS_CMPT_Read "
   CCCIFS_TR_CMPTREAD_USER_INPUT "[CCCI_FS] User's CMPT_Read input: opid_map[%x] Flag[%x] Offset[%x] Whence[%x] Length[%x]"

   CCCIFS_TR_OPEN_IN "[CCCI_FS] ===> MD_FS_Open "
   CCCIFS_TR_OPEN_RET "[CCCI_FS] MD_FS_Open LV [%x][%x]"
   CCCIFS_TR_OPEN_OUT "[CCCI_FS] <=== MD_FS_Open "

   CCCIFS_TR_OPENHINT_IN "[CCCI_FS] ===> MD_FS_Open "
   CCCIFS_TR_OPENHINT_RET "[CCCI_FS] MD_FS_Open LV [%x][%x][%x][%x]"
   CCCIFS_TR_OPENHINT_OUT "[CCCI_FS] <=== MD_FS_Open "

   CCCIFS_TR_GETDKINFO_IN "[CCCI_FS] ===> MD_FS_GetDiskInfo "
   CCCIFS_TR_GETDKINFO_RET "[CCCI_FS] MD_FS_GetDiskInfo LV [%x][%x][%x][%x]"
   CCCIFS_TR_IT_GETDKINFO_AP_TRACE "[CCCI_FS] MD_FS_GetDiskInfo SectorsPerCluster(%d) TotalClusters(%d) FreeClusters(%d) ret(%d)"
   CCCIFS_TR_GETDKINFO_OUT "[CCCI_FS] <=== MD_FS_GetDiskInfo "

   CCCIFS_TR_CLOSE_IN "[CCCI_FS] ===> MD_FS_Close "
   CCCIFS_TR_CLOSE_RET "[CCCI_FS] MD_FS_Close LV [%x][%x]"
   CCCIFS_TR_CLOSE_OUT "[CCCI_FS] <=== MD_FS_Close "

   CCCIFS_TR_READ_IN "[CCCI_FS] ===> MD_FS_Read "
   CCCIFS_TR_READ_RET "[CCCI_FS] MD_FS_Read LV ret_val[%x][%x] read_bytes[%x][%x] read_data[%x][%x]"
   CCCIFS_TR_READ_OUT "[CCCI_FS] <=== MD_FS_Read "

   CCCIFS_TR_WRITE_IN "[CCCI_FS] ===> MD_FS_Write "
   CCCIFS_TR_WRITE_RET "[CCCI_FS] MD_FS_Write LV ret_val[%x][%x] write_bytes[%x][%x]"
   CCCIFS_TR_WRITE_OUT "[CCCI_FS] <=== MD_FS_Write "

   CCCIFS_TR_SEEK_IN "[CCCI_FS] ===> MD_FS_Seek "
   CCCIFS_TR_SEEK_RET "[CCCI_FS] MD_FS_Seek LV ret_val[%x][%x]"
   CCCIFS_TR_SEEK_OUT "[CCCI_FS] <=== MD_FS_Seek "

   CCCIFS_TR_GETFSZ_IN "[CCCI_FS] ===> MD_FS_GetFileSize "
   CCCIFS_TR_GETFSZ_RET "[CCCI_FS] MD_FS_GetFileSize LV ret_val[%x][%x] file_size[%x][%x]"
   CCCIFS_TR_GETFSZ_OUT "[CCCI_FS] <=== MD_FS_GetFileSize "

   CCCIFS_TR_DEL_IN "[CCCI_FS] ===> MD_FS_Delete "
   CCCIFS_TR_DEL_RET "[CCCI_FS] MD_FS_Delete LV ret_val[%x][%x]"
   CCCIFS_TR_DEL_OUT "[CCCI_FS] <=== MD_FS_Delete "

   CCCIFS_TR_GATT_IN "[CCCI_FS] ===> MD_FS_GetAttributes "
   CCCIFS_TR_GATT_RET "[CCCI_FS] MD_FS_GetAttributes LV ret_val[%x][%x]"
   CCCIFS_TR_GATT_OUT "[CCCI_FS] <=== MD_FS_GetAttributes "

   CCCIFS_TR_MKDIR_IN "[CCCI_FS] ===> MD_FS_CreateDir "
   CCCIFS_TR_MKDIR_RET "[CCCI_FS] MD_FS_CreateDir LV ret_val[%x][%x]"
   CCCIFS_TR_MKDIR_OUT "[CCCI_FS] <=== MD_FS_CreateDir "

   CCCIFS_TR_RMDIR_IN "[CCCI_FS] ===> MD_FS_RemoveDir "
   CCCIFS_TR_RMDIR_RET "[CCCI_FS] MD_FS_RemoveDir LV ret_val[%x][%x]"
   CCCIFS_TR_RMDIR_OUT "[CCCI_FS] <=== MD_FS_RemoveDir "

   CCCIFS_TR_GDSZ_IN "[CCCI_FS] ===> MD_FS_GetFolderSize "
   CCCIFS_TR_GDSZ_RET "[CCCI_FS] MD_FS_GetFolderSize LV ret_val[%x][%x]"
   CCCIFS_TR_GDSZ_OUT "[CCCI_FS] <=== MD_FS_GetFolderSize "

   CCCIFS_TR_FSRENAME_IN "[CCCI_FS] ===> MD_FS_Rename "
   CCCIFS_TR_FSRENAME_RET "[CCCI_FS] MD_FS_Rename LV ret_val[%x][%x]"
   CCCIFS_TR_FSRENAME_OUT "[CCCI_FS] <=== MD_FS_Rename "

   CCCIFS_TR_FSMV_IN "[CCCI_FS] ===> MD_FS_Move "
   CCCIFS_TR_FSMV_RET "[CCCI_FS] MD_FS_Move LV ret_val[%x][%x]"
   CCCIFS_TR_FSMV_OUT "[CCCI_FS] <=== MD_FS_Move "

   CCCIFS_TR_FSCNT_IN "[CCCI_FS] ===> MD_FS_Count "
   CCCIFS_TR_FSCNT_RET "[CCCI_FS] MD_FS_Count LV ret_val[%x][%x]"
   CCCIFS_TR_FSCNT_OUT "[CCCI_FS] <=== MD_FS_Count "

   CCCIFS_TR_XDEL_IN "[CCCI_FS] ===> MD_FS_XDelete "
   CCCIFS_TR_XDEL_RET "[CCCI_FS] MD_FS_XDelete LV ret_val[%x][%x]"
   CCCIFS_TR_XDEL_OUT "[CCCI_FS] <=== MD_FS_XDelete "

   CCCIFS_TR_FNDFST_IN "[CCCI_FS] ===> MD_FS_FindFirst "
   CCCIFS_TR_FNDFST_RET "[CCCI_FS] MD_FS_FindFirst LV ret_val[%x][%x] File Info[%x][%x] File Name[%x][%x]"
   CCCIFS_TR_FNDFST_OUT "[CCCI_FS] <=== MD_FS_FindFirst "

   CCCIFS_TR_FNDNXT_IN "[CCCI_FS] ===> MD_FS_FindNext "
   CCCIFS_TR_FNDNXT_RET "[CCCI_FS] MD_FS_FindNext LV ret_val[%x][%x] File Info[%x][%x] File Name[%x][%x]"
   CCCIFS_TR_FNDNXT_OUT "[CCCI_FS] <=== MD_FS_FindNext "

   CCCIFS_TR_FNDCLS_IN "[CCCI_FS] ===> MD_FS_FindClose "
   CCCIFS_TR_FNDCLS_RET "[CCCI_FS] MD_FS_FindClose LV ret_val[%x][%x]"
   CCCIFS_TR_FNDCLS_OUT "[CCCI_FS] <=== MD_FS_FindClose "

   CCCIFS_TR_GETDRV_IN "[CCCI_FS] ===> MD_FS_GetDrive "
   CCCIFS_TR_GETDRV_RET "[CCCI_FS] MD_FS_GetDrive LV ret_val[%x][%x]"
   CCCIFS_TR_GETDRV_OUT "[CCCI_FS] <=== MD_FS_GetDrive "

   CCCIFS_TR_GETCLUSZ_IN "[CCCI_FS] ===> MD_FS_GetClusterSize "
   CCCIFS_TR_GETCLUSZ_RET "[CCCI_FS] MD_FS_GetClusterSize LV ret_val[%x][%x]"
   CCCIFS_TR_GETCLUSZ_OUT "[CCCI_FS] <=== MD_FS_GetClusterSize "

   CCCIFS_TR_SETDKFG_IN "[CCCI_FS] ===> MD_FS_SetDiskFlag "
   CCCIFS_TR_SETDKFG_RET "[CCCI_FS] MD_FS_SetDiskFlag LV ret_val[%x][%x]"
   CCCIFS_TR_SETDKFG_OUT "[CCCI_FS] <=== MD_FS_SetDiskFlag "

   CCCIFS_TR_CLOSEALL_IN "[CCCI_FS] ===> MD_FS_CloseAll "
   CCCIFS_TR_CLOSEALL_RET "[CCCI_FS] MD_FS_CloseAll LV ret_val[%x][%x]"
   CCCIFS_TR_CLOSEALL_OUT "[CCCI_FS] <=== MD_FS_CloseAll "

   CCCIFS_TR_CLRDISKFG_IN "[CCCI_FS] ===> MD_FS_ClearDiskFlag "
   CCCIFS_TR_CLRDISKFG_RET "[CCCI_FS] MD_FS_ClearDiskFlag LV ret_val[%x][%x]"
   CCCIFS_TR_CLRDISKFG_OUT "[CCCI_FS] <=== MD_FS_ClearDiskFlag "

   CCCIFS_TR_SHUTDN_IN "[CCCI_FS] ===> MD_FS_ShutDown "
   CCCIFS_TR_SHUTDN_OUT "[CCCI_FS] <=== MD_FS_ShutDown "

   CCCIFS_TR_ULKALL_IN "[CCCI_FS] ===> MD_FS_UnlockAll "
   CCCIFS_TR_ULKALL_RET "[CCCI_FS] MD_FS_UnlockAll LV ret_val[%x][%x]"
   CCCIFS_TR_ULKALL_OUT "[CCCI_FS] <=== MD_FS_UnlockAll "

   CCCIFS_TR_LKFAT_IN "[CCCI_FS] ===> MD_FS_LockFAT "
   CCCIFS_TR_LKFAT_RET "[CCCI_FS] MD_FS_LockFAT LV ret_val[%x][%x]"
   CCCIFS_TR_LKFAT_OUT "[CCCI_FS] <=== MD_FS_LockFAT "

   CCCIFS_TR_OTPWR_IN "[CCCI_FS] ===> MD_FS_OTPWrite "
   CCCIFS_TR_OTPWR_RET "[CCCI_FS] MD_FS_OTPWrite LV ret_val[%x][%x]"
   CCCIFS_TR_OTPWR_OUT "[CCCI_FS] <=== MD_FS_OTPWrite "

   CCCIFS_TR_OTPRD_IN "[CCCI_FS] ===> MD_FS_OTPRead "
   CCCIFS_TR_OTPRD_RET "[CCCI_FS] MD_FS_OTPRead LV ret_val[%x][%x] param1 [%x][%x]"
   CCCIFS_TR_OTPRD_OUT "[CCCI_FS] <=== MD_FS_OTPRead "

   CCCIFS_TR_OTPQLEN_IN "[CCCI_FS] ===> MD_FS_OTPQueryLength "
   CCCIFS_TR_OTPQLEN_RET "[CCCI_FS] MD_FS_OTPQueryLength LV ret_val[%x][%x] param1 [%x][%x]"
   CCCIFS_TR_OTPQLEN_OUT "[CCCI_FS] <=== MD_FS_OTPQueryLength "

   CCCIFS_TR_OTPLK_IN "[CCCI_FS] ===> MD_FS_OTPLock "
   CCCIFS_TR_OTPLK_RET "[CCCI_FS] MD_FS_OTPLock LV ret_val[%x][%x]"
   CCCIFS_TR_OTPLK_OUT "[CCCI_FS] <=== MD_FS_OTPLock "

   CCCIFS_TR_OTPRSTORE_IN "[CCCI_FS] ===> MD_FS_Restore "
   CCCIFS_TR_OTPRSTORE_RET "[CCCI_FS] MD_FS_Restore LV ret_val[%x][%x]"
   CCCIFS_TR_OTPRSTORE_OUT "[CCCI_FS] <=== MD_FS_Restore "



   CCCIFS_TR_TASK_INIT "[CCCI_FS] Init Stage!! %d"



   CCCIFS_TR_IT_START "[CCCI_FS_IT] ===> cccifsit_task_main "
   CCCIFS_TR_IT_TRIGGER "[CCCI_FS] cccifsit_task_main trigger test case"
   CCCIFS_TR_IT_IDLE "[CCCI_FS] cccifsit_task_main idle"
   CCCIFS_TR_IT_END "[CCCI_FS_IT] <=== cccifsit_task_main "
   CCCIFS_TR_IT_PASS "[CCCI_FS_IT] PASS!!!!! "
   CCCIFS_TR_IT_FAIL "[CCCI_FS_IT] FAIL!!!!! "
   CCCIFS_TR_IT_CLN_PASS "[CCCI_FS_IT_CLN] PASS!!!!! "

   CCCIFS_TR_IT_CLN_FAIL "[CCCI_FS_IT_CLN] FAIL!!!!! "
   CCCIFS_TR_IT_SHUTDOWN_ERR "[CCCI_FS] MD_FS_CloseAll/MD_FS_ShutDown test FAIL!! ret(%d)"
   CCCIFS_TR_IT_CREATE_FOLDER_T1_ERR "[CCCI_FS] cccifs_it_create_dir test 1 FAIL!! ret(%d)"
   CCCIFS_TR_IT_CREATE_FOLDER_T2_ERR "[CCCI_FS] cccifs_it_create_dir test 2 FAIL!! ret(%d)"
   CCCIFS_TR_IT_CREATE_FOLDER_T3_ERR "[CCCI_FS] cccifs_it_create_dir test 3 FAIL!! ret(%d)"
   CCCIFS_TR_IT_CREATE_FOLDER_T4_ERR "[CCCI_FS] cccifs_it_create_dir test 4 FAIL!! ret(%d)"

   CCCIFS_TR_IT_REMOVE_FOLDER_T1_ERR "[CCCI_FS] cccifs_it_remove_dir test 1 FAIL!! ret(%d)"

   CCCIFS_TR_IT_CREATE_FILE_T1_ERR "[CCCI_FS] cccifs_it_file_op create CCCI_FS_IT_FILE_A FAIL!! ret(%d)"
   CCCIFS_TR_IT_CREATE_FILE_T2_ERR "[CCCI_FS] cccifs_it_file_op create CCCI_FS_IT_FILE_B FAIL!! ret(%d)"
   CCCIFS_TR_IT_CREATE_FILE_T3_ERR "[CCCI_FS] cccifs_it_file_op create CCCI_FS_IT_FILE_C FAIL!! ret(%d)"
   CCCIFS_TR_IT_WRITE_FILE_T1_ERR "[CCCI_FS] cccifs_it_file_op write CCCI_FS_IT_FILE_A FAIL!! ret(%d)"
   CCCIFS_TR_IT_WRITE_FILE_T2_ERR "[CCCI_FS] cccifs_it_file_op write CCCI_FS_IT_FILE_B FAIL!! ret(%d)"
   CCCIFS_TR_IT_WRITE_FILE_T3_ERR "[CCCI_FS] cccifs_it_file_op write CCCI_FS_IT_FILE_C FAIL!! ret(%d)"

   CCCIFS_TR_IT_READ_CREATE_FILE_T1_ERR "[CCCI_FS] cccifs_it_read_op create CCCI_FS_IT_FILE_A FAIL!! ret(%d)"
   CCCIFS_TR_IT_READ_CREATE_FILE_T2_ERR "[CCCI_FS] cccifs_it_read_op create CCCI_FS_IT_FILE_B FAIL!! ret(%d)"
   CCCIFS_TR_IT_READ_CREATE_FILE_T3_ERR "[CCCI_FS] cccifs_it_read_op create CCCI_FS_IT_FILE_C FAIL!! ret(%d)"
   CCCIFS_TR_IT_READ_FILE_T1_ERR "[CCCI_FS] cccifs_it_read_op read CCCI_FS_IT_FILE_A FAIL!! ret(%d)"
   CCCIFS_TR_IT_READ_FILE_T2_ERR "[CCCI_FS] cccifs_it_read_op read CCCI_FS_IT_FILE_B FAIL!! ret(%d)"
   CCCIFS_TR_IT_READ_FILE_T3_ERR "[CCCI_FS] cccifs_it_read_op read CCCI_FS_IT_FILE_C FAIL!! ret(%d)"
   CCCIFS_TR_IT_READ_FILE_C_T1_ERR "[CCCI_FS] cccifs_it_read_op CCCI_FS_IT_FILE_A content not match FAIL!! ret(%d)"
   CCCIFS_TR_IT_READ_FILE_C_T2_ERR "[CCCI_FS] cccifs_it_read_op CCCI_FS_IT_FILE_B WITH SEEK content not match FAIL!! ret(%d)"
   CCCIFS_TR_IT_READ_FILE_C_T3_ERR "[CCCI_FS] cccifs_it_read_op CCCI_FS_IT_FILE_C content not match FAIL!! ret(%d)"
   CCCIFS_TR_IT_SEEK_FILE_T1_ERR "[CCCI_FS] cccifs_it_read_op CCCI_FS_IT_FILE_A seek FAIL!! ret(%d)"

   CCCIFS_TR_IT_GETDKINFO_ERR "[CCCI_FS] MD_FS_GetDiskInfo test FAIL!! ret(%d)"
   CCCIFS_TR_IT_LOCKFAT_ERR "[CCCI_FS] MD_FS_LockFAT test FAIL!! ret(%d)"
   CCCIFS_TR_IT_UNLOCKALL_ERR "[CCCI_FS] MD_FS_UnlockAll test FAIL!! ret(%d)"
   CCCIFS_TR_IT_CLRDFLAG_ERR "[CCCI_FS] MD_FS_ClearDiskFlag test FAIL!! ret(%d)"
   CCCIFS_TR_IT_SETDFLAG_ERR "[CCCI_FS] MD_FS_SetDiskFlag test FAIL!! ret(%d)"
   CCCIFS_TR_IT_GETCSZ_ERR "[CCCI_FS] MD_FS_GetClusterSize test FAIL!! ret(%d)"
   CCCIFS_TR_IT_GET_DRV_ERR "[CCCI_FS] MD_FS_GetDrive test FAIL!! ret(%d)"

   CCCIFS_TR_IT_OTP_READ_ERR "[CCCI_FS] MD_FS_OTPRead test FAIL!! ret(%d)"
   CCCIFS_TR_IT_OTP_WRITE_ERR "[CCCI_FS] MD_FS_OTPWrite test FAIL!! ret(%d)"
   CCCIFS_TR_IT_OTP_LEN_ERR "[CCCI_FS] MD_FS_OTPQueryLength test FAIL!! ret(%d)"
   CCCIFS_TR_IT_OTP_LOCK_ERR "[CCCI_FS] MD_FS_OTPLock test FAIL!! ret(%d)"

   CCCIFS_TR_IT_CREATE_FILE_FF_ERR "[CCCI_FS] cccifs_it_find_op create CCCI_FS_IT_FILE_A_LV2 FAIL!! ret(%d)"
   CCCIFS_TR_IT_FF_ERR "[CCCI_FS] cccifs_it_find_op MD_FS_FindFirst FAIL!! ret(%d)"
   CCCIFS_TR_IT_FN_ERR "[CCCI_FS] cccifs_it_find_op MD_FS_FindNext FAIL!! ret(%d)"
   CCCIFS_TR_IT_FC_ERR "[CCCI_FS] cccifs_it_find_op MD_FS_FindNext FAIL!! ret(%d)"

   CCCIFS_TR_IT_FMISC_CREATE_FILE_ERR "[CCCI_FS] cccifs_it_file_path_op open CCCI_FS_IT_FILE_A FAIL!! ret(%d)"
   CCCIFS_TR_IT_FMISC_GSZ_ERR "[CCCI_FS] cccifs_it_file_path_op MD_FS_GetFileSize FAIL!! ret(%d)"
   CCCIFS_TR_IT_FMISC_GFA_ERR "[CCCI_FS] cccifs_it_file_path_op MD_FS_GetAttributes FAIL!! ret(%d)"
   CCCIFS_TR_IT_FMISC_FSC_ERR "[CCCI_FS] cccifs_it_file_path_op MD_FS_Count FAIL!! ret(%d)"
   CCCIFS_TR_IT_FMISC_RENAME_ERR "[CCCI_FS] cccifs_it_file_path_op MD_FS_Rename FAIL!! ret(%d)"
   CCCIFS_TR_IT_FMISC_RNCREATE_ERR "[CCCI_FS] cccifs_it_file_path_op rename open new file FAIL!! ret(%d)"
   CCCIFS_TR_IT_FMISC_READ_ERR "[CCCI_FS] cccifs_it_file_path_op MD_FS_Read Rename FAIL!! ret(%d)"
   CCCIFS_TR_IT_FMISC_READRLT_ERR "[CCCI_FS] cccifs_it_file_path_op MD_FS_Read Rename result FAIL!! ret(%d)"

   CCCIFS_TR_IT_FMISC_MV_ERR "[CCCI_FS] cccifs_it_file_path_op MD_FS_Move FAIL!! ret(%d)"
   CCCIFS_TR_IT_FMISC_MVCREATE_ERR "[CCCI_FS] cccifs_it_file_path_op move open new file FAIL!! ret(%d)"
   CCCIFS_TR_IT_FMISC_READMV_ERR "[CCCI_FS] cccifs_it_file_path_op MD_FS_Read move FAIL!! ret(%d)"
   CCCIFS_TR_IT_FMISC_READRLTMV_ERR "[CCCI_FS] cccifs_it_file_path_op MD_FS_Read result move FAIL!! ret(%d)"

   CCCIFS_TR_IT_FMISC_DELF_ERR "[CCCI_FS] cccifs_it_file_path_op MD_FS_Delete FAIL!! ret(%d)"


   CCCIFS_TR_IT_READ_CREATE_FILE_16K_ERR "[CCCI_FS] cccifs_it_16kio_process create CCCI_FS_MAX_IO_16K FAIL!! ret(%d)"
   CCCIFS_TR_IT_WRITE_FILE_16K_ERR "[CCCI_FS] cccifs_it_16kio_process write CCCI_FS_MAX_IO_16K FAIL!! ret(%d)"
   CCCIFS_TR_IT_SEEK_FILE_16K_ERR "[CCCI_FS] cccifs_it_16kio_process seek FAIL!! ret(%d)"
   CCCIFS_TR_IT_READ_FILE_16K_ERR "[CCCI_FS] cccifs_it_16kio_process MD_FS_Read FAIL!! ret(%d)"
   CCCIFS_TR_IT_READ_RESULT_16K_ERR "[CCCI_FS] cccifs_it_16kio_process result comparing FAIL!! ret(%d)"
   CCCIFS_TR_IT_16K_PASS "[CCCI_FS] cccifs_it_16kio_process PASS!!!!! "

   CCCIFS_TR_OP_TIME "[CCCI_FS] CCCI_FS_OP_Wrapper idx(%d) time(%dms) (%dqbit) "

END_MODULE_MSG
# 50 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./middleware/hif/cccidev/ccci_ccmni/include/ccmni_trace.h" 1
# 108 "./middleware/hif/cccidev/ccci_ccmni/include/ccmni_trace.h"
START_MODULE_MSG MOD_CCMNI 20

    CCMNI_TR_SESSION_INIT_FATAL_ERROR "[CCMNI] session init fatal error. device id:(%d) err_code: (%d)"
    CCMNI_TR_UL_INVALID_IOR "[CCMNI] ccmni_ccci_ul_cb(): CCCI_CH (%d) invalid IOR(%X), first_gpd(%X) last_gpd(%X) => Possible RGPD leakage, ASSERT"


    CCMNI_TR_SM_UNHANDLED_MSG "[CCMNI] unhandled MSG (%x)!"
    CCMNI_TR_UL_INVALID_CCCI_CH "[CCMNI] CCCI_CH (%d) UL gets invalid ccci channel id (%d)!"
    CCMNI_TR_DATA_DUMMY_CH_TRIG "[CCMNI] ccmni ccci dummy ch receive data ch(%d)"
    CCMNI_TR_UL_RGPD_SUBMITTED_FAIL "[CCMNI] ccci_write_gpd with RGPD error. device id:(%d) ch(%d) err_code: (%d) {IOR, head, tail}={%x,%x,%x}"
    CCMNI_TR_UL_FREE_INVALID_GPD "[CCMNI] ccmni_ccci_ul_cb(): CCCI_CH (%d) free invalid GPD: %X, prev: %X, next: %X, first_gpd:%X, last_gpd:%X"
    CCMNI_TR_UL_DISCARD_IN_DISCONNECTED "[CCMNI] ccmni_ccci_ul_cb(): CCCI_CH (%d) DISCARD uplink GPD: %d in disconnected state!"
    CCMNI_TR_UL_NULL_IOR "[CCMNI] ccmni_ccci_ul_cb(): CCCI_CH (%d) receives NULL = *ior => drop it"
    CCMNI_TR_UL_ALLOC_GPD "[CCMNI] dev_id (%d) UL RGPD to allocate: %d, allocated: %d, in HIF: %d"
    CCMNI_TR_UL_RGPD_SUBMITTED "[CCMNI] ccci_write_gpd with RGPD success. device id:(%d) ch(%d) err_code: (%d) {IOR, head, tail}={%x,%x,%x}"


    CCMNI_TR_HMU_INIT "[CCMNI] ccmni_hmu_init dev_id (%d)"
    CCMNI_TR_HMU_PREINIT "[CCMNI] ccmni_hmu_pre_init dev_id (%d)"
    CCMNI_TR_HMU_POSTINIT "[CCMNI] ccmni_hmu_post_init dev_id (%d)"
    CCMNI_TR_HMU_DEINIT "[CCMNI] ccmni_hmu_deinit dev_id (%d)"
    CCMNI_TR_HMU_PREDEINIT "[CCMNI] ccmni_hmu_pre_deinit dev_id (%d)"
    CCMNI_TR_HMU_POSTDEINIT "[CCMNI] ccmni_hmu_post_deinit dev_id (%d)"
    CCMNI_TR_SM_VALID_EVENT "[CCMNI] dev_id (%d) current state(%d) -> event(%d) -> new state(%d)"
    CCMNI_TR_SM_INVALID_EVENT "[CCMNI] dev_id (%d) current state(%d) receive a unexpected event(%d)!"
    CCMNI_TR_RGPD_RELOAD_BY_INIT "[CCMNI] ccmni_reload_ul_gpds() called by ccmni_session_init dev_id (%d)"
    CCMNI_TR_UL_RCV_GPD "[CCMNI] CCCI_CH (%d) Receive UL RGPD: %d, in HIF: %d"
    CCMNI_TR_UL_EMPTY_IOR "[CCMNI] ccmni_ccci_ul_cb(): CCCI_CH (%d) receives empty IOR => drop it"


    CCMNI_TR_DL_CCCIH_TRACE "[CCMNI] ccmni_ipc_dl(): dev_id (%d) ccci_write_gpd cnt(%d) with CCCI HEADER (%x # %x # %x # %x)"
    CCMNI_DUMP_GPD_PTR "[CCMNI_DUMP] GPD=0x%x BD=0x%x BD=0x%x DATA=0x%x"
    CCMNI_DUMP_DATA_4HEX "[CCMNI_DUMP] %08x %08x %08x %08x"
    CCMNI_INDEX_ERROR "[CCMNI] SEQNO not match dev(%d) in(%x) expect(%x)"


    CCMNI_UT_TR_HMU_INIT "[CCMNI_UT] ccmni_hmu_init dev_id (%d)"
    CCMNI_UT_TR_HMU_DEINIT "[CCMNI_UT] ccmni_hmu_deinit dev_id (%d)"
    CCMNI_UT_TR_LINK_UP_REQ "[CCMNI_UT] LINK UP dev_id (%d)"
    CCMNI_UT_TR_LINK_DOWN_REQ "[CCMNI_UT] LINK DOWN dev_id (%d)"
    CCMNI_UT_FUNC_TRACE "[CCMNI_UT] ----%5d Function Begin----\n"
    CCMNI_UT_FUNC_PASS_TRACE "[CCMNI_UT] ^^^^%5d Function PASS ^^^^\n"
    CCMNI_UT_FUNC_STEP_TRACE "[CCMNI_UT] %5d test step %d \n"
    CCMNI_UT_ERR "[CCMNI_UT][ERROR] %d \n"
    CCMNI_PROFILING_RELOAD_TRACE "[CCMNI_PROFILING] Reload GPD = %d \n"
    CCMNI_PROFILING_RGPD_TRACE "[CCMNI_PROFILING] Receive GPD = %d \n"
    CCMNI_PROFILING_CYCLE_TRACE "[CCMNI_PROFILING] Cycle count = %d \n"
    CCMNI_UT_PURE_LB_MODE_TRACE "[CCMNI_UT] CCMNI_IT_PURE_LB channel=%d, numgpd =%d \n"



    CCMNI_TR_LINKUP_REQ_MSG "[CCMNI] Dev (%x) Linkup!"
    CCMNI_TR_LINKDOWN_REQ_MSG "[CCMNI] Dev (%x) Linkdown!"


    CCMNI_TR_IT_LB "[CCMNI][IT] ===>ccmni_ul2dl_loopback Dev (%x)"
    CCMNI_TR_IT_PING "[CCMNI][IT] ===>ccmni_it_ping Dev (%x)"
    CCMNI_TR_IT_UDP "[CCMNI][IT] ===>ccmni_it_udp Dev (%x)"
    CCMNI_TR_IT_RGPD_CNT "[CCMNI][IT] Dev (%x) Rx RGPD cnt (%d) BPS RGPD cnt (%d)"
    CCMNI_TR_IT_ICMP_SEQ "[CCMNI][IT] Dev (%x) ICMP echo seq. (%d)"
    CCMNI_TR_IT_UDP_SEQ "[CCMNI][IT] Dev (%x) UDP seq. (%d)"

    CCMNI_TR_PG_BW_ERR "[CCMNI_PG][IT] Request BW error (%d) treated as 150Mbps"
    CCMNI_TR_PG_LEN_ERR "[CCMNI_PG][IT] Request payload length error (%d) treated as 1500 Bytes"
    CCMNI_TR_PG_HD_ERR "[CCMNI_PG][IT] fatal error: **drop request** p_iph or p_udph is NULL"
    CCMNI_TR_PG_NO_BPS "[CCMNI_PG][IT] NO_BPS_GPD, skip Tx this time, consecutive skip number (%d)"
    CCMNI_TR_PG_NO_TGPD "[CCMNI_PG][IT] NO_TGPD, skip Tx this time, consecutive skip number (%d)"
    CCMNI_TR_PG_NOT_ENOUG_TGPD "[CCMNI_PG][IT] Cannot allocate enough TGPD (%d)/(%d)"
    CCMNI_TR_PG_NOT_ENOUG_BW "[CCMNI_PG][IT] Target BW too small ntgpd = (%d) set as (%d)"

    CCMNI_TR_IT_AT_DEV_ERR "[CCMNI][IT] Dev number = %d, AT command devid = %d"
    CCMNI_TR_IT_AT_MODE_ERR "[CCMNI][IT] MAX mode = %d, AT command mode = %d"
    CCMNI_TR_IT_AT_OP_ERR "[CCMNI][IT] Dev (%x) AT command op = %d"
    CCMNI_TR_IT_AT_OP_SET "[CCMNI][IT] Dev (%x) Set IT Mode = %d"
    CCMNI_TR_IT_AT_OP_READ "[CCMNI][IT] Dev (%x) Read IT Mode = %d"
    CCMNI_TR_IT_AT_INFO "[CCMNI][IT] ccmni_it_mode_switch devid = %d Mode = %d OP =%d"
    CCMNI_TR_IT_FUNC_TRACE "[CCMNI][IT] ----%5d Function Begin----\n"
    CCMNI_TR_IT_FUNC_PASS_TRACE "[CCMNI][IT] ^^^^%5d Function PASS ^^^^\n"
    CCMNI_TR_IT_PING_TRACE "[CCMNI][IT] ----ccmni_it_ip4_ping Function Begin----\n"
    CCMNI_TR_IT_PING_PASS_TRACE "[CCMNI][IT] ^^^^ccmni_it_ip4_ping Function PASS ^^^^\n"
    CCMNI_TR_IT_MS_TRACE "[CCMNI][IT] ----ccmni_process_mode_switch Function Begin----\n"
    CCMNI_TR_IT_MS_PASS_TRACE "[CCMNI][IT] ^^^^ccmni_process_mode_switch Function PASS ^^^^\n"
    CCMNI_TR_IT_RL_TRACE "[CCMNI][IT] ----ccmni_it_reload_rgpds Function Begin----\n"
    CCMNI_TR_IT_RL_PASS_TRACE "[CCMNI][IT] ^^^^ccmni_it_reload_rgpds Function PASS ^^^^\n"
END_MODULE_MSG
# 51 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./service/fs/common/include/fs_trc.h" 1
# 223 "./service/fs/common/include/fs_trc.h"
START_MODULE_MSG MOD_FS 20


   FS_API_FS_OPEN_S "[%Mmodule_type] FS_Open <- Caller: 0x%X, Flag: 0x%X, FileName:"
   FS_API_FS_OPEN_E "[%Mmodule_type] FS_Open -> Return: 0x%X"
   FS_API_FS_OPEN_E_TIME "[%Mmodule_type] FS_Open -> Return: 0x%X, Duration: %d us"
   FS_API_FS_OPEN_E_TIME_0 "[%Mmodule_type] FS_Open -> Return: 0x%X, Duration: 0 us"
   FS_API_FS_CLOSE_S "[%Mmodule_type] FS_Close <- FileHandle: 0x%X"
   FS_API_FS_CLOSE_E "[%Mmodule_type] FS_Close -> Return: %Mfs_error_enum, Duration: %d us"
   FS_API_FS_READ_S "[%Mmodule_type]    FS_Read <- File(SFN): %c%c%c%c%c%c%c%c.%c%c%c, Dev: %MFS_DEVICE_TYPE_ENUM, FileHandle: 0x%X, DataPtr: 0x%X, Length: %u"
   FS_API_FS_READ_E "[%Mmodule_type]    FS_Read -> Return: %Mfs_error_enum, Length: %u, Duration: %u us, Throughput: %u KB/s"
   FS_API_FS_WRITE_S "[%Mmodule_type]    FS_Write <- File(SFN): %c%c%c%c%c%c%c%c.%c%c%c, Dev: %MFS_DEVICE_TYPE_ENUM, FileHandle: 0x%X, DataPtr: 0x%X, Length: %d"
   FS_API_FS_WRITE_E "[%Mmodule_type]    FS_Write -> Return: %Mfs_error_enum, Length: %d, Duration: %u us, Throughput: %d KB/s"
   FS_API_FS_SEEK_S "[%Mmodule_type]    FS_Seek <- FileHandle: 0x%X, Offset: %d, Whence: %MFS_SEEK_POS_ENUM"
   FS_API_FS_SEEK_E "[%Mmodule_type]    FS_Seek -> Return: %d, Duration: %d us"
   FS_API_FS_SEEKLARGEFILE_S "[%Mmodule_type]    FS_SeekLargeFile <- FileHandle: 0x%X, Offset: 0x%X (%d), Whence: %MFS_SEEK_POS_ENUM"
   FS_API_FS_SEEKLARGEFILE_E "[%Mmodule_type]    FS_SeekLargeFile -> Return: %d"
   FS_API_FS_COMMIT_S "[%Mmodule_type]    FS_Commit <- File(SFN): %c%c%c%c%c%c%c%c.%c%c%c, Dev: %MFS_DEVICE_TYPE_ENUM, FileHandle: 0x%X"
   FS_API_FS_COMMIT_E "[%Mmodule_type]    FS_Commit -> Return: %Mfs_error_enum"
   FS_API_FS_GETFILESIZE_S "[%Mmodule_type]    FS_GetFileSize <- FileHandle: 0x%X"
   FS_API_FS_GETFILESIZE_E "[%Mmodule_type]    FS_GetFileSize -> Return (Size): %u"
   FS_API_FS_DELETEEX_S "[%Mmodule_type] FS_DeleteEx <-"
   FS_API_FS_DELETEEX_E "[%Mmodule_type] FS_DeleteEx -> Return: %Mfs_error_enum"
   FS_API_FS_DELETE_S "[%Mmodule_type]    FS_Delete <-"
   FS_API_FS_DELETE_E "[%Mmodule_type]    FS_Delete -> Return: %Mfs_error_enum"
   FS_API_FS_CREATEDIR_S "[%Mmodule_type] FS_CreateDir <-"
   FS_API_FS_CREATEDIR_E "[%Mmodule_type] FS_CreateDir -> Return: %Mfs_error_enum"
   FS_API_FS_GETCLUSTERSIZE_S "[%Mmodule_type]    FS_GetClusterSize <- Drive Index: %d"
   FS_API_FS_GETCLUSTERSIZE_E "[%Mmodule_type]    FS_GetClusterSize -> Return (Size): %d"
   FS_API_FS_SHUTDOWN_S "[%Mmodule_type]    FS_ShutDown"
   FS_API_FS_CLEARDISKFLAG_S "[%Mmodule_type]    FS_ClearDiskFlag"
   FS_API_FS_UNLOCKALL_S "[%Mmodule_type]    FS_UnlockAll"
   FS_API_FS_GETDISKINFO_S "[%Mmodule_type] FS_GetDiskInfo <- DriveName: %c, Flag: 0x%X"
   FS_API_FS_GETDISKINFO_E "[%Mmodule_type] FS_GetDiskInfo -> Return: %Mfs_error_enum"
   FS_API_FS_GETDISKINFO_E_DEV "[%Mmodule_type] FS_GetDiskInfo -> Return: %Mfs_error_enum, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_API_FS_OPENHINT_S "[%Mmodule_type] FS_OpenHint <- Caller: 0x%X, Flag: 0x%X, FileName:"
   FS_API_FS_OPENHINT_S_HINT "[%Mmodule_type] FS_OpenHint <- Caller: 0x%X, Flag: 0x%X, Cluster: %d, Index: %d, FileName:"
   FS_API_FS_OPENHINT_E "[%Mmodule_type] FS_OpenHint -> Return: 0x%X"
   FS_API_FS_FINDFIRST_S "[%Mmodule_type] FS_FindFirst <- Caller: 0x%X, Attr: 0x%X, AttrMask: 0x%X, MaxLength: %d"
   FS_API_FS_FINDFIRST_E "[%Mmodule_type] FS_FindFirst -> FileHandle: 0x%X"
   FS_API_FS_FINDFIRST_E_INFO "[%Mmodule_type] FS_FindFirst -> FileHandle: 0x%X, Attr: 0x%X, Reserved: 0x%X"
   FS_API_FS_FINDNEXT_S "[%Mmodule_type] FS_FindNext <- FileHandle: 0x%X, MaxLength: %d"
   FS_API_FS_FINDNEXT_E "[%Mmodule_type] FS_FindNext ->"
   FS_API_FS_FINDNEXT_E_INFO "[%Mmodule_type] FS_FindNext -> Attr: 0x%X, Reserved: 0x%X"
   FS_API_FS_FINDCLOSE_S "[%Mmodule_type] FS_FindClose <- FileHandle: 0x%X"
   FS_API_FS_GETDEVSTATUS_S_DRIVE "[%Mmodule_type] FS_GetDevStatus <- Target: %c, Type: %MFS_GET_DEV_STATUS_ENUM"
   FS_API_FS_GETDEVSTATUS_S_TYPE "[%Mmodule_type] FS_GetDevStatus <- Target: %d, Type: %MFS_GET_DEV_STATUS_ENUM"
   FS_API_FS_GETDEVSTATUS_E "[%Mmodule_type] FS_GetDevStatus -> Result: %Mfs_error_enum"
   FS_API_FS_XDELETEEX_S "[%Mmodule_type] FS_XDeleteEx <- Flag: 0x%X, FolderName:"
   FS_API_FS_XDELETEEX_E "[%Mmodule_type] FS_XDeleteEx -> Return: %Mfs_error_enum"
   FS_API_FS_GETDRIVE_S "[%Mmodule_type] FS_GetDrive <- Type: 0x%X, Serial: %d, AltMask: 0x%X"
   FS_API_FS_GETDRIVE_E "[%Mmodule_type] FS_GetDrive -> Return: %c"
   FS_API_FS_GETFILEPOSITION_S "[%Mmodule_type]    FS_GetFilePosition <- FileHandle: 0x%X"
   FS_API_FS_GETFILEPOSITION_E "[%Mmodule_type]    FS_GetFilePosition -> Position: %d"
   FS_API_FS_GETATTRIBUTES_S "[%Mmodule_type] FS_GetAttributes <-"
   FS_API_FS_GETATTRIBUTES_E "[%Mmodule_type] FS_GetAttributes -> Attr: 0x%X"
   FS_API_FS_GETFILEINFO_S "[%Mmodule_type] FS_GetFileInfo <- FileHandle: 0x%X, FileInfo: 0x%X"
   FS_API_FS_GETFILEINFO_E "[%Mmodule_type] FS_GetFileInfo ->"
   FS_API_FS_GETDEVTYPE_S "[%Mmodule_type] FS_GetDevType <-"
   FS_API_FS_GETDEVTYPE_E "[%Mmodule_type] FS_GetDevType -> Type: %d"
   FS_API_FS_SETSEEKHINT_S "[%Mmodule_type]    FS_SetSeekHint <- FileHandle: 0x%X, HintNum: %d"
   FS_API_FS_SETSEEKHINT_E "[%Mmodule_type]    FS_SetSeekHint -> Return: %Mfs_error_enum"
   FS_API_FS_SETSEEKHINTEX_S "[%Mmodule_type]    FS_SetSeekHintEx <- FileHandle: 0x%X, HintCount: %d, Flag: 0x%X, Buffer: 0x%X"
   FS_API_FS_SETSEEKHINTEX_E "[%Mmodule_type]    FS_SetSeekHintEx -> Return: %Mfs_error_enum"
   FS_API_FS_ENABLESMARTSEEK_S "[%Mmodule_type] FS_EnableSmartSeek <- Option: %Mfs_error_enum"
   FS_API_FS_TRUNCATE_S "[%Mmodule_type]    FS_Truncate <- FileHandle: 0x%X"
   FS_API_FS_TRUNCATE_E "[%Mmodule_type]    FS_Truncate ->"
   FS_API_FS_RENAME_S_OLDNAME "[%Mmodule_type] FS_Rename <- Old Name:"
   FS_API_FS_RENAME_S_NEWNAME "[%Mmodule_type] FS_Rename <- New Name:"
   FS_API_FS_RENAME_E "[%Mmodule_type] FS_Rename -> Return: %Mfs_error_enum"
   FS_API_FS_IOCTRL_S "[%Mmodule_type] FS_IOCtrl <- DriveName: %c, Action: %d"
   FS_API_FS_IOCTRL_E "[%Mmodule_type] FS_IOCtrl <- Result: %Mfs_error_enum"
   FS_API_FS_COMPACTDIR_S "[%Mmodule_type] FS_CompactDir <- Flags: %d, DirName:"
   FS_API_FS_COMPACTDIR_E "[%Mmodule_type] FS_CompactDir -> Result: %Mfs_error_enum"
   FS_API_FS_CLOSEALL_S "[%Mmodule_type] FS_CloseAll <-"
   FS_API_FS_CLOSEALL_E "[%Mmodule_type] FS_CloseAll ->"
   FS_API_FS_RELEASEFH_S_TASKID "[%Mmodule_type] FS_ReleaseFH <- TaskID: 0x%X"
   FS_API_FS_RELEASEFH_S_ALLTASK "[%Mmodule_type] FS_ReleaseFH <- TaskID: ALL"
   FS_API_FS_RELEASEFH_E "[%Mmodule_type] FS_ReleaseFH -> Return: 0"
   FS_API_FS_ABORT_S "[%Mmodule_type]    FS_Abort <- ActionHandle: 0x%X"
   FS_API_FS_ABORT_E "[%Mmodule_type]    FS_Abort -> Return: 0"
   FS_API_FS_PARSEFH_S "[%Mmodule_type]    FS_ParseFH <- FileHandle: 0x%X"
   FS_API_FS_PARSEFH_E "[%Mmodule_type]    FS_ParseFH -> Return: %d"
   FS_API_FS_SETFILETIME_S "[%Mmodule_type]    FS_SetFileTime <- FileHandle: 0x%X, Time: 0x%X"
   FS_API_FS_SETFILETIME_E "[%Mmodule_type]    FS_SetFileTime -> Return: %Mfs_error_enum"
   FS_API_FS_PSEUDOMERGE_S_FILE1 "[%Mmodule_type] FS_PseudoMerge <- File1:"
   FS_API_FS_PSEUDOMERGE_S_FILE2 "[%Mmodule_type] FS_PseudoMerge <- File2:"
   FS_API_FS_PSEUDOMERGE_E "[%Mmodule_type] FS_PseudoMerge -> Return: %Mfs_error_enum"
   FS_API_FS_CHECKFILE_S "[%Mmodule_type] FS_CheckFile <- FileName:"
   FS_API_FS_CHECKFILE_E "[%Mmodule_type] FS_CheckFile -> Return: %Mfs_error_enum"
   FS_API_FS_GETCURRENTDIR_S "[%Mmodule_type] FS_GetCurrentDir <- MaxLength: %d"
   FS_API_FS_GETCURRENTDIR_E "[%Mmodule_type] FS_GetCurrentDir -> Return: %Mfs_error_enum, CurrDir:"
   FS_API_FS_GETCURRENTDIRBYDRIVE_S "[%Mmodule_type] FS_GetCurrentDirByDrive <- Drive: %c, MaxLength: %d"
   FS_API_FS_GETCURRENTDIRBYDRIVE_E "[%Mmodule_type] FS_GetCurrentDirByDrive -> Return: %Mfs_error_enum, CurrDir:"
   FS_API_FS_SETCURRENTDIR_S "[%Mmodule_type] FS_SetCurrentDir <- DirName:"
   FS_API_FS_SETCURRENTDIR_E "[%Mmodule_type] FS_SetCurrentDir -> Return: %Mfs_error_enum"
   FS_API_FS_EXTEND_S "[%Mmodule_type]    FS_Extend <- FileHandle: 0x%X, Length: %d"
   FS_API_FS_EXTEND_E "[%Mmodule_type]    FS_Extend -> Return: %Mfs_error_enum"
   FS_API_FS_MAKEFILENAME_S "[%Mmodule_type]    FS_MakeFileName <- FileHandle: 0x%X, Flag: %d, MaxLength: %d"
   FS_API_FS_MAKEFILENAME_E "[%Mmodule_type]    FS_MakeFileName -> Return: %d, FileName:"
   FS_API_FS_FINDFIRSTN_S "[%Mmodule_type] FS_FindFirstN <- Caller: 0x%X, PatternNum: %d, MaxLength: %d, EntryIndex: %d, Flag: 0x%X, Pattern:"
   FS_API_FS_FINDFIRSTN_E "[%Mmodule_type] FS_FindFirstN -> Return: 0x%X, FileName:"
   FS_API_FS_FINDFIRSTN_E_HINT "[%Mmodule_type] FS_FindFirstN -> Attr: %X, Cluster: %d, Index: %d, FileName:"
   FS_API_FS_FINDNEXTN_S "[%Mmodule_type] FS_FindNextN <- FileHandle: 0x%X, PatternNum: %d, MaxLength: %d, Flag: 0x%X"
   FS_API_FS_FINDNEXTN_E "[%Mmodule_type] FS_FindNextN -> Attr: 0x%X, FileName:"
   FS_API_FS_FINDNEXTN_E_HINT "[%Mmodule_type] FS_FindNextN -> Attr: 0x%X, Cluster: %d, Index: %d, FileName:"
   FS_API_FS_XFINDRESET_S "[%Mmodule_type] FS_XFindReset <- PatternNum: %d, Flag: 0x%X, Pattern:"
   FS_API_FS_XFINDRESET_E "[%Mmodule_type] FS_XFindReset -> Count: %d"
   FS_API_FS_XFINDSTART_S "[%Mmodule_type] FS_XFindStart <- Index: %d, MaxLength: %d, Flag: 0x%X, Pattern:"
   FS_API_FS_XFINDSTART_E_INFO "[%Mmodule_type] FS_XFindStart -> Attr: 0x%X, FileName:"
   FS_API_FS_XFINDSTART_E "[%Mmodule_type] FS_XFindStart -> FileName:"
   FS_API_FS_XFINDCLOSE_S "[%Mmodule_type] FS_XFindClose <- Position: 0x%X"
   FS_API_FS_XFINDCLOSE_E "[%Mmodule_type] FS_XFindClose -> Return: 0"
   FS_API_FS_GETPARTITIONINFO_S "[%Mmodule_type] FS_GetPartitionInfo <- DriveName: %c, PartitionInfo: 0x%X"
   FS_API_FS_GETPARTITIONINFO_E "[%Mmodule_type] FS_GetPartitionInfo -> Return: %Mfs_error_enum"
   FS_API_FS_COMMITALL_S "[%Mmodule_type] FS_CommitAll <- DriveName: %c"
   FS_API_FS_COMMITALL_E "[%Mmodule_type] FS_CommitAll -> Return: %Mfs_error_enum"
   FS_API_FS_MAPPINGDRIVE_S "[%Mmodule_type] FS_MappingDrive <- Old Drive: %c, New Drive: %c"
   FS_API_FS_MAPPINGDRIVE_E "[%Mmodule_type] FS_MappingDrive <- Return: %Mfs_error_enum"
   FS_API_FS_GENERALFORMAT_S "[%Mmodule_type] FS_GeneralFormat <- Caller: 0x%X, DriveName: %c, Level: 0x%X"
   FS_API_FS_GENERALFORMAT_E "[%Mmodule_type] FS_GeneralFormat <- Return: %d"
   FS_API_FS_QMGETFREE_S "[%Mmodule_type] FS_QmGetFree <- Path:"
   FS_API_FS_QMGETFREE_E "[%Mmodule_type] FS_QmGetFree -> Return: %d"
   FS_API_FS_CHECKDISKFLAG_S "[%Mmodule_type] FS_CheckDiskFlag <-"
   FS_API_FS_CHECKDISKFLAG_E "[%Mmodule_type] FS_CheckDiskFlag ->"
   FS_API_FS_LOCKFAT_S "[%Mmodule_type] FS_LockFAT <-"
   FS_API_FS_LOCKFAT_E "[%Mmodule_type] FS_LockFAT -> Return: %Mfs_error_enum"
   FS_API_FS_TESTMSDC_S "[%Mmodule_type] FS_TestMSDC <- SlotID: 0x%X"
   FS_API_FS_TESTMSDC_S_DRIVELIST "[%Mmodule_type] FS_TestMSDC <- SlotID: 0x%X, DriveList: 0x%X, DriveNum: %d"
   FS_API_FS_TESTMSDC_E "[%Mmodule_type] FS_TestMSDC -> Return: %Mfs_error_enum"
   FS_API_FS_TESTMSDC_E_DRIVELIST "[%Mmodule_type] FS_TestMSDC -> Return, %Mfs_error_enum, DriveNum: %d"
   FS_API_FS_CLOSEMSDC_S "[%Mmodule_type] FS_CloseMSDC <- DriveLetter: %c, Mode: 0x%X"
   FS_API_FS_CLOSEMSDC_E "[%Mmodule_type] FS_CloseMSDC -> Result: %Mfs_error_enum"
   FS_API_FS_SWITCHDRIVEMODE_S "[%Mmodule_type] FS_SwitchDriveMode <- DriveLetter: %c, Mode: 0x%X"
   FS_API_FS_SWITCHDRIVEMODE_E "[%Mmodule_type] FS_SwitchDriveMode -> Result: %Mfs_error_enum"
   FS_API_FS_GENVIRTUALFILENAME_S "[%Mmodule_type]    FS_GenVirtualFileName <- FileHandle: 0x%X, VFBeginOffset: %d, VFValidLength: %d, BufLength: %d"
   FS_API_FS_GENVIRTUALFILENAME_E "[%Mmodule_type]    FS_GenVirtualFileName -> Result: %Mfs_error_enum, VFileName:"
   FS_API_FS_CONFIGEXTDEVICE_S "[%Mmodule_type] FS_ConfigExtDevice <- Action: 0x%X, DrvFuncs: %X, Slots: %d"
   FS_API_FS_CONFIGEXTDEVICE_E "[%Mmodule_type] FS_ConfigExtDevice -> Result: %Mfs_error_enum, VFileName:"
   FS_API_FS_CHECKDRIVE_S "[%Mmodule_type] FS_CheckDrive <- DriveLetter: %c, CheckBuffer: 0x%X, BufferSize: %d"
   FS_API_FS_CHECKDRIVE_E "[%Mmodule_type] FS_CheckDrive -> Result: %Mfs_error_enum"
   FS_API_FS_SETDIRCACHE_S "[%Mmodule_type]    FS_SetDirCache <- FileHandle: 0x%X, NewValue: 0x%X"
   FS_API_FS_SETDIRCACHE_E "[%Mmodule_type]    FS_SetDirCache -> Result: 0"
   FS_API_FS_GETDIRCACHE_S "[%Mmodule_type]    FS_GetDirCache <- FileHandle: 0x%X"
   FS_API_FS_GETDIRCACHE_E "[%Mmodule_type]    FS_GetDirCache -> Result: %Mfs_error_enum, Value: 0x%X"
   FS_API_FS_EXPIREDIRCACHE_S "[%Mmodule_type]    FS_ExpireDirCache <- FileHandle: 0x%X"
   FS_API_FS_EXPIREDIRCACHE_E "[%Mmodule_type]    FS_ExpireDirCache -> Return: 0"
   FS_API_FS_GETFOLDERSIZE_S "[%Mmodule_type] FS_GetFolderSize <- Flag: 0x%X, RecStack: 0x%X, StackSize: %d, Path:"
   FS_API_FS_GETFOLDERSIZE_E "[%Mmodule_type] FS_GetFolderSize -> Return: %d"
   FS_API_FS_MOVE_S_SRCFILE "[%Mmodule_type] FS_Move <- Caller: 0x%X, Src File:"
   FS_API_FS_MOVE_S_DSTFILE "[%Mmodule_type] FS_Move <- Dst File:"
   FS_API_FS_MOVE_E "[%Mmodule_type] FS_Move -> Return: %Mfs_error_enum"
   FS_API_FS_GETFIRSTCLUSTER_S "[%Mmodule_type]    FS_GetFirstCluster <- FileHandle: 0x%X"
   FS_API_FS_GETFIRSTCLUSTER_E "[%Mmodule_type]    FS_GetFirstCluster -> Return: %d, Cluster: %d"
   FS_API_FS_OTPREAD_S "[%Mmodule_type] FS_OTPRead <- DevType: 0x%X, Offset: %u, BufferPtr: 0x%X, Length: %u"
   FS_API_FS_OTPREAD_E "[%Mmodule_type] FS_OTPRead -> Return: %Mfs_error_enum"
   FS_API_FS_OTPWRITE_S "[%Mmodule_type] FS_OTPWrite <- DevType: 0x%X, Offset: %u, BufferPtr: 0x%X, Length: %u"
   FS_API_FS_OTPWRITE_E "[%Mmodule_type] FS_OTPWrite -> Return: %Mfs_error_enum"
   FS_API_FS_OTPLOCK_S "[%Mmodule_type] FS_OTPLock <- DevType: 0x%X"
   FS_API_FS_OTPLOCK_E "[%Mmodule_type] FS_OTPLock -> Return: %Mfs_error_enum"
   FS_API_FS_OTPQUERYLENGTH_S "[%Mmodule_type] FS_OTPQueryLength <- DevType: 0x%X"
   FS_API_FS_OTPQUERYLENGTH_E "[%Mmodule_type] FS_OTPQueryLength -> Return: %Mfs_error_enum, Length: %d"
   FS_API_FS_SWEEPDEVICE_S "[%Mmodule_type] FS_SweepDevice <- DevType: 0x%X"
   FS_API_FS_SWEEPDEVICE_E_DONE "[%Mmodule_type] FS_SweepDevice -> Return: 0 (Done)"
   FS_API_FS_SWEEPDEVICE_E_RETRY "[%Mmodule_type] FS_SweepDevice -> Return: -41 (FS_CHECKDISK_RETRY)"
   FS_API_FS_COUNTUSEDFH_S "[%Mmodule_type] FS_CountUsedFH <- Flag: %d"
   FS_API_FS_COUNTUSEDFH_E "[%Mmodule_type] FS_CountUsedFH -> Return: %d, Length: %d"
   FS_API_FS_GETDEVPARTITIONS_S_DRIVE "[%Mmodule_type] FS_GetDevPartitions <- DriveLetter: %c"
   FS_API_FS_GETDEVPARTITIONS_S_TYPE "[%Mmodule_type] FS_GetDevPartitions <- DeviceType: %d, Type: %MFS_GET_DEV_STATUS_ENUM"
   FS_API_FS_GETDEVPARTITIONS_E "[%Mmodule_type] FS_GetDevPartitions -> Result: %d"
   FS_API_FS_RECOVERDEVICE_S "[%Mmodule_type] FS_RecoverDevice <- DeviceType: %MFS_DEVICE_TYPE_ENUM"
   FS_API_FS_RECOVERDEVICE_E "[%Mmodule_type] FS_RecoverDevice -> Return: %Mfs_error_enum"
   FS_API_FS_SETVOLUMELABEL_S "[%Mmodule_type] FS_SetVolumeLabel <- DriveLetter: %c, Label:"
   FS_API_FS_SETVOLUMELABEL_E "[%Mmodule_type] FS_SetVolumeLabel -> Return: %Mfs_error_enum"
   FS_API_FS_REMOVEDIR_S "[%Mmodule_type] FS_RemoveDir <- DirName:"
   FS_API_FS_REMOVEDIR_E "[%Mmodule_type] FS_RemoveDir -> Return: %Mfs_error_enum"
   FS_API_FS_SETATTRIBUTES_S "[%Mmodule_type] FS_SetAttributes <- Attr: 0x%X, FileName:"
   FS_API_FS_SETATTRIBUTES_E "[%Mmodule_type] FS_SetAttributes -> Return: %Mfs_error_enum"
   FS_API_FS_COUNT_S "[%Mmodule_type] FS_Count <- Flag: 0x%X, RecStack: 0x%X, StackSize: %u, FullPath:"
   FS_API_FS_COUNT_E "[%Mmodule_type] FS_Count -> Return: %d"
   FS_API_FS_MAKEFILEPATHBYHINT_S "[%Mmodule_type] FS_MakeFilePathByHint <- DriveLetter: %c, DirCluster: %u, DirIndex: %u, MaxLength: %d"
   FS_API_FS_MAKEFILEPATHBYHINT_E "[%Mmodule_type] FS_MakeFilePathByHint -> Result: %Mfs_error_enum, FileName:"
   FS_API_FS_OPENFILEPATHBYHINT_S "[%Mmodule_type] FS_OpenFileByHint <- Caller: 0x%X, DriveLetter: %c, DirCluster: %u, DirIndex: %u, Flags: 0x%X"
   FS_API_FS_OPENFILEPATHBYHINT_E "[%Mmodule_type] FS_OpenFileByHint -> FileHandle: 0x%X"
   FS_API_FS_DELETEBYHINT_S "[%Mmodule_type] FS_DeleteByHint <- DriveLetter: %c, DirCluster: %u, DirIndex: %u"
   FS_API_FS_DELETEBYHINT_E "[%Mmodule_type] FS_DeleteByHint -> FileHandle: 0x%X"
   FS_API_FS_GETATTRIBUTESBYHINT_S "[%Mmodule_type] FS_GetAttributesByHint <- DriveLetter: %c, DirCluster: %u, DirIndex: %u"
   FS_API_FS_GETATTRIBUTESBYHINT_E "[%Mmodule_type] FS_GetAttributesByHint -> Attr: 0x%X"
   FS_API_FS_SETATTRIBUTESBYHINT_S "[%Mmodule_type] FS_SetAttributesByHint <- DriveLetter: %c, DirCluster: %u, DirIndex: %u, Attr: 0x%X"
   FS_API_FS_SETATTRIBUTESBYHINT_E "[%Mmodule_type] FS_SetAttributesByHint -> Attr: 0x%X"
   FS_API_FS_HINTGETPARENT_S "[%Mmodule_type] FS_HintGetParent <- DriveLetter: %c, DirCluster: %u, DirIndex: %u"
   FS_API_FS_HINTGETPARENT_E "[%Mmodule_type] FS_HintGetParent -> Return: %d, ParentCluster: %u, ParentCluster: %u"
   FS_API_FS_DUMPFHTABLE_S "[%Mmodule_type] FS_DumpFHTable <-"
   FS_API_FS_DUMPFHTABLE_E "[%Mmodule_type] FS_DumpFHTable ->"
   FS_API_FS_DIRCTRL_E "[%Mmodule_type]    FS_DirCtrl -> Handle: 0x%X, Action: %Mfs_dirctrl_action_enum, Data: %u"
   FS_API_FS_CHECKFILENAME_E "[%Mmodule_type] FS_CheckFileName -> Path: "
   FS_API_FS_CHECKVOLUMELABEL_E "[%Mmodule_type] FS_CheckVolumeLabel -> Label: "

    FS_API_FS_ASYNC_OPEN_S "[%Mmodule_type] fs_async_open <- Priority: %Mfs_prioity_enum, Flag: 0x%X, FileName:"
    FS_API_FS_ASYNC_OPEN_E "[%Mmodule_type] fs_async_open -> Return: %d"
    FS_API_FS_ASYNC_READ_S "[%Mmodule_type]    fs_async_read <- File(SFN): %c%c%c%c%c%c%c%c.%c%c%c, Dev: %MFS_DEVICE_TYPE_ENUM Priority: %Mfs_prioity_enum, FileHandle: 0x%X, DataPtr: 0x%X, Length: %u"
    FS_API_FS_ASYNC_READ_E "[%Mmodule_type]    fs_async_read -> Return: %d"
    FS_API_FS_ASYNC_WRITE_S "[%Mmodule_type]    fs_async_write <- File(SFN): %c%c%c%c%c%c%c%c.%c%c%c, Dev: %MFS_DEVICE_TYPE_ENUM, Priority: %Mfs_prioity_enum, FileHandle: 0x%X, DataPtr: 0x%X, Length: %d"
    FS_API_FS_ASYNC_WRITE_E "[%Mmodule_type]    fs_async_write -> Return: %d"
    FS_API_FS_ASYNC_SEEK_S "[%Mmodule_type]    fs_async_seek <- Priority: %Mfs_prioity_enum, FileHandle: 0x%X, Offset: %d, Whence: %MFS_SEEK_POS_ENUM"
    FS_API_FS_ASYNC_SEEK_E "[%Mmodule_type]    fs_async_seek -> Return: %d"
    FS_API_FS_ASYNC_DELETE_S "[%Mmodule_type] fs_async_delete <- Priority: %Mfs_prioity_enum, FileName: "
    FS_API_FS_ASYNC_DELETE_E "[%Mmodule_type] fs_async_delete -> Return: %d"
    FS_API_FS_ASYNC_FINDFIRST_S "[%Mmodule_type] fs_async_find_first <- Priority: %Mfs_prioity_enum, Attr: 0x%X, AttrMask: 0x%X, MaxLength: %d"
    FS_API_FS_ASYNC_FINDFIRST_E "[%Mmodule_type] fs_async_find_first -> Return: %d"
    FS_API_FS_ASYNC_FINDFIRSTN_S "[%Mmodule_type] fs_async_find_first_n <- Priority: %Mfs_prioity_enum, MaxLength: %d, EntryIndex: %d, Flag: 0x%X, Pattern:"
    FS_API_FS_ASYNC_FINDFIRSTN_E "[%Mmodule_type] fs_async_find_first_n -> Return: %d"
    FS_API_FS_ASYNC_GETFOLDERSIZE_S "[%Mmodule_type] fs_async_get_folder_size <- Priority: %Mfs_prioity_enum, Flag: 0x%X, RecStack: 0x%X, StackSize: %d, Path:"
    FS_API_FS_ASYNC_GETFOLDERSIZE_E "[%Mmodule_type] fs_async_get_folder_size -> Return: 0"
    FS_API_FS_ASYNC_ABORT_S "[%Mmodule_type] fs_async_abort <- JobID: %d"


    FS_API_FS_ASYNC_JOB_REGISTER "[%Mmodule_type] [AsynJob] fs_async_int_register_job: <Register>: JobID: %d, JobPtr: 0x%X, State: %Mfs_job_state_enum, FS_API: %Mfs_api_enum"
    FS_API_FS_ASYNC_JOB_DISPATCH_START "[%Mmodule_type] [AsynJob] fs_job_dipatch: <Start>: JobID: %d, JobPtr: 0x%X, State: %Mfs_job_state_enum, FS_API: %Mfs_api_enum"
    FS_API_FS_ASYNC_JOB_DISPATCH_FINISH "[%Mmodule_type] [AsynJob] fs_job_dipatch: <Finished>: JobID: %d, JobPtr: 0x%X, State: %Mfs_job_state_enum, FS_API: %Mfs_api_enum"
    FS_API_FS_ASYNC_JOB_DISPATCH_ABORT "[%Mmodule_type] [AsynJob] fs_job_dipatch: <Aborted>: JobID: %d, JobPtr: 0x%X, State: %Mfs_job_state_enum, FS_API: %Mfs_api_enum"
    FS_API_FS_ASYNC_JOB_INSERT_S "[%Mmodule_type] [AsynJob] fs_job_insert <- JobID: %d, JobPtr: 0x%X"
    FS_API_FS_ASYNC_JOB_INSERT_E "[%Mmodule_type] [AsynJob] fs_job_insert -> "
    FS_API_FS_ASYNC_JOB_REMOVE_S "[%Mmodule_type] [AsynJob] fs_job_remove <- JobID: %d"
    FS_API_FS_ASYNC_JOB_REMOVE_E "[%Mmodule_type] [AsynJob] fs_job_remove -> JobPtr: 0x%X"
    FS_API_FS_ASYNC_JOB_GET_FIRST_S "[%Mmodule_type] [AsynJob] fs_job_get_first <- Option: %d"
    FS_API_FS_ASYNC_JOB_GET_FIRST_E "[%Mmodule_type] [AsynJob] fs_job_get_first -> JobPtr: 0x%X"
    FS_API_FS_ASYNC_JOB_RUNNING_JOB "[%Mmodule_type] [AsynJob] Current Running JobID: %d, JobPtr: 0x%X"
    FS_API_FS_ASYNC_JOB_LIST_ENTRY "[%Mmodule_type] [AsynJob] ListEntry, JobID: %d, JobPtr: 0x%X -> "
    FS_API_FS_ASYNC_JOB_RESPONSE_ILM "[%Mmodule_type] [AsynJob] fs_job_response: <ILM>: JobID: %d, JobPtr: 0x%X, State: %Mfs_job_state_enum, FS_API: %Mfs_api_enum"
    FS_API_FS_ASYNC_JOB_RESPONSE_CBF "[%Mmodule_type] [AsynJob] fs_job_response: <CBF>: JobID: %d, JobPtr: 0x%X, State: %Mfs_job_state_enum, FS_API: %Mfs_api_enum"
    FS_API_FS_ASYNC_JOB_LIST_ERROR_JOBPTR_RUNNING "[%Mmodule_type] [AsynJob] Error: illegal user buffer, JobPtr 0x%X is already running"
    FS_API_FS_ASYNC_JOB_LIST_ERROR_JOBPTR_EXIST "[%Mmodule_type] [AsynJob] Error: illegal user buffer, JobPtr 0x%X is already existed in the job list"
    FS_API_FS_ASYNC_JOB_LIST_ERROR_ENDLESS_LINK "[%Mmodule_type] [AsynJob] Error: endless job links"
    FS_API_FS_ASYNC_JOB_ERROR_UNEXPECTED_STATE "[%Mmodule_type] [AsynJob] Error: fs_job_abort()- Unexpected job state %Mfs_job_state_enum, JobID: %d, JobPtr: 0x%X"
    FS_API_FS_ASYNC_JOB_ERROR_UNKNOW_API "[%Mmodule_type] [AsynJob] Error: fs_job_dipatch()- Unkown API %d (%Mfs_api_enum), JobID: %d, JobPtr: 0x%X"




    FS_API_FS_STARTIOLOG_S "[%Mmodule_type] FS_StartIOLog <- TaskIOStatistics: 0x%X "
    FS_API_FS_STARTIOLOG_E "[%Mmodule_type] FS_StartIOLog -> Return: %Mfs_error_enum "
    FS_API_FS_ENDIOLOG_S "[%Mmodule_type] FS_EndIOLog <- TaskIOStatistics: 0x%X "
    FS_API_FS_ENDIOLOG_E "[%Mmodule_type] FS_EndIOLog -> Return: %Mfs_error_enum "




    FS_TRC_FS_LISTOPEN_S "[%Mmodule_type] FS_ListOpen <- Caller: 0x%X, Param: 0x%x, Path:"
    FS_TRC_FS_LISTOPEN_E "[%Mmodule_type] FS_ListOpen -> Result: %Mfs_error_enum, FileHandle: 0x%x"
    FS_TRC_FS_LISTNEXT_S "[%Mmodule_type] FS_ListNext <- Handle: 0x%x, Index: %d"
    FS_TRC_FS_LISTNEXT_E "[%Mmodule_type] FS_ListNext -> Result: %Mfs_error_enum, FileName: "
    FS_TRC_FS_LISTCLOSE_S "[%Mmodule_type] FS_ListClose <- Handle: 0x%x"


    FS_TRC_FS_LISTOPEN_FILL "[%Mmodule_type] ________ pos_buf[%d] = (%d, %d)"





    FS_TRC_DIRCACHE_SET "[%Mmodule_type] DirData(S): Index: %d, Drive: 0x%x, Cluster: %d, Value: 0x%x"
    FS_TRC_DIRCACHE_GET "[%Mmodule_type] DirData(G): Index: %d, Drive: 0x%x, Cluster: %d, Value: 0x%x"


    FS_TRC_DIRCACHE_EXPIRE "[%Mmodule_type] DirData(E): Index: %d, Drive: 0x%x, Cluster: %d, Value: 0x%x"



    FS_TRC_RTF_OPEN_FILE_HINT "[%Mmodule_type] RTFOpenFile: Internal Hint:%Mkal_bool"



    FS_TRC_RTF_FIRST_S "[%Mmodule_type] RTFFindFirst <- PatternNum: %d, MaxLength: %d, EntryIndex: %d, Flag: 0x%X, Pattern:"
    FS_TRC_RTF_NEXT "[%Mmodule_type] RTFFindNext"

    FS_TRC_RTF_NEXT_DIR "[%Mmodule_type] ________ Cluster = %d, Index = %d, EntryType = %MEntryType"
    FS_TRC_RTF_NEXT_E "[%Mmodule_type] ________  Attr: 0x%X, FileName:"
    FS_TRC_RTF_NEXT_E_HINT "[%Mmodule_type] ________ Cluster: %d, Index: %d, Attr: %X, FileName:"


    FS_TRC_RTF_GETNAMEBYPOS "[%Mmodule_type] GetNameByPos: MaxLength =%d, Pos<-(Cluster, Index) = (%d, %d)"
    FS_TRC_RTF_SEARCHFILE "[%Mmodule_type] SearchFile: Result = %Mrtf_search_ret_enum, line = %d"


    FS_TRC_RTF_GETBUFFER "[%Mmodule_type] GetBuffer: Sector = %d"
    FS_TRC_RTF_GETCLUSTERVALUE "[%Mmodule_type] GetClusterValue: Next Culster = %d"
    FS_TRC_RTF_NEXTDIR "[%Mmodule_type] NextDir"
    FS_TRC_RTF_GETDIR "[%Mmodule_type] GetDir: Sector = %d"
    FS_TRC_RTF_INCDIR "[%Mmodule_type] IncDir: Culster:%d, Index:%d"


   FS_API_FS_ERR "[%Mmodule_type] %Mfs_error_enum # %Mfs_src_file_enum, line: %d"
   FS_API_FS_ERR_FILE "[%Mmodule_type] %Mfs_error_enum # %Mfs_src_file_enum, line: %d, FileName(SFN): %c%c%c%c%c%c%c%c.%c%c%c, Dev: %MFS_DEVICE_TYPE_ENUM"


   FS_TRC_ERR_VF_PARENT_CLOSED "[%Mmodule_type]    FS_Open: Virtual file's parent may be closed before!"
   FS_ERR_DRIVER_NOT_FOUND "[%Mmodule_type]    Driver function is NOT FOUND!"
   FS_ERR_MESSAGEACK_NOT_FOUND "[%Mmodule_type]    MessageAck is required in driver!"
   FS_ERR_FS_MOVE_DELETE_FILE_ERROR "[%Mmodule_type]    Error happens when deleting file after FS_Move is failed! Target FileName:"
   FS_ERR_QMAX_OVER_DISK "[%Mmodule_type]    Quota Configuration Error! Qmax exceeds disk space! Disk Total Space: %u, Qmax: %u (Unit: Cluster)"
   FS_ERR_QMIN_OVER_DISK "[%Mmodule_type]    Quota Configuration Error! Quota MRS (Minimum Required Space) exceeds total disk space! Disk Total Space: %u, MRS: %u (Unit: Cluster)"
   FS_ERR_QRFS_OVER_DFS "[%Mmodule_type]    Quota Run-time Warning! Quota RFS (Required Free Space) exceeds total disk free space! Disk Free Space: %u, RFS: %u (Unit: Cluster)"
   FS_ERR_ACCESS_DENIED "[%Mmodule_type]    Access Denied! The file is already opened by Task: %c%c%c, LR: 0x%x, FileHandle: 0x%x"
   FS_ERR_NULL_PTR_1 "[%Mmodule_type]    %Mfs_src_file_enum, line: %u, NULL NamePtr! Could not find 0x005c!"
   FS_ERR_REC_TRAV_START "[%Mmodule_type]    Recursive Engine Error! RecTravStart Error!"
   FS_ERR_REC_TRAV_CORE "[%Mmodule_type]    Recursive Engine Error! RecTravCore Error!"
   FS_ERR_REC_TRAV_ACTION "[%Mmodule_type]    Recursive Engine Error! RecTravAction Error!"
   FS_ERR_MEDIA_NOT_PRESENT "[%Mmodule_type]    Media is not present! Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_MOUNTDEVICE_DRIVER_MOUNT_FAIL "[%Mmodule_type]    MountDevice: Disk driver \"MountDevice\" is failed! Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_MOUNTDEVICE_INVALID_SECTOR_SIZE "[%Mmodule_type]    MountDevice: Invalid sector size! Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_MOUNTDEVICE_MSDC_NOT_PRESENT "[%Mmodule_type]    MountDevice: MSDC card is not present!"
   FS_ERR_READSECTORS_DEVICE_ERROR "[%Mmodule_type]    ReadSectors: Device ERROR! Sector: %u, Sectors: %u, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_READSECTORS_DEV_NOT_READY "[%Mmodule_type]    ReadSectors: Device is NOT ready! Sector: %u, Sectors: %u, MountState: %u, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_READSECTORS_OUT_OF_RANGE "[%Mmodule_type]    ReadSectors: Out of range! Sector: %u, Sectors: %u, Geometry: %u, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_READSECTORS_DRIVER_FAIL "[%Mmodule_type]    ReadSectors: Driver read failed! Sector: %u, Sectors: %u, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_WRITESECTORS_DEVICE_ERROR "[%Mmodule_type]    WriteSectors: Device ERROR! Sector: %u, Sectors: %u, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_WRITESECTORS_DEV_NOT_READY "[%Mmodule_type]    WriteSectors: Device is NOT ready! Sector: %u, Sectors: %u, MountState: %u, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_WRITESECTORS_OUT_OF_RANGE "[%Mmodule_type]    WriteSectors: Out of range! Sector: %u, Sectors: %u, Geometry: %u, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_WRITESECTORS_NO_PROTECTION_MODE "[%Mmodule_type]    WriteSectors: Driver does not support RecoverableWrite, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_WRITESECTORS_BAD_SECTOR "[%Mmodule_type]    WriteSectors: Bad sector encountered! Sector: %u, Sectors: %u, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_WRITESECTORS_DRIVER_FAIL "[%Mmodule_type]    WriteSectors: Driver write failed! Sector: %u, Sectors: %u, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_WRITESECTORS_SYSTEM_CRASH "[%Mmodule_type]    WriteSectors: Bad sector found in FAT table region! Severe Damage! Sector: %u, Sectors: %u, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_GETBUFFER_OUT_OF_BUFFERS "[%Mmodule_type]    GetBuffer: Out of buffer! Sector: %u, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_LOCKDEVICE_DEVICE_BUSY "[%Mmodule_type]    LockDevice: Device is busy! Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_NONBLOCKLOCKDEVICE_DEVICE_BUSY "[%Mmodule_type]    NonBlockLockDevice: Device is busy! Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_NONBLOCKLOCKDEVICE_LOCK_DEV_FAIL "[%Mmodule_type]    NonBlockLockDevice: Lock device failed! Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_NONBLOCKLOCKDEVICE_LOCK_RTF_FAIL "[%Mmodule_type]    NonBlockLockDevice: Lock native FS failed! Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_PARSEFH_OUT_OF_RANGE "[%Mmodule_type]    ParseFileHandle: File Index: %d, FS_MAX_FILES: %u"
   FS_ERR_PARSEFH_UNLOCKED "[%Mmodule_type]    ParseFileHandle: File (index: %d) is unlocked! It may be closed by others before!"
   FS_ERR_PARSEFH_UNIQUE_NOT_MATCHED "[%Mmodule_type]    ParseFileHandle: Unique is not matched. This file may be closed by others before! (File index: %d)"
   FS_ERR_PARSEFH_NULL_DEV "[%Mmodule_type]    ParseFileHandle: NULL device! This file may be closed or freed before! (File index: %d)"
   FS_ERR_PARSEFH_INVALID_AFTER_DEV_LOCKED "[%Mmodule_type]    ParseFileHandle: File (index: %d) is invalid after dev is locked! It may be closed by others just now!"
   FS_ERR_PARSEFH_EXPORTED "[%Mmodule_type]    ParseFileHandle: Device is exported! This file will be closed automatically! (File index: %d)"
   FS_ERR_PARSEFH_MEDIA_CHANGED "[%Mmodule_type]    ParseFileHandle: Device is changed! This file will be closed automatically! (File index: %d)"
   FS_ERR_NBPARSEFH_OUT_OF_RANGE "[%Mmodule_type]    ParseFileHandle_NB: File Index: %d, FS_MAX_FILES: %u"
   FS_ERR_NBPARSEFH_UNLOCKED "[%Mmodule_type]    ParseFileHandle_NB: File (index: %d) is unlocked! It may be closed by others before!"
   FS_ERR_NBPARSEFH_UNIQUE_NOT_MATCHED "[%Mmodule_type]    ParseFileHandle_NB: Unique is not matched. This file may be closed by others before! (File index: %d)"
   FS_ERR_NBPARSEFH_NULL_DEV "[%Mmodule_type]    ParseFileHandle_NB: NULL device! This file may be closed or freed before! (File index: %d)"
   FS_ERR_NBPARSEFH_INVALID_AFTER_DEV_LOCKED "[%Mmodule_type]    ParseFileHandle_NB: File (index: %d) is invalid after dev is locked! It may be closed by others just now!"
   FS_ERR_NBPARSEFH_EXPORTED "[%Mmodule_type]    ParseFileHandle_NB: Device is exported! This file will be closed automatically! (File index: %d)"
   FS_ERR_NBPARSEFH_MEDIA_CHANGED "[%Mmodule_type]    ParseFileHandle_NB: Device is changed! This file will be closed automatically! (File index: %d)"
   FS_ERR_MOUNTDRIVE_DEV_MOUNT_FAIL "[%Mmodule_type]    MountLogicalDrive: Device mount failed! Dev: %MFS_DEVICE_TYPE_ENUM, MountState(Dev): %MMountStates"
   FS_ERR_MOUNTDRIVE_DRV_MOUNT_FAIL "[%Mmodule_type]    MountLogicalDrive: Mount partition failed! Dev: %MFS_DEVICE_TYPE_ENUM, MountState(Drive): %MMountStates"
   FS_ERR_MOUNTDRIVE_INVALID_FS_SIG "[%Mmodule_type]    MountLogicalDrive: Invalid signature in PBR! Signature: 0x%X, NearJmp: 0x%X, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_MOUNTDRIVE_INVALID_FS_SEC "[%Mmodule_type]    MountLogicalDrive: Invalid PBR's BytesPerSector! BytesPerSector: %u, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_MOUNTDRIVE_INVALID_FS_SPC "[%Mmodule_type]    MountLogicalDrive: Invalid PBR's SectorsPerCluster! SectorsPerCluster: %u, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_MOUNTDRIVE_INVALID_FS_FAT_TYPE "[%Mmodule_type]    MountLogicalDrive: We can't choose a suitable FAT type for this drive! Cluster: %u, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_MOUNTDRIVE_INVALID_FS_FAT32_VER "[%Mmodule_type]    MountLogicalDrive: FAT32's version should be 0! Ver: %u, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_MOUNTDRIVE_INVALID_FS_RESERVED_SEC "[%Mmodule_type]    MountLogicalDrive: ReservedSectors should NOT be 0! Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_MOUNTDRIVE_INVALID_FS_FAT_CNT "[%Mmodule_type]    MountLogicalDrive: Invalid number of FAT tables! Count %u, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_MOUNTDRIVE_INVALID_FS_FAT_SIZE "[%Mmodule_type]    MountLogicalDrive: FAT size should NOT be 0! Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_MOUNTDRIVE_INVALID_FS_ZERO_SPC "[%Mmodule_type]    MountLogicalDrive: SectorsPerCluster should NOT be 0! Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_MOUNTDRIVE_TOO_MANY_LOGI_SEC "[%Mmodule_type]    MountLogicalDrive: Too many logical sectors! Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_MOUNTDRIVE_MEDIA_CHANGED "[%Mmodule_type]    MountLogicalDrive: Device may be changed! Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_SCANPTABLE_MBR_SIG "[%Mmodule_type]    ScanPartitionTable: Invalid signature in MBR! Signature: 0x%X, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_SCANPTABLE_BOOT_INDICATOR "[%Mmodule_type]    ScanPartitionTable: Invalid boot indicator in MBR! BootIndicator: 0x%X, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_SCANPTABLE_EXT_MBR_SIG "[%Mmodule_type]    ScanPartitionTable: Invalid signature in extended MBR! Signature: 0x%X, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_SCANPTABLE_RELATIVE_SECTOR "[%Mmodule_type]    ScanPartitionTable: Invalid relative sector MBR! RelativeSector: %u, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_LOCATEDRIVE_DRVIDX_OUT_OF_RANGE "[%Mmodule_type]    LocateDrive: Drive index out of range! DriveIndex: %u"
   FS_ERR_LOCATEDRIVE_EXPORTED "[%Mmodule_type]    LocateDrive: Device is exported! Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_LOCATEDRIVE_MEDIA_CHANGED "[%Mmodule_type]    LocateDrive: Device may be changed! Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_GETCLUSTERVALUE_INVALID_IN_CLUSTER "[%Mmodule_type]    GetClusterValue: Invalid input cluster index! !Index: %u"
   FS_ERR_GETCLUSTERVALUE_INVALID_OUT_CLUSTER "[%Mmodule_type]    GetClusterValue: Invalid output cluster value! Index: %u, !Value: %u (0x%x), FATSector: %u"
   FS_ERR_SETCLUSTERVALUE_INVALID_IN_CLUSTER "[%Mmodule_type]    SetClusterValue: Invalid cluster index! !Index: %u"
   FS_ERR_SETCLUSTERVALUE_INVALID_OUT_CLUSTER "[%Mmodule_type]    SetClusterValue: Invalid cluster value! Index: %u, !Value: %u"
   FS_ERR_ALLOCFATSEGPERMIT_DISK_FULL "[%Mmodule_type]    AllocateFATSegmentPermit: Disk full! Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_ALLOCFATSEGPERMIT_APP_QERR "[%Mmodule_type]    AllocateFATSegmentPermit: APP quota full! Qidx: %u"
   FS_ERR_ALLOCFATSEG_DISK_FULL "[%Mmodule_type]    AllocateFATSegment: Disk full after traverse all FAT! Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_MOVEFILEPTR_WRAP_AROUND "[%Mmodule_type]    MoveFilePointer: File pointer wraps around! FilePointer: %u, Offset: %u"
   FS_ERR_MOVEFILEPTR_BEYOND_LAST_CLUSTER "[%Mmodule_type]    MoveFilePointer: Move beyond the last cluster! f<-Cluster: %u"
   FS_ERR_STARTDIRSEARCH_BEYOND_LAST_CLUSTER "[%Mmodule_type]    StartDirSearch: Invalid dir entry! Cluster: %u, Index: %u, Dev: %MFS_DEVICE_TYPE_ENUM"
   FS_ERR_RTFRENAME_DRIVE_NOT_THE_SAME "[%Mmodule_type]    RTFRename: 2 files should be on the same drive!"
   FS_ERR_RTFREAD_FPTR_OUT_OF_RANGE "[%Mmodule_type]    RTFRead: File pointer is out of range! FilePointer: %u, FileSize: %u"
   FS_ERR_RTFREAD_FPTR_WRAP_AROUND "[%Mmodule_type]    RTFRead: File pointer will be wrapped around! FilePointer: %u, Read Length: %u"
   FS_ERR_RTFREAD_MUST_READ_SECTOR_ALIGNED "[%Mmodule_type]    RTFRead: Physical or Volume file should be read sector-aligned length! Length: %u"
   FS_ERR_RTFREAD_INVALID_FMAPED_HANDLE "[%Mmodule_type]    RTFRead: Invalid mapped file handle (Virtual file)! Handle: 0x%X"
   FS_ERR_RTFWRITE_FPTR_OUT_OF_RANGE "[%Mmodule_type]    RTFWrite: File pointer is out of range! FilePointer: %u, FileSize: %u"
   FS_ERR_RTFWRITE_FPTR_WRAP_AROUND "[%Mmodule_type]    RTFWrite: File pointer will be wrapped around! FilePointer: %u, Write Length: %u"
   FS_ERR_RTFWRITE_MUST_READ_SECTOR_ALIGNED "[%Mmodule_type]    RTFWrite: Physical or Volume file should be written sector-aligned length! Length: %u"
   FS_ERR_RTFWRITE_INVALID_FMAPED_HANDLE "[%Mmodule_type]    RTFWrite: Invalid mapped file handle (Virtual file)! Handle: 0x%X"
   FS_ERR_RTFTRUNCATE_NORMAL_FILE_ONLY "[%Mmodule_type]    RTFTruncate: Only normal file could be truncated!"
   FS_ERR_RTFTRUNCATE_FPTR_OUT_OF_RANGE "[%Mmodule_type]    RTFTruncate: File pointer is out of range! FilePointer: %u, FileSize: %u"
   FS_ERR_RTFSEEK_FPTR_OUT_OF_RANGE "[%Mmodule_type]    RTFSeek: File pointer is out of range! FilePointer: %u, FileSize: %u"
   FS_ERR_RTFSEEK_INVALID_WHENCE "[%Mmodule_type]    RTFSeek: Invalid Whence! Whence: %u"
   FS_ERR_RTFSEEK_FPTR_WRAP_AROUND "[%Mmodule_type]    RTFSeek: New position is wrapped around! StartPos: %u, Offset: %d, NewPos: %u"
   FS_ERR_RTFSEEK_MUST_READ_SECTOR_ALIGNED "[%Mmodule_type]    RTFSeek: Physical or Volume file should be seeked to sector-aligned position! StartPos: %u, Offset: %d, NewPos: %u"
   FS_ERR_RTFSEEK_INVALID_FMAPED_HANDLE "[%Mmodule_type]    RTFSeek: Invalid mapped file handle (Virtual file)! Handle: 0x%X"
   FS_ERR_RTFSEEK_CANT_EXTEND_READ_ONLY_FILE "[%Mmodule_type]    RTFSeek: Can't extend Read Only file! NewPos: %u, FileSize: %u"
   FS_ERR_RTFSEEK_CANT_EXTEND_ROOT_DIR "[%Mmodule_type]    RTFSeek: Can't extend Root Dir! NewPos: %u, FileSize: %u"
   FS_ERR_RTFSEEK_INVALID_CLUSTER "[%Mmodule_type]    RTFSeek: Invalid cluster number found! Cluster: %u"
   FS_ERR_RTFEXTEND_FPTR_OUT_OF_RANGE "[%Mmodule_type]    RTFExtend: File pointer is out of range! FilePointer: %u, FileSize: %u"
   FS_ERR_RTFEXTEND_FSIZE_WRAP_AROUND "[%Mmodule_type]    RTFExtend: File size is wrapped around! FilePointer: %u, Length: %u"
   FS_ERR_RTFRESETDISK_FILE_NOT_CLOSED "[%Mmodule_type]    RTFResetDisk: All file should be closed! FileCount: %u"
   FS_ERR_COPYSECTORS_DEV_ERROR "[%Mmodule_type]    CopySectors: Device error! From: %u, To: %u, Sectors: %u"
   FS_ERR_COPYSECTORS_DEV_NOT_MOUNTED "[%Mmodule_type]    CopySectors: Device is not mounted! From: %u, To: %u, Sectors: %u"
   FS_ERR_COPYSECTORS_DRIVER_FAILED "[%Mmodule_type]    CopySectors: Driver failed! From: %u, To: %u, Sectors: %u"
   FS_ERR_FILENAME_INVALID_CHAR "[%Mmodule_type]    Invalid character in file name: 0x%X"
   FS_ERR_FILENAME_INVALID_LEADING_BLANK "[%Mmodule_type]    Leading blank in file name is not allowed!"
   FS_ERR_FILENAME_INVALID_TAILING_DOT "[%Mmodule_type]    Tailing dot in file name is not allowed!"
   FS_ERR_VOLUMELABEL_TOO_LONG "[%Mmodule_type]    Volume label is too long! The maximum length is 11!"
   FS_ERR_DIRENTRY_INVALID_START_CLUSTER "[%Mmodule_type]    CheckDirEntry: The start cluster value %u (0x%x) is invalid, MaxCluster %d (0x%x)"


   FS_INFO_FT_TITLE "[FS INFO] ====== File Table ======"
   FS_INFO_FT_SLOT "[FS INFO] FileTable[%d] = FileHandle: 0x%X, Task: %c%c%c, OwnerLR: 0x%x, Lock: %d, Valid: %Mfs_fh_status, ShortName(SFN):%c%c%c%c%c%c%c%c.%c%c%c"
   FS_INFO_FT_LFN "[FS INFO] ___________ FileName (Mouse Right Click -> Display Unicode String) "
   FS_INFO_FT_TAIL "[FS INFO] === End of File Table ==="
   FS_INFO_DIR_ENTRY_WALKED "[%Mmodule_type]       %d directory entries were walked!"
   FS_INFO_COPY_FILE_BUFFER_SIZE "[%Mmodule_type]       Copy file buffer size: %d bytes"
   FS_INFO_QUOTA_DELETE "[%Mmodule_type]       QM: Delete - %d, Free: %d (FATDelete)"
   FS_INFO_QUOTA_STATUS_NOW_FATDELETE "[%Mmodule_type]       QM: Status - Qidx: %u, Qnow: %u (FATDelete)"
   FS_INFO_QUOTA_STATUS_NOW_ALLOCFATSEG "[%Mmodule_type]       QM: Status - Qidx: %u, Qnow: %u (AllocateFATSegment)"
   FS_INFO_QUOTA_STATUS_NOW_RTFEXTEND "[%Mmodule_type]       QM: Status - Qidx: %u, Qnow: %u (RTFExtend)"
   FS_INFO_QUOTA_BEFORE_ALLOC "[%Mmodule_type]       QM: Before allocate %u, Free: %u"

   FS_INFO_LFN "[FS] FileName (Mouse Right Click -> Display Unicode String) "
   FS_INFO_LFN_ERR "[FS ERR] FileName (Mouse Right Click -> Display Unicode String) "

   FS_INFO_FAT_SECTOR "[FS INFO] FAT Sector Buffer"
   FS_INFO_DIR_ENTRY "[FS INFO] Directory Entry"
   FS_INFO_DISK_ERROR "[%Mmodule_type] The disk has errors, please run check disk (chkdsk.exe /f) from PC"
   FS_INFO_DISK_ERROR2 "[%Mmodule_type] Thd disk %c: has errors, please run check disk (chkdsk.exe /f) from PC"

   FS_INFO_TOP_FH_USER_TITLE "[FS INFO] ========= Top File Handle Consumers ========="
   FS_INFO_TOP_FH_USER "[FS INFO] %u. Task: %c%c%c, LR: 0x%x, number of opened file handles: %u"
   FS_INFO_TOP_FH_USER_TAIL "[FS INFO] ===== End of Top File Handle Consumers ======"

   FS_INFO_IO_STAT_START "[FS INFO] ============= Start of File System IO Statistics ============"
   FS_INFO_IO_STAT_TITLE "[FS INFO] ================= File System IO Statistics ================="
   FS_INFO_IO_STAT_ENTRY "[FS INFO] %u.<%c%c%c> IO.Count: %u, IO.Data: %u KB, IO.Time: %u ms (%u)"
   FS_INFO_IO_STAT_LINE "[FS INFO] -------------------------------------------------------------"
   FS_INFO_IO_STAT_TOTAL "[FS INFO] Total.IO.Count: %u, Total.IO.Data: %u KB, Total.IO.Time: %u ms (100)"
   FS_INFO_IO_STAT_TAIL "[FS INFO] ============= End of File System IO Statistics =============="
   FS_INFO_IO_STAT_DISABLE "[FS INFO] IO Statistics is disabled, add CUSTOM_OPTION += __FS_IO_STATISTICS__ to makefile and rebuild fs.lib"


   FS_INFO_GR1_READSECTORS "[%Mmodule_type]       ReadSectors -> Dev: %MFS_DEVICE_TYPE_ENUM, Length: %u, Duration: %u us, Throughput: %u KB/s, Sector: %u"
   FS_INFO_GR1_WRITESECTORS "[%Mmodule_type]       WriteSectors -> Dev: %MFS_DEVICE_TYPE_ENUM, Length: %u, Duration: %u us, Throughput: %u KB/s, Sector: %u"

   FS_INFO_GR2_READSECTORS "[%Mmodule_type]       %MFS_DEVICE_TYPE_ENUM, R, %u, %u, %u"
   FS_INFO_GR2_WRITESECTORS "[%Mmodule_type]       %MFS_DEVICE_TYPE_ENUM, W, %u, %u, %u"


   FS_INFO_READSECTORS_S "[%Mmodule_type] ReadSectors <- Sector: %u,"
   FS_INFO_WRITESECTORS_S "[%Mmodule_type] WriteSectors <- Sector: %u,"


    FSAL_TRACE_OPEN_ERROR "[FSAL] DRM_open_file Error:%d, fsal.c/line=%d"
    FSAL_TRACE_CLOSE_ERROR "[FSAL] DRM_close_file Error:%d, fsal.c/line=%d"
    FSAL_TRACE_READ_ERROR "[FSAL] DRM_read_file Error:%d, fsal.c/line=%d"
    FSAL_TRACE_READ_ERROR_OUT_OF_RANGE "[FSAL] FSAL_Direct_Read Error: Offset out of range, fsal.c/line=%d"
    FSAL_TRACE_WRITE_ERROR "[FSAL] FS_Write Error:%d, Written:%d, fsal.c/line=%d"
    FSAL_TRACE_SEEK_ERROR "[FSAL] DRM_seek_large_file Error:%d, fsal.c/line=%d"
    FSAL_TRACE_SEEK_ERROR_OUT_OF_RANGE "[FSAL] FSAL_Direct_Seek Error:RAM offset out of range, fsal.c/line=%d"
    FSAL_TRACE_GET_FILE_POSITION_ERROR "[FSAL] DRM_file_pos Error:%d, fsal.c/line=%d"
    FSAL_TRACE_GET_FILE_SIZE_ERROR "[FSAL] DRM_file_size Error:%d, fsal.c/line=%d"
    FSAL_TRACE_BUF_READ_BLK_ERROR "[FSAL] fsal_read_block %d + %d > %d, fsal_buffer.c/line=%d"
    FSAL_TRACE_BUF_READ_ERROR "[FSAL] fsal_read_block Error:%d, fsal_buffer.c/line=%d"
    FSAL_TRACE_ERROR_FSAL_C "[FSAL] Error:%MFSAL_Status, fsal.c/line=%d"
    FSAL_TRACE_ERROR_FSAL_BUF_C "[FSAL] Error:%MFSAL_Status, fsal_buffer.c/line=%d"





    FS_TEST_ITERATION_START "====== File System Iteration Performance Test (START) ======"
    FS_TEST_ITERATION_END "====== File System Iteration Performance Test (END) ======"






    FS_SST_ASSERT_INFO1 "File System ASSERT! File: %Mfs_src_file_enum, Line: %u."
    FS_SST_ASSERT_INFO2 "Information: %u, %u, %u"
    FS_SST_ASSERT_GUIDELINE "Guideline: Please contact File System owner!"

    FS_SST_USER_ERROR_TITLE "====== File System User Error Analyzer ======"
    FS_SST_INTERNAL_ERROR_TITLE "====== File System Internal Error Analyzer ======"

    FS_SST_API_CLOSE_ALL "FS_CloseAll() is NOT allowed to be used under normal state!"
    FS_SST_BUFFER_02 "AllocBuffers(): Cache buffer is not properly aligned!"
    FS_SST_HANDLE_01 "ReserveFTSlot(): File handle is insufficient! Please see File Table below to find out the murder!"
    FS_SST_CLUSTER_01 "GetClusterValue(): Invalid FAT type: %d!"
    FS_SST_CLUSTER_03 "SetClusterValue(): Invalid FAT type: %d!"
    FS_SST_CLUSTER_05 "BatchCoutnFreeClusters(): Invalid FAT type: %d!"
    FS_SST_CLUSTER_06 "FATSearchZeroInBuffer(): Invalid FAT type: %d!"
    FS_SST_CLUSTER_08 "ScanDrive(): Invalid FAT type: %d!"
    FS_SST_DIRENTRY_01 "UpdateDirEntry(): An invalid file pointer is found! Please open memory dump for details."
    FS_SST_EXCEPTION_04 "_XRaiseException(): Unhandled exception is detected! It may because an exception is raised in XFINALLY section!"
    FS_SST_TLS_02 "RTFSYSSetTLS/RTFSYSGetTaskIndex(): FS_MAX_THREAD (%d) is insufficient! Please enlarge it in fs_config.c!"
    FS_SST_MUTEX_01 "RTFSYSAllocMutex(): The number of FS mutexes exceeds the limit (%d)!"
    FS_SST_TOO_MANY_OPENED_FILES "There were too many opened files, please check the file handles are properly closed after use"


END_MODULE_MSG
# 52 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
# 1 "./driver/sys_drv/init/inc/system_trc.h" 1
# 162 "./driver/sys_drv/init/inc/system_trc.h"
START_MODULE_MSG MOD_SYSTEM 20




    SST_INIT_L1CACHE_ENTER "Enter L1-cache init"
    SST_INIT_L1CACHE_EXIT "Exit L1-cache init"
    SST_INIT_MMU_ENTER "Enter MMU init"
    SST_INIT_MMU_EXIT "Exit MMU init"
    SST_INIT_MPU_ENTER "Enter MPU init"
    SST_INIT_MPU_EXIT "Exit MPU init"
    SST_INIT_L2CACHE_ENTER "Enter L2-cache init"
    SST_INIT_L2CACHE_EXIT "Exit L2-cache init"


    SST_INIT_APPINIT_START "Starting Application_Initialize()"

    SST_INIT_CLIB1_ENTER "Enter C library basic init"
    SST_INIT_CLIB1_EXIT "Exit C library basic init"
    SST_INIT_CCCI_ENTER "Enter CCCI init"
    SST_INIT_CCCI_EXIT "Exit CCCI init"
    SST_INIT_CCCIHS1_ENTER "Enter CCCI handshake phase1 init"
    SST_INIT_CCCIHS1_EXIT "Exit CCCI handshake phase1 init"
    SST_INIT_MDCIHS1_ENTER "Enter MDCI handshake phase1 init"
    SST_INIT_MDCIHS1_EXIT "Exit MDCI handshake phase1 init"
    SST_INIT_BOOTMODE_ENTER "Enter Boot Mode variable setting"
    SST_INIT_BOOTMODE_EXIT "Exit Boot Mode variable setting ... [ duration: %d ms ]"
    SST_INIT_SYSTEMINIT_ENTER "Enter system intialization"
    SST_INIT_SYSTEMINIT_EXIT "Exit system intialization ... [ duration: %d ms ]"
    SST_INIT_NVRAM_ENTER "Enter NVRAM init"
    SST_INIT_NVRAM_EXIT "Exit NVRAM init ... [ duration: %d ms ]"


    SST_INIT_USC_ENTER "Enter ARM us counter init"
    SST_INIT_USC_EXIT "Exit ARM us counter init ... [ duration: %d ms ]"
    SST_INIT_OSTD_ENTER "Enter ARM OS Timer Sleep Mode init"
    SST_INIT_OSTD_EXIT "Exit ARM OS Timer Sleep Mode init ... [ duration: %d ms ]"
    SST_INIT_L1SM_ENTER "Enter L1SM init"
    SST_INIT_L1SM_EXIT "Exit L1SM init ... [ duration: %d ms ]"
    SST_INIT_UL1SM_ENTER "Enter UL1SM init"
    SST_INIT_UL1SM_EXIT "Exit UL1SM init ... [ duration: %d ms ]"
    SST_INIT_EL1SM_ENTER "Enter EL1SM init"
    SST_INIT_EL1SM_EXIT "Exit EL1SM init ... [ duration: %d ms ]"
    SST_INIT_HWDIVIDER_ENTER "Enter HW divider init"
    SST_INIT_HWDIVIDER_EXIT "Exit HW divider init ... [ duration: %d ms ]"
    SST_INIT_IDMALOAD_ENTER "Enter load DSP via iDMA"
    SST_INIT_IDMALOAD_EXIT "Exit load DSP via iDMA ... [ duration: %d ms ]"
    SST_INIT_NFIRESET_ENTER "Enter NFI reset"
    SST_INIT_NFIRESET_EXIT "Exit NFI reset ... [ duration: %d ms ]"


    SST_INIT_DRV1_START "Starting driver init phase1"
        SST_INIT_DRV1_TTY_ENTER "    Enter TTY init"
        SST_INIT_DRV1_TTY_EXIT "    Exit TTY init ... [ duration: %d ms ]"
        SST_INIT_DRV1_DRVHISR_ENTER "    Enter driver HISR init"
        SST_INIT_DRV1_DRVHISR_EXIT "    Exit driver HISR init ... [ duration: %d ms ]"
        SST_INIT_DRV1_MDCIHW_ENTER "    Enter MDCI HW init"
        SST_INIT_DRV1_MDCIHW_EXIT "    Exit MDCI HW init ... [ duration: %d ms ]"
        SST_INIT_DRV1_CCCI_ENTER "    Enter CCCI init"
        SST_INIT_DRV1_CCCI_EXIT "    Exit CCCI init ... [ duration: %d ms ]"
        SST_INIT_DRV1_EMIMPU_ENTER "    Enter EMIMPU init"
        SST_INIT_DRV1_EMIMPU_EXIT "    Exit EMIMPU init ... [ duration: %d ms ]"
        SST_INIT_DRV1_LPWR_ENTER "    Enter low power init"
        SST_INIT_DRV1_LPWR_EXIT "    Exit low power init ... [ duration: %d ms ]"
        SST_INIT_DRV1_DRVPDN_ENTER "    Enter power down control init"
        SST_INIT_DRV1_DRVPDN_EXIT "    Exit power down control init ... [ duration: %d ms ]"
        SST_INIT_DRV1_PWM_ENTER "    Enter power management init"
        SST_INIT_DRV1_PWM_EXIT "    Exit power management init ... [ duration: %d ms ]"
        SST_INIT_DRV1_CUSTOM_ENTER "    Enter customized driver init"
        SST_INIT_DRV1_CUSTOM_EXIT "    Exit customized driver init ... [ duration: %d ms ]"
        SST_INIT_DRV1_GPT3_ENTER "    Enter GPT3 init"
        SST_INIT_DRV1_GPT3_EXIT "    Exit GPT3 init ... [ duration: %d ms ]"
        SST_INIT_DRV1_VISUAL_ENTER "    Enter visual init"
        SST_INIT_DRV1_VISUAL_EXIT "    Exit visual init ... [ duration: %d ms ]"
        SST_INIT_DRV1_GPTI_ENTER "    Enter GPTI init"
        SST_INIT_DRV1_GPTI_EXIT "    Exit GPTI init ... [ duration: %d ms ]"
        SST_INIT_DRV1_WDT_ENTER "    Enter WDT init"
        SST_INIT_DRV1_WDT_EXIT "    Exit WDT init ... [ duration: %d ms ]"
        SST_INIT_DRV1_DMA_ENTER "    Enter DMA init"
        SST_INIT_DRV1_DMA_EXIT "    Exit DMA init ... [ duration: %d ms ]"
        SST_INIT_DRV1_XOSC_ENTER "    Enter XOSC set"
        SST_INIT_DRV1_XOSC_EXIT "    Exit XOSC set ... [ duration: %d ms ]"
        SST_INIT_DRV1_ADC_ENTER "    Enter ADC init"
        SST_INIT_DRV1_ADC_EXIT "    Exit ADC init ... [ duration: %d ms ]"
        SST_INIT_DRV1_CSFACDET_ENTER "    Enter customized factory mode detection init"
        SST_INIT_DRV1_CSFACDET_EXIT "    Exit customized factory mode detection init ... [ duration: %d ms ]"
        SST_INIT_DRV1_ACCDET_ENTER "    Enter ACCDET init"
        SST_INIT_DRV1_ACCDET_EXIT "    Exit ACCDET init ... [ duration: %d ms ]"
        SST_INIT_DRV1_LCD_ENTER "    Enter LCD init"
        SST_INIT_DRV1_LCD_EXIT "    Exit LCD init ... [ duration: %d ms ]"
        SST_INIT_DRV1_RTCHW_ENTER "    Enter RTC HW init"
        SST_INIT_DRV1_RTCHW_EXIT "    Exit RTC HW init ... [ duration: %d ms ]"
        SST_INIT_DRV1_PMIC_ENTER "    Enter PMIC init"
        SST_INIT_DRV1_PMIC_EXIT "    Exit PMIC init ... [ duration: %d ms ]"
        SST_INIT_DRV1_PW_ENTER "    Enter power ON init"
        SST_INIT_DRV1_PW_EXIT "    Exit power ON init ... [ duration: %d ms ]"
        SST_INIT_DRV1_DMAVFIFO_ENTER "    Enter DMA VFIFO init"
        SST_INIT_DRV1_DMAVFIFO_EXIT "    Exit DMA VFIFO init ... [ duration: %d ms ]"
        SST_INIT_DRV1_UART1_ENTER "    Enter UART1 init"
        SST_INIT_DRV1_UART1_EXIT "    Exit UART1 init ... [ duration: %d ms ]"
        SST_INIT_DRV1_UART2_ENTER "    Enter UART2 init"
        SST_INIT_DRV1_UART2_EXIT "    Exit UART2 init ... [ duration: %d ms ]"
        SST_INIT_DRV1_UART3_ENTER "    Enter UART3 init"
        SST_INIT_DRV1_UART3_EXIT "    Exit UART3 init ... [ duration: %d ms ]"
    SST_INIT_DRV1_OK "Driver init phase1 ... [ OK ]"

    SST_INIT_PREFOTA_ENTER "Enter FOTA preparation"
    SST_INIT_PREFOTA_EXIT "Exit FOTA preparation ... [ duration: %d ms ]"
    SST_INIT_THIRDROM_ENTER "Enter third ROM init"
    SST_INIT_THIRDROM_EXIT "Exit third ROM init ... [ duration: %d ms ]"
    SST_INIT_LOADSECMAUI_ENTER "Enter Load Secondary MAUI"
    SST_INIT_LOADSECMAUI_EXIT "Exit Load Secondary MAUI ... [ duration: %d ms ]"
    SST_INIT_DEMP_ENTER "Enter demand paging init"
    SST_INIT_DEMP_EXIT "Exit demand paging init"


    SST_PW_POWERINIT_FACTOR_PWRKEY "PW_PowerInit: factor: PWRKEY: %d"
    SST_PW_POWERINIT_FACTOR_CHRIN "PW_PowerInit: factor: CHRIN: %d"
    SST_PW_POWERINIT_FACTOR_USBIN "PW_PowerInit: factor: USBIN: %d"
    SST_PW_POWERINIT_FACTOR_RTCALARM "PW_PowerInit: factor: RTC_ALARM: %d"
    SST_PW_POWERINIT_FACTOR_WDT "PW_PowerInit: factor: WDT: %d"
    SST_PW_POWERINIT_FACTOR_NORMAL_RST "PW_PowerInit: factor: NORMAL_RST_FG: %d"
    SST_PW_POWERINIT_FACTOR_CHR_PWRON_FG "PW_PowerInit: factor: CHR_PWRON_FG: %d"
    SST_PW_POWERINIT_FACTOR_USBMS_PWRON_FG "PW_PowerInit: factor: USBMS_PWRON_FG: %d"
    SST_PW_POWERINIT_FACTOR_RTC_PWRON_FG "PW_PowerInit: factor: RTC_PWRON_FG: %d"
    SST_PW_POWERINIT_FACTOR_PRECHR_PWRON_FG "PW_PowerInit: factor: PRECHR_PWRON_FG: %d"
    SST_PW_POWERINIT_FACTOR_FC2IDLE_FG "PW_PowerInit: factor: SWITCH2IDLE_FG: %d"
    SST_PW_POWERINIT_FACTOR_FC2CHR_FG "PW_PowerInit: factor: SWITCH2CHR_FG: %d"
    SST_PW_POWERINIT_FACTOR_FC2USB_FG "PW_PowerInit: factor: SWITCH2USB_FG: %d"
    SST_PW_POWERINIT_PWRON_REASON "PW_PowerInit: BMT.PWRon: %d"
    SST_PW_POWERINIT_ABNORMAL_PWRON "PW_PowerInit: Abnormal power on"
    SST_PW_POWERINIT_META_PWRON "PW_PowerInit: META power on"


    SST_INIT_DRV2_START "Starting driver init phase2"
        SST_INIT_DRV2_USB2UART_ENTER "    Enter USB2UART init"
        SST_INIT_DRV2_USB2UART_EXIT "    Exit USB2UART init ... [ duration: %d ms ]"
        SST_INIT_DRV2_KBD_ENTER "    Enter keypad init"
        SST_INIT_DRV2_KBD_EXIT "    Exit keypad init ... [ duration: %d ms ]"
        SST_INIT_DRV2_RTCSW_ENTER "    Enter RTC SW init"
        SST_INIT_DRV2_RTCSW_EXIT "    Exit RTC SW init ... [ duration: %d ms ]"
        SST_INIT_DRV2_SIM_ENTER "    Enter SIM init"
        SST_INIT_DRV2_SIM_EXIT "    Exit SIM init ... [ duration: %d ms ]"
        SST_INIT_DRV2_SIMMT6302_ENTER "    Enter SIM MT6302 init"
        SST_INIT_DRV2_SIMMT6302_EXIT "    Exit SIM MT6302 init ... [ duration: %d ms ]"
        SST_INIT_DRV2_MSDC_ENTER "    Enter MSDC init"
        SST_INIT_DRV2_MSDC_EXIT "    Exit MSDC init ... [ duration: %d ms ]"
        SST_INIT_DRV2_MSDC2_ENTER "    Enter MSDC2 init"
        SST_INIT_DRV2_MSDC2_EXIT "    Exit MSDC2 init ... [ duration: %d ms ]"
        SST_INIT_DRV2_EINTSWDBNC_ENTER "    Enter EINT SW Debounce init"
        SST_INIT_DRV2_EINTSWDBNC_EXIT "    Exit EINT SW Debounce init ... [ duration: %d ms ]"
        SST_INIT_DRV2_SWDBG_ENTER "    Enter SWDBG init"
        SST_INIT_DRV2_SWDBG_EXIT "    Exit SWDBG init ... [ duration: %d ms ]"
        SST_INIT_DRV2_CHE_ENTER "    Enter cipher/hash engine init"
        SST_INIT_DRV2_CHE_EXIT "    Exit cipher/hash engine init ... [ duration: %d ms ]"
        SST_INIT_DRV2_IMGSENS_ENTER "    Enter ISP/Camera init"
        SST_INIT_DRV2_IMGSENS_EXIT "    Exit ISP/Camera init ... [ duration: %d ms ]"
        SST_INIT_DRV2_CIS_ENTER "    Enter Power ON CIS"
        SST_INIT_DRV2_CIS_EXIT "    Exit Power ON CIS ... [ duration: %d ms ]"
        SST_INIT_DRV2_MSENS_ENTER "    Enter motion sensor init"
        SST_INIT_DRV2_MSENS_EXIT "    Exit motion sensor init ... [ duration: %d ms ]"
        SST_INIT_DRV2_WN_ENTER "    Enter WLAN network init"
        SST_INIT_DRV2_WN_EXIT "    Exit WLAN network init ... [ duration: %d ms ]"
        SST_INIT_DRV2_I2C_ENTER "    Enter I2C init"
        SST_INIT_DRV2_I2C_EXIT "    Init I2C init ... [ duration: %d ms ]"
        SST_INIT_DRV2_ICC_ENTER "    Enter ICC init"
        SST_INIT_DRV2_ICC_EXIT "    Exit ICC ... [ duration: %d ms ]"
        SST_INIT_DRV2_BTIF_ENTER "    Enter BTIF init"
        SST_INIT_DRV2_BTIF_EXIT "    Exit BTIF init ... [ duration: %d ms ]"
        SST_INIT_DRV2_ADC_ENTER "    Enter ADC init"
        SST_INIT_DRV2_ADC_EXIT "    Exit ADC init ... [ duration: %d ms ]"
        SST_INIT_DRV2_PFC_ENTER "    Enter PFC init"
        SST_INIT_DRV2_PFC_EXIT "    Exit PFC init ... [ duration: %d ms ]"
    SST_INIT_DRV2_OK "Driver init phase2 ... [ OK ]"

    SST_INIT_RESINIT_ENTER "Enter resource initialization"
    SST_INIT_RESINIT_EXIT "Exit resource initialization ... [ duration: %d ms ]"
    SST_INIT_CHECKMSGID_ENTER "Enter message ID check"
    SST_INIT_CHECKMSGID_EXIT "Check message ID check ... [ duration: %d ms ]"
    SST_INIT_CLIB2_ENTER "Enter C library init"
    SST_INIT_CLIB2_EXIT "Exit C library init ... [ duration: %d ms ]"

    SST_INIT_DMDSP1_ENTER "Enter Dual MAC DSP init"
    SST_INIT_DMDSP1_EXIT "Exit Dual MAC DSP init ... [ duration: %d ms ]"
    SST_INIT_CCCIHS2_ENTER "Enter CCCI handshake phase2 init"
    SST_INIT_CCCIHS2_EXIT "Exit CCCI handshake phase2 init ... [ duration: %d ms ]"
    SST_INIT_MDCIHS2_ENTER "Enter MDCI handshake phase2 init"
    SST_INIT_MDCIHS2_EXIT "Exit MDCI handshake phase2 init ... [ duration: %d ms ]"
    SST_INIT_DMDSP2_ENTER "Enter Dual MAC DSP exception init"
    SST_INIT_DMDSP2_EXIT "Exit Dual MAC DSP exception init ... [ duration: %d ms ]"
    SST_INIT_RTFINIT_ENTER "Enter file system init"
    SST_INIT_RTFINIT_EXIT "Exit file system init ... [ duration: %d ms ]"
    SST_INIT_RTFSANITY_ENTER "Enter file system sanity check"
    SST_INIT_RTFSANITY_EXIT "Exit file system sanity check ... [ duration: %d ms ]"

    SST_INIT_TASKINIT "Starting task init"
    SST_INIT_TASKINIT_INDX_ENTER "    Enter task init - %Mtask_indx_type"
    SST_INIT_TASKINIT_INDX_EXIT "    Exit task init - %Mtask_indx_type ... [ duration: %d ms ]"

    SST_INIT_APPINIT_OK "Application_Initialize() ... [ OK ]"


    DEMP_PAGE_FAULT_ENTER "[DEMP] Enter do_page_fault(), task:%Mtask_indx_type, prio:%d, ERROR_TYPE:%d, fault addr:0x%X, FSR:0x%X, nested count:%d +++++++"

    DEMP_ERR_CODE "[DEMP] Return error code: %d"

    DEMP_PAGE_ALLOC_ENTER "[DEMP] Enter page allocation"
    DEMP_PAGE_ALLOC_EXIT "[DEMP] Exit page allocation, page VA:0x%X, page PA:0x%X, balance count:%d"
    DEMP_PAGE_SWAPOUT_ENTER "[DEMP] Enter page swap-out, page VA:0x%X, fault addr:0x%X"
    DEMP_PAGE_SWAPOUT_EXIT "[DEMP] Exit page swap-out"
    DEMP_PAGE_SWAPIN_ENTER "[DEMP] Enter page swap-in, page VA:0x%X, fault addr:0x%X, prio:%d"

    DEMP_PAGE_LOCK_TAKEN "[DEMP] MTD lock is taken by %Mtask_indx_type, lock count:%d"
    DEMP_PAGE_LOCK_AVAILABLE "[DEMP] MTD lock is available"
    DEMP_PAGE_GET_LOCK "[DEMP] %Mtask_indx_type gets MTD lock, prio:%d"
    DEMP_PAGE_FREE_LOCK "[DEMP] %Mtask_indx_type frees MTD lock, prio:%d"

    DEMP_PAGE_SWAPIN_EXIT "[DEMP] Exit page swap-in, page VA:0x%X, fault addr:0x%X, prio:%d"
    DEMP_PTABLE_UPDATE_ENTER "[DEMP] Enter page table update, smallest_pd addr:0x%X, smallest_pd value:0x%X"
    DEMP_PTABLE_UPDATE_EXIT "[DEMP] Exit page table update, smallest_pd addr:0x%X, smallest_pd value:0x%X"
    DEMP_PAGE_FAULT_EXIT "[DEMP] Exit do_page_fault(), task:%Mtask_indx_type, prio:%d, ERROR_TYPE:%d, fault addr:0x%X, FSR:0x%X -------------------------------------"

    DEMP_LOCK_ENTER "[DEMP][LOCK] Enter demp_lock_pages(), user:%Mdemp_lock_user, addr:0x%X, len:0x%X >>>>>>>>>>>>"
    DEMP_LOCK "[DEMP] Lock page:0x%X"
    DEMP_LOCK_EXIT "[DEMP][LOCK] Exit demp_lock_pages(), user:%Mdemp_lock_user, addr:0x%X, len:0x%X <<<<<<<<<<<<"

    DEMP_UNLOCK_ENTER "[DEMP][LOCK] Enter demp_unlock_pages(), user:%Mdemp_lock_user, addr:0x%X, len:0x%X >>>>>>>>>>>>"
    DEMP_UNLOCK "[DEMP] Unlock page:0x%X"
    DEMP_UNLOCK_EXIT "[DEMP][LOCK] Exit demp_unlock_pages(), user:%Mdemp_lock_user, addr:0x%X, len:0x%X <<<<<<<<<<<<"

    SYSMEM_ALLOC_FORMAT "[KAL] sys_mem_alloc(%u, %x)"
    ADM_CREATE2_FORMAT "[KAL] adm_create2(%x, %u, %d/%d/%d..., %x, %d)=%x"
    ADM_DELETE_FORMAT "[KAL] adm_delete(%x)=%x"
    ADM_ALLOC_FORMAT "[KAL] adm_alloc(%x, %u, %u, %u, %s, %d)=%x"
    ADM_FREE_FORMAT "[KAL] adm_free(%x, %x)"
    FLMM_ALLOC_FORMAT "[KAL] flmm_alloc(%x)=%x/%x~%x"
    FLMM_FREE_FORMAT "[KAL] flmm_free(%x), virtual=%x~%x"
    SLMM_DROP_FORMAT "[KAL] slmm_drop(%x, %x~%x))"

    PROFILE_CPUUSAGE_FORMAT "[KAL] CPU Usage: %d percent"


    TP_OVER_200QB "[Thread Protect] Over 200QB warning: thread: %x, taker address: %x, giver address: %x, duration: %d"


    EVSHED_CREATE "[evshed]evshed_create. task %d es 0x%x st 0x%x module %d fuzz %d max_delay_tick %d name %c %c %c %c %c %c %c %c"
    EVSHED_SET_EVENT "[evshed]set_event task %d es 0x%x st 0x%x eid 0x%x hf 0x%x, tick %d"
    EVSHED_SET_INDEX "[evshed] set_index, task %d es 0x%x st 0x%x, index %d"
    EVSHED_GET_INDEX "[evshed] get_index, task %d st 0x%x, index %d"
    EVSHED_CANCEL_EVENT "[evshed] cancel_event, task %d es 0x%x st 0x%x, eid 0x%x"
    EVSHED_SUSPEND "[evshed]suspend, task %d es 0x%x st 0x%x"
    EVSHED_RESUME "[evshed]resume, task %d es 0x%x st 0x%x"
    EVSHED_HANDLER "[evshed]handler task %d es 0x%x st 0x%x eid 0x%x hf 0x%x"
    EVSHED_DEL "[evshed]delete_all, task %d es 0x%x st 0x%x"
    EVSHED_SET_ALIGN "[evshed] set_aligned_timer, task %d st 0x%x max_delay %d"
    EVSHED_UNSET_ALIGN "[evshed]unset_aligned, task %d st 0x%x"


    DCM_COUNTER "[DCM] DCM_CNT:%d"
    DCM_ACTIVE_CYCLES "[DCM] HW_DCM_CYCLES:%d"
# 440 "./driver/sys_drv/init/inc/system_trc.h"
END_MODULE_MSG
# 52 "./build/HCT6737M_65_N/LWG_DSDS/dhl/database/pstrace_db/~codegen_single_Modem.c" 2
