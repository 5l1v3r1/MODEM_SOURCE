# 1 "./service/dhl/database/msglog_db/custom_parse_db.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "./service/dhl/database/msglog_db/custom_parse_db.c"
# 109 "./service/dhl/database/msglog_db/custom_parse_db.c"
typedef int cgen_use_spare_msg_id;
typedef int cgen_use_spare_sap_id;
typedef int cgen_use_spare_module_id;
typedef unsigned short msg_type;
typedef unsigned short sap_type;
typedef unsigned short module_type;



    typedef int cgen_use_L1Boxster;




  typedef struct __va_list { void *__ap; } __builtin_va_list;
# 138 "./service/dhl/database/msglog_db/custom_parse_db.c"
# 1 "interface/service/kal/kal_public_api.h" 1
# 347 "interface/service/kal/kal_public_api.h"
# 1 "interface/service/kal/kal_general_types.h" 1
# 111 "interface/service/kal/kal_general_types.h"
# 1 "interface/service/kal/clib.h" 1
# 112 "interface/service/kal/kal_general_types.h" 2






typedef char kal_char;

typedef unsigned short kal_wchar;


typedef unsigned char kal_uint8;

typedef signed char kal_int8;

typedef unsigned short int kal_uint16;

typedef signed short int kal_int16;

typedef unsigned int kal_uint32;

typedef signed int kal_int32;



   typedef unsigned long long kal_uint64;






   typedef signed long long kal_int64;






typedef unsigned short WCHAR;




typedef enum
{

    KAL_FALSE,

    KAL_TRUE
} kal_bool;
# 348 "interface/service/kal/kal_public_api.h" 2
# 1 "interface/service/kal/kal_public_defs.h" 1
# 282 "interface/service/kal/kal_public_defs.h"
# 1 "interface/service/config/stack_config.h" 1
# 108 "interface/service/config/stack_config.h"
# 1 "interface/sap/hisr_modid.h" 1
# 94 "interface/sap/hisr_modid.h"
# 1 "interface/sap/module_id_range.h" 1
# 131 "interface/sap/module_id_range.h"
# 1 "interface/sap/cross_core/global_modid_range.h" 1
# 69 "interface/sap/cross_core/global_modid_range.h"
typedef enum {

    MOD_ID_GLOBAL_BEGIN = 0, MOD_ID_GLOBAL_NIL_CHECK_TAIL = MOD_ID_GLOBAL_BEGIN,
    MOD_ID_GLOBAL_MD1_BEGIN, MOD_ID_GLOBAL_MD1_TAIL = MOD_ID_GLOBAL_MD1_BEGIN + 63,
    MOD_ID_GLOBAL_MD2_BEGIN, MOD_ID_GLOBAL_MD2_TAIL = MOD_ID_GLOBAL_MD2_BEGIN + 31,
    MOD_ID_GLOBAL_MD3_BEGIN, MOD_ID_GLOBAL_MD3_TAIL = MOD_ID_GLOBAL_MD3_BEGIN + 31,
    MOD_ID_GLOBAL_TAIL,

}GLOBAL_MODULE_ID_TYPE;

typedef unsigned int module_global_id_boundary_check1[130 - MOD_ID_GLOBAL_TAIL];
# 132 "interface/sap/module_id_range.h" 2

typedef enum {

 MOD_ID_SRV_CODE_BEGIN = 130, MOD_ID_SRV_CODE_TAIL = MOD_ID_SRV_CODE_BEGIN + 50,

 MOD_ID_MODEM_2G3G_CODE_BEGIN, MOD_ID_MODEM_2G3G_CODE_TAIL = MOD_ID_MODEM_2G3G_CODE_BEGIN + 340,

 MOD_ID_MODEM_4G_CODE_BEGIN, MOD_ID_MODEM_4G_CODE_TAIL = MOD_ID_MODEM_4G_CODE_BEGIN + 230,

 MOD_ID_MIDDLEWARE_CODE_BEGIN, MOD_ID_MIDDLEWARE_CODE_TAIL = MOD_ID_MIDDLEWARE_CODE_BEGIN + 90,

 MOD_ID_DRV_CODE_BEGIN, MOD_ID_DRV_CODE_TAIL = MOD_ID_DRV_CODE_BEGIN + 150,

 MOD_ID_HISR_CODE_BEGIN, MOD_ID_HISR_CODE_TAIL = MOD_ID_HISR_CODE_BEGIN + 148 +1,

   MOD_ID_CODE_END,

 MOD_ID_END = MOD_ID_CODE_END,






 END_OF_MOD_ID_BEGIN = (1023 + 130), END_OF_MOD_ID_TAIL,

}MODULE_ID_TYPE;

typedef unsigned int module_id_boundary_check1[END_OF_MOD_ID_BEGIN - MOD_ID_CODE_END];






typedef enum __cgen_module_type_id_END_OF_MOD_ID_BEGIN{MODULE_TAG_END_OF_MOD_ID_BEGIN = END_OF_MOD_ID_BEGIN,
 END_OF_MOD_ID,
MODULE_ID_CGEN_PARSE_LAST_ID=END_OF_MOD_ID_TAIL }_cgen_module_type_id_END_OF_MOD_ID_TAIL;
# 95 "interface/sap/hisr_modid.h" 2
# 1 "interface/sap/module_hisrid_range.h" 1



typedef enum {
 HISR_ID_CODE_RESERVED = 0,
 HISR_ID_SS_CODE_BEGIN = HISR_ID_CODE_RESERVED,
 HISR_ID_MODEM_CODE_BEGIN = HISR_ID_SS_CODE_BEGIN + 9,
 HISR_ID_DRV_CODE_BEGIN = HISR_ID_MODEM_CODE_BEGIN + 17,
 HISR_ID_LISR2HISR_CODE_BEGIN = HISR_ID_DRV_CODE_BEGIN + 22,
 HISR_ID_CODE_MAX = 9 + 17 + 22 + 61
} HISR_ID_CODE_BEGIN;
# 96 "interface/sap/hisr_modid.h" 2

typedef enum __cgen_module_type_id_MOD_ID_HISR_CODE_BEGIN{MODULE_TAG_MOD_ID_HISR_CODE_BEGIN = MOD_ID_HISR_CODE_BEGIN,
# 126 "interface/sap/hisr_modid.h"
# 1 "interface/service/config/hisr_config_internal.h" 1
# 356 "interface/service/config/hisr_config_internal.h"
# 1 "interface/sap/module_hisrid_range.h" 1
# 357 "interface/service/config/hisr_config_internal.h" 2
# 686 "interface/service/config/hisr_config_internal.h"


MOD_TRCPRCHISR,







# 707 "interface/service/config/hisr_config_internal.h"
MOD_TIMER_HISR,




MOD_BCHISR,




MOD_L1DMA_HISR,




MOD_MALMO_HISR,




MOD_IRDEBUG_HISR,
# 740 "interface/service/config/hisr_config_internal.h"



MOD_UMTS_HISR,






MOD_UL1_LOW_HISR,






MOD_UUL2HISR,










MOD_UL2ACCRXHISR,






MOD_UL2BCP_HISR,






MOD_TL1HISR,




MOD_HIF_CB_HISR,




MOD_LTE_DSP_TIMER_HISR,




MOD_ERT_HISR,




MOD_UL2ACCFINT_HISR,
# 817 "interface/service/config/hisr_config_internal.h"
















MOD_DRV_HISR,







MOD_L1SPHISR,
# 851 "interface/service/config/hisr_config_internal.h"
MOD_HIF_USB_HISR,




MOD_HIF_SDIO_HISR,




MOD_HIF_CLDMA_HISR,
# 878 "interface/service/config/hisr_config_internal.h"



MOD_HIF_CCIFRX_HISR,




MOD_HIF_CCIFTX_HISR,
# 919 "interface/service/config/hisr_config_internal.h"


MOD_GPT_DEBUG_HISR,






MOD_LISR2HISR_WTIMER,




MOD_LISR2HISR_RTR_SLT,




MOD_LISR2HISR_AI,




MOD_LISR2HISR_PI,





MOD_LISR2HISR_LTE2MD_PEER_WAKEUP,






MOD_LISR2HISR_DSP_IRQ_EVENT,






MOD_LISR2HISR_DSP_TIMER,




MOD_L2_LTE_COPRO_HISR,




MOD_L2_LMAC_RAR_HISR,




MOD_L2_LMAC_EAR_HISR,





MOD_LISR2HISR_SEARCHER,




MOD_LISR2HISR_TFCI_0,




MOD_LISR2HISR_TFCI_1,




MOD_LISR2HISR_RXBRP_CC0,




MOD_LISR2HISR_RXBRP_CC1,




MOD_LISR2HISR_RXBRP_CCB,




MOD_LISR2HISR_TDMA,



MOD_LISR2HISR_CTIRQ1,






MOD_LISR2HISR_CTIRQ2,





MOD_LISR2HISR_RXBRP_HS,




MOD_LISR2HISR_RXADC_OVLD_ANT0,




MOD_LISR2HISR_RXADC_OVLD_ANT1,
# 1064 "interface/service/config/hisr_config_internal.h"


MOD_LISR2HISR_SW_LISR2,




MOD_LISR2HISR_SW_LISR1,




MOD_LISR2HISR_SW_LISR3,
# 1090 "interface/service/config/hisr_config_internal.h"


MOD_LISR2HISR_TOPSM,







MOD_LISR2HISR_OSTIMER_ARM,
# 1109 "interface/service/config/hisr_config_internal.h"


MOD_LISR2HISR_MODEM2G_TOPSM,
# 1120 "interface/service/config/hisr_config_internal.h"


MOD_LISR2HISR_DSP2CPU,
# 1136 "interface/service/config/hisr_config_internal.h"

MOD_LISR2HISR_MDGDMA2,




MOD_LISR2HISR_DEINT0,




MOD_LISR2HISR_DEINT1,




MOD_LISR2HISR_DEINT2,




MOD_LISR2HISR_DEINT3,




MOD_LISR2HISR_EINT,





MOD_DCC_HISR,



MOD_LISR2HISR_EMIMPU,
# 1181 "interface/service/config/hisr_config_internal.h"

MOD_BT_SCO_HISR,




MOD_LISR2HISR_CC_IRQ_MD2MD1_SYS,




MOD_LISR2HISR_CC_IRQ_MD2MD1_R0,




MOD_LISR2HISR_CC_IRQ_MD2MD1_R1,




MOD_LISR2HISR_CC_IRQ_MD2MD1_R2,




MOD_LISR2HISR_BUS_MONITOR_MDPERI,




MOD_LISR2HISR_BUS_MONITOR_MDMCU,
# 127 "interface/sap/hisr_modid.h" 2
# 136 "interface/sap/hisr_modid.h"
MODULE_ID_CGEN_PARSE_LAST_ID=MOD_ID_HISR_CODE_TAIL }_cgen_module_type_id_MOD_ID_HISR_CODE_TAIL;
# 109 "interface/service/config/stack_config.h" 2
# 1 "interface/sap/cross_core/global_modid.h" 1
# 66 "interface/sap/cross_core/global_modid.h"
# 1 "interface/sap/cross_core/global_modid_range.h" 1
# 67 "interface/sap/cross_core/global_modid.h" 2


typedef enum __cgen_module_type_id_MOD_ID_GLOBAL_BEGIN{MODULE_TAG_MOD_ID_GLOBAL_BEGIN = MOD_ID_GLOBAL_BEGIN,

    MOD_NIL = MOD_ID_GLOBAL_BEGIN,
MODULE_ID_CGEN_PARSE_LAST_ID=MOD_ID_GLOBAL_NIL_CHECK_TAIL }_cgen_module_type_id_MOD_ID_GLOBAL_NIL_CHECK_TAIL;


typedef enum __cgen_module_type_id_MOD_ID_GLOBAL_MD1_BEGIN{MODULE_TAG_MOD_ID_GLOBAL_MD1_BEGIN = MOD_ID_GLOBAL_MD1_BEGIN,


# 1 "interface/sap/cross_core/md1_module_config.h" 1
# 70 "interface/sap/cross_core/md1_module_config.h"
MOD_GMSS_MD1,
MOD_SIM_MD1,
MOD_SIM_2_MD1,
MOD_L4C_MD1,
MOD_RAC_MD1,
MOD_ERRC_MD1,
MOD_EL1_MD1,
MOD_RRM_MD1,
MOD_RRM_2_MD1,
MOD_RRM_3_MD1,
MOD_RRM_4_MD1,
MOD_RRCE_MD1,
# 79 "interface/sap/cross_core/global_modid.h" 2

MODULE_TAG_MOD_ID_GLOBAL_MD1_TAIL,
MODULE_ID_CGEN_PARSE_LAST_ID=MOD_ID_GLOBAL_MD1_TAIL }_cgen_module_type_id_MOD_ID_GLOBAL_MD1_TAIL;


typedef enum __cgen_module_type_id_MOD_ID_GLOBAL_MD2_BEGIN{MODULE_TAG_MOD_ID_GLOBAL_MD2_BEGIN = MOD_ID_GLOBAL_MD2_BEGIN,


# 1 "interface/sap/cross_core/md2_module_config.h" 1
# 88 "interface/sap/cross_core/global_modid.h" 2

MODULE_TAG_MOD_ID_GLOBAL_MD2_TAIL,
MODULE_ID_CGEN_PARSE_LAST_ID=MOD_ID_GLOBAL_MD2_TAIL }_cgen_module_type_id_MOD_ID_GLOBAL_MD2_TAIL;


typedef enum __cgen_module_type_id_MOD_ID_GLOBAL_MD3_BEGIN{MODULE_TAG_MOD_ID_GLOBAL_MD3_BEGIN = MOD_ID_GLOBAL_MD3_BEGIN,


# 1 "interface/sap/cross_core/md3_module_config.h" 1
# 70 "interface/sap/cross_core/md3_module_config.h"
MOD_UIM_MD3,
MOD_UIM_2_MD3,
MOD_CSS_MD3,
MOD_VAL_MD3,
MOD_CLC_MD3,
MOD_CL1_MD3,
# 97 "interface/sap/cross_core/global_modid.h" 2

MODULE_TAG_MOD_ID_GLOBAL_MD3_TAIL,
MODULE_ID_CGEN_PARSE_LAST_ID=MOD_ID_GLOBAL_MD3_TAIL }_cgen_module_type_id_MOD_ID_GLOBAL_MD3_TAIL;
# 110 "interface/service/config/stack_config.h" 2
# 1 "interface/sap/srv_modid.h" 1
# 93 "interface/sap/srv_modid.h"
typedef enum __cgen_module_type_id_MOD_ID_SRV_CODE_BEGIN{MODULE_TAG_MOD_ID_SRV_CODE_BEGIN = MOD_ID_SRV_CODE_BEGIN,
# 129 "interface/sap/srv_modid.h"
# 1 "interface/service/config/srv_task_config.h" 1
# 329 "interface/service/config/srv_task_config.h"




MOD_DUMMY_NIL = MOD_ID_SRV_CODE_BEGIN,


















MOD_DUMMY_NVRAM,

MOD_NVRAM,































MOD_DUMMY_DHL,

MOD_DHL,

MOD_TST = MOD_DHL,




















# 444 "interface/service/config/srv_task_config.h"


MOD_DUMMY_DHL_READER,

MOD_DHL_READER,

MOD_TST_READER = MOD_DHL_READER,






















# 511 "interface/service/config/srv_task_config.h"


MOD_DUMMY_TST_FTRANS,


MOD_TST_FTRANS,















# 593 "interface/service/config/srv_task_config.h"


MOD_DUMMY_DHLRT,

MOD_DHLRT,

















# 625 "interface/service/config/srv_task_config.h"


MOD_DUMMY_FS,
MOD_FS,























MOD_DUMMY_CCCISRV,


MOD_CCCISRV,
MOD_CCCIFS,
MOD_CCCIIPC,
MOD_CCCIRPC,
MOD_CCCIMSG,
MOD_CCCI,





















MOD_DUMMY_CCCI_IT_CTRL,
MOD_CCCI_IT_CTRL,





















MOD_DUMMY_CCCI_IT_CTRL_TASK1,
MOD_CCCI_IT_CTRL_TASK1,




















MOD_DUMMY_CCCI_IT_CTRL_TASK2,
MOD_CCCI_IT_CTRL_TASK2,




















MOD_DUMMY_CCCI_IT_CTRL_TASK3,
MOD_CCCI_IT_CTRL_TASK3,




















MOD_DUMMY_CCCI_IT_CTRL_TASK4,
MOD_CCCI_IT_CTRL_TASK4,





















MOD_DUMMY_QBM,
MOD_QBM,




















MOD_DUMMY_MDDBG,
MOD_MDDBG,




















MOD_DUMMY_EXTEST,
MOD_EXTEST,






















MOD_DUMMY_DHLSPR,

MOD_DHL_SP_READER,











# 886 "interface/service/config/srv_task_config.h"
MOD_TIMER,

MOD_SYSTEM,
MOD_EVENT_INFO,

MOD_FLC,

MOD_HMU,


MOD_SST_COMMON,
MOD_EX_LOG,
MOD_IDC,
MOD_EARLY_LOG,
MOD_HLT,
# 936 "interface/service/config/srv_task_config.h"


MODULE_TAG_SRV_TAIL,











# 130 "interface/sap/srv_modid.h" 2

MODULE_ID_CGEN_PARSE_LAST_ID=MOD_ID_SRV_CODE_TAIL }_cgen_module_type_id_MOD_ID_SRV_CODE_TAIL;
# 111 "interface/service/config/stack_config.h" 2
# 1 "interface/sap/modem_2g3g_modid.h" 1
# 89 "interface/sap/modem_2g3g_modid.h"
typedef enum __cgen_module_type_id_MOD_ID_MODEM_2G3G_CODE_BEGIN{MODULE_TAG_MOD_ID_MODEM_2G3G_CODE_BEGIN = MOD_ID_MODEM_2G3G_CODE_BEGIN,
# 125 "interface/sap/modem_2g3g_modid.h"
# 1 "interface/service/config/modem_2g3g_task_config.h" 1
# 487 "interface/service/config/modem_2g3g_task_config.h"




MOD_MODEM_DUMMY_BEGIN = MOD_ID_MODEM_2G3G_CODE_BEGIN,



















MOD_DUMMY_RRLP,

MOD_RRLP,










# 552 "interface/service/config/modem_2g3g_task_config.h"


MOD_DUMMY_RATCM,

MOD_RATCM,

MOD_RATCM_2,
# 568 "interface/service/config/modem_2g3g_task_config.h"


















# 708 "interface/service/config/modem_2g3g_task_config.h"


MOD_DUMMY_URR,


MOD_MEME,
# 724 "interface/service/config/modem_2g3g_task_config.h"
MOD_CSE,
# 735 "interface/service/config/modem_2g3g_task_config.h"
MOD_CSCE,
# 746 "interface/service/config/modem_2g3g_task_config.h"
MOD_SIBE,
# 757 "interface/service/config/modem_2g3g_task_config.h"
MOD_USIME,
# 768 "interface/service/config/modem_2g3g_task_config.h"
MOD_RRCE,
# 779 "interface/service/config/modem_2g3g_task_config.h"
MOD_SLCE,
# 790 "interface/service/config/modem_2g3g_task_config.h"
MOD_ADR,
# 801 "interface/service/config/modem_2g3g_task_config.h"
MOD_URR,
# 812 "interface/service/config/modem_2g3g_task_config.h"
MOD_DB,
# 980 "interface/service/config/modem_2g3g_task_config.h"
   

























MOD_DUMMY_UL2,


MOD_URLC,
# 1020 "interface/service/config/modem_2g3g_task_config.h"
MOD_UMAC,
# 1031 "interface/service/config/modem_2g3g_task_config.h"
MOD_UL2,
# 1042 "interface/service/config/modem_2g3g_task_config.h"
MOD_SEQ,
# 1097 "interface/service/config/modem_2g3g_task_config.h"
   













# 1137 "interface/service/config/modem_2g3g_task_config.h"


MOD_DUMMY_UL2D,

MOD_DRLC,
# 1152 "interface/service/config/modem_2g3g_task_config.h"
MOD_BMC,
# 1163 "interface/service/config/modem_2g3g_task_config.h"
MOD_PDCP,
MOD_RABM,
MOD_CSR,
MOD_UL2D,
# 1181 "interface/service/config/modem_2g3g_task_config.h"
   

























MOD_DUMMY_UL1,

MOD_UL1,
# 1219 "interface/service/config/modem_2g3g_task_config.h"

















# 1325 "interface/service/config/modem_2g3g_task_config.h"


MOD_DUMMY_RSVA,

MOD_RSVAS,

MOD_RSVAK,
MOD_RSVAU,
# 1343 "interface/service/config/modem_2g3g_task_config.h"
MOD_RSVAG,


MOD_RSVAE,


































MOD_DUMMY_MM,

MOD_MM,

MOD_MM_2,
# 1395 "interface/service/config/modem_2g3g_task_config.h"























MOD_DUMMY_CC,

MOD_CC,

MOD_CC_2,
# 1435 "interface/service/config/modem_2g3g_task_config.h"
   



















MOD_DUMMY_CISS,

MOD_CISS,

MOD_CISS_2,
# 1469 "interface/service/config/modem_2g3g_task_config.h"





















MOD_DUMMY_SMS,

MOD_SMS,

MOD_SMS_2,
# 1504 "interface/service/config/modem_2g3g_task_config.h"





















MOD_DUMMY_SIM,




MOD_DUMMY_SIM_2,
# 1540 "interface/service/config/modem_2g3g_task_config.h"
MOD_SIM,
# 1552 "interface/service/config/modem_2g3g_task_config.h"





















MOD_SIM_2,


















# 1655 "interface/service/config/modem_2g3g_task_config.h"


MOD_DUMMY_L4,


MOD_ATCI,

MOD_ATCI_2,
# 1672 "interface/service/config/modem_2g3g_task_config.h"
MOD_MBCI,

MOD_MBCI_2,
# 1684 "interface/service/config/modem_2g3g_task_config.h"
MOD_L4C,

MOD_L4C_2,
# 1695 "interface/service/config/modem_2g3g_task_config.h"
MOD_RAT_TCM,

MOD_RAT_TCM_2,
# 1706 "interface/service/config/modem_2g3g_task_config.h"
MOD_TCM,

MOD_TCM_2,
# 1718 "interface/service/config/modem_2g3g_task_config.h"
MOD_SMSAL,

MOD_SMSAL_2,
# 1729 "interface/service/config/modem_2g3g_task_config.h"
MOD_UEM,


MOD_RAC,

MOD_RAC_2,
# 1744 "interface/service/config/modem_2g3g_task_config.h"
MOD_SMU,

MOD_SMU_2,
# 1755 "interface/service/config/modem_2g3g_task_config.h"
MOD_USAT,


MOD_CSM,

MOD_CSM_2,
# 1770 "interface/service/config/modem_2g3g_task_config.h"
MOD_ENG,

MOD_ENG_2,



MOD_PHB,

MOD_PHB_2,
# 1789 "interface/service/config/modem_2g3g_task_config.h"
MOD_TFTLIB,

MOD_TFTLIB_2,
# 1807 "interface/service/config/modem_2g3g_task_config.h"



















# 1840 "interface/service/config/modem_2g3g_task_config.h"








MOD_DUMMY_RR,

MOD_RRM,
MOD_GAS = MOD_RRM,
MOD_AS = MOD_RRM,
MOD_RMPC = MOD_RRM,

MOD_RRM_2,
MOD_GAS_2 = MOD_RRM_2,
MOD_AS_2 = MOD_RRM_2,
MOD_RMPC_2 = MOD_RRM_2,

MOD_RRM_3,
MOD_GAS_3 = MOD_RRM_3,
MOD_AS_3 = MOD_RRM_3,
MOD_RMPC_3 = MOD_RRM_3,

MOD_RRM_4,
MOD_GAS_4 = MOD_RRM_4,
MOD_AS_4 = MOD_RRM_4,
MOD_RMPC_4 = MOD_RRM_4,





MOD_RLC,

MOD_RLC_2,
# 1897 "interface/service/config/modem_2g3g_task_config.h"
MOD_MAC,

MOD_MAC_2,
# 1908 "interface/service/config/modem_2g3g_task_config.h"
MOD_LAPDM,

MOD_LAPDM_2,
# 1920 "interface/service/config/modem_2g3g_task_config.h"
MOD_MPAL,

MOD_MPAL_2,
# 1936 "interface/service/config/modem_2g3g_task_config.h"
   






# 1956 "interface/service/config/modem_2g3g_task_config.h"
























MOD_DUMMY_REASM,

MOD_REASM,

MOD_REASM_2,
# 1993 "interface/service/config/modem_2g3g_task_config.h"



















MOD_DUMMY_SNDCP,

MOD_SNDCP,

MOD_SNDCP_2,
# 2025 "interface/service/config/modem_2g3g_task_config.h"



















MOD_DUMMY_SM,

MOD_SM,

MOD_SM_2,
# 2060 "interface/service/config/modem_2g3g_task_config.h"




















MOD_DUMMY_LLC,

MOD_LLC,

MOD_LLC_2,
# 2093 "interface/service/config/modem_2g3g_task_config.h"



















MOD_DUMMY_DATA,

MOD_TDT,

MOD_TDT_2,
# 2125 "interface/service/config/modem_2g3g_task_config.h"
MOD_RLP,

MOD_RLP_2,
# 2136 "interface/service/config/modem_2g3g_task_config.h"
MOD_L2R,

MOD_L2R_2,
# 2147 "interface/service/config/modem_2g3g_task_config.h"
MOD_T30,

MOD_T30_2,
# 2158 "interface/service/config/modem_2g3g_task_config.h"
MOD_FA,

MOD_FA_2,
# 2171 "interface/service/config/modem_2g3g_task_config.h"













# 2352 "interface/service/config/modem_2g3g_task_config.h"


MOD_DUMMY_L1,




MOD_DUMMY_L1_2,
# 2371 "interface/service/config/modem_2g3g_task_config.h"
MOD_L1,































MOD_L1_2,




















# 2518 "interface/service/config/modem_2g3g_task_config.h"


MOD_DUMMY_EXT_MODEM,

MOD_EXT_MODEM,























MOD_DUMMY_UL1TST,

MOD_UL1TST,
























MOD_DUMMY_ULCS,

MOD_UAGPS,




MOD_UAGPS_CP,






















MOD_NWSEL,

MOD_NWSEL_2,
# 2615 "interface/service/config/modem_2g3g_task_config.h"
MOD_GMSS,

MOD_GMSS_2,
# 2627 "interface/service/config/modem_2g3g_task_config.h"














# 2710 "interface/service/config/modem_2g3g_task_config.h"
MOD_UL1HISR,
# 2721 "interface/service/config/modem_2g3g_task_config.h"
MOD_RFC2507,
# 2732 "interface/service/config/modem_2g3g_task_config.h"


MODULE_TAG_MODEM_DUMMY_TAIL,










# 126 "interface/sap/modem_2g3g_modid.h" 2

MODULE_ID_CGEN_PARSE_LAST_ID=MOD_ID_MODEM_2G3G_CODE_TAIL }_cgen_module_type_id_MOD_ID_MODEM_2G3G_CODE_TAIL;
# 112 "interface/service/config/stack_config.h" 2
# 1 "interface/sap/modem_4g_modid.h" 1
# 81 "interface/sap/modem_4g_modid.h"
typedef enum __cgen_module_type_id_MOD_ID_MODEM_4G_CODE_BEGIN{MODULE_TAG_MOD_ID_MODEM_4G_CODE_BEGIN = MOD_ID_MODEM_4G_CODE_BEGIN,
# 117 "interface/sap/modem_4g_modid.h"
# 1 "interface/service/config/modem_4g_task_config.h" 1
# 459 "interface/service/config/modem_4g_task_config.h"




MOD_MODEM_4G_DUMMY_BEGIN = MOD_ID_MODEM_4G_CODE_BEGIN,
















MOD_DUMMY_EUTEST,
MOD_EUTEST,






















MOD_DUMMY_ETSTM,

MOD_ETSTM,


























MOD_DUMMY_ERT,


MOD_ERLCUL,
MOD_EMAC,
MOD_EL1TX,
MOD_LTE_TIMER,






















MOD_DUMMY_EL1,


MOD_EL1,






















MOD_DUMMY_EL2,


MOD_ERLCDL,
MOD_EPDCP,
MOD_EL2TASK,
MOD_ROHC,
MOD_EL2TASK_EMAC,























MOD_DUMMY_MRS,

MOD_MRS,

MOD_MRS_2,
# 633 "interface/service/config/modem_4g_task_config.h"






















MOD_ERRC,
MOD_ERRC_EVTH,
MOD_ERRC_CEL,
MOD_ERRC_CHM,
MOD_ERRC_CONN,
MOD_ERRC_MOB,
MOD_ERRC_RCM,
MOD_ERRC_SPV,
MOD_ERRC_SYS,
MOD_EAS,
# 680 "interface/service/config/modem_4g_task_config.h"






   









# 723 "interface/service/config/modem_4g_task_config.h"



MOD_EMM,


MOD_EMM_CALL,
MOD_EMM_CMNPROC,
MOD_EMM_CONN,
MOD_EMM_ERRCIF,
MOD_EMM_ESMIF,
MOD_EMM_ETCIF,
MOD_EMM_EVALIF,
MOD_EMM_EVTCTRL,
MOD_EMM_MMIF,
MOD_EMM_NASMSG,
MOD_EMM_PLMNSEL,
MOD_EMM_RATBAND,
MOD_EMM_RATCHG,
MOD_EMM_REG,
MOD_EMM_SEC,
MOD_EMM_SV,
MOD_EMM_TIMERIF,








   








# 773 "interface/service/config/modem_4g_task_config.h"


MOD_ESM,








   








# 802 "interface/service/config/modem_4g_task_config.h"


MOD_IMC,

    MOD_IMC_2,
# 815 "interface/service/config/modem_4g_task_config.h"
MOD_IMCB,

    MOD_IMCB_2,
# 826 "interface/service/config/modem_4g_task_config.h"
MOD_IMCSMS,

    MOD_IMCSMS_2,
# 838 "interface/service/config/modem_4g_task_config.h"

















MOD_SDM,





















MOD_VDM,
MOD_VDM_CTRL,
MOD_VDM_TRK,
MOD_VDM_ADS,
MOD_VDM_VCC,




















MOD_DUMMY_IMSP,

MOD_IMSP,

MOD_IMSP_2,
# 916 "interface/service/config/modem_4g_task_config.h"















# 939 "interface/service/config/modem_4g_task_config.h"



MOD_EVAL,








   







# 967 "interface/service/config/modem_4g_task_config.h"



MOD_ETC,








   







# 1096 "interface/service/config/modem_4g_task_config.h"


MOD_MLL1,
















# 1144 "interface/service/config/modem_4g_task_config.h"


MOD_DUMMY_LPP,

MOD_LPP,





















MOD_DUMMY_EDSP,
MOD_EDSP,















# 1199 "interface/service/config/modem_4g_task_config.h"
MOD_EMM_NMSRV,
MOD_EMM_OPIDSRV,
MOD_EMM_USIMSRV,
MOD_EMM_NVMSRV,
MOD_USBOSD,
# 1214 "interface/service/config/modem_4g_task_config.h"


MODULE_TAG_MODEM_4G_DUMMY_TAIL,










# 118 "interface/sap/modem_4g_modid.h" 2

MODULE_ID_CGEN_PARSE_LAST_ID=MOD_ID_MODEM_4G_CODE_TAIL }_cgen_module_type_id_MOD_ID_MODEM_4G_CODE_TAIL;
# 113 "interface/service/config/stack_config.h" 2
# 1 "interface/sap/middleware_modid.h" 1
# 93 "interface/sap/middleware_modid.h"
typedef enum __cgen_module_type_id_MOD_ID_MIDDLEWARE_CODE_BEGIN{MODULE_TAG_MOD_ID_MIDDLEWARE_CODE_BEGIN = MOD_ID_MIDDLEWARE_CODE_BEGIN,
# 129 "interface/sap/middleware_modid.h"
# 1 "interface/service/config/middleWare_task_config.h" 1
# 451 "interface/service/config/middleWare_task_config.h"


MOD_MW_DUMMY_BEGIN = MOD_ID_MIDDLEWARE_CODE_BEGIN,
















MOD_DUMMY_PPP,

MOD_PPP,

























MOD_DUMMY_PFC_SW,

MOD_PFC_SW,
























MOD_DUMMY_UPS,

MOD_UPS,















# 630 "interface/service/config/middleWare_task_config.h"


MOD_DUMMY_SYSDEBUG,

MOD_SYSDEBUG,





















MOD_DUMMY_VT,

MOD_VT,




















MOD_DUMMY_FT,

MOD_FT,




















MOD_DUMMY_FTC,


MOD_FTC,















# 749 "interface/service/config/middleWare_task_config.h"


MOD_DUMMY_LBS,

MOD_GPS,
MOD_LBS,























MOD_DUMMY_IPCORE,


MOD_RATDM,

MOD_RATDM_2,
# 792 "interface/service/config/middleWare_task_config.h"
MOD_IPCORE,
MOD_LTM,
MOD_UPCM,
MOD_TFT_PF,
MOD_LTM_SIM,






















MOD_DUMMY_ETHERCORE,


MOD_ETHERCORE,






















MOD_DUMMY_USBCLASS,


MOD_USBCLASS,
MOD_ACM,
MOD_RNDIS,
MOD_MBIM,
MOD_ECM,






















MOD_DUMMY_USBCORE,


MOD_USBCORE,























MOD_DUMMY_NMU,


MOD_NMU,
MOD_DHCP4C,
MOD_NDPC,






















MOD_CLDMACORE,





















MOD_CCIFCORE,







MOD_CCCI_HISR,















MOD_UARTCORE,























MOD_DUMMY_USBMSD,


MOD_USBMSD,






















MOD_DUMMY_CCCIDEV,


MOD_CCCIDEV,
MOD_CCMNI,
MOD_CCCITTY,





















MOD_DUMMY_CCCIITDEV1,

MOD_CCCIITDEV1,



















MOD_DUMMY_CCCIITDEV2,

MOD_CCCIITDEV2,




















MOD_DUMMY_CCCIITDEV3,

MOD_CCCIITDEV3,



















MOD_DUMMY_CCCIITDEV4,

MOD_CCCIITDEV4,





















MOD_DUMMY_CCCIITFS,

MOD_CCCIITFS,





















MOD_DUMMY_TTY_UT,

MOD_TTY_UT,
















MOD_TTY_UT99,






MOD_DUMMY_TTY_UT2,

MOD_TTY_UT2,





















MOD_DUMMY_TTY_UT3,

MOD_TTY_UT3,






















MOD_DUMMY_EXCP_TTYUT,

MOD_EXCP_TTYUT,





















MOD_DUMMY_SYS_TTY,

MOD_SYS_TEST,






















MOD_BTT,



















MOD_AOMGR,




















MOD_SLT_NL,













MOD_SLT,







MOD_DUMMY_USBIDLE,

MOD_USBIDLE,





















MOD_DUMMY_LTECSR,


MOD_LTECSR,















# 1409 "interface/service/config/middleWare_task_config.h"


MODULE_TAG_MW_DUMMY_TAIL,










# 130 "interface/sap/middleware_modid.h" 2

MODULE_ID_CGEN_PARSE_LAST_ID=MOD_ID_MIDDLEWARE_CODE_TAIL }_cgen_module_type_id_MOD_ID_MIDDLEWARE_CODE_TAIL;
# 114 "interface/service/config/stack_config.h" 2
# 1 "interface/sap/drv_modid.h" 1
# 88 "interface/sap/drv_modid.h"
typedef enum __cgen_module_type_id_MOD_ID_DRV_CODE_BEGIN{MODULE_TAG_MOD_ID_DRV_CODE_BEGIN = MOD_ID_DRV_CODE_BEGIN,
# 124 "interface/sap/drv_modid.h"
# 1 "interface/service/config/drv_task_config.h" 1
# 239 "interface/service/config/drv_task_config.h"



MOD_DRV_DUMMY_BEGIN = MOD_ID_DRV_CODE_BEGIN,

















MOD_DUMMY_CMUX,

MOD_CMUX,
MOD_CMUXUH,
MOD_UPS_HIGH,





















MOD_DUMMY_IDLER,
MOD_IDLER,


























MOD_DUMMY_BMT,

MOD_BMT,




























MOD_DUMMY_L1SP,

MOD_L1SP,





# 362 "interface/service/config/drv_task_config.h"























MOD_DUMMY_L1AUDIO_SPH_SRV,

MOD_L1AUDIO_SPH_SRV,




















MOD_DUMMY_MED,

MOD_MED,
MOD_AUD=MOD_MED,























# 466 "interface/service/config/drv_task_config.h"


MOD_DUMMY_IDLE,

MOD_IDLE,















# 512 "interface/service/config/drv_task_config.h"



MOD_DUMMY_SDIOCORE,

MOD_SDIOCORE,















# 544 "interface/service/config/drv_task_config.h"
MOD_EINT_HISR,
MOD_UART1_HISR,
MOD_UART2_HISR,
MOD_UART3_HISR,
MOD_RTC_HISR,
MOD_MSDC_HISR,




MOD_DP_ENGINE,
MOD_PPP_HW,
MOD_SIM_DRV,
MOD_PMU,
MOD_PMIC,
MOD_LPWR,
MOD_F32K,
MOD_PWM,
MOD_UART,

MOD_DRV_DBG,
MOD_TTY,
MOD_DSPFM,
MOD_DEVDRV,
MOD_EMI,

MOD_VISUAL_HISR,
# 584 "interface/service/config/drv_task_config.h"


MODULE_TAG_DRV_DUMMY_TAIL,











# 125 "interface/sap/drv_modid.h" 2

MODULE_ID_CGEN_PARSE_LAST_ID=MOD_ID_DRV_CODE_TAIL }_cgen_module_type_id_MOD_ID_DRV_CODE_TAIL;
# 115 "interface/service/config/stack_config.h" 2
# 131 "interface/service/config/stack_config.h"
typedef enum
{
    KAL_PRIORITY_CLASS0 = 0,
    KAL_PRIORITY_CLASS1 = 10,
    KAL_PRIORITY_CLASS2 = 20,
    KAL_PRIORITY_CLASS3 = 30,
    KAL_PRIORITY_CLASS4 = 40,
    KAL_PRIORITY_CLASS5 = 50,
    KAL_PRIORITY_CLASS6 = 60,
    KAL_PRIORITY_CLASS7 = 70,
    KAL_PRIORITY_CLASS8 = 80,
    KAL_PRIORITY_CLASS9 = 90,
    KAL_PRIORITY_CLASS10 = 100,
    KAL_PRIORITY_CLASS11 = 110,
    KAL_PRIORITY_CLASS12 = 120,
    KAL_PRIORITY_CLASS13 = 130,
    KAL_PRIORITY_CLASS14 = 140,
    KAL_PRIORITY_CLASS15 = 150,
    KAL_PRIORITY_CLASS16 = 160,
    KAL_PRIORITY_CLASS17 = 170,
    KAL_PRIORITY_CLASS18 = 180,
    KAL_PRIORITY_CLASS19 = 190,
    KAL_PRIORITY_CLASS20 = 200,
    KAL_PRIORITY_CLASS21 = 210,
    KAL_PRIORITY_CLASS22 = 220,
    KAL_PRIORITY_CLASS23 = 230,
    KAL_PRIORITY_CLASS24 = 240,
    KAL_PRIORITY_CLASS25 = 250
} kal_priority_type;




# 1 "interface/service/config/srv_task_config.h" 1
# 165 "interface/service/config/stack_config.h" 2
# 1 "interface/service/config/modem_2g3g_task_config.h" 1
# 166 "interface/service/config/stack_config.h" 2
# 1 "interface/service/config/modem_4g_task_config.h" 1
# 167 "interface/service/config/stack_config.h" 2
# 1 "interface/service/config/middleWare_task_config.h" 1
# 168 "interface/service/config/stack_config.h" 2
# 1 "interface/service/config/drv_task_config.h" 1
# 169 "interface/service/config/stack_config.h" 2
# 184 "interface/service/config/stack_config.h"
typedef unsigned int hisr_max_num_check[(((20)+(128)) - 147) * (149 - ((20)+(128)))];
# 283 "interface/service/kal/kal_public_defs.h" 2

# 1 "interface/service/config/stack_msgs.h" 1
# 285 "interface/service/kal/kal_public_defs.h" 2






typedef struct
{
    kal_uint8 unused;
} kal_taskid_s;
typedef kal_taskid_s* kal_taskid;


typedef struct
{
    kal_uint8 unused;
} kal_hisrid_s;
typedef kal_hisrid_s* kal_hisrid;


typedef struct
{
    kal_uint8 unused;
} kal_semid_s;
typedef kal_semid_s* kal_semid;


typedef struct
{
    kal_uint8 unused;
} kal_msgqid_s;
typedef kal_msgqid_s* kal_msgqid;


typedef struct
{

    kal_uint32 pending_msgs;

    kal_uint32 max_msgs;
} kal_msgq_info;


typedef struct
{
    kal_uint8 unused;
} kal_mutexid_s;

typedef kal_mutexid_s* kal_mutexid;


typedef struct
{
    kal_uint8 unused;
} kal_eventgrpid_s;
typedef kal_eventgrpid_s* kal_eventgrpid;


typedef struct
{
    kal_uint8 unused;
} kal_poolid_s;

typedef kal_poolid_s* kal_poolid;


typedef struct
{
    kal_uint8 unused;
} KAL_ADM_ID_s;
typedef KAL_ADM_ID_s* KAL_ADM_ID;


typedef struct
{
    kal_uint8 unused;
} KAL_AFM_ID_s;
typedef KAL_AFM_ID_s* KAL_AFM_ID;


typedef struct
{
   kal_uint8 unused;
} KAL_FLMM_ID_s;
typedef KAL_FLMM_ID_s* KAL_FLMM_ID;


typedef struct
{
   kal_uint8 unused;
} KAL_SLMM_ID_s;
typedef KAL_SLMM_ID_s* KAL_SLMM_ID;


typedef struct
{
    kal_uint8 unused;
} kal_enhmutexid_s;
typedef kal_enhmutexid_s* kal_enhmutexid;


typedef struct
{
    kal_uint8 unused;
} kal_timerid_s;

typedef kal_timerid_s* kal_timerid;


typedef struct event_scheduler
{
    kal_uint8 unused;
} event_scheduler;


typedef void* eventid;


typedef struct task_entry_struct
{

    kal_uint32 parameter;
} task_entry_struct;


typedef void (*kal_func_ptr)(void);

typedef void (*kal_task_func_ptr)(task_entry_struct *task_entry_ptr);

typedef void (*kal_hisr_func_ptr)(void);

typedef void (*kal_timer_func_ptr)(void *param_ptr);






typedef enum {
   TD_UL = 0x01 << 0,
   TD_DL = 0x01 << 1,
   TD_CTRL = 0x01 << 2,
   TD_RESET = 0x01 << 3
} transfer_direction;






typedef struct local_para_struct {




    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;



} local_para_struct;
# 453 "interface/service/kal/kal_public_defs.h"
typedef struct peer_buff_struct {
   kal_uint16 pdu_len; kal_uint8 ref_count; kal_uint8 pb_resvered; kal_uint16 free_header_space; kal_uint16 free_tail_space;



} peer_buff_struct;

typedef kal_uint16 interrupt_type;
typedef kal_uint16 module_type;
typedef kal_uint16 sap_type;
typedef kal_uint16 msg_type;


typedef struct ilm_struct {
   module_type src_mod_id;
   module_type dest_mod_id;
   sap_type sap_id;
   msg_type msg_id;
   local_para_struct *local_para_ptr;
   peer_buff_struct *peer_buff_ptr;
} ilm_struct;
# 482 "interface/service/kal/kal_public_defs.h"
typedef enum {
 STACK_TIMER_INITIALIZED,
 STACK_TIMER_NOT_RUNNING = STACK_TIMER_INITIALIZED,
 STACK_TIMER_RUNNING,
 STACK_TIMER_NOT_TIMED_OUT = STACK_TIMER_RUNNING,
 STACK_TIMER_EXPIRED,
 STACK_TIMER_TIMED_OUT = STACK_TIMER_EXPIRED,
 STACK_TIMER_STOPPED
} stack_timer_status_type;

typedef enum {
 STACK_TIMER_USER_VIEW_STOPPED,
 STACK_TIMER_USER_VIEW_RUNNING
}stack_timer_user_view_status_type;


typedef struct stack_timer_struct_t {
 stack_timer_user_view_status_type timer_user_view_status;
 stack_timer_status_type timer_status;
 kal_uint8 invalid_time_out_count;
    kal_timerid kal_timer_id;
 kal_uint16 timer_indx;
 module_type dest_mod_id;



} stack_timer_struct;
# 577 "interface/service/kal/kal_public_defs.h"
typedef enum
{

    FACTORY_BOOT = 0,

    NORMAL_BOOT = 1,

    USBMS_BOOT = 2,

    FUE_BOOT = 3,

    NUM_OF_BOOT_MODE,

    UNKNOWN_BOOT_MODE = 0xff
} boot_mode_type;
# 738 "interface/service/kal/kal_public_defs.h"
typedef struct ASSERT_DUMP_PARAM
{
    kal_uint32 addr[10];
    kal_uint32 len[10];
} ASSERT_DUMP_PARAM_T;


typedef enum
{
    ASSERT_NONE,
    ASSERT_SPECIFIC_CALLBACK,
    ASSERT_SPECIFIC_WITH_LR,
    ASSERT_LINE,
    ASSERT_EXT,
    ASSERT_EXT_DUMP,
    ASSERT_NATIVE
} assert_specific_key;


typedef void (*Assert_Specific_Callback)(void* para_ptr);



typedef enum {
    KAL_NO_WAIT,
    KAL_INFINITE_WAIT
} kal_wait_mode;


typedef enum {
    KAL_SUCCESS,
    KAL_ERROR,
    KAL_Q_FULL,
    KAL_Q_EMPTY,
    KAL_SEM_NOT_AVAILABLE,
    KAL_WOULD_BLOCK,
    KAL_MESSAGE_TOO_BIG,
    KAL_INVALID_ID,
    KAL_NOT_INITIALIZED,
    KAL_INVALID_LENGHT,
    KAL_NULL_ADDRESS,
    KAL_NOT_RECEIVE,
    KAL_NOT_SEND,
    KAL_MEMORY_NOT_VALID,
    KAL_NOT_PRESENT,
    KAL_MEMORY_NOT_RELEASE,
    KAL_TIMEOUT
} kal_status;


typedef enum {

    KAL_ERROR_RESERVE1,
    KAL_ERROR_RESERVE2,
    KAL_ERROR_RESERVE3,
    KAL_ERROR_TCB,

    KAL_READY,

    KAL_SLEEP_SUSPEND,
    KAL_SEMA_SUSPEND,
    KAL_ENHMUTEX_SUSPEND,
    KAL_OTHER_SUSPEND,
    KAL_EVENT_SUSPEND,
    KAL_QUEUE_SUSPEND,
    KAL_RESERVE1_SUSPEND,
    KAL_RESERVE2_SUSPEND,
    KAL_RESERVE3_SUSPEND,

    KAL_TERMINATED,
} kal_task_status;
# 978 "interface/service/kal/kal_public_defs.h"
struct adt_node;


typedef void (*ilm_free_callback_t)(ilm_struct *ilm_ptr);

typedef void (*translator_adt_enc_callback_t)(const ilm_struct *ilm_ptr, struct adt_node **adt);
# 349 "interface/service/kal/kal_public_api.h" 2
# 358 "interface/service/kal/kal_public_api.h"
static __inline void * kal_mem_cpy(void* dest, const void* src, kal_uint32 size)
{
    return memcpy ( dest, src, size );
}

static __inline void * kal_mem_set(void* dest, kal_int32 value, kal_uint32 size)
{
    return memset ( dest, value, size );
}

static __inline kal_int32 kal_mem_cmp(const void* src1, const void* src2, kal_uint32 size)
{
    return memcmp ( src1, src2, size );
}

static __inline void * kal_mem_bwcpy(void* dest, const void* src, kal_uint32 size)
{
    char *destaddr = (char*)dest+(size-1);
    char const *srcaddr = (char*)src+(size-1);
    while (size-- > 0) *destaddr-- = *srcaddr--;
    return destaddr;
}
# 407 "interface/service/kal/kal_public_api.h"
extern kal_char *kal_strtok_r(kal_char *string, const kal_char *seperators, kal_char **ppLast);
# 426 "interface/service/kal/kal_public_api.h"
extern char *kal_itoa(int value, char *str, int radix);




extern int kal_wstrlen(const WCHAR *wstr);
extern WCHAR *kal_wstrcpy(WCHAR *to, const WCHAR *from);
extern WCHAR *kal_wstrncpy(WCHAR *to, const WCHAR *from, int n);
extern int kal_wstrcmp(const WCHAR *s1, const WCHAR *s2);
extern int kal_wstrncmp(const WCHAR *s1, const WCHAR *s2, int n);
extern WCHAR *kal_wstrcat(WCHAR *s1, const WCHAR *s2);
extern WCHAR *kal_wstrncat(WCHAR *s1, const WCHAR *s2, int n);
extern WCHAR *kal_wstrchr(const WCHAR *s, int c);
extern WCHAR *kal_wstrrchr(const WCHAR *str, int ch);




extern int kal_dchar_strlen(const char *wstr);
extern char *kal_dchar_strcpy(char *to, const char *from);
extern char *kal_dchar_strncpy(char *to, const char *from, int n);
extern int kal_dchar_strcmp(const char *s1, const char *s2);
extern int kal_dchar_strncmp(const char *s1, const char *s2, int n);
extern char *kal_dchar_strcat(char *s1, const char *s2);
extern char *kal_dchar_strncat(char *s1, const char *s2, int n);
extern char *kal_dchar_strchr(const char *s, int c);
extern char *kal_dchar_strrchr(const char *str, int ch);
extern void kal_dchar2char(WCHAR *outstr, char* tostr);
extern void kal_wsprintf(WCHAR *outstr, char *fmt,...);
# 637 "interface/service/kal/kal_public_api.h"
kal_bool kal_query_systemInit(void);
# 651 "interface/service/kal/kal_public_api.h"
static __inline boot_mode_type kal_query_boot_mode(void)
{
    extern boot_mode_type system_boot_mode;
    return system_boot_mode;
}
# 677 "interface/service/kal/kal_public_api.h"
void *kal_get_current_thread_ID(void);
# 695 "interface/service/kal/kal_public_api.h"
void kal_sleep_task(kal_uint32 time_in_ticks);
# 710 "interface/service/kal/kal_public_api.h"
kal_taskid kal_get_current_task(void);
# 723 "interface/service/kal/kal_public_api.h"
kal_uint32 kal_get_current_task_priority(void);
# 741 "interface/service/kal/kal_public_api.h"
kal_task_status kal_get_task_status(kal_taskid taskid);
# 760 "interface/service/kal/kal_public_api.h"
extern void kal_set_active_module_id(module_type module_id);
# 778 "interface/service/kal/kal_public_api.h"
extern module_type kal_get_active_module_id(void);
# 794 "interface/service/kal/kal_public_api.h"
extern kal_taskid kal_get_task_by_moduleID(module_type modele_id);
# 809 "interface/service/kal/kal_public_api.h"
extern kal_uint32 kal_get_task_total_number(void);
# 823 "interface/service/kal/kal_public_api.h"
 extern kal_uint32 kal_get_send_msg_module_id_total_number(void);
# 841 "interface/service/kal/kal_public_api.h"
extern kal_status kal_priority_transfer(kal_uint32 dest_mod_id);
# 856 "interface/service/kal/kal_public_api.h"
extern kal_status kal_priority_revoke(kal_uint32 dest_mod_id);
# 871 "interface/service/kal/kal_public_api.h"
 extern kal_status kal_task_mode_register(void);
# 888 "interface/service/kal/kal_public_api.h"
extern kal_status kal_task_mode_switch(kal_uint32 dest_mod_id,kal_uint32 mode);
# 905 "interface/service/kal/kal_public_api.h"
extern kal_uint32 kal_get_current_hisr_index(void);
# 924 "interface/service/kal/kal_public_api.h"
void kal_check_stack(void);
# 938 "interface/service/kal/kal_public_api.h"
void kal_activate_hisr(kal_hisrid ext_hisr_id);
# 953 "interface/service/kal/kal_public_api.h"
kal_bool kal_if_hisr(void);
# 968 "interface/service/kal/kal_public_api.h"
kal_bool kal_if_lisr(void);
# 977 "interface/service/kal/kal_public_api.h"
extern void* construct_int_local_para(kal_uint16 local_para_size, kal_uint32 auto_reset,
                                      const kal_char* file_ptr, kal_uint32 line);
extern void free_int_local_para(local_para_struct *local_para_ptr, const kal_char* file, kal_uint32 line);
extern void free_int_local_para_r(local_para_struct *local_para_ptr, const kal_char* file, kal_uint32 line);
extern void* construct_int_peer_buff(kal_uint16 pdu_len, kal_uint16 header_len, kal_uint16 tail_len,
                                     const kal_char* file_name_ptr, kal_uint32 line);
extern void free_int_peer_buff(peer_buff_struct *pdu_ptr, const kal_char* file, kal_uint32 line);
extern void free_int_peer_buff_r(peer_buff_struct *pdu_ptr, const kal_char* file, kal_uint32 line);
extern void destroy_int_ilm(ilm_struct *ilm_ptr, const kal_char* file_name, kal_uint32 line);
# 1179 "interface/service/kal/kal_public_api.h"
extern kal_bool hold_local_para( local_para_struct *local_para_ptr );
# 1199 "interface/service/kal/kal_public_api.h"
extern kal_bool hold_local_para_r(local_para_struct *local_para_ptr);
# 1218 "interface/service/kal/kal_public_api.h"
void* get_local_para_ptr(local_para_struct *local_para_ptr, kal_uint16 *local_para_len_ptr);
# 1236 "interface/service/kal/kal_public_api.h"
extern kal_bool hold_peer_buff( peer_buff_struct *peer_buff_ptr);
# 1255 "interface/service/kal/kal_public_api.h"
extern kal_bool hold_peer_buff_r(peer_buff_struct *peer_buff_ptr);
# 1272 "interface/service/kal/kal_public_api.h"
void* get_peer_buff_pdu(peer_buff_struct *peer_buff_ptr, kal_uint16 *length_ptr);
# 1293 "interface/service/kal/kal_public_api.h"
extern void prepend_to_peer_buff( peer_buff_struct *peer_buff_ptr,
                                  void *header_data_ptr,
                                  kal_uint16 header_len);
# 1316 "interface/service/kal/kal_public_api.h"
extern void append_to_peer_buff( peer_buff_struct *peer_buff_ptr,
                                 void *tail_data_ptr,
                                 kal_uint16 tail_len);
# 1340 "interface/service/kal/kal_public_api.h"
extern void remove_head_of_peer_buff(peer_buff_struct *peer_buff_ptr, kal_uint16 head_len);
# 1360 "interface/service/kal/kal_public_api.h"
extern void remove_tail_of_peer_buff( peer_buff_struct *peer_buff_ptr,
                                      kal_uint16 tail_len);
# 1382 "interface/service/kal/kal_public_api.h"
extern void update_peer_buff_header(peer_buff_struct *peer_buff_ptr, kal_uint16 new_head_len,
                                    kal_uint16 new_pdu_len, kal_uint16 new_tail_len);
# 1405 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_ext_queue(ilm_struct *ilm_ptr);
# 1430 "interface/service/kal/kal_public_api.h"
kal_bool msg_send(ilm_struct *ilm_ptr);
# 1468 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_adt(ilm_struct *ilm_ptr, translator_adt_enc_callback_t translator_cb, ilm_free_callback_t free_cb);
# 1494 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_to_int_head(ilm_struct *ilm_ptr);
# 1517 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_to_head(ilm_struct *ilm_ptr);
# 1540 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_to_int_head6(module_type _src_mod_id, module_type _dest_mod_id, sap_type _sap_id, msg_type _msg_id,
                           local_para_struct *_local_para_ptr, peer_buff_struct *_peer_buff_ptr);
# 1572 "interface/service/kal/kal_public_api.h"
kal_bool msg_send6(module_type _src_mod_id, module_type _dest_mod_id, sap_type _sap_id, msg_type _msg_id,
                   local_para_struct *_local_para_ptr, peer_buff_struct *_peer_buff_ptr);
# 1585 "interface/service/kal/kal_public_api.h"
kal_bool msg_send5(module_type _src_mod_id, module_type _dest_mod_id, sap_type _sap_id, msg_type _msg_id,
                   local_para_struct *_local_para_ptr);
# 1597 "interface/service/kal/kal_public_api.h"
kal_bool msg_send4(module_type _src_mod_id, module_type _dest_mod_id, sap_type _sap_id, msg_type _msg_id);
# 1626 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_to_head6(module_type _src_mod_id, module_type _dest_mod_id, sap_type _sap_id, msg_type _msg_id,
                           local_para_struct *_local_para_ptr, peer_buff_struct *_peer_buff_ptr);
# 1639 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_to_head5(module_type _src_mod_id, module_type _dest_mod_id, sap_type _sap_id, msg_type _msg_id,
                           local_para_struct *_local_para_ptr);
# 1652 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_to_head4(module_type _src_mod_id, module_type _dest_mod_id, sap_type _sap_id, msg_type _msg_id);
# 1689 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_inline6(module_type src_mod, module_type dest_mod, sap_type sap_id, msg_type msg_id, void *data, kal_uint32 datalen);
# 1725 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_inline_to_head6(module_type src_mod, module_type dest_mod, sap_type sap_id, msg_type msg_id, void *data, kal_uint32 datalen);
# 1834 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_8bytes_inline6(module_type src_mod, module_type dest_mod,sap_type sap_id, msg_type msg_id, kal_uint32 data1, kal_uint32 data2);
# 1870 "interface/service/kal/kal_public_api.h"
kal_bool msg_send_8bytes_inline_to_head6(module_type src_mod, module_type dest_mod, sap_type sap_id, msg_type msg_id, kal_uint32 data1, kal_uint32 data2);
# 1896 "interface/service/kal/kal_public_api.h"
kal_uint32 msg_get_inline_4bytes_data1(ilm_struct *ilm_ptr);
# 1922 "interface/service/kal/kal_public_api.h"
kal_uint32 msg_get_inline_4bytes_data2(ilm_struct *ilm_ptr);
# 1972 "interface/service/kal/kal_public_api.h"
void *msg_get_inline_data(ilm_struct *ilm_ptr);
# 2022 "interface/service/kal/kal_public_api.h"
kal_bool msg_receive_extq(ilm_struct *ilm_ptr);
# 2042 "interface/service/kal/kal_public_api.h"
kal_bool msg_receive_extq_for_stack(ilm_struct *ilm_ptr);
# 2061 "interface/service/kal/kal_public_api.h"
kal_bool msg_receive_intq(ilm_struct *ilm_ptr);
# 2079 "interface/service/kal/kal_public_api.h"
kal_int32 msg_get_task_extq_messages(module_type module_id);
# 2094 "interface/service/kal/kal_public_api.h"
kal_int32 msg_get_extq_messages(void);
# 2112 "interface/service/kal/kal_public_api.h"
kal_int32 msg_get_task_extq_capacity(module_type tmod);
# 2127 "interface/service/kal/kal_public_api.h"
kal_int32 msg_get_extq_capacity(void);
# 2156 "interface/service/kal/kal_public_api.h"
kal_mutexid kal_create_mutex(kal_char* mutex_name);
# 2180 "interface/service/kal/kal_public_api.h"
void kal_take_mutex(kal_mutexid mutex_ptr);
# 2199 "interface/service/kal/kal_public_api.h"
void kal_give_mutex(kal_mutexid mutex_ptr);
# 2217 "interface/service/kal/kal_public_api.h"
void kal_mutex_waiting_count(kal_mutexid mutex_ptr, kal_uint32 *waiting_count);
# 2239 "interface/service/kal/kal_public_api.h"
kal_enhmutexid kal_create_enh_mutex(kal_char *mutex_name);
# 2265 "interface/service/kal/kal_public_api.h"
void kal_take_enh_mutex(kal_enhmutexid mutex_ptr);
# 2284 "interface/service/kal/kal_public_api.h"
void kal_give_enh_mutex(kal_enhmutexid mutex_ptr);
# 2307 "interface/service/kal/kal_public_api.h"
kal_semid kal_create_sem(kal_char *sem_name, kal_uint32 initial_count);
# 2330 "interface/service/kal/kal_public_api.h"
kal_status kal_take_sem(kal_semid sem_ptr, kal_wait_mode wait_mode);
# 2348 "interface/service/kal/kal_public_api.h"
void kal_give_sem(kal_semid sem_ptr);
# 2371 "interface/service/kal/kal_public_api.h"
kal_eventgrpid kal_create_event_group(kal_char *eventgrp_name);
# 2395 "interface/service/kal/kal_public_api.h"
kal_status kal_set_eg_events(kal_eventgrpid eg_ptr, kal_uint32 events, kal_uint8 operation);
# 2427 "interface/service/kal/kal_public_api.h"
kal_status kal_retrieve_eg_events(kal_eventgrpid eg_ptr, kal_uint32 requested_events, kal_uint8 operation,
                                  kal_uint32 *retrieved_events, kal_uint32 suspend);
# 2462 "interface/service/kal/kal_public_api.h"
kal_status kal_retrieve_eg_events_timeout(kal_eventgrpid eg_ptr, kal_uint32 requested_events, kal_uint8 operation,
                                          kal_uint32 *retrieved_events, kal_uint32 timeout);







extern KAL_ADM_ID (kal_adm_create)(void *mem_addr, kal_uint32 size, kal_uint32 *subpool_size, kal_bool islogging);
extern KAL_ADM_ID (kal_adm_create_and_profile)(void *mem_addr, kal_uint32 size, kal_uint32 *subpool_size, kal_bool islogging);
# 2511 "interface/service/kal/kal_public_api.h"
extern KAL_ADM_ID kal_adm_create2(void *mem_addr, kal_uint32 size, kal_uint32 *subpool_size, kal_uint32 flags, kal_int8 extheader_size_in_word);
# 2530 "interface/service/kal/kal_public_api.h"
extern kal_status kal_adm_delete(KAL_ADM_ID adm_id);

extern void *__kal_adm_alloc(KAL_ADM_ID adm_id, kal_uint32 size, kal_uint32 *actual_size, kal_uint32 opt, char *filename, kal_uint32 line);
extern void *__kal_adm_alloc_nc(KAL_ADM_ID adm_id, kal_uint32 size, kal_uint32 *actual_size, kal_uint32 option, char *filename, kal_uint32 line);
extern void *__kal_adm_alloc_c(KAL_ADM_ID adm_id, kal_uint32 size, kal_uint32 *actual_size, kal_uint32 option, char *filename, kal_uint32 line);

extern void *__kal_adm_realloc(KAL_ADM_ID adm_id, void *ptr, kal_uint32 size, kal_uint32 *actual_size, kal_uint32 opt, char *filename, kal_uint32 line);
extern void *__kal_adm_realloc_nc(KAL_ADM_ID adm_id, void *ptr, kal_uint32 size, kal_uint32 *actual_size, kal_uint32 opt, char *filename, kal_uint32 line);
extern void *__kal_adm_realloc_c(KAL_ADM_ID adm_id, void *ptr, kal_uint32 size, kal_uint32 *actual_size, kal_uint32 opt, char *filename, kal_uint32 line);
# 2757 "interface/service/kal/kal_public_api.h"
extern void kal_adm_free(KAL_ADM_ID adm_id, void *ptr);
# 2776 "interface/service/kal/kal_public_api.h"
extern void *kal_adm_get_extheader(KAL_ADM_ID adm_id, void *ptr);
# 2795 "interface/service/kal/kal_public_api.h"
extern kal_uint32 kal_adm_get_max_alloc_size(KAL_ADM_ID adm_id);
# 2812 "interface/service/kal/kal_public_api.h"
extern kal_uint32 kal_adm_get_total_left_size(KAL_ADM_ID adm_id);
# 2826 "interface/service/kal/kal_public_api.h"
extern void *kal_adm_check_integrity(KAL_ADM_ID adm_id);


extern void kal_adm_print_log(KAL_ADM_ID adm_id);
extern kal_uint32 kal_adm_calc_worst_alloc_size(KAL_ADM_ID adm_id, kal_uint32 size, kal_uint32 option);
extern void *kal_adm_get_prev_block_ptr(KAL_ADM_ID adm_id,void *mem_addr);
extern void *kal_adm_get_next_block_ptr(KAL_ADM_ID adm_id,void *mem_addr);
extern void *kal_adm_get_trans_ptr(KAL_ADM_ID adm_id,void *mem_addr);
# 2935 "interface/service/kal/kal_public_api.h"
extern KAL_AFM_ID kal_afm_create(void *mem_addr, kal_uint32 size, kal_uint32 *subpool_size,kal_uint32 *subpool_nr, kal_uint32 flags, kal_uint32 *left_mem);
# 2951 "interface/service/kal/kal_public_api.h"
extern kal_status kal_afm_delete(KAL_AFM_ID afm_id);

extern void *kal_afm_internal_alloc(KAL_AFM_ID afm_id, kal_uint32 size, kal_uint32 *actual_size, char *filename, kal_uint32 line);
# 2989 "interface/service/kal/kal_public_api.h"
extern void kal_afm_free(KAL_AFM_ID afm_id, void *ptr);
# 3003 "interface/service/kal/kal_public_api.h"
extern kal_int32 kal_afm_check_integrity(KAL_AFM_ID afm_id);

extern void *kal_afm_internal_alloc_cacheable(KAL_AFM_ID adm_id, kal_uint32 size, kal_uint32 *actual_size, char *filename, kal_uint32 line);
# 3038 "interface/service/kal/kal_public_api.h"
extern void *kal_afm_internal_alloc_noncacheable(KAL_AFM_ID afm_id, kal_uint32 size, kal_uint32 *actual_size, char *filename, kal_uint32 line);
# 3070 "interface/service/kal/kal_public_api.h"
extern kal_int32 kal_afm_print_log(KAL_AFM_ID afm_id);
extern kal_int32 kal_afm_get_subpool_num(KAL_AFM_ID afm_id);
extern kal_int32 kal_afm_info_get(KAL_AFM_ID afm_id, kal_uint32 *option, kal_uint32 *buff_size, kal_uint32 *buff_nr, kal_uint32 *left_buf_nr, kal_uint32 *total_left_mem_sz);
extern kal_int32 kal_afm_custom_performance_info_get(KAL_AFM_ID afm_id, kal_uint32 *option, kal_uint32 *buff_size, kal_uint32 *buff_nr, kal_uint32 *alloc_cnt, kal_uint32 *min_left_buf_nr);
extern kal_int32 kal_afm_set_cuslogging(KAL_AFM_ID afm_id, kal_uint32 cus_log_opt);
extern kal_int32 kal_afm_get_cuslogging(KAL_AFM_ID afm_id, kal_uint32 *cus_log_opt);
extern kal_int32 kal_afm_get_left_subpool_num(KAL_AFM_ID afm_id, kal_uint32 size);






extern void *get_ctrl_buffer_ext(kal_uint32 size, const kal_char *file_name, kal_uint32 line);
extern void free_ctrl_buffer_ext(void *buff_ptr, const kal_char *file_name, kal_uint32 line);
# 3161 "interface/service/kal/kal_public_api.h"
void kal_debug_cbs_leakage_check_start(void);
void kal_debug_cbs_leakage_check_stop(void);
# 3185 "interface/service/kal/kal_public_api.h"
kal_uint32 kal_get_systicks(void);
# 3203 "interface/service/kal/kal_public_api.h"
kal_uint32 kal_secs_to_ticks(kal_uint32 secs);
# 3221 "interface/service/kal/kal_public_api.h"
kal_uint32 kal_milli_secs_to_ticks(kal_uint32 milli_secs);
# 3239 "interface/service/kal/kal_public_api.h"
kal_uint32 kal_ticks_to_secs(kal_uint32 ticks);
# 3257 "interface/service/kal/kal_public_api.h"
kal_uint32 kal_ticks_to_milli_secs(kal_uint32 ticks);
# 3289 "interface/service/kal/kal_public_api.h"
kal_timerid kal_create_timer(kal_char* timer_name);
# 3314 "interface/service/kal/kal_public_api.h"
void kal_set_timer(kal_timerid timer_ptr,
                   kal_timer_func_ptr handler_func_ptr, void* handler_param_ptr,
                   kal_uint32 delay, kal_uint32 reschedule_time);
# 3334 "interface/service/kal/kal_public_api.h"
void kal_cancel_timer(kal_timerid timer_ptr);
# 3349 "interface/service/kal/kal_public_api.h"
kal_uint32 kal_get_remaining_time(kal_timerid timer_ptr);
# 3380 "interface/service/kal/kal_public_api.h"
extern void stack_init_timer(stack_timer_struct *stack_timer,
                            kal_char *timer_name,
                            module_type module_id);
# 3408 "interface/service/kal/kal_public_api.h"
extern stack_timer_struct *stack_create_timer(kal_char *timer_name, module_type module_id);
# 3433 "interface/service/kal/kal_public_api.h"
extern void stack_start_timer(stack_timer_struct *stack_timer,
                              kal_uint16 timer_indx,
                              kal_uint32 init_time);
# 3453 "interface/service/kal/kal_public_api.h"
extern stack_timer_status_type stack_stop_timer(stack_timer_struct *stack_timer);
# 3470 "interface/service/kal/kal_public_api.h"
extern stack_timer_status_type stack_timer_status(stack_timer_struct *stack_timer,
                                                    kal_uint32 *time_remaining);
# 3486 "interface/service/kal/kal_public_api.h"
static __inline kal_uint32 stack_timer_get_remaining_time(stack_timer_struct *stack_timer)
{
    kal_uint32 remaining = 0;

    stack_timer_status(stack_timer, &remaining);

    return remaining;
}
# 3513 "interface/service/kal/kal_public_api.h"
extern kal_bool stack_is_time_out_valid(stack_timer_struct *stack_timer);
# 3531 "interface/service/kal/kal_public_api.h"
extern void stack_process_time_out(stack_timer_struct *stack_timer);

extern kal_uint8 stack_time_out_messages_in_queue(stack_timer_struct *stack_timer);

extern stack_timer_user_view_status_type
stack_timer_user_view_status(stack_timer_struct *stack_timer,
                              kal_uint32 *time_remaining);
# 3557 "interface/service/kal/kal_public_api.h"
typedef void * (*malloc_fp_t)(unsigned int size);
# 3572 "interface/service/kal/kal_public_api.h"
typedef void * (*realloc_fp_t)(void *ptr, unsigned int new_size);
# 3585 "interface/service/kal/kal_public_api.h"
typedef void (*free_fp_t)(void *ptr);
# 3638 "interface/service/kal/kal_public_api.h"
extern event_scheduler *evshed_create(kal_char *evshed_name, module_type module_id,
                                      kal_uint32 allowed_time_shift, kal_uint16 allowed_time_shift_sleep_mode);
# 3656 "interface/service/kal/kal_public_api.h"
extern void evshed_set_index(event_scheduler *es_usr, kal_uint16 timer_index);
# 3672 "interface/service/kal/kal_public_api.h"
extern kal_uint16 evshed_get_index(ilm_struct *expired_ilm);
# 3698 "interface/service/kal/kal_public_api.h"
extern eventid evshed_set_event(event_scheduler *es,
                                kal_timer_func_ptr event_hf,
                                void *event_hf_param,
                                kal_uint32 elapse_time);
# 3727 "interface/service/kal/kal_public_api.h"
extern eventid evshed_set_event_userid(event_scheduler *es,
                                kal_timer_func_ptr event_hf,
                                void *event_hf_param,
                                kal_uint32 elapse_time,
                                kal_uint32 event_user_id);
# 3749 "interface/service/kal/kal_public_api.h"
extern kal_uint32 evshed_get_event_userid(eventid user_eventid);
# 3770 "interface/service/kal/kal_public_api.h"
extern kal_int32 evshed_cancel_event(event_scheduler *es, eventid *eid);
# 3784 "interface/service/kal/kal_public_api.h"
extern kal_uint32 evshed_get_remaining_time(event_scheduler *es, eventid eid);
# 3800 "interface/service/kal/kal_public_api.h"
extern void evshed_delete_all_events(event_scheduler *es);
# 3823 "interface/service/kal/kal_public_api.h"
extern void evshed_timer_handler(event_scheduler *es);
# 3837 "interface/service/kal/kal_public_api.h"
extern kal_bool evshed_has_pending_events(event_scheduler *es);
# 3853 "interface/service/kal/kal_public_api.h"
extern void evshed_suspend_all_events(event_scheduler *es);
# 3868 "interface/service/kal/kal_public_api.h"
extern void evshed_resume_all_events(event_scheduler *es);
# 3891 "interface/service/kal/kal_public_api.h"
extern void evshed_enable_protect_property(event_scheduler *es);
# 3927 "interface/service/kal/kal_public_api.h"
extern void kal_assert_fail_line(char* expr, char* file, kal_uint32 line);
extern void kal_assert_fail_ext(char* expr, char* file, kal_uint32 line, kal_uint32 ex1, kal_uint32 ex2, kal_uint32 ex3);
extern void kal_assert_fail_dump(char* expr, char* file, kal_uint32 line, kal_uint32 ex1, kal_uint32 ex2, kal_uint32 ex3, ASSERT_DUMP_PARAM_T *dump_param);
# 4059 "interface/service/kal/kal_public_api.h"
void kal_profile_enable(void);
# 4074 "interface/service/kal/kal_public_api.h"
float kal_profile_get_cpu_usage(void);
# 4096 "interface/service/kal/kal_public_api.h"
extern kal_uint32 kal_lock_current_stack();
# 4112 "interface/service/kal/kal_public_api.h"
extern kal_uint32 kal_unlock_current_stack();
# 139 "./service/dhl/database/msglog_db/custom_parse_db.c" 2
# 1 "interface/service/kal/kal_public_defs.h" 1
# 140 "./service/dhl/database/msglog_db/custom_parse_db.c" 2
# 1 "./service/dhl/database/sap_info.h" 1
# 35 "./service/dhl/database/sap_info.h"
typedef enum {
 GMMREG_SAP__MOD_MM__MOD_RAC,
 MM_SMS_SAP__MOD_MM__MOD_SMS,
 MM_CC_SAP__MOD_MM__MOD_CC,
 MM_SS_SAP__MOD_MM__MOD_CISS,
 MM_AS_SAP__MOD_MM__MOD_AS,
 MM_AS_SAP__MOD_MM__MOD_RRM,
 MM_SIM_SAP__MOD_MM__MOD_SIM,
 GMM_SM_SAP__MOD_MM__MOD_SM,
 MNCC_SAP__MOD_CC__MOD_CSM,
 MNSMS_SAP__MOD_SMS__MOD_SMSAL,
 MNSS_SAP__MOD_CISS__MOD_CSM,
 CISS_CISS_SAP__MOD_CISS__MOD_CISS,
 CSM_TDT_SAP__MOD_CSM__MOD_TDT,
 CSM_L2R_SAP__MOD_CSM__MOD_L2R,
 CSM_SIM_SAP__MOD_CSM__MOD_SIM,
 CSM_L4C_SAP__MOD_CSM__MOD_L4C,
 CSM_VT_SAP__MOD_CSM__MOD_VT,



 SMSAL_L4C_SAP__MOD_SMSAL__MOD_L4C,
 UEM_L4C_SAP__MOD_UEM__MOD_L4C,
 PHB_L4C_SAP__MOD_PHB__MOD_L4C,
 SMU_L4C_SAP__MOD_SMU__MOD_L4C,
 L4C_RAT_TCM_SAP__MOD_L4C__MOD_RAT_TCM,
 L4C_RAT_TCM_SAP__MOD_RAT_TCM__MOD_L4C,
 RAT_TCM_TCM_SAP__MOD_RAT_TCM__MOD_TCM,
 RAT_TCM_TCM_SAP__MOD_TCM__MOD_RAT_TCM,
 RAC_L4C_SAP__MOD_L4C__MOD_RAC,
 UART_L4C_SAP__MOD_UART__MOD_L4C,
 L4C_SM_SAP__MOD_SM__MOD_L4C,
 L4C_SM_SAP__MOD_L4C__MOD_SM,
 L4C_SAP__MOD_L4C__MOD_L4C_2,
 RRM_RMPC_SAP__MOD_RRM__MOD_RMC,
 RRM_RMPC_SAP__MOD_RRM__MOD_RMPC,
 RRM_RMPC_SAP__MOD_RRM__MOD_AS,
 RMC_LAPDM_SAP__MOD_RMC__MOD_LAPDM,
 LAPDM_MPAL_SAP__MOD_LAPDM__MOD_MPAL,
 RLC_MAC_SAP__MOD_RLC__MOD_MAC,
 RLC_RMPC_SAP__MOD_RLC__MOD_RMPC,
 RLC_MPAL_SAP__MOD_RLC__MOD_MPAL,
 RLC_REASM_SAP__MOD_RLC__MOD_REASM,
 MAC_RMPC_SAP__MOD_MAC__MOD_RMPC,
 RRM_MPAL_SAP__MOD_RRM__MOD_MPAL,
 RMPC_MPAL_SAP__MOD_RMPC__MOD_MPAL,
 RMPC_MPAL_SAP__MOD_RMC__MOD_MPAL,
 RMPC_MPAL_SAP__MOD_AS__MOD_MPAL,
 MAC_MPAL_SAP__MOD_MAC__MOD_MPAL,
 MMI_AS_SAP__MOD_RAC__MOD_AS,
 SMSAL_AS_SAP__MOD_SMS__MOD_AS,
 LLC_GMM_SAP__MOD_LLC__MOD_MM,
 LLC_RLC_SAP__MOD_LLC__MOD_RLC,
 LLC_SNDCP_SAP__MOD_LLC__MOD_SNDCP,
 LLC_SMS_SAP__MOD_LLC__MOD_SMS,
 GMM_RLC_SAP__MOD_MM__MOD_RLC,
 SNDCP_REG_SAP__MOD_SNDCP__MOD_TCM,
 SM_SNDCP_SAP__MOD_SM__MOD_SNDCP,
 SMREG_SAP__MOD_SM__MOD_TCM,
 PPP_L4C_SAP__MOD_PPP__MOD_L4C,
 PPP_RAT_TCM_SAP__MOD_PPP__MOD_RAT_TCM,
 PPP_RAT_TCM_SAP__MOD_RAT_TCM__MOD_PPP,
 L2R_RLP_SAP__MOD_L2R__MOD_RLP,
 RLP_RA_SAP__MOD_RLP__MOD_L1,
 SNDCP_PPP_SAP__MOD_SNDCP__MOD_PPP,
 DATA_MPAL_SAP__MOD_RLP__MOD_MPAL,
 PS_NVRAM_SAP__MOD_NVRAM__ANY,
 PS_SIM_SAP__MOD_SIM__MOD_SMU,
 PS_SIM_SAP__MOD_SIM__MOD_L4C,
 PS_SIM_SAP__MOD_SIM__MOD_AS,
 PS_SIM_SAP__MOD_SIM__MOD_RRM,
 PS_SIM_SAP__MOD_SIM__MOD_MM,
 PS_SIM_SAP__MOD_SIM__MOD_NWSEL,
 PS_SIM_SAP__MOD_SIM__MOD_GMSS,
 PS_SIM_SAP__MOD_SIM__MOD_EVAL,
 PS_SIM_SAP__MOD_SIM__MOD_USIME,
 PS_SIM_SAP__MOD_SIM__MOD_MEME,
 PS_SIM_SAP__MOD_SIM__MOD_SMSAL,
 PS_SIM_SAP__MOD_SIM__MOD_CSM,
 PS_SIM_SAP__MOD_SIM__MOD_BT,
 PS_SIM_SAP__MOD_SIM__MOD_PHB,
 SIM_SIM_SAP__MOD_SIM__MOD_SIM,
 SIM_SIM_SAP__MOD_SIM__MOD_SIM_2,
 MED_SAP__MOD_MED__ANY,
 MMI_L4C_SAP__MOD_MMI__MOD_L4C,
 ABM_SOC_SAP__MOD_ABM__MOD_SOC,
 L4C_ABM_SAP__MOD_L4C__MOD_ABM,
 TCPIP_SOC_SAP__MOD_TCPIP__MOD_SOC,
 WAP_MMI_SAP__MOD_MMI__MOD_WAP,
 TDT_PPP_SAP__MOD_TDT__MOD_PPP,
 L2R_PPP_SAP__MOD_L2R__MOD_PPP,
 PPP_TCPIP_SAP__MOD_PPP__MOD_TCPIP,
 TCM_TCPIP_SAP__MOD_TCM__MOD_TCPIP,
 SOC_APP_SAP__MOD_SOC__ANY,
 SMSAL_SOC_SAP__MOD_SMSAL__MOD_SOC,
 EM_PS_SAP__MOD_DHL__ANY,
 MPAL_L1_SAP__MOD_MPAL__MOD_L1,
 MAC_L1_SAP__MOD_MAC__MOD_L1,
 RMC_LAPDM_SAP__MOD_AS__MOD_LAPDM,
 MAC_RRM_SAP__MOD_MAC__MOD_AS,
 MAC_RMPC_SAP__MOD_MAC__MOD_AS,
 UL1_MAL1_SAP__MOD_MAL1__MOD_UL1,
 RATCM_RRCE_SAP__MOD_RATCM__MOD_RRCE,
 RATCM_RRCE_SAP__MOD_RATCM_2__MOD_RRCE_2,
 RATCM_SLCE_SAP__MOD_RATCM__MOD_SLCE,
 RATCM_SLCE_SAP__MOD_RATCM_2__MOD_SLCE_2,
 RATCM_CSCE_SAP__MOD_RATCM__MOD_CSCE,
 RATCM_CSCE_SAP__MOD_RATCM_2__MOD_CSCE_2,
 RATCM_CSE_SAP__MOD_RATCM__MOD_CSE,
 RATCM_CSE_SAP__MOD_RATCM_2__MOD_CSE_2,
 RATCM_USIME_SAP__MOD_RATCM__MOD_USIME,
 RATCM_CSR_SAP__MOD_RATCM__MOD_CSR,
 RATCM_BMC_SAP__MOD_RATCM__MOD_BMC,
 RATCM_BMC_SAP__MOD_RATCM_2__MOD_BMC_2,
 RATCM_URLC_SAP__MOD_RATCM__MOD_URLC,
 RATCM_URLC_SAP__MOD_RATCM_2__MOD_URLC_2,
 UAS_GAS_SAP__MOD_UAS__MOD_GAS,
 SLCE_URLC_SAP__MOD_SLCE__MOD_URLC,
 SLCE_URLC_SAP__MOD_SLCE_2__MOD_URLC_2,
 RRCE_URLC_SAP__MOD_RRCE__MOD_URLC,
 RRCE_URLC_SAP__MOD_RRCE_2__MOD_URLC_2,
 URR_SAP__MOD_DRLC__MOD_URR,
 URR_SAP__MOD_DRLC_2__MOD_URR_2,
 URR_SAP__MOD_URR__MOD_RRCE,
 URR_SAP__MOD_URR_2__MOD_RRCE_2,
 CSR_DRLC_SAP__MOD_CSR__MOD_DRLC,
 CSR_DRLC_SAP__MOD_CSR__MOD_DRLC_2,
 BMC_DRLC_SAP__MOD_BMC__MOD_DRLC,
 BMC_DRLC_SAP__MOD_BMC_2__MOD_DRLC_2,
 PDCP_DRLC_SAP__MOD_PDCP__MOD_DRLC,
 PDCP_DRLC_SAP__MOD_PDCP__MOD_DRLC_2,
 PDCP_URLC_SAP__MOD_PDCP__MOD_URLC,
 PDCP_URLC_SAP__MOD_PDCP__MOD_URLC_2,
 RRCE_DRLC_SAP__MOD_RRCE__MOD_DRLC,
 RRCE_DRLC_SAP__MOD_RRCE_2__MOD_DRLC_2,
 MEME_DRLC_SAP__MOD_MEME__MOD_DRLC,
 MEME_DRLC_SAP__MOD_MEME_2__MOD_DRLC_2,
 ADR_DRLC_SAP__MOD_ADR__MOD_DRLC,
 ADR_DRLC_SAP__MOD_ADR_2__MOD_DRLC_2,
 DRLC_URLC_SAP__MOD_DRLC__MOD_URLC,
 DRLC_URLC_SAP__MOD_DRLC_2__MOD_URLC_2,
 SLCE_PDCP_SAP__MOD_SLCE__MOD_PDCP,
 SLCE_PDCP_SAP__MOD_SLCE_2__MOD_PDCP,
 PDCP_RABM_SAP__MOD_PDCP__MOD_RABM,
 SLCE_BMC_SAP__MOD_SLCE__MOD_BMC,
 SLCE_BMC_SAP__MOD_SLCE_2__MOD_BMC_2,
 RRCE_BMC_SAP__MOD_RRCE__MOD_BMC,
 RRCE_BMC_SAP__MOD_RRCE_2__MOD_BMC_2,
 SLCE_RABM_SAP__MOD_SLCE__MOD_RABM,
 SLCE_RABM_SAP__MOD_SLCE_2__MOD_RABM,
 SLCE_CSR_SAP__MOD_SLCE__MOD_CSR,
 SLCE_CSR_SAP__MOD_SLCE_2__MOD_CSR,
 SLCE_UMAC_SAP__MOD_SLCE__MOD_UMAC,
 SLCE_UMAC_SAP__MOD_SLCE_2__MOD_UMAC_2,
 RRCE_UMAC_SAP__MOD_RRCE__MOD_UMAC,
 RRCE_UMAC_SAP__MOD_RRCE_2__MOD_UMAC_2,
 MEME_UMAC_SAP__MOD_MEME__MOD_UMAC,
 MEME_UMAC_SAP__MOD_MEME_2__MOD_UMAC_2,
 URLC_UMAC_SAP__MOD_URLC__MOD_UMAC,
 URLC_UMAC_SAP__MOD_URLC_2__MOD_UMAC_2,
 URLC_URLC_SAP__MOD_URLC__MOD_URLC,
 URLC_URLC_SAP__MOD_URLC_2__MOD_URLC_2,
 CSR_UMAC_SAP__MOD_CSR__MOD_UMAC,
 CSR_UMAC_SAP__MOD_CSR__MOD_UMAC_2,
 RRCE_CSCE_SAP__MOD_RRCE__MOD_CSCE,
 RRCE_CSCE_SAP__MOD_RRCE_2__MOD_CSCE_2,
 RRCE_MEME_SAP__MOD_RRCE__MOD_MEME,
 RRCE_MEME_SAP__MOD_RRCE_2__MOD_MEME_2,
 RRCE_RRCE_SAP__MOD_RRCE__MOD_RRCE,
 RRCE_RRCE_SAP__MOD_RRCE_2__MOD_RRCE_2,
 CSCE_MEME_SAP__MOD_CSCE__MOD_MEME,
 CSCE_MEME_SAP__MOD_CSCE_2__MOD_MEME_2,
 CSE_MEME_SAP__MOD_CSE__MOD_MEME,
 CSE_MEME_SAP__MOD_CSE_2__MOD_MEME_2,
 CSCE_SLCE_SAP__MOD_CSCE__MOD_SLCE,
 CSCE_SLCE_SAP__MOD_CSCE_2__MOD_SLCE_2,
 RRCE_SLCE_SAP__MOD_RRCE__MOD_SLCE,
 RRCE_SLCE_SAP__MOD_RRCE_2__MOD_SLCE_2,
 SIBE_SLCE_SAP__MOD_SIBE__MOD_SLCE,
 SIBE_SLCE_SAP__MOD_SIBE_2__MOD_SLCE_2,
 MEME_SLCE_SAP__MOD_MEME__MOD_SLCE,
 MEME_SLCE_SAP__MOD_MEME_2__MOD_SLCE_2,
 CSE_SLCE_SAP__MOD_CSE__MOD_SLCE,
 CSE_SLCE_SAP__MOD_CSE_2__MOD_SLCE_2,
 SLCE_SLCE_SAP__MOD_SLCE__MOD_SLCE,
 SLCE_SLCE_SAP__MOD_SLCE_2__MOD_SLCE_2,
 CSCE_CSE_SAP__MOD_CSCE__MOD_CSE,
 CSCE_CSE_SAP__MOD_CSCE_2__MOD_CSE_2,
 CSCE_SIBE_SAP__MOD_CSCE__MOD_SIBE,
 CSCE_SIBE_SAP__MOD_CSCE_2__MOD_SIBE_2,
 CSCE_USIME_SAP__MOD_CSCE__MOD_USIME,
 CSCE_USIME_SAP__MOD_CSCE_2__MOD_USIME_2,
 CSE_SIBE_SAP__MOD_CSE__MOD_SIBE,
 CSE_SIBE_SAP__MOD_CSE_2__MOD_SIBE_2,
 RRCE_SIBE_SAP__MOD_RRCE__MOD_SIBE,
 RRCE_SIBE_SAP__MOD_RRCE_2__MOD_SIBE_2,
 MEME_SIBE_SAP__MOD_MEME__MOD_SIBE,
 RRCE_USIME_SAP__MOD_RRCE__MOD_USIME,
 RRCE_USIME_SAP__MOD_RRCE_2__MOD_USIME_2,
 SLCE_UL1_SAP__MOD_SLCE__MOD_UL1,
 SLCE_UL1_SAP__MOD_SLCE_2__MOD_UL1_2,
 MEME_UL1_SAP__MOD_MEME__MOD_UL1,
 RRCE_UL1_SAP__MOD_RRCE__MOD_UL1,
 RRCE_UL1_SAP__MOD_RRCE_2__MOD_UL1_2,
 CSE_UL1_SAP__MOD_CSE__MOD_UL1,
 CSE_UL1_SAP__MOD_CSE_2__MOD_UL1_2,
 UMAC_UL1_SAP__MOD_UMAC__MOD_UL1,
 UMAC_UL1_SAP__MOD_UMAC_2__MOD_UL1_2,
 MM_RATCM_SAP__MOD_MM__MOD_RATCM,
 SM_RATCM_SAP__MOD_SM__MOD_RATCM,
 SMSAL_RATCM_SAP__MOD_SMSAL__MOD_RATCM,
 RATCM_LLC_SAP__MOD_RATCM__MOD_LLC,
 RATCM_GAS_SAP__MOD_RATCM__MOD_GAS,
 RATCM_GAS_SAP__MOD_RATCM__MOD_RRM,
 RATCM_RLC_SAP__MOD_RATCM__MOD_RLC,
 GAS_CSCE_SAP__MOD_GAS__MOD_CSCE,
 GAS_CSCE_SAP__MOD_GAS_2__MOD_CSCE_2,
 GAS_CSCE_SAP__MOD_RRM__MOD_CSCE,
 GAS_CSCE_SAP__MOD_RRM_2__MOD_CSCE_2,
 GAS_MEME_SAP__MOD_GAS__MOD_MEME,
 GAS_MEME_SAP__MOD_RRM__MOD_MEME,
 GAS_RRCE_SAP__MOD_GAS__MOD_RRCE,
 GAS_RRCE_SAP__MOD_GAS_2__MOD_RRCE_2,
 GAS_RRCE_SAP__MOD_RRM__MOD_RRCE,
 SIP_APP_SAP__MOD_SIP__ANY,
 UMAC_UMAC_SAP__MOD_UMAC__MOD_UMAC,
 UMAC_UMAC_SAP__MOD_UMAC_2__MOD_UMAC_2,
 DRLC_UMAC_SAP__MOD_DRLC__MOD_UMAC,
 DRLC_UMAC_SAP__MOD_DRLC_2__MOD_UMAC_2,
 GMMREG_SAP__MOD_MM_2__MOD_RAC_2,
 MM_SMS_SAP__MOD_MM_2__MOD_SMS_2,
 MM_CC_SAP__MOD_MM_2__MOD_CC_2,
 MM_SS_SAP__MOD_MM_2__MOD_CISS_2,
 MM_AS_SAP__MOD_MM_2__MOD_AS_2,
 MM_AS_SAP__MOD_MM_2__MOD_RRM_2,
 MM_SIM_SAP__MOD_MM_2__MOD_SIM_2,
 GMM_SM_SAP__MOD_MM_2__MOD_SM_2,
 MNCC_SAP__MOD_CC_2__MOD_CSM_2,
 MNSMS_SAP__MOD_SMS_2__MOD_SMSAL_2,
 MNSS_SAP__MOD_CISS_2__MOD_CSM_2,
 CSM_TDT_SAP__MOD_CSM_2__MOD_TDT_2,
 CSM_L2R_SAP__MOD_CSM_2__MOD_L2R_2,
 CSM_SIM_SAP__MOD_CSM_2__MOD_SIM_2,
 CSM_L4C_SAP__MOD_CSM_2__MOD_L4C_2,
 SMSAL_L4C_SAP__MOD_SMSAL_2__MOD_L4C_2,
 UEM_L4C_SAP__MOD_UEM__MOD_L4C_2,
 PHB_L4C_SAP__MOD_PHB_2__MOD_L4C_2,
 SMU_L4C_SAP__MOD_SMU_2__MOD_L4C_2,
 L4C_RAT_TCM_SAP__MOD_L4C_2__MOD_RAT_TCM_2,
 L4C_RAT_TCM_SAP__MOD_RAT_TCM_2__MOD_L4C_2,
 RAT_TCM_TCM_SAP__MOD_RAT_TCM_2__MOD_TCM_2,
 RAT_TCM_TCM_SAP__MOD_TCM_2__MOD_RAT_TCM_2,
# 297 "./service/dhl/database/sap_info.h"
 RAC_L4C_SAP__MOD_L4C_2__MOD_RAC_2,
 UART_L4C_SAP__MOD_UART__MOD_L4C_2,
 RRM_RMPC_SAP__MOD_RRM_2__MOD_RMC_2,
 RRM_RMPC_SAP__MOD_RRM_2__MOD_RMPC_2,
 RRM_RMPC_SAP__MOD_RRM_2__MOD_AS_2,
 RMC_LAPDM_SAP__MOD_RMC_2__MOD_LAPDM_2,
 LAPDM_MPAL_SAP__MOD_LAPDM_2__MOD_MPAL_2,
 RLC_MAC_SAP__MOD_RLC_2__MOD_MAC_2,
 RLC_RMPC_SAP__MOD_RLC_2__MOD_RMPC_2,
 RLC_MPAL_SAP__MOD_RLC_2__MOD_MPAL_2,
 RLC_REASM_SAP__MOD_RLC_2__MOD_REASM_2,
 MAC_RMPC_SAP__MOD_MAC_2__MOD_RMPC_2,
 RRM_MPAL_SAP__MOD_RRM_2__MOD_MPAL_2,
 RMPC_MPAL_SAP__MOD_RMPC_2__MOD_MPAL_2,
 RMPC_MPAL_SAP__MOD_RMC_2__MOD_MPAL_2,
 RMPC_MPAL_SAP__MOD_AS_2__MOD_MPAL_2,
 MAC_MPAL_SAP__MOD_MAC_2__MOD_MPAL_2,
 MMI_AS_SAP__MOD_RAC_2__MOD_AS_2,
 SMSAL_AS_SAP__MOD_SMS_2__MOD_AS_2,
 LLC_GMM_SAP__MOD_LLC_2__MOD_MM_2,
 LLC_RLC_SAP__MOD_LLC_2__MOD_RLC_2,
 LLC_SNDCP_SAP__MOD_LLC_2__MOD_SNDCP_2,
 LLC_SMS_SAP__MOD_LLC_2__MOD_SMS_2,
 GMM_RLC_SAP__MOD_MM_2__MOD_RLC_2,
 SNDCP_REG_SAP__MOD_SNDCP_2__MOD_TCM_2,
 SM_SNDCP_SAP__MOD_SM_2__MOD_SNDCP_2,
 SMREG_SAP__MOD_SM_2__MOD_TCM_2,
 PPP_L4C_SAP__MOD_PPP__MOD_L4C_2,
 PPP_RAT_TCM_SAP__MOD_PPP__MOD_RAT_TCM_2,
 PPP_RAT_TCM_SAP__MOD_RAT_TCM_2__MOD_PPP,
 L2R_RLP_SAP__MOD_L2R_2__MOD_RLP_2,
 RLP_RA_SAP__MOD_RLP_2__MOD_L1_2,
 SNDCP_PPP_SAP__MOD_SNDCP_2__MOD_PPP,
 DATA_MPAL_SAP__MOD_RLP_2__MOD_MPAL_2,
 PS_SIM_SAP__MOD_SIM_2__MOD_SMU_2,
 PS_SIM_SAP__MOD_SIM_2__MOD_L4C_2,
 PS_SIM_SAP__MOD_SIM_2__MOD_AS_2,
 PS_SIM_SAP__MOD_SIM_2__MOD_RRM_2,
 PS_SIM_SAP__MOD_SIM_2__MOD_MM_2,
 PS_SIM_SAP__MOD_SIM_2__MOD_NWSEL_2,
 PS_SIM_SAP__MOD_SIM_2__MOD_GMSS_2,
 PS_SIM_SAP__MOD_SIM_2__MOD_EVAL_2,
 PS_SIM_SAP__MOD_SIM_2__MOD_USIME_2,
        PS_SIM_SAP__MOD_SIM_2__MOD_MEME_2,
 PS_SIM_SAP__MOD_SIM_2__MOD_SMSAL_2,
 PS_SIM_SAP__MOD_SIM_2__MOD_CSM_2,
 PS_SIM_SAP__MOD_SIM_2__MOD_BT_2,
 PS_SIM_SAP__MOD_SIM_2__MOD_PHB_2,
 SIM_SIM_SAP__MOD_SIM_2__MOD_SIM_2,
 SIM_SIM_SAP__MOD_SIM_2__MOD_SIM,
 MMI_L4C_SAP__MOD_MMI__MOD_L4C_2,
 L4C_ABM_SAP__MOD_L4C_2__MOD_ABM,
 TDT_PPP_SAP__MOD_TDT_2__MOD_PPP,
 L2R_PPP_SAP__MOD_L2R_2__MOD_PPP,
 TCM_TCPIP_SAP__MOD_TCM_2__MOD_TCPIP,
 SMSAL_SOC_SAP__MOD_SMSAL_2__MOD_SOC,
 MPAL_L1_SAP__MOD_MPAL_2__MOD_L1_2,
 MAC_L1_SAP__MOD_MAC_2__MOD_L1_2,
 RMC_LAPDM_SAP__MOD_AS_2__MOD_LAPDM_2,
 MAC_RMPC_SAP__MOD_MAC_2__MOD_AS_2,
 RR_PRR_SAP__MOD_AS__MOD_AS_2,
 J2ME_MMI_SAP__MOD_J2ME__MOD_MMI,
 MMI_J2ME_SAP__MOD_MMI__MOD_J2ME,
 RRM_LAPDM_SAP__MOD_RRM__MOD_LAPDM,
 GPS_SUPL_SAP__MOD_GPS__MOD_SUPL,
 GPS_LCSP_SAP__MOD_RRLP__MOD_GPS,
 RR_RRLP_SAP__MOD_AS__MOD_RRLP,
 RR_PRR_SAP__MOD_RRM__MOD_RRM_2,
 ADR_UL1_SAP__MOD_ADR__MOD_UL1,
 TCPIP_ABM_SAP__MOD_TCPIP__MOD_ABM,
 ABM_APP_SAP__MOD_ABM__ANY,
 MM_RATDM_SAP__MOD_MM__MOD_RATDM,
 SM_RATDM_SAP__MOD_SM__MOD_RATDM,
 TCM_RATDM_SAP__MOD_TCM__MOD_RATDM,
 RATCM_RATDM_SAP__MOD_RATCM__MOD_RATDM,
 RATDM_RATDM_SAP__MOD_RATDM__MOD_RATDM,
 RATDM_RABM_SAP__MOD_RATDM__MOD_RABM,
 RATDM_SNDCP_SAP__MOD_RATDM__MOD_SNDCP,
 RATDM_URLC_SAP__MOD_RATDM__MOD_URLC,
 RATDM_URLC_SAP__MOD_RATDM_2__MOD_URLC_2,
 UMAC_SEQ_SAP__MOD_UMAC__MOD_SEQ,
 UMAC_SEQ_SAP__MOD_UMAC_2__MOD_SEQ,
 URLC_SEQ_SAP__MOD_URLC__MOD_SEQ,
 URLC_SEQ_SAP__MOD_URLC_2__MOD_SEQ,
 SEQ_SEQ_SAP__MOD_SEQ__MOD_SEQ,
 TL1_MAL1_SAP__MOD_MAL1__MOD_TL1,
 SLCE_TL1_SAP__MOD_SLCE__MOD_TL1,
 MEME_TL1_SAP__MOD_MEME__MOD_TL1,
 RRCE_TL1_SAP__MOD_RRCE__MOD_TL1,
 CSE_TL1_SAP__MOD_CSE__MOD_TL1,
 UMAC_TL1_SAP__MOD_UMAC__MOD_TL1,
 ADR_TL1_SAP__MOD_ADR__MOD_TL1,
 URLC_UL2ACCRXHISR_SAP__MOD_URLC__MOD_UL2ACCRXHISR,
 URLC_UL2ACCRXHISR_SAP__MOD_URLC_2__MOD_UL2ACCRXHISR,
 UMAC_UL2ACCRXHISR_SAP__MOD_UMAC__MOD_UL2ACCRXHISR,
 UMAC_UL2ACCRXHISR_SAP__MOD_UMAC_2__MOD_UL2ACCRXHISR,
 SLCE_UL2SEQ_SAP__MOD_SLCE__MOD_SEQ,
 SLCE_UL2SEQ_SAP__MOD_SLCE_2__MOD_SEQ,
 CMUX_UH_SAP__MOD_CMUX__MOD_CMUXUH,
 CMUX_SAP__MOD_CMUX__MOD_CMUX,
 UPS_SAP__MOD_UPS__MOD_UPS,
 UPS_SAP__MOD_UPS__MOD_TCM,
 EEM_EEM_SAP__MOD_EEM__MOD_EEM,
 EEM_HISR_SAP__MOD_EEM__MOD_DRV_HISR,
 EEM_HISR_SAP__MOD_DRV_HISR__MOD_EEM,
 MMI_MMI_SAP__MOD_MMI__MOD_MMI,
 MAC_RRM_SAP__MOD_MAC__MOD_RRM,
 MAC_RRM_SAP__MOD_MAC_2__MOD_RRM_2,

  UPCM_ETC_SAP__MOD_UPCM__MOD_ETC,
  ETC_EMM_SAP__MOD_ETC__MOD_EMM,

  NWSEL_EVAL_SAP__MOD_NWSEL__MOD_EVAL,
  RAC_EVAL_SAP__MOD_RAC__MOD_EVAL,
  TCM_EVAL_SAP__MOD_TCM__MOD_EVAL,
  L4C_EVAL_SAP__MOD_L4C__MOD_EVAL,
  SMS_EVAL_SAP__MOD_SMS__MOD_EVAL,
  SMSAL_EVAL_SAP__MOD_SMSAL__MOD_EVAL,
  CISS_EVAL_SAP__MOD_CISS__MOD_EVAL,
  EVAL_EMM_SAP__MOD_EVAL__MOD_EMM,
  EVAL_ESM_SAP__MOD_EVAL__MOD_ESM,
  EVAL_ERRC_SAP__MOD_EVAL__MOD_ERRC,

 EVTH_ALL_SAP__MOD_ERRC_EVTH__MOD_ERRC_CEL,
 EVTH_ALL_SAP__MOD_ERRC_EVTH__MOD_ERRC_CHM,
 EVTH_ALL_SAP__MOD_ERRC_EVTH__MOD_ERRC_CONN,
 EVTH_ALL_SAP__MOD_ERRC_EVTH__MOD_ERRC_MOB,
 EVTH_ALL_SAP__MOD_ERRC_EVTH__MOD_ERRC_SPV,
 EVTH_ALL_SAP__MOD_ERRC_EVTH__MOD_ERRC_SYS,
 EVTH_ALL_SAP__MOD_ERRC_EVTH__MOD_ERRC_RCM,
 EVTH_ALL_SAP__MOD_ERRC_EVTH__MOD_ERRC_EVTH,
 RCM_CONN_SAP__MOD_ERRC_RCM__MOD_ERRC_CONN,
 RCM_MOB_SAP__MOD_ERRC_RCM__MOD_ERRC_MOB,
 RCM_SPV_SAP__MOD_ERRC_RCM__MOD_ERRC_SPV,
 CEL_CHM_SAP__MOD_ERRC_CEL__MOD_ERRC_CHM,
 CEL_CONN_SAP__MOD_ERRC_CEL__MOD_ERRC_CONN,
 CEL_MOB_SAP__MOD_ERRC_CEL__MOD_ERRC_MOB,
 CEL_SPV_SAP__MOD_ERRC_CEL__MOD_ERRC_SPV,
 CEL_SYS_SAP__MOD_ERRC_CEL__MOD_ERRC_SYS,
 CHM_CONN_SAP__MOD_ERRC_CHM__MOD_ERRC_CONN,
 CHM_MOB_SAP__MOD_ERRC_CHM__MOD_ERRC_MOB,
 CHM_SYS_SAP__MOD_ERRC_CHM__MOD_ERRC_SYS,
 CONN_MOB_SAP__MOD_ERRC_CONN__MOD_ERRC_MOB,
 CONN_SPV_SAP__MOD_ERRC_CONN__MOD_ERRC_SPV,
 MOB_SPV_SAP__MOD_ERRC_MOB__MOD_ERRC_SPV,
  ERRC_CEL_SAP__MOD_ERRC_CEL__MOD_ERRC_CEL,
  ERRC_CHM_SAP__MOD_ERRC_CHM__MOD_ERRC_CHM,
  ERRC_CONN_SAP__MOD_ERRC_CONN__MOD_ERRC_CONN,
  ERRC_MOB_SAP__MOD_ERRC_MOB__MOD_ERRC_MOB,
  ERRC_RCM_SAP__MOD_ERRC_RCM__MOD_ERRC_RCM,
  ERRC_SPV_SAP__MOD_ERRC_SPV__MOD_ERRC_SPV,
  ERRC_SYS_SAP__MOD_ERRC_SYS__MOD_ERRC_SYS,

    EMM_CALL_CONN_SAP__MOD_EMM_CALL__MOD_EMM_CONN,
    EMM_CALL_ERRCIF_SAP__MOD_EMM_CALL__MOD_EMM_ERRCIF,
    EMM_CALL_ESMIF_SAP__MOD_EMM_CALL__MOD_EMM_ESMIF,
    EMM_CALL_EVALIF_SAP__MOD_EMM_CALL__MOD_EMM_EVALIF,
    EMM_CALL_EVTCTRL_SAP__MOD_EMM_CALL__MOD_EMM_EVTCTRL,
    EMM_CALL_MMIF_SAP__MOD_EMM_CALL__MOD_EMM_MMIF,
    EMM_CALL_NASMSG_SAP__MOD_EMM_CALL__MOD_EMM_NASMSG,
    EMM_CALL_PLMNSEL_SAP__MOD_EMM_CALL__MOD_EMM_PLMNSEL,
    EMM_CALL_RATCHG_SAP__MOD_EMM_CALL__MOD_EMM_RATCHG,
    EMM_CALL_REG_SAP__MOD_EMM_CALL__MOD_EMM_REG,
    EMM_CALL_SEC_SAP__MOD_EMM_CALL__MOD_EMM_SEC,
    EMM_CALL_SV_SAP__MOD_EMM_CALL__MOD_EMM_SV,
    EMM_CALL_TIMERIF_SAP__MOD_EMM_CALL__MOD_EMM_TIMERIF,
    EMM_CMNPROC_ERRCIF_SAP__MOD_EMM_CMNPROC__MOD_EMM_ERRCIF,
    EMM_CMNPROC_EVALIF_SAP__MOD_EMM_CMNPROC__MOD_EMM_EVALIF,
    EMM_CMNPROC_NASMSG_SAP__MOD_EMM_CMNPROC__MOD_EMM_NASMSG,
    EMM_CMNPROC_PLMNSEL_SAP__MOD_EMM_CMNPROC__MOD_EMM_PLMNSEL,
    EMM_CMNPROC_REG_SAP__MOD_EMM_CMNPROC__MOD_EMM_REG,
    EMM_CONN_ERRCIF_SAP__MOD_EMM_CONN__MOD_EMM_ERRCIF,
    EMM_CONN_ESMIF_SAP__MOD_EMM_CONN__MOD_EMM_ESMIF,
    EMM_CONN_ETCIF_SAP__MOD_EMM_CONN__MOD_EMM_ETCIF,
    EMM_CONN_EVALIF_SAP__MOD_EMM_CONN__MOD_EMM_EVALIF,
    EMM_CONN_NASMSG_SAP__MOD_EMM_CONN__MOD_EMM_NASMSG,
    EMM_CONN_PLMNSEL_SAP__MOD_EMM_CONN__MOD_EMM_PLMNSEL,
    EMM_CONN_RATBAND_SAP__MOD_EMM_CONN__MOD_EMM_RATBAND,
    EMM_CONN_RATCHG_SAP__MOD_EMM_CONN__MOD_EMM_RATCHG,
    EMM_CONN_REG_SAP__MOD_EMM_CONN__MOD_EMM_REG,
    EMM_CONN_SEC_SAP__MOD_EMM_CONN__MOD_EMM_SEC,
    EMM_CONN_TIMERIF_SAP__MOD_EMM_CONN__MOD_EMM_TIMERIF,
    EMM_ERRCIF_ESMIF_SAP__MOD_EMM_ERRCIF__MOD_EMM_ESMIF,
    EMM_ERRCIF_ETCIF_SAP__MOD_EMM_ERRCIF__MOD_EMM_ETCIF,
    EMM_ERRCIF_NASMSG_SAP__MOD_EMM_ERRCIF__MOD_EMM_NASMSG,
    EMM_ERRCIF_PLMNSEL_SAP__MOD_EMM_ERRCIF__MOD_EMM_PLMNSEL,
    EMM_ERRCIF_RATBAND_SAP__MOD_EMM_ERRCIF__MOD_EMM_RATBAND,
    EMM_ERRCIF_RATCHG_SAP__MOD_EMM_ERRCIF__MOD_EMM_RATCHG,
    EMM_ERRCIF_REG_SAP__MOD_EMM_ERRCIF__MOD_EMM_REG,
    EMM_ERRCIF_SEC_SAP__MOD_EMM_ERRCIF__MOD_EMM_SEC,
    EMM_ERRCIF_SV_SAP__MOD_EMM_ERRCIF__MOD_EMM_SV,
    EMM_ESMIF_NASMSG_SAP__MOD_EMM_ESMIF__MOD_EMM_NASMSG,
    EMM_ESMIF_RATCHG_SAP__MOD_EMM_ESMIF__MOD_EMM_RATCHG,
    EMM_ESMIF_REG_SAP__MOD_EMM_ESMIF__MOD_EMM_REG,
    EMM_ESMIF_SEC_SAP__MOD_EMM_ESMIF__MOD_EMM_SEC,
    EMM_ESMIF_SV_SAP__MOD_EMM_ESMIF__MOD_EMM_SV,
    EMM_ESMIF_SV_SAP__MOD_EMM_ESMIF__MOD_EMM_PLMNSEL,
    EMM_ETCIF_NASMSG_SAP__MOD_EMM_ETCIF__MOD_EMM_NASMSG,
    EMM_ETCIF_REG_SAP__MOD_EMM_ETCIF__MOD_EMM_REG,
    EMM_ETCIF_SV_SAP__MOD_EMM_ETCIF__MOD_EMM_SV,
    EMM_EVALIF_NASMSG_SAP__MOD_EMM_EVALIF__MOD_EMM_NASMSG,
    EMM_EVALIF_PLMNSEL_SAP__MOD_EMM_EVALIF__MOD_EMM_PLMNSEL,
    EMM_EVALIF_RATBAND_SAP__MOD_EMM_EVALIF__MOD_EMM_RATBAND,
    EMM_EVALIF_RATCHG_SAP__MOD_EMM_EVALIF__MOD_EMM_RATCHG,
    EMM_EVALIF_REG_SAP__MOD_EMM_EVALIF__MOD_EMM_REG,
    EMM_EVALIF_SEC_SAP__MOD_EMM_EVALIF__MOD_EMM_SEC,
    EMM_EVALIF_SV_SAP__MOD_EMM_EVALIF__MOD_EMM_SV,
    EMM_EVTCTRL_PLMNSEL_SAP__MOD_EMM_EVTCTRL__MOD_EMM_PLMNSEL,
    EMM_EVTCTRL_RATBAND_SAP__MOD_EMM_EVTCTRL__MOD_EMM_RATBAND,
    EMM_EVTCTRL_RATCHG_SAP__MOD_EMM_EVTCTRL__MOD_EMM_RATCHG,
    EMM_EVTCTRL_REG_SAP__MOD_EMM_EVTCTRL__MOD_EMM_REG,
    EMM_EVTCTRL_SV_SAP__MOD_EMM_EVTCTRL__MOD_EMM_SV,
    EMM_MMIF_RATCHG_SAP__MOD_EMM_MMIF__MOD_EMM_RATCHG,
    EMM_MMIF_REG_SAP__MOD_EMM_MMIF__MOD_EMM_REG,
    EMM_NASMSG_PLMNSEL_SAP__MOD_EMM_NASMSG__MOD_EMM_PLMNSEL,
    EMM_NASMSG_REG_SAP__MOD_EMM_NASMSG__MOD_EMM_REG,
    EMM_NASMSG_SEC_SAP__MOD_EMM_NASMSG__MOD_EMM_SEC,
    EMM_PLMNSEL_RATCHG_SAP__MOD_EMM_PLMNSEL__MOD_EMM_RATCHG,
    EMM_PLMNSEL_REG_SAP__MOD_EMM_PLMNSEL__MOD_EMM_REG,
    EMM_PLMNSEL_SEC_SAP__MOD_EMM_PLMNSEL__MOD_EMM_SEC,
    EMM_PLMNSEL_SV_SAP__MOD_EMM_PLMNSEL__MOD_EMM_SV,
    EMM_PLMNSEL_TIMERIF_SAP__MOD_EMM_PLMNSEL__MOD_EMM_TIMERIF,
    EMM_RATBAND_RATCHG_SAP__MOD_EMM_RATBAND__MOD_EMM_RATCHG,
    EMM_RATBAND_REG_SAP__MOD_EMM_RATBAND__MOD_EMM_REG,
    EMM_RATBAND_SV_SAP__MOD_EMM_RATBAND__MOD_EMM_SV,
    EMM_RATBAND_TIMERIF_SAP__MOD_EMM_RATBAND__MOD_EMM_TIMERIF,
    EMM_RATCHG_REG_SAP__MOD_EMM_RATCHG__MOD_EMM_REG,
    EMM_RATCHG_SEC_SAP__MOD_EMM_RATCHG__MOD_EMM_SEC,
    EMM_RATCHG_SV_SAP__MOD_EMM_RATCHG__MOD_EMM_SV,
    EMM_RATCHG_TIMERIF_SAP__MOD_EMM_RATCHG__MOD_EMM_TIMERIF,
    EMM_REG_SEC_SAP__MOD_EMM_REG__MOD_EMM_SEC,
    EMM_REG_SV_SAP__MOD_EMM_REG__MOD_EMM_SV,
    EMM_REG_TIMERIF_SAP__MOD_EMM_REG__MOD_EMM_TIMERIF,
    EMM_SEC_SV_SAP__MOD_EMM_SEC__MOD_EMM_SV,
    EMM_SEC_TIMERIF_SAP__MOD_EMM_SEC__MOD_EMM_TIMERIF,
    EMM_SV_TIMERIF_SAP__MOD_EMM_SV__MOD_EMM_TIMERIF,

    MM_EMM_SAP__MOD_MM__MOD_EMM,
   EMM_ERRC_SAP__MOD_ERRC__MOD_EMM,



    SM_ESM_SAP__MOD_SM__MOD_ESM,
    SM_ESM_SAP__MOD_SM_2__MOD_ESM,
    NIL_ESM_SAP__MOD_NIL__MOD_ESM,
    ESM_LTM_SAP__MOD_ESM__MOD_LTM,
    ESM_EMM_SAP__MOD_ESM__MOD_EMM,

    LTM_SAP__MOD_LTM__ANY,
    UPCM_SAP__MOD_UPCM__ANY,

    ERRC_EL1_SAP__MOD_ERRC__MOD_EL1,
    EMAC_EL1_SAP__MOD_EMAC__MOD_EL1,
    EL1_EL1_SAP__MOD_EL1__MOD_EL1,
    EMAC_EL1TX_SAP__MOD_EMAC__MOD_EL1TX,
    EL1_EL1TX_SAP__MOD_EL1__MOD_EL1TX,


    ERRC_EPDCP_SAP__MOD_ERRC__MOD_EPDCP,
    EPDCP_EPDCP_SAP__MOD_EPDCP__MOD_EPDCP,


    ERRC_ERLCUL_SAP__MOD_ERRC__MOD_ERLCUL,
    ERRC_ERLCDL_SAP__MOD_ERRC__MOD_ERLCDL,
    EPDCP_ERLCUL_SAP__MOD_EPDCP__MOD_ERLCUL,
    EPDCP_ERLCDL_SAP__MOD_EPDCP__MOD_ERLCDL,
    ERLCUL_ERLCDL_SAP__MOD_ERLCUL__MOD_ERLCDL,


    EMAC_INT_EMAC_SAP__MOD_EMAC_INT__MOD_EMAC,
    ERRC_EMAC_SAP__MOD_ERRC__MOD_EMAC,
    EMAC_ERLCUL_SAP__MOD_EMAC__MOD_ERLCUL,
    ERLCUL_EMAC_SAP__MOD_ERLCUL__MOD_EMAC,
    EMAC_ERLCDL_SAP__MOD_EMAC__MOD_ERLCDL,
    LTM_EMAC_SAP__MOD_LTM__MOD_EMAC,
    EMAC_EMAC_SAP__MOD_EMAC__MOD_EMAC,

    LTE_DYN_SAP__MOD_EL2TASK__ANY,
    LTE_TIMER_SAP__MOD_LTE_TIMER__ANY,


    DHL_ETSTM_SAP__MOD_DHL__MOD_ETSTM,
    ETSTM_DHL_SAP__MOD_ETSTM__MOD_DHL,




 SYSTEM_DR_SAP__MOD_SYSTEM__MOD_DHL_READER,

    TFTLIB_SAP__MOD_TFTLIB__ANY,
    TFTLIB_SAP__ANY__MOD_TFTLIB,





    NWSEL_MM_SAP__MOD_NWSEL__MOD_MM,
    NWSEL_RATCM_SAP__MOD_NWSEL__MOD_RATCM,


    RAC_GMSS_SAP__MOD_RAC__MOD_GMSS,
    GMSS_NWSEL_SAP__MOD_GMSS__MOD_NWSEL,
    TCM_GMSS_SAP__MOD_TCM__MOD_GMSS,

    MRS_RAC_SAP__MOD_MRS__MOD_RAC,
    MRS_RAC_SAP__MOD_MRS_2__MOD_RAC_2,
    MRS_RAC_SAP__MOD_MRS_3__MOD_RAC_3,
    MRS_RRM_SAP__MOD_MRS__MOD_RRM,
    MRS_RRM_SAP__MOD_MRS_2__MOD_RRM_2,
    MRS_CSCE_SAP__MOD_MRS__MOD_CSCE,
    MRS_CSCE_SAP__MOD_MRS_2__MOD_CSCE_2,
    MRS_RRCE_SAP__MOD_MRS__MOD_RRCE,
    MRS_RRCE_SAP__MOD_MRS__MOD_RRCE_2,
    MRS_USIME_SAP__MOD_MRS__MOD_USIME,
    MRS_SIM_SAP__MOD_MRS__MOD_SIM,
    MRS_EAS_SAP__MOD_MRS__MOD_EAS,
    MRS_EAS_SAP__MOD_ERRC__MOD_MRS,

    GAS_EAS_SAP__MOD_ERRC__MOD_RRM,
    GAS_EAS_SAP__MOD_RRM__MOD_EAS,

    EAS_CSCE_SAP__MOD_ERRC__MOD_CSCE,
    EAS_RRCE_SAP__MOD_ERRC__MOD_RRCE,
    EAS_MEME_SAP__MOD_ERRC__MOD_MEME,
    EAS_RSVAE_SAP__MOD_ERRC__MOD_RSVAE,

    ADR_ADR_SAP__MOD_ADR__MOD_ADR,
    ADR_ADR_SAP__MOD_ADR_2__MOD_ADR_2,
    SM_SM_SAP__MOD_SM__MOD_SM_2,
    SM_SM_SAP__MOD_SM__MOD_SM,
    SM_SM_SAP__MOD_SM_2__MOD_SM,

    MM_EMM_SAP__MOD_MM_2__MOD_EMM,
    MM_MM_SAP__MOD_MM_2__MOD_MM,
    NWSEL_MM_SAP__MOD_NWSEL_2__MOD_MM_2,
    NWSEL_RATCM_SAP__MOD_NWSEL_2__MOD_RATCM_2,

    RAC_GMSS_SAP__MOD_RAC_2__MOD_GMSS_2,
    GMSS_NWSEL_SAP__MOD_GMSS_2__MOD_NWSEL_2,
    TCM_GMSS_SAP__MOD_TCM_2__MOD_GMSS_2,


    RSVAS_SAP__MOD_RSVAS__ANY,
    RSVAS_NIL_SAP__MOD_RSVAS__MOD_NIL,
    RSVAS_RSVAU_SAP__MOD_RSVAS__MOD_RSVAU,
    RSVAS_RSVAU_SAP__MOD_RSVAS__MOD_RSVAU_2,
    RSVAS_L4C_SAP__MOD_RSVAS__MOD_L4C,
    RSVAS_L4C_SAP__MOD_RSVAS__MOD_L4C_2,
    RSVAS_MRS_SAP__MOD_RSVAS__MOD_MRS,
    RSVAS_MRS_SAP__MOD_RSVAS__MOD_MRS_2,
    RSVAS_URR_SAP__MOD_RSVAS__MOD_URR,
    RSVAS_URR_SAP__MOD_RSVAS__MOD_URR_2,
    RSVAS_RRCE_SAP__MOD_RSVAS__MOD_RRCE,
    RSVAS_RRCE_SAP__MOD_RSVAS__MOD_RRCE_2,
    RSVAS_CSCE_SAP__MOD_RSVAS__MOD_CSCE,
    RSVAS_CSCE_SAP__MOD_RSVAS__MOD_CSCE_2,
    RSVAS_UL2_SAP__MOD_RSVAS__MOD_UL2,
    RSVAS_UL2_SAP__MOD_RSVAS__MOD_UL2_2,
    RSVAS_UL2D_SAP__MOD_RSVAS__MOD_UL2D,
    RSVAS_UL2D_SAP__MOD_RSVAS__MOD_UL2D_2,
    RSVAS_RRM_SAP__MOD_RSVAS__MOD_RRM,
    RSVAS_RRM_SAP__MOD_RSVAS__MOD_RRM_2,
    RSVAS_RRM_SAP__MOD_RSVAS__MOD_RRM_3,
    RSVAS_RRM_SAP__MOD_RSVAS__MOD_RRM_4,
    RSVAS_MPAL_SAP__MOD_RSVAS__MOD_MPAL,
    RSVAS_MPAL_SAP__MOD_RSVAS__MOD_MPAL_2,
    RSVAS_MPAL_SAP__MOD_RSVAS__MOD_MPAL_3,
    RSVAS_MPAL_SAP__MOD_RSVAS__MOD_MPAL_4,
    RSVAS_ERRC_SAP__MOD_RSVAS__MOD_ERRC,
    RSVAS_EL2TASK_SAP__MOD_RSVAS__MOD_EL2TASK,
    RSVAS_UL1_SAP__MOD_RSVAS__MOD_UL1,
    RSVAS_UL1_SAP__MOD_RSVAS__MOD_UL1_2,
    RSVAS_TL1_SAP__MOD_RSVAS__MOD_TL1,
    RSVAS_L1_SAP__MOD_RSVAS__MOD_L1,
    RSVAS_L1_SAP__MOD_RSVAS__MOD_L1_2,
    RSVAS_L1_SAP__MOD_RSVAS__MOD_L1_3,
    RSVAS_L1_SAP__MOD_RSVAS__MOD_L1_4,
    RSVAS_LL1_SAP__MOD_RSVAS__MOD_MLL1,
    RSVAS_EL1_SAP__MOD_RSVAS__MOD_EL1,
    SLCE_RSVAU_SAP__MOD_SLCE__MOD_RSVAU,
    SLCE_RSVAU_SAP__MOD_SLCE_2__MOD_RSVAU,
    RSVAU_UL1_SAP__MOD_RSVAU__MOD_UL1,
    RSVAU_UL1_SAP__MOD_RSVAU__MOD_UL1_2,
    CSE_RSVAU_SAP__MOD_CSE__MOD_RSVAU,
    CSE_RSVAU_SAP__MOD_CSE_2__MOD_RSVAU,


    DHL_IMC_SAP__ANY__MOD_IMC,
    DHL_IMC_SAP__MOD_IMC__ANY,
    IMC_IMC_SAP__MOD_IMC__MOD_IMC,
    IMSP_IMC_SAP__MOD_IMSP__MOD_IMC,
    IMSP_IMC_SAP__MOD_IMC__MOD_IMSP,
    IMC_LTECSR_SAP__MOD_LTECSR__MOD_IMC,
    IMC_LTECSR_SAP__MOD_IMC__MOD_LTECSR,
    IMCB_IMC_SAP__MOD_IMC__MOD_IMCB,
    IMCB_IMC_SAP__MOD_IMCB__MOD_IMC,
    IMC_UPCM_SAP__MOD_IMC__MOD_UPCM,
    IMC_UPCM_SAP__MOD_UPCM__MOD_IMC,


    SDM_IMSP_SAP__MOD_SDM__MOD_IMSP,
    SDM_IMC_SAP__MOD_SDM__MOD_IMC,
    SDM_IMC_SAP__MOD_SDM__MOD_IMCSMS,


    VDM_IMSP_SAP__MOD_VDM__MOD_IMSP,
    VDM_IMC_SAP__MOD_VDM__MOD_IMC,
    VDM_CTRL_TRK_SAP__MOD_VDM_CTRL__MOD_VDM_TRK,
    VDM_CTRL_ADS_SAP__MOD_VDM_CTRL__MOD_VDM_ADS,
    VDM_CTRL_VCC_SAP__MOD_VDM_CTRL__MOD_VDM_VCC,
    VDM_TRK_ADS_SAP__MOD_VDM_TRK__MOD_VDM_ADS,
    VDM_TRK_VCC_SAP__MOD_VDM_TRK__MOD_VDM_VCC,
    VDM_ADS_VCC_SAP__MOD_VDM_ADS__MOD_VDM_VCC,



    IMCSMS_IMC_SAP__MOD_IMCSMS__MOD_IMC,
    IMSP_IMC_SAP__MOD_IMSP__MOD_IMCSMS,

    PROXY_ATCI_SAP__MOD_ATCI__MOD_IMSP,
    PROXY_ATCI_SAP__MOD_ATCI_2__MOD_IMSP_2,
    PROXY_ATCI_SAP__MOD_ATCI_3__MOD_IMSP_3,
    PROXY_ATCI_SAP__MOD_ATCI_4__MOD_IMSP_4,

    SMSAL_SMSAL_SAP__MOD_SMSAL__MOD_SMSAL,
    SMSAL_SMSAL_SAP__MOD_SMSAL_2__MOD_SMSAL_2,
    SMSAL_SMSAL_SAP__MOD_SMSAL_3__MOD_SMSAL_3,
    SMSAL_SMSAL_SAP__MOD_SMSAL_4__MOD_SMSAL_4,


    LCSP_GNSS_SAP__MOD_RRLP__MOD_GPS,
    LCSP_GNSS_SAP__MOD_UAGPS_CP__MOD_GPS,
    LCSP_GNSS_SAP__MOD_LPP__MOD_GPS,


    LPP_EVAL_SAP__MOD_LPP__MOD_EVAL,
    LPP_ERRC_SAP__MOD_LPP__MOD_ERRC,
    LPP_EL1_SAP__MOD_LPP__MOD_EL1,
    LPP_L4C_SAP__MOD_LPP__MOD_L4C,
    LPP_LBS_SAP__MOD_LPP__MOD_LBS,

} sap_info;
# 141 "./service/dhl/database/msglog_db/custom_parse_db.c" 2
# 1 "./service/dhl/database/msg_id_to_em_info_map.h" 1
# 142 "./service/dhl/database/msglog_db/custom_parse_db.c" 2

# 1 "interface/service/config/stack_ltlcom.h" 1
# 144 "./service/dhl/database/msglog_db/custom_parse_db.c" 2

# 1 "interface/modem/general/l4c2uem_struct.h" 1
# 100 "interface/modem/general/l4c2uem_struct.h"
# 1 "interface/modem/general/ps_public_struct.h" 1
# 306 "interface/modem/general/ps_public_struct.h"
# 1 "interface/modem/general/ps_public_enum.h" 1
# 1419 "interface/modem/general/ps_public_enum.h"
# 1 "custom/service/nvram/custom_nvram_sec.h" 1
# 226 "custom/service/nvram/custom_nvram_sec.h"
# 1 "interface/service/kal/kal_general_types.h" 1
# 227 "custom/service/nvram/custom_nvram_sec.h" 2
# 239 "custom/service/nvram/custom_nvram_sec.h"
typedef struct
{
    kal_uint8 security_indication;
    kal_uint8 phone_key[8];
    kal_uint8 last_imsi[9];
    kal_uint8 pin1[8];
    kal_uint8 pin1_valid;
    kal_uint8 phone_lock_verified;
    kal_uint8 iccid[10];
} smu_security_info_struct;
# 334 "custom/service/nvram/custom_nvram_sec.h"
# 1 "interface/service/sys_svc/cust_chl_interface.h" 1
# 11 "interface/service/sys_svc/cust_chl_interface.h"
# 1 "driver/regbase/inc/reg_base.h" 1
# 560 "driver/regbase/inc/reg_base.h"
# 1 "driver/regbase/inc/reg_base_mt6735_md1.h" 1
# 561 "driver/regbase/inc/reg_base.h" 2
# 12 "interface/service/sys_svc/cust_chl_interface.h" 2
# 26 "interface/service/sys_svc/cust_chl_interface.h"
typedef enum
{
 CUST_CHL_ERROR_NONE = 0x0000,
 CUST_CHL_ERROR_NULL_PTR = 0x0001,
 CUST_CHL_ERROR_INVALID_ALG = 0x0002,
 CUST_CHL_ERROR_MD_NOT_FOUND = 0x0003,
 CUST_CHL_ERROR_NO_SUCH_KEY = 0x0004,
 CUST_CHL_ERROR_HEXIFY_FAILED = 0x0005,
 CUST_CHL_ERROR_UNHEXIFY_FAILED = 0x0006,
 CUST_CHL_ERROR_RESULT_GUARD_PATTERN_CORRUPTED = 0x0007,
 CUST_CHL_ERROR_MEMORY_ALLOC_FAILED = 0x0008,

 CUST_CHL_ERROR_CHECK_RSA_PUB_FAILED = 0x0100,
 CUST_CHL_ERROR_CHECK_RSA_PRIV_FAILED = 0x0101,

 CUST_CHL_ERROR_READ_HRID_FAILED = 0x0200,
 CUST_CHL_ERROR_GET_CUST_KEY_FAILED = 0x0201,

 CUST_CHL_ERROR_VERIFY_MAC_FAILED = 0x0300,
 CUST_CHL_ERROR_VERIFY_SIG_FAILED = 0x0301,
 CUST_CHL_ERROR_CHECK_RSA_PUB_ENC_FAILED = 0x0302,
 CUST_CHL_ERROR_CHECK_RSA_PRIV_ENC_FAILED = 0x0303,
 CUST_CHL_ERROR_CHECK_RSA_PUB_DEC_FAILED = 0x0304,
 CUST_CHL_ERROR_CHECK_RSA_PRIV_DEC_FAILED = 0x0305,

 CUST_CHL_ERROR_UNDEFINED_FAILED = 0x0800,

 CUST_CHL_ERROR_END = 0xFFFF,

} TYPE_CUST_CHL_ERROR;

typedef enum
{

 CUST_CHL_ALG_BEGIN = 0x0000,


 CUST_CHL_ALG_SHA256 = 0x0001,


  CUST_CHL_ALG_RSA_PKCS1 = 0x1001,


 CUST_CHL_ALG_MAC_SHA256 = 0x2001,


 CUST_CHL_ALG_RSA_PSS_SHA256 = 0x3001,

 CUST_CHL_ALG_END = 0xFFFF

} TYPE_CUST_CHL_ALG;

typedef enum
{


  CUST_CHL_SYM_BEGIN = 0x0000,
  CUST_TM_SHARED_KEY2 = 0x0001,
  CUST_CHL_SYM_END = 0x7FFF,


  CUST_CHL_ASYM_BEGIN = 0x8000,
  CUST_TM_PUB_KEY1 = 0x8001,
  CUST_CHL_ASYM_END = 0xFFFF

} TYPE_CUST_CHL_KEY;


typedef struct t_cust_chl_hash_u
{
 kal_uint32 m_len;
 kal_uint8 m_u8[32];

} t_cust_chl_hash_u;


typedef struct t_cust_chl_mac_u
{
 kal_uint32 m_len;
 kal_uint8 m_u8[32];

} t_cust_chl_mac_u;

typedef struct t_cust_chl_sym_key
{

 kal_uint32 m_key_len;
 kal_uint8 m_key[32];

} t_cust_chl_sym_key;



typedef struct t_cust_chl_asym_key
{

 kal_uint32 m_E_D_len;
 kal_uint32 m_N_len;
 kal_uint8 m_E_D_key[256];
 kal_uint8 m_N_key[256];

} t_cust_chl_asym_key;
# 143 "interface/service/sys_svc/cust_chl_interface.h"
extern kal_uint32 CustCHL_Get_Sym_Key(TYPE_CUST_CHL_KEY key_type, t_cust_chl_sym_key * key);
# 158 "interface/service/sys_svc/cust_chl_interface.h"
extern kal_uint32 CustCHL_Get_Asym_Key(TYPE_CUST_CHL_KEY key_type, t_cust_chl_asym_key * key);
# 177 "interface/service/sys_svc/cust_chl_interface.h"
extern kal_uint32 CustCHL_RSA_PKCS1_Encrypt(TYPE_CUST_CHL_ALG alg_type,
                                           kal_uint32 mode,
                                           kal_uint32 input_len,
                                           kal_uint8 * input,
                                           kal_uint8 * output,
                                           t_cust_chl_asym_key * key);
# 202 "interface/service/sys_svc/cust_chl_interface.h"
extern kal_uint32 CustCHL_RSA_PKCS1_Decrypt(TYPE_CUST_CHL_ALG alg_type,
                                                kal_uint32 mode,
                                                kal_uint32 input_len,
                                           kal_uint8 * input,
                                           kal_uint32 * output_len,
                                           kal_uint8 * output,
                                           t_cust_chl_asym_key * key);
# 224 "interface/service/sys_svc/cust_chl_interface.h"
extern kal_uint32 CustCHL_Calculate_Hash(TYPE_CUST_CHL_ALG alg_type,
                                           kal_uint8 * data,
                                           kal_uint32 data_len,
                                           t_cust_chl_hash_u * hash_u);
# 244 "interface/service/sys_svc/cust_chl_interface.h"
extern kal_uint32 CustCHL_Verify_PSS_Signature(TYPE_CUST_CHL_ALG alg_type,
                                                 kal_uint8 * data,
                                                 kal_uint32 data_len,
                                                 kal_uint8 * sig,
                                                 t_cust_chl_asym_key * key);
# 266 "interface/service/sys_svc/cust_chl_interface.h"
extern kal_uint32 CustCHL_Verify_MAC(TYPE_CUST_CHL_ALG alg_type,
                              kal_uint8 * data,
                              kal_uint32 data_len,
                              kal_uint8 * mac,
                              kal_uint8 * key,
                              kal_uint32 key_len) ;
# 291 "interface/service/sys_svc/cust_chl_interface.h"
extern kal_uint32 CustCHL_Calculate_MAC(TYPE_CUST_CHL_ALG alg_type,
                                 kal_uint8 * data,
                                 kal_uint32 data_len,
                                 kal_uint8 * key,
                                 kal_uint32 key_len,
                                 t_cust_chl_mac_u * mac_u);
# 335 "custom/service/nvram/custom_nvram_sec.h" 2
# 377 "custom/service/nvram/custom_nvram_sec.h"
typedef struct {
    kal_uint8 version[4];
    kal_uint8 protection_scheme;
    kal_uint8 state;
    kal_uint8 length[2];
    kal_uint8 num_of_plmn[2];
    kal_uint8 plmn_list[4 * 10];
    kal_uint8 num_of_gid[2];
    kal_uint8 gid_list[2 * 10];
    kal_uint8 reserved[2];
    kal_uint8 start_time[8];
    kal_uint8 end_time[4];
    kal_uint8 imei[16];
    kal_uint8 verification_code[256];
    kal_uint8 unlock_time[4];
} sml_tmo_context_struct;
typedef sml_tmo_context_struct nvram_sml_tmo_context_struct;





typedef struct {
    kal_uint8 state;
    kal_uint8 key[8];
} sml_control_key_struct;


typedef struct {
    kal_uint8 state;
    kal_uint8 retry_count;
    kal_uint8 autolock_count;
    kal_uint8 num;
} sml_category_meta_struct;

typedef struct {
    kal_uint32 magic_head;
    sml_category_meta_struct cat[7];
    sml_control_key_struct key[7];
    kal_uint8 code_cat_n[(10 * 3)];
    kal_uint8 code_cat_ns[(2 * 4)];
    kal_uint8 code_cat_sp[(2 * 4)];
    kal_uint8 code_cat_c[(2 * 5)];
    kal_uint8 code_cat_sim[(2 * 8)];
    kal_uint8 code_cat_ns_sp[(5 * 2)];
    kal_uint8 code_cat_sim_c[(10 * 2)];
    kal_uint8 range_cat_ns[2];
    kal_uint32 magic_tail;
} sml_context_struct;
typedef sml_context_struct nvram_sml_context_struct;
# 452 "custom/service/nvram/custom_nvram_sec.h"
# 1 "interface/service/nvram/nvram_defs.h" 1
# 162 "interface/service/nvram/nvram_defs.h"
# 1 "./build/HCT6737M_65_N/LWG_DSDS/nvram_auto_gen/nvram_lid_statistics.h" 1
# 163 "interface/service/nvram/nvram_defs.h" 2

# 1 "interface/service/nvram/nvram_enums.h" 1
# 112 "interface/service/nvram/nvram_enums.h"
typedef enum
{
    NVRAM_POWERON_NORMAL,
    NVRAM_POWERON_CHARGER,
    NVRAM_POWERON_ALARM,
    NVRAM_POWERON_INVALID
} nvram_poweron_mode_enum;

typedef enum
{
    NVRAM_LOCK_DISABLE,
    NVRAM_LOCK_ENABLE,
    NVRAM_LOCK_TEMP_DISABLE,
    NVRAM_LOCK_OTP,
    NVRAM_LOCK_INVALID
} nvram_lock_state_enum;

typedef enum
{
    NVRAM_DEFAULT_VALUE_SUCCESS,
    NVRAM_DEFAULT_VALUE_FAIL,
    NVRAM_DEFAULT_VALUE_FF,
    NVRAM_DEFAULT_VALUE_ZERO,
    NVRAM_DEFAULT_VALUE_POINT,
    NVRAM_DEFAULT_VALUE_APPLICATION,

    NVRAM_DEFAULT_VALUE_MAX
} nvram_default_value_enum;

typedef enum
{
    NVRAM_RESET_ALL,
    NVRAM_RESET_USER,
    NVRAM_RESET_SYSTEM,
    NVRAM_RESET_CERTAIN,
    NVRAM_RESET_FACTORY,
    NVRAM_RESET_CUSTPACK,
    NVRAM_RESET_SECUPACK,
    NVRAM_RESET_BRANCH,
    NVRAM_RESET_PACKAGE,
    NVRAM_RESET_FAT,
    NVRAM_RESET_SDS,
    NVRAM_RESET_INVALID
} nvram_reset_category_enum;


typedef enum
{

    NVRAM_ERRNO_SUCCESS,
    NVRAM_IO_ERRNO_OK = NVRAM_ERRNO_SUCCESS,

    NVRAM_ERRNO_FAIL,
    NVRAM_ERRNO_INVALID,
    NVRAM_ERRNO_NOT_READY,


    NVRAM_IO_ERRNO_INVALID_LID,
    NVRAM_IO_ERRNO_INVALID_SIZE,
    NVRAM_IO_ERRNO_INVALID_RECORD,
    NVRAM_IO_ERRNO_EMPTY_RECORD,
    NVRAM_IO_ERRNO_STORAGE,
    NVRAM_IO_ERRNO_INIT,
    NVRAM_IO_ERRNO_CHK,
    NVRAM_IO_ERRNO_LOCKED,
    NVRAM_IO_ERRNO_WRONG_RINGLID,
    NVRAM_IO_ERRNO_ACCESS_DENIED,
    NVRAM_IO_ERRNO_DRV_BROKEN,
    NVRAM_IO_ERRNO_CONTENT_BROKEN,
    NVRAM_IO_ERRNO_SDS_FAIL,
    NVRAM_IO_ERRNO_SDS_MODE,


    NVRAM_ERRNO_OTP_UNKNOW,
    NVRAM_ERRNO_OTP_OVERSCOPE,
    NVRAM_ERRNO_OTP_WRITEFAIL,
    NVRAM_ERRNO_OTP_LOCKED,
    NVRAM_ERRNO_OTP_INVALID_INPUT,
    NVRAM_ERRNO_OTP_INVALID_RANGE,
    NVRAM_ERRNO_OTP_WRITETWICE,

    NVRAM_ERRNO_IMAGE_BROKEN,
    NVRAM_ERRNO_IMAGE_EMPTY,
    NVRAM_ERRNO_IMAGE_DATA_NOT_SYNC,
    NVRAM_ERRNO_IMAGE_DATA_NOT_EXIST,

    NVRAM_ERRNO_FOLDER_EXIST,

    NVRAM_ERRNO_SDS_READY,
    NVRAM_ERRNO_SDS_EMPTY,

    NVRAM_ERRNO_MAX
} nvram_errno_enum;




typedef kal_uint16 nvram_lid_enum;
typedef kal_uint16 nvram_app_id_enum;







typedef enum
{
    NVRAM_IMAGE_TYPE_EMPTY = 0x0000,
    NVRAM_IMAGE_TYPE_CALIBRAT = 0x0001,
    NVRAM_IMAGE_TYPE_IMEI = 0x0002
} nvram_image_type_enum;



typedef enum
{
    NVRAM_BIN_REGION_BACKUP,
    NVRAM_BIN_REGION_RESTORE,
} nvram_bin_region_access_enum;

typedef enum
{
    NVRAM_SDS_ACCESS_BACKUP,
    NVRAM_SDS_ACCESS_RESTORE,
} nvram_sds_access_enum;

typedef enum
{
    NVRAM_RESTORE_FALSE,
    NVRAM_RESTORE_TRUE
}nvram_restore_flag_enum;
# 165 "interface/service/nvram/nvram_defs.h" 2
# 235 "interface/service/nvram/nvram_defs.h"
typedef kal_uint16 nvram_attr_enum;
# 259 "interface/service/nvram/nvram_defs.h"
typedef kal_uint32 nvram_category_enum;
# 302 "interface/service/nvram/nvram_defs.h"
typedef enum
{
    NVRAM_CLEAN_FOLDER_NONE = 0x00,
    NVRAM_CLEAN_FOLDER_SYSTEM = 0x01,
    NVRAM_CLEAN_FOLDER_FACTORY = 0x02,
    NVRAM_CLEAN_FOLDER_BRANCH = 0x04,
    NVRAM_CLEAN_FOLDER_ALL = 0xFF
} nvram_clean_folder_enum;




typedef void (*nvram_query_deault_func)(nvram_lid_enum file_id, kal_uint8 *buffer, kal_uint16 buffer_size);




    typedef struct







    {
        nvram_lid_enum LID;
        kal_uint16 total_records;
        kal_uint32 size;
        kal_uint8 const* default_value;
        nvram_category_enum category;
        nvram_attr_enum attr;
        kal_char fileprefix[4 + 1];
        kal_char fileverno[3 + 1];
        kal_char* description;
    } nvram_ltable_entry_struct;
# 355 "interface/service/nvram/nvram_defs.h"
typedef struct
{
    nvram_ltable_entry_struct *ltable;
    kal_uint32 size;
}nvram_ltable_tbl_struct;
# 444 "interface/service/nvram/nvram_defs.h"
typedef struct
{
    kal_uint8 const* version;
    void const* custpack_default[11];
}custpack_nvram_header;

typedef struct
{
    nvram_clean_folder_enum category;
    kal_wchar *folder_path;
} nvram_clean_folder_entry;

typedef struct
{
    nvram_lid_enum LID;
    kal_bool (*get_data)(kal_uint8 *buffer, kal_uint16 buf_size);
}nvram_shutdown_cb_struct;

typedef struct
{
    nvram_lid_enum LID;
    kal_uint32 size;
    kal_uint16 total_records;
    kal_uint8 const *default_value;
    kal_bool is_multi_default;
} nvram_cat_replace_setting;


typedef struct NVRAM_FS_PARAM_COMP
{
    kal_uint32 opid_map;
    kal_uint32 ret[2];
    kal_uint32 Flag;
    kal_uint32 *FileSize;
    kal_int32 Offset;
    kal_int32 Whence;
    void *DataPtr;
    kal_uint32 Length;
    kal_uint32 *Read;
} NVRAM_FS_PARAM_CMPT_T;
# 497 "interface/service/nvram/nvram_defs.h"
extern const kal_uint8 NVRAM_EF_ZERO_DEFAULT[];
extern const kal_uint8 NVRAM_EF_FF_DEFAULT[];
# 453 "custom/service/nvram/custom_nvram_sec.h" 2
# 479 "custom/service/nvram/custom_nvram_sec.h"
typedef enum
{
    SEC_RO_PARA_DBG_PORT,
    SEC_RO_PARA_TOTAL
}sec_ro_para_enum;

typedef struct
{
    kal_uint8 m_custom_database_key[64];




    kal_uint32 padding[16>>2];
} CUST_SECRET_DATA_ST;
# 574 "custom/service/nvram/custom_nvram_sec.h"
extern const kal_uint8 NVRAM_SECUPACK_DEFAULT[];
extern const kal_uint8 NVRAM_CUSTOM_KEY[];
extern const kal_uint8 NVRAM_CUSTOM_KEY_SEED[];


extern kal_uint32 secupack_total_to_verify;
extern void custom_nvram_get_key(char *init_key, unsigned char *keys);
extern void custom_nvram_encrypt(unsigned char const *keys, unsigned char *buffer, unsigned int length, int scrambleIndex);
extern void custom_nvram_decrypt(unsigned char const *keys, unsigned char *buffer, unsigned int length, int scrambleIndex);

extern kal_uint32 custom_nvram_sec_ro_size(void);
extern kal_uint32 custom_nvram_secupack_size(void);
extern kal_uint32 custom_nvram_secupack_total(void);
extern kal_uint32 custom_nvram_key_len(void);
extern kal_int32 custom_nvram_get_database_key(kal_uint8 *key_buffer, kal_uint32 buffer_size);
# 1420 "interface/modem/general/ps_public_enum.h" 2
# 1 "interface/sap/cross_core/ps_public_enum_public.h" 1
# 11 "interface/sap/cross_core/ps_public_enum_public.h"
typedef enum
{
     IPV4_ADDR_TYPE = 0X21,
     IPV6_ADDR_TYPE = 0X57,
     IPV4V6_ADDR_TYPE = 0X8D,
     PPP_ADDR_TYPE = 0X01,
     OSP_IHOSS_ADDR_TYPE = 0X02,
     NULL_PDP_ADDR_TYPE = 0X03

}pdp_addr_type_enum;


typedef enum
{
     IPV4_ADDR_LEN = 0X04,
     IPV6_ADDR_LEN = 0X10,
     IPV4V6_ADDR_LEN = 0X14,
     PPP_ADDR_LEN = 0X0,
     OSP_IHOSS_ADDR_LEN = 0X0,


    NULL_PDP_ADDR_LEN = 0X01,
    MAXIMUM_POSSIBLE_ADDR_LEN = IPV4V6_ADDR_LEN
}pdp_addr_len_enum;
# 1421 "interface/modem/general/ps_public_enum.h" 2
# 1457 "interface/modem/general/ps_public_enum.h"
typedef enum {
    TCM_PDP_DEACT_REASON_NORMAL_DEACT,
    TCM_PDP_DEACT_REASON_DEACT_DUE_TO_TFT_CONFLICT,
    TCM_PDP_DEACT_REASON_DEACT_DUE_TO_TFT_VALIDATE_FAIL,
    TCM_PDP_DEACT_REASON_ESM_INIT_DEACT_FOR_NON_EMC_PDN,
    TCM_PDP_DEACT_REASON_ESM_INIT_DEACT_EPSB_FOR_ABNORMAL,

} tcm_pdp_deact_reason_enum;
# 1587 "interface/modem/general/ps_public_enum.h"
typedef enum
{
    L4C_CALL_OPERATION,
    L4C_SS_OPERATION,
    L4C_SMS_OPERATION,
    L4C_SMS_SCA_OPERATION,
    L4C_SMS_DA_OPERATION,
    L4C_CSD_OPERATION,
    L4C_INT_GPRS_OPERATION,
    L4C_EXT_GPRS_OPERATION,
    L4C_NONE_OPERATION = 255
}l4c_operation_type_enum;



typedef enum
{

   L4C_ACCURACY_PREFERED,
   L4C_SPEED_PREFERED
}l4c_plmn_list_preference_enum;
# 1626 "interface/modem/general/ps_public_enum.h"
typedef enum {
   PHB_LN_CALL,
   PHB_LN_VOIP,
   PHB_LN_VIDEO
} phb_ln_addr_type_enum;

typedef enum {
   PHB_STORAGE_NONE,
   PHB_STORAGE_NVRAM,
   PHB_STORAGE_SIM,
   PHB_STORAGE_SIM2,
   PHB_STORAGE_SIM3,
   PHB_STORAGE_SIM4,
   PHB_STORAGE_NUM = PHB_STORAGE_SIM4,
   PHB_STORAGE_MAX
} phb_storage_enum;


typedef enum {
   PHB_ERRNO_FAIL,
   PHB_ERRNO_SUCCESS,
   PHB_ERRNO_NOT_SUPPORT,
   PHB_ERRNO_READ_FAIL,
   PHB_ERRNO_READ_SUCCESS,
   PHB_ERRNO_READ_EMPTY,
   PHB_ERRNO_DELETE_EMPTY,
   PHB_ERRNO_NOT_READY,
   PHB_ERRNO_BUSY,
   PHB_ERRNO_ANR_FULL,
   PHB_ERRNO_EMAIL_FULL,
   PHB_ERRNO_SNE_FULL
} phb_errno_enum;

typedef enum {
   PHB_LND,
   PHB_LNM,
   PHB_LNR,
   PHB_LN_NONE,
   PHB_LN_MAX = PHB_LN_NONE
} phb_ln_type_enum;

typedef enum {
   PHB_NONE,
   PHB_ECC,
   PHB_FDN,
   PHB_BDN,
   PHB_MSISDN,
   PHB_SDN,
   PHB_PHONEBOOK,
   PHB_EXT1,

   PHB_SNE,
   PHB_AAS,
   PHB_ANR,
   PHB_GAS,
   PHB_GRP,
   PHB_EMAIL,
   PHB_PBC,

   PHB_TYPE_ENUM_MAX
} phb_type_enum;
# 1702 "interface/modem/general/ps_public_enum.h"
typedef enum
{
 L4C_PHB_UPDATE,
 L4C_PHB_DELETE,
 L4C_PHB_DELETE_ALL,
 L4C_PHB_WRITE_LND,
 L4C_PHB_WRITE_LNM,
 L4C_PHB_WRITE_LNR,
 L4C_PHB_DELETE_LND,
 L4C_PHB_DELETE_LNM,
 L4C_PHB_DELETE_LNR,
 L4C_PHB_UPDATE_NONE
}l4c_phb_update_enum;

typedef enum {
   PHB_NO_CAUSE,
   PHB_CAUSE_STORAGE_FULL,
   PHB_CAUSE_CAPACITY_EXCEEDED,
   PHB_CAUSE_NOT_SUPPORT
} phb_cause_enum;

typedef enum
{
    APPROVAL_TYPE_NONE,
    APPROVAL_TYPE_ECC_ONLY,
    APPROVAL_TYPE_FDN_ONLY,
    APPROVAL_TYPE_FULL
}l4c_phb_approval_type_enum;

typedef enum {
   PHB_BCD = 0x01,
   PHB_ASCII = 0x00,
   PHB_UCS2 = 0x08,
   PHB_UCS2_81 = 0x09,
   PHB_UCS2_82 = 0x10
} phb_charset_enum;



typedef enum
{
   L4C_OK,
   L4C_ERROR,
   L4C_NVRAM_ERROR_INIT = 5

} l4c_result_enum;



typedef enum
{
   PPP_OK,
   PPP_ERROR
} ppp_result_enum;


typedef enum
{
   L4C_NO_CAUSE,
   L4C_GEN_CAUSE
} l4c_cause_enum;

typedef enum
{
    ATCI_REQ_QOS = 0,
    ATCI_MIN_QOS,
    ATCI_NEG_QOS
} atci_qos_enum;

typedef enum {
    SUBSCRIBED_DELAY_CLASS = 0,
    RESERVED_NW_TO_MS_DELAY_CLASS = 0,
    DELAY_CLASS1,
    DELAY_CLASS2,
    DELAY_CLASS3,
    DELAY_CLASS4,
    RESERVED_BIDIRECT_DELAY_CLASS = 7,
    TOT_DELAY_CLASS = 8
} delay_class_enum;

typedef enum {
    SUBSCRIBED_REL_CLASS = 0,
    RESERVED_NW_TO_MS_REL_CLASS = 0,
    REL_CLASS1,
    REL_CLASS2,
    REL_CLASS3,
    REL_CLASS4,
    REL_CLASS5,
    RESERVED_BIDIRECT_REL_CLASS = 7
} reliability_class_enum;

typedef enum {
    SUBSCRIBED_PTC = 0,
    RESERVED_NW_TO_MS_PTC = 0,
    PTC_1,
    PTC_2,
    PTC_3,
    PTC_4,
    PTC_5,
    PTC_6,
    PTC_7,
    PTC_8,
    PTC_9,
    RESERVED_BIDIRECT_PTC = 15
} peak_throughput_class;

typedef enum {
    SUBSCRIBED_PREC_CLASS = 0,
    RESERVED_NW_TO_MS_PREC_CLASS = 0,
    PREC_CLASS1,
    PREC_CLASS2,
    PREC_CLASS3,
    RESERVED_BIDIRECT_PREC_CLASS = 7
} precedence_class_enum;

typedef enum {
    SUBSCRIBED_MEAN_THROUGHPUT = 0,
    RESERVED_NW_TO_MS_MEAN_THROUGHPUT = 0,
    MEAN_THROUGHPUT1,
    MEAN_THROUGHPUT2,
    MEAN_THROUGHPUT3,
    MEAN_THROUGHPUT4,
    MEAN_THROUGHPUT5,
    MEAN_THROUGHPUT6,
    MEAN_THROUGHPUT7,
    MEAN_THROUGHPUT8,
    MEAN_THROUGHPUT9,
    MEAN_THROUGHPUT10,
    MEAN_THROUGHPUT11,
    MEAN_THROUGHPUT12,
    MEAN_THROUGHPUT13,
    MEAN_THROUGHPUT14,
    MEAN_THROUGHPUT15,
    MEAN_THROUGHPUT16,
    MEAN_THROUGHPUT17,
    MEAN_THROUGHPUT18,
    RESERVED_BIDIRECT_MEAN_THROUGHPUT = 30,
    BEST_EFFORT_THROUGHPUT = 31
} mean_throughput_enum;

typedef enum
{
   L4C_GPRS_ATTACHED,
   L4C_NONE_GPRS,
   L4C_GPRS_DETACHED,
   L4C_INVALID_SIM,
   L4C_GPRS_ATTEMPT_ATTACH,
   L4C_GPRS_COVERAGE,
   L4C_PDP_ATTEMPT_ACT,
   L4C_PDP_DEACTIVED,
   L4C_PDP_ACTIVED
} l4c_gprs_status_enum;

typedef enum
{
   L4C_RAT_NONE = 0,
   L4C_RAT_GSM = 1,
   L4C_RAT_UMTS = 2,
   L4C_RAT_GSM_UMTS = L4C_RAT_GSM | L4C_RAT_UMTS,
   L4C_RAT_LTE = 4,
   L4C_RAT_GSM_LTE = L4C_RAT_GSM | L4C_RAT_LTE,
   L4C_RAT_UMTS_LTE = L4C_RAT_UMTS | L4C_RAT_LTE,
   L4C_RAT_GSM_UMTS_LTE = L4C_RAT_GSM | L4C_RAT_UMTS | L4C_RAT_LTE,
   L4C_RAT_COM_GSM = 8,
   L4C_RAT_C2K = 0x10,
   L4C_RAT_LTE_C2K = L4C_RAT_LTE | L4C_RAT_C2K,
   L4C_RAT_GSM_UMTS_LTE_C2K = L4C_RAT_GSM | L4C_RAT_UMTS | L4C_RAT_LTE | L4C_RAT_C2K
} l4c_rat_enum;

typedef enum
{
   L4C_PREFER_RAT_NONE = 0,
   L4C_PREFER_RAT_GSM = 1,
   L4C_PREFER_RAT_UMTS = 2,
   L4C_PREFER_RAT_LTE = 4,
   L4C_PREFER_RAT_INVALID
} l4c_prefer_rat_enum;

typedef enum
{
   L4C_SIM_NOT_INSERTED,
   L4C_SIM_INSERTED,
   L4C_SIM_BLOCK,
   L4C_SIM_NONE
}l4c_sim_status_enum;
# 1902 "interface/modem/general/ps_public_enum.h"
typedef enum
{
  CS_DOMAIN = 0,
  PS_DOMAIN = 1,
  CS_PS_DOMAIN = 2,
  DOMAIN_NONE = 3
} domain_id_enum;

typedef enum
{
    NONE_SPECIFIED = 0x0000,
    GPRS_SUPPORT = 0x0001,
    EDGE_SUPPORT = 0x0002,
    UMTS_SUPPORT = 0x0004,
    HSDPA_SUPPORT = 0x0008,
    HSUPA_SUPPORT = 0x0010,
    HSDPA_UPA_SUPPORT = 0x0018,
    HSDPAP_SUPPORT = 0x0020,
    HSDPAP_UPA_SUPPORT = 0x0030,
    HSUPAP_SUPPORT = 0x0040,
    HSUPAP_DPA_SUPPORT = 0x0048,
    HSPAP_SUPPORT = 0x0060,
    DC_DPA_SUPPORT = 0x0088,
    DC_DPA_UPA_SUPPORT = 0x0098,
    DC_HSDPAP_SUPPORT = 0x00a0,
    DC_HSDPAP_UPA_SUPPORT = 0x00b0,
    DC_HSUPAP_DPA_SUPPORT = 0x00c8,
    DC_HSPAP_SUPPORT = 0x00e0,
    LTE_SUPPORT = 0x1000,
    NOT_CHANGE = 0xffff
}data_speed_support_enum;

typedef enum
{
   DATA_SPEED_NONE_ACTIVATE = 0x0000,
   DATA_SPEED_GPRS_CAPABILITY = 0x0001,
   DATA_SPEED_EDGE_CAPABILITY = 0x0002,
   DATA_SPEED_UMTS_CAPABILITY = 0x0004,
   DATA_SPEED_HSDPA_CAPABILITY = 0x0008,
   DATA_SPEED_HSUPA_CAPABILITY = 0x0010,
   DATA_SPEED_HSDPA_HSUPA_CAPABILITY = 0x0018,
   DATA_SPEED_HSDPAP_CAPABILITY = 0x0020,
   DATA_SPEED_HSDPAP_UPA_CAPABILITY = 0x0030,
   DATA_SPEED_HSUPAP_CAPABILITY = 0x0040,
   DATA_SPEED_HSUPAP_DPA_CAPABILITY = 0x0048,
   DATA_SPEED_HSPAP_CAPABILITY = 0x0060,
   DATA_SPEED_DC_DPA_CAPABILITY = 0x0088,
   DATA_SPEED_DC_DPA_UPA_CAPABILITY = 0x0098,
   DATA_SPEED_DC_HSDPAP_CAPABILITY = 0x00a0,
   DATA_SPEED_DC_HSDPAP_UPA_CAPABILITY = 0x00b0,
   DATA_SPEED_DC_HSUPAP_DPA_CAPABILITY = 0x00c8,
   DATA_SPEED_DC_HSPAP_CAPABILITY = 0x00e0,
   DATA_SPEED_LTE_CAPABILITY = 0x1000
} data_speed_activate_enum;

typedef enum
{
    L4C_CAP_GPRS = 0x0001,
    L4C_CAP_EDGE = 0x0002,
    L4C_CAP_WCDMA = 0x0004,
    L4C_CAP_TDSCDMA = 0x0008,
    L4C_CAP_UMTS = (L4C_CAP_WCDMA | L4C_CAP_TDSCDMA),
    L4C_CAP_HSDPA = 0x0010,
    L4C_CAP_HSUPA = 0x0020,
    L4C_CAP_HSPA = (L4C_CAP_HSDPA | L4C_CAP_HSUPA),
    L4C_CAP_HSPAP = 0x0040,
    L4C_CAP_FDD_LTE = 0x0080,
    L4C_CAP_TDD_LTE = 0x0100,
    L4C_CAP_LTE = (L4C_CAP_FDD_LTE | L4C_CAP_TDD_LTE),
    L4C_CAP_MAX = (L4C_CAP_GPRS | L4C_CAP_EDGE | L4C_CAP_UMTS | L4C_CAP_HSPA | L4C_CAP_HSPAP | L4C_CAP_LTE)
}l4c_modem_capability_enum;

typedef enum
{
   CSD_BEARER_DIALUP,
   GPRS_BEARER_DIALUP,
   INVALID_BEARER
}l4c_dialup_bearer_enum;

typedef enum
{
   TCM_PDP_DEACTIVATE,
   TCM_PDP_ACTIVATE,
   TCM_PDP_DEACTIVATE_LOCAL
}l4c_tcm_pdp_action_enum;

typedef enum
{
   TCM_AT_PDP_CID = 1,
   TCM_EM_PDP_CID_1 = 2,
   TCM_EM_PDP_CID_2
}l4c_tcm_em_pdp_cid_enum;

typedef enum
{
    RMMI_UCM_ATD = 0,
    RMMI_UCM_ATD_2,
    RMMI_UCM_ATD_3,
    RMMI_UCM_ATD_4,
    RMMI_UCM_ATD_DATA,
    RMMI_UCM_ATH,
    RMMI_UCM_ATA,
    RMMI_UCM_BLDN,
    RMMI_UCM_CHLD,
    RMMI_UCM_CHUP,
    RMMI_UCM_MEM_DIAL,
    RMMI_UCM_MEM_DIAL_2,
    RMMI_UCM_MEM_DIAL_3,
    RMMI_UCM_MEM_DIAL_4
} rmmi_ucm_action_enum;

typedef enum
{
    RMMI_UCM_CAUSE_NONE = 0,
    RMMI_UCM_CAUSE_ATD_NOT_ALLOWED,
    RMMI_UCM_CAUSE_ATA_NOT_ALLOWED,
    RMMI_UCM_CAUSE_ATH_NOT_ALLOWED,
    RMMI_UCM_CAUSE_CHLD_NOT_ALLOWED,
    RMMI_UCM_CAUSE_NO_CALL_TO_ANSWER,
    RMMI_UCM_CAUSE_NO_CALL_TO_HANGUP,
    RMMI_UCM_CAUSE_NO_CALL_TO_HOLD,
    RMMI_UCM_CAUSE_NO_CALL_TO_REL,
    RMMI_UCM_CAUSE_NO_CALL_TO_ECT,
    RMMI_UCM_CAUSE_NO_CALL_TO_CONFERENCE,
    RMMI_UCM_CAUSE_INVALID_CALLID,
    RMMI_UCM_CAUSE_NO_NUM_EXIST,
    RMMI_UCM_CAUSE_ATD_DATA_NOT_ALLOWED
} rmmi_ucm_cause_enum;

typedef enum
{
    RMMI_UCM_RCODE_OK,
    RMMI_UCM_RCODE_CONNECT,
    RMMI_UCM_RCODE_RING,
    RMMI_UCM_RCODE_NO_CARRIER,
    RMMI_UCM_RCODE_ERROR,
    RMMI_UCM_RCODE_CCWA
} rmmi_rcode_type_enum;

typedef enum
{
    CLIR_INVOKE,
    CLIR_SUPPRESS,
    CLIR_AUTO
} rmmi_clir_enum;

typedef enum
{
    RMMI_CLI_VALID = 0,
    RMMI_CLI_WITHHELD = 1,
    RMMI_CLI_INTERWORK = 2,
    RMMI_CLI_COIN_PAYPHONE = 3,
    RMMI_CLI_OTHERS = 4

}rmmi_cli_validity_enum;

typedef enum
{
   CALL_DIAL,
   CALL_ANSWER
}l4c_data_call_op_enum;

typedef enum
{
    L4C_DISCONNECT_NONE,
    L4C_DISCONNECT_MO,
    L4C_DISCONNECT_MT
} l4c_ath_req_enum;

typedef enum
{
    L4C_SS_MO,
    L4C_SS_MT,
    L4C_SS_NONE
} l4c_ss_direction_enum;

typedef enum
{
   CSMCC_REL_HELD_OR_UDUB,
   CSMCC_REL_ACTIVE_AND_ACCEPT,
   CSMCC_REL_SPECIFIC_CALL,
   CSMCC_HOLD_ACTIVE_AND_ACCEPT,
   CSMCC_HOLD_ACTIVE_EXCEPT_SPECIFIC_CALL,
   CSMCC_ADD_HELD_CALL,
   CSMCC_EXPLICIT_CALL_TRANSFER,
   CSMCC_ACTIVATE_CCBS_CALL,
   CSMCC_REL_ALL_EXCEPT_WAITING_CALL,
   CSMCC_REL_SPECIFIC_ACTIVE_CALL,
   CSMCC_SWAP_CALL,
   CSMCC_REL_HELD,
   CSMCC_REL_ACTIVE,
   CSMCC_REL_ALL,
   CSMCC_REL_UDUB,
   CSMCC_REL_CCBS,
   CSMCC_REL_ACTIVE_AND_ACCEPT_WAITING,
   CSMCC_REL_ACTIVE_AND_ACCEPT_CCBS,
   CSMCC_REL_ACTIVE_AND_ACCEPT_HELD,
   CSMCC_HOLD_ACTIVE_AND_ACCEPT_WAITING,
   CSMCC_HOLD_ACTIVE_AND_ACCEPT_CCBS,
   CSMCC_VT_FALL_TO_VOICE,

   CSMCC_INVALID_CRSS_TYPE = 255
} csmcc_crss_req_enum;

typedef enum
{
   CLCC_MO_CALL,
   CLCC_MT_CALL,
   CLCC_UNKNOWN_DIR
} clcc_dir_enum;

typedef enum
{
   CSMCC_SETUP_MSG,
   CSMCC_DISCONNECT_MSG,
   CSMCC_ALERT_MSG,
   CSMCC_CALL_PROCESS_MSG,
   CSMCC_SYNC_MSG,
   CSMCC_PROGRESS_MSG,
   CSMCC_CALL_CONNECTED_MSG,
   CSMCC_ALL_CALLS_DISC_MSG = 129,
   CSMCC_MO_CALL_ID_ASSIGN_MSG = 130,
   CSMCC_STATE_CHANGE_HELD = 131,
   CSMCC_STATE_CHANGE_ACTIVE = 132,
   CSMCC_STATE_CHANGE_DISCONNECTED = 133,
   CSMCC_STATE_CHANGE_MO_DISCONNECTING =134,
   CSMCC_CPI_END = 255
}csmcc_cpi_msg_type_enum;


typedef enum {
    SAT_EVDL_CALL_CONNECT = 0,
    SAT_EVDL_CALL_DISCONNECT = 1
}csmcc_sat_evdl_call_status_enum;


typedef enum {
   INVALID_OPERATION,
   SS_OPERATION,
   SIM_OPERATION,
   GPRS_OPERATION,
   CC_OPERATION
} csmss_string_op_enum;





typedef enum
{
   ECALL_TEST,
   ECALL_RECONFIGURATION,
   ECALL_MANUALLY_INITIATED,
   ECALL_AUTOMATICALLY_INITIATED,
   ECALL_DISABLE = 0xff
} ecall_type_enum;



typedef enum
{
   L4C_SS_NotificationToMSUser_notifyLocationAllowed,
   L4C_SS_NotificationToMSUser_notifyAndVerify_LocationAllowedIfNoResponse,
   L4C_SS_NotificationToMSUser_notifyAndVerify_LocationNotAllowedIfNoResponse,

   L4C_SS_NotificationToMSUser_locationNotAllowed
}
L4C_SS_NotificationToMSUser;


typedef enum
{
   L4C_SS_OccurrenceInfo_oneTimeEvent,
   L4C_SS_OccurrenceInfo_multipleTimeEvent

}
L4C_SS_OccurrenceInfo;


typedef enum
{
   L4C_SS_LocationEstimateType_currentLocation,
   L4C_SS_LocationEstimateType_currentOrLastKnownLocation,
   L4C_SS_LocationEstimateType_initialLocation,

   L4C_SS_LocationEstimateType_activateDeferredLocation,
   L4C_SS_LocationEstimateType_cancelDeferredLocation
}
L4C_SS_LocationEstimateType;


typedef enum
{
   L4C_SS_LCS_FormatIndicator_logicalName,
   L4C_SS_LCS_FormatIndicator_e_mailAddress,
   L4C_SS_LCS_FormatIndicator_msisdn,
   L4C_SS_LCS_FormatIndicator_url,
   L4C_SS_LCS_FormatIndicator_sipUrl

}
L4C_SS_LCS_FormatIndicator;


typedef enum
{
   L4C_SS_VerificationResponse_permissionDenied,
   L4C_SS_VerificationResponse_permissionGranted

}
L4C_SS_VerificationResponse;


typedef enum
{
   L4C_SS_AreaType_countryCode,
   L4C_SS_AreaType_plmnId,
   L4C_SS_AreaType_locationAreaId,
   L4C_SS_AreaType_routingAreaId,
   L4C_SS_AreaType_cellGlobalId,

   L4C_SS_AreaType_utranCellId
}
L4C_SS_AreaType;


typedef enum
{
   L4C_SS_MOLR_Type_locationEstimate,
   L4C_SS_MOLR_Type_assistanceData,
   L4C_SS_MOLR_Type_deCipheringKeys

}
L4C_SS_MOLR_Type;


typedef enum
{
   L4C_SS_LocationMethod_msBasedEOTD,
   L4C_SS_LocationMethod_msAssistedEOTD,
   L4C_SS_LocationMethod_assistedGPS,

   L4C_SS_LocationMethod_msBasedOTDOA
}
L4C_SS_LocationMethod;


typedef enum
{
   L4C_SS_ResponseTimeCategory_lowdelay,
   L4C_SS_ResponseTimeCategory_delaytolerant

}
L4C_SS_ResponseTimeCategory;



typedef enum
{
   SMSAL_DEFAULT_PID = 0x00,
   SMSAL_TELEX_PID = 0x21,
   SMSAL_G3_FAX_PID = 0x22,
   SMSAL_G4_FAX_PID = 0x23,
   SMSAL_VOICE_PID = 0x24,
   SMSAL_ERMES_PID = 0x25,
   SMSAL_PAGING_PID = 0x26,
   SMSAL_X400_PID = 0x31,
   SMSAL_EMAIL_PID = 0x32

} smsal_pid_enum;

typedef enum
{
   SMSAL_DEFAULT_DCS = 0x00,
   SMSAL_8BIT_DCS = 0x04,
   SMSAL_UCS2_DCS = 0x08,
   SMSAL_RESERVED_DCS = 0x0c,


   SMSAL_EXT_DCS = 0x10

} smsal_dcs_enum;

typedef enum
{

   SMSAL_LINE_1 = 0,
   SMSAL_LINE_2 = 1,
   SMSAL_MAX_LINES = 2,


   SMSAL_PROFILE_1 = 0,
   SMSAL_PROFILE_2 = 1,
   SMSAL_PROFILE_3 = 2,
   SMSAL_PROFILE_4 = 3,
   SMSAL_PROFILE_NONE = 0xff
} smsal_dest_no_enum;

typedef enum
{
   SMSAL_CB_MI = 0x01,
   SMSAL_CB_MIR = 0x02,
   SMSAL_CB_DCS = 0x04,
   SMSAL_CB_MI_MASK = 0x08,
   SMSAL_CB_MIR_MASK = 0x10,
   SMSAL_CB_DCS_MASK = 0x20,
   SMSAL_CB_ALL_LANG = 0x40
} smsal_cb_para_enum;


typedef enum
{



   ST_COMP_MSG_RECV_BY_SME = 0x00,
   ST_COMP_MSG_FORWARD_NOT_CONF = 0x01,

   ST_COMP_MSG_REPLACE = 0x02,




   ST_TE1_CONGESTION = 0x20,
   ST_TE1_SME_BUSY = 0x21,
   ST_TE1_NO_RSP_FROM_SME = 0x22,
   ST_TE1_SERVICE_REJECT = 0x23,
   ST_TE1_QOS_NOT_AVAIL = 0x24,
   ST_TE1_ERROR_IN_SME = 0x25,




   ST_PE_REMOTE_PROC_ERROR = 0x40,
   ST_PE_INCOMP_DEST = 0x41,
   ST_PE_CONN_REJ_BY_SME = 0x42,
   ST_PE_NOT_OBTAINABLE = 0x43,
   ST_PE_QOS_NOT_AVAIL = 0x44,
   ST_PE_NO_INTERWK_AVAIL = 0x45,
   ST_PE_VP_EXPIRED = 0x46,
   ST_PE_DEL_BY_ORI_SME = 0x47,
   ST_PE_DEL_BY_SC = 0x48,
   ST_PE_NOT_EXIST = 0x49,




   ST_TE2_CONGESTION = 0x60,
   ST_TE2_SME_BUSY = 0x61,
   ST_TE2_NO_RSP_FROM_SME = 0x62,
   ST_TE2_SERVICE_REJECT = 0x63,
   ST_TE2_QOS_NOT_AVAIL = 0x64,
   ST_TE2_ERROR_IN_SME = 0x65,

   ST_SERVICE_REJECT = 0xff

} smsal_st_enum;







typedef enum
{
   SMSAL_SM = 0,
   SMSAL_ME = 1,
   SMSAL_SR = 2,
   SMSAL_BM = 3,
   SMSAL_TA = 4,
   SMSAL_SM_PREFER = 5,
   SMSAL_ME_PREFER = 6,
   SMSAL_MT = 7,
   SMSAL_STORAGE_UNSPECIFIED = 7

} smsal_storage_enum;
# 2414 "interface/modem/general/ps_public_enum.h"
typedef enum
{
   SMSAL_PARA_FO = 0x0001,
   SMSAL_PARA_PID = 0x0002,
   SMSAL_PARA_DCS = 0x0004,
   SMSAL_PARA_VP = 0x0008,
   SMSAL_PARA_SCA = 0x0010,
   SMSAL_PARA_PROFILE_NAME = 0x0020,
   SMSAL_PARA_SAVE_PROFILE = 0x0040,

   SMSAL_PARA_STATUS_REP = 0x0100,
   SMSAL_PARA_REPLY_PATH = 0x0200
} smsal_profile_para_enum;

typedef enum
{
   SMSAL_COM_PARA_FO = 0x0001,
   SMSAL_COM_PARA_BEARER = 0x0002,
   SMSAL_COM_PARA_PREFER_MEM = 0x0004,
   SMSAL_COM_PARA_STATUS_REP = 0x0008,
   SMSAL_COM_PARA_REPLY_PATH = 0x0010,
   SMSAL_COM_PARA_CBCH_REQ = 0x0020,
   SMSAL_COM_PARA_MAILBOX_ADDR = 0x0040,
   SMSAL_COM_PARA_ALL_CB_LANG = 0x0080,
   SMSAL_COM_PARA_RESTORE_PROFILE= 0x0100,
   SMSAL_COM_PARA_MBI_NUM = 0x0200

} smsal_common_para_enum;



typedef enum
{
   SMS_PS_ONLY = 0,
   SMS_CS_ONLY,
   SMS_PREFER_PS,
   SMS_PREFER_CS,
   NUM_OF_SMS_SERVICE_MODE
}sms_bearer_enum;

typedef enum
{

   SMSAL_REC_UNREAD = 0,
   SMSAL_REC_READ,
   SMSAL_STO_UNSENT,
   SMSAL_STO_SENT,

   SMSAL_ALL,




   SMSAL_INBOX_PARTIAL,
   SMSAL_OUTBOX_PARTIAL,
   SMSAL_STO_DRAFT,
   SMSAL_INVALID_STATUS
} smsal_status_enum;


typedef enum
{
    RMMI_SMSAL_SM = 0,
    RMMI_SMSAL_ME = 1,
    RMMI_SMSAL_MT = 2
} rmmi_smsal_storage_enum;

typedef enum
{
  L4C_NORMAL_CB_UPDATE = 0,
  L4C_ETWS_CB_START_RX,
  L4C_ETWS_CB_STOP_RX
} l4c_cb_set_type_enum;



typedef enum
{
    SCRI_REQ_SENT = 0,
    SCRI_CS_SESSION_ONGOING = 1,
    SCRI_PS_SIGNALLING_ONGOING = 2,
    SCRI_NO_PS_DATA_SESSION = 3,
    SCRI_REQ_NOT_SENT = 4,
    SCRI_NOT_ALLOWED = 5,
    SCRI_REQ_IND = 6
} end_session_result_enum;

typedef enum
{
   SCRI_REQ_FD = 0,
   SCRI_REQ_AFR = 1,
   SCRI_REQ_FOP = 2
} end_session_cause_enum;


typedef enum {
    GMMREG_CIPHER_OFF,
 GMMREG_CIPHER_ON,
 GMMREG_CIPHER_INVALID=0xff
} gmmreg_cipher_ind_enum;

typedef enum {
    NOT_ALLOWED_CSG = 0x00,
    ALLOWED_CSG = 0x01,
    OPERATOR_CSG = 0x02,
    UNAUTH_OPERATOR_CSG = 0x03
} csg_type_enum;



typedef enum
{
    SIM_RADIO_OFF = 0x00,
    SIM1_RADIO_ON = 0x01,
    SIM2_RADIO_ON = 0x02,
    SIM3_RADIO_ON = 0x04,
    SIM4_RADIO_ON = 0x08
} sim_radio_status_enum;

typedef enum
{
    SIM1_INSERTED = 0x01,
    SIM2_INSERTED = 0x02,
    SIM3_INSERTED = 0x04,
    SIM4_INSERTED = 0x08
} sim_inserted_status_enum;

typedef enum
{
    SIM1_ONLY_CONFIG = SIM1_RADIO_ON,
    SIM2_ONLY_CONFIG = SIM2_RADIO_ON,
    DAUL_SIM_CONFIG = SIM1_RADIO_ON | SIM2_RADIO_ON,
    TRIPLE_SIM_CONFIG = SIM1_RADIO_ON | SIM2_RADIO_ON | SIM3_RADIO_ON,
    QUAD_SIM_CONFIG = SIM1_RADIO_ON | SIM2_RADIO_ON | SIM3_RADIO_ON | SIM4_RADIO_ON,
    SIM_CONFIG_STATUS_NONE = 0xFF
} sim_config_status_enum;

typedef enum
{
    NO_SIM_INSERTED = 0,
    ONLY_SIM1_INSERTED = 1,
    ONLY_SIM2_INSERTED = 2,
    DUAL_SIM_INSERTED = 3,
    SIM_INSERT_STATUS_NONE = 0xFF
} sim_insert_status_enum;



typedef enum
{
    PHB_APPROVE_FORMAT_FAIL = 0,
    PHB_APPROVE_PHB_NOT_READY,

    PHB_APPROVE_FDN_BLOCKED = 2600
} phb_approve_cause_enum;


typedef enum
{
    ESDP_CATEGORY_WALLPAPER = 0,
    ESDP_CATEGORY_RINGTONE,
    ESDP_CATEGORY_HOMECITY,
    ESDP_CATEGORY_THEME,
    ESDP_CATEGORY_SHORTCUT,
    ESDP_CATEGORY_SCREENSAVER,
    ESDP_CATEGORY_PWRONDISPLAY,
    ESDP_CATEGORY_PWROFFDISPLAY,
    ESDP_CATEGORY_MAX = ESDP_CATEGORY_PWROFFDISPLAY
}esdp_category_enum;

typedef enum
{
   TYPE_NO_REQUIRED,
   TYPE_PHONELOCK,
   TYPE_CHV1,
   TYPE_CHV2,
   TYPE_UBCHV1,
   TYPE_UBCHV2,
   TYPE_NP,
   TYPE_NSP,
   TYPE_SP,
   TYPE_CP,
   TYPE_IMSI_LOCK,
   TYPE_PERSONALIZATION_KEY,
   TYPE_CHV1_BLOCKED,
   TYPE_CHV2_BLOCKED,
   TYPE_SIM_CARD_BLOCKED,
   TYPE_UBCHV2_BLOCKED,
   TYPE_UBCHV1_CHV1_NOT_LOCK,
   TYPE_LINK_NS_SP,
   TYPE_LINK_SIM_C,
   TYPE_UNSPECIFIED,
   TYPE_UNEXPECTED_ERROR
}smu_security_type_enum;


typedef enum
{
   SMU_SIM_NOT_READY,
   SMU_SIM_NO_IMSI,
   SMU_SIM_REPLACED,
   SMU_SIM_NOT_REPLACED
}smu_sim_status_enum;

typedef enum
{
   SMU_ADD_PLMNSEL,
   SMU_REMOVE_PLMNSEL,
   SMU_REPLACE_PLMNSEL,
   SMU_INSERT_EMPTY
}smu_plmnsel_op_enum;



extern smu_sim_status_enum check_sim_status(kal_uint8 simInterface);
# 2637 "interface/modem/general/ps_public_enum.h"
typedef enum {
    SML_PROTECTION_SCHEME_NONE = 0,
    SML_PROTECTION_SCHEME_HMAC_SHA256 = 1,
    SML_PROTECTION_SCHEME_RSA2048 = 2,
} sml_protection_scheme_enum;

typedef enum {
    SML_TMO_STATE_PERMANENT_LOCK = 0,
    SML_TMO_STATE_TEMPORARY_UNLOCK = 1,
    SML_TMO_STATE_PERMANENT_UNLOCK = 2,
    SML_TMO_STATE_PARTIAL_UNLOCK = 3,
} sml_tmo_state_enum;

typedef enum {
    SML_EVENT_REBOOT_REQUIRED
} sml_event_enum;


typedef enum {
    SML_STATE_NULL,
    SML_STATE_LOCK,
    SML_STATE_UNLOCK,
    SML_STATE_AUTOLOCK,
    SML_STATE_DISABLE
} sml_state_enum;

typedef enum {
    SML_KEY_EMPTY,
    SML_KEY_SET
} sml_key_state_enum;

typedef enum {
    SML_OP_UNLOCK,
    SML_OP_LOCK,
    SML_OP_ADD,
    SML_OP_REMOVE,
    SML_OP_DISABLE
} sml_op_enum;

typedef enum {
    SML_CAT_N,
    SML_CAT_NS,
    SML_CAT_SP,
    SML_CAT_C,
    SML_CAT_SIM,
    SML_CAT_NS_SP,
    SML_CAT_SIM_C,
    SML_CAT_SIZE
} sml_cat_enum;

typedef enum {
    SML_MAGIC_HEAD,
    SML_MAGIC_TAIL,
    SML_CAT_META,
    SML_CAT_KEY,
    SML_CAT_CODE,
    SML_CAT_RANGE,


    SML_TMO_CAT_VERSION,
    SML_TMO_CAT_PERTECTION_SCHEME,
    SML_TMO_CAT_STATE,
    SML_TMO_CAT_LENGTH,
    SML_TMO_CAT_NUM_PLMN,
    SML_TMO_CAT_PLMN_LIST,
    SML_TMO_CAT_NUM_GID,
    SML_TMO_CAT_GID_LIST,
    SML_TMO_CAT_START_TIME,
    SML_TMO_CAT_END_TIME,
    SML_TMO_CAT_IMEI,
    SML_TMO_CAT_VERIFICATION_CODE,
    SML_TMO_CAT_UNLOCK_TIME_COUNTER,
} sml_ctx_enum;


typedef enum
{
    RAC_DETACH,
    RAC_ATTACH
} l4crac_ps_attach_enum;

typedef enum
{
    RAC_CS = 1,
    RAC_PS = 2,
    RAC_CS_AND_PS = 3
} l4crac_attach_type_enum;

typedef enum
{
   L4C_RAC_OK,
   L4C_RAC_NO_CELL,
   L4C_RAC_LIMITED_SERVICE,
   L4C_RAC_ERROR,
   L4C_RAC_INVALID_SIM,
   L4C_RAC_ATTEMPT_TO_UPDATE,
   L4C_RAC_SEARCHING,
   L4C_RAC_NULL
} l4c_rac_response_enum;

typedef enum
{
   DATA_PREFER,
   CALL_PREFER,
   AS_OPTIMAL
} gprs_transfer_preference_enum;

typedef enum
{
 L4C_APPLY_AT_RUNTIME = 0,
    L4C_APPLY_AFTER_REBOOT,
    L4C_APPLY_INVALID
} l4c_hspa_mode_apply_enum;

typedef enum
{
 L4C_HSPA_OFF = 0,
 L4C_HSDPA_ON = 1,
 L4C_HSDPA_HSUPA_ON = 2,
 L4C_HSPAPLUS_ON = 3,
 L4C_HSPA_INVLIAD
} l4c_hspa_preference_enum;


typedef enum
{
    MANUAL_MODE = 0,
    AUTOMATIC_MODE = 1
} plmn_selection_mode_enum;

 typedef enum {
   PHB_NORMAL_NUM = 129,
   PHB_INTER_NUM = 145,
   PHB_UNKNOW = 255
} phb_ton_enum;




typedef enum
{
    RMMI_PLMN_LONG_ALPHA,
    RMMI_PLMN_SHORT_ALPHA,
    RMMI_PLMN_NUMERIC
} rmmi_plmn_format_enum;

typedef enum
{
    RMMI_DISABLE_REPORT = 0,
    RMMI_ENABLE_REPORT
} rmmi_report_mode_enum;

typedef enum
{
    RMMI_DISABLE_NW_REG_REPORT,
    RMMI_ENABLE_NW_REG_REPORT,
    RMMI_ENABLE_LOC_REPORT,
    RMMI_ENABLE_LOC_AND_CAUSE_REPORT,
} rmmi_nw_reg_report_mode_enum;

typedef enum
{
    RMMI_NUM_PARTIAL_HEAD_TAIL,
    RMMI_VERBOSE_FULL_HEAD_TAIL
} rmmi_result_code_format;

typedef enum
{
    RMMI_SUPPRESS_OFF,
    RMMI_SUPRESS_ON
} rmmi_result_code_suppress_enum;

typedef enum
{
    RMMI_SIMPLE_ERROR,
    RMMI_NUMERIC_ERROR,
    RMMI_TEXT_ERROR
} rmmi_error_report_mode_enum;

typedef enum
{
    RMMI_UART_TO_SIM1,
    RMMI_UART_TO_SIM2,
    RMMI_UART_TO_SIM3,
    RMMI_UART_TO_SIM4,
    RMMI_SIM_UART_SETTING_NONE = 0xFF
}rmmi_sim_uart_setting_enum;







typedef enum
{
    L4C_SETTING_FLIGHT_MODE,
    L4C_SETTING_WLAN_FLIGHT_MODE,
    L4C_SETTING_DUAL_SIM_MODE,
    L4C_SETTING_DUAL_SIM_UART,
    L4C_SETTING_3G_SERVICE_BITMAP,
    L4C_SETTING_MMDC_MODE,
    L4C_SETTING_MAX
}l4c_nvram_setting_enum;

typedef enum
{
   MT_CALL_ALLOW,
   MT_CALL_REJECT,
   MT_CALL_APPROVAL_ENABLE,
   MT_CALL_APPROVAL_DISABLE
}l4c_mt_call_approval_enum;

typedef enum
{
   ALS_DIAL_BY_SETTING,
   ALS_DIAL_LINE1,
   ALS_DIAL_LINE2
}l4c_als_dial_type_enum;

typedef enum
{
   INFO_ECC_CHECK_BY_MODEM,
   INFO_ECC_CALL,
   INFO_NORMAL_CALL,
   INFO_ECALL_START,
   INFO_ECALL_TEST = 0x00 + INFO_ECALL_START,
   INFO_ECALL_RECONFIGURATION = 0x01 + INFO_ECALL_START,
   INFO_ECALL_MANUALLY_INITIATED = 0x02 + INFO_ECALL_START,
   INFO_ECALL_AUTOMATICALLY_INITIATED = 0x03 + INFO_ECALL_START
}l4c_mmi_ecc_info_enum;

typedef enum
{
   SINGLE_VOICE_CALL,
   SINGLE_DATA_CALL,
   SINGLE_FAX_CALL,
   FOLLOW_VOICE_CALL,
   ALT_DATA_VOICE_CALL,
   ALT_FAX_VOICE_CALL,
   FOLLOW_DATA_CALL,
   ALT_DATA_DATA_CALL,
   ALT_FAX_FAX_CALL,
   UNKNOWN_CALL
} l4ccsm_cc_call_mode_enum;


typedef enum
{
    L4C_NONE_SPECIFIED = 0x0000,
    L4C_GPRS_SUPPORT = 0x0001,
    L4C_EDGE_SUPPORT = 0x0002,
    L4C_UMTS_SUPPORT = 0x0004,
    L4C_HSDPA_SUPPORT = 0x0008,
    L4C_HSUPA_SUPPORT = 0x0010,
    L4C_HSDPA_UPA_SUPPORT = 0x0018,

    L4C_HSDPAP_SUPPORT = 0x0020,
    L4C_HSDPAP_UPA_SUPPORT = 0x0030,
    L4C_HSUPAP_SUPPORT = 0x0040,
    L4C_HSUPAP_DPA_SUPPORT = 0x0048,
    L4C_HSPAP_SUPPORT = 0x0060,
    L4C_DC_DPA_SUPPORT = 0x0088,
    L4C_DC_DPA_UPA_SUPPORT = 0x0098,
    L4C_DC_HSDPAP_SUPPORT = 0x00a0,
    L4C_DC_HSDPAP_UPA_SUPPORT = 0x00b0,
    L4C_DC_HSUPAP_DPA_SUPPORT = 0x00c8,
    L4C_DC_HSPAP_SUPPORT = 0x00e0,
    L4C_LTE_SUPPORT = 0x1000,
    L4C_NOT_CHANGE = 0xffff
} l4c_data_speed_support_enum;




typedef enum
{
    L4C_NONE_ACTIVATE = 0,
    L4C_GPRS_CAPABILITY,
    L4C_EDGE_CAPABILITY,
    L4C_UMTS_CAPABILITY,
    L4C_HSDPA_CAPABILITY,
    L4C_HSUPA_CAPABILITY,
    L4C_HSDPA_HSUPA_CAPABILITY,

    L4C_HSDPAP_CAPABILITY,
    L4C_HSDPAP_UPA_CAPABILITY,
    L4C_HSUPAP_CAPABILITY,
    L4C_HSUPAP_DPA_CAPABILITY,
    L4C_HSPAP_CAPABILITY,
    L4C_DC_DPA_CAPABILITY,
    L4C_DC_DPA_UPA_CAPABILITY,
    L4C_DC_HSDPAP_CAPABILITY,
    L4C_DC_HSDPAP_UPA_CAPABILITY,
    L4C_DC_HSUPAP_DPA_CAPABILITY,
    L4C_DC_HSPAP_CAPABILITY,
    L4C_LTE_CAPABILITY
} l4c_data_bearer_capablility_enum;
# 2955 "interface/modem/general/ps_public_enum.h"
typedef enum
{
    RMMI_CIND_BEGIN = 0,
    RMMI_CIND_BATTCHG,
    RMMI_CIND_SIGNAL,
    RMMI_CIND_SERVICE,
    RMMI_CIND_MESSAGE,
    RMMI_CIND_CALL,
    RMMI_CIND_ROAM,
    RMMI_CIND_SMSMEMSTATUS,
    RMMI_CIND_CALLSETUP,
    RMMI_CIND_END
} rmmi_cind_enum;


typedef enum
{
    RMMI_CIND_CC_NONE = 0,
    RMMI_CIND_CC_ACTIVE = 1
} rmmi_cind_call;

typedef enum
{
    RMMI_CIND_CSUP_NONE = 0,
    RMMI_CIND_CSUP_INCOMING,
    RMMI_CIND_CSUP_OUTGOING,
    RMMI_CIND_CSUP_ALERT,
    RMMI_CIND_CSU_PEND
} rmmi_cind_callsetup;

typedef enum
{
    RMMI_CIND_HELD_NONE = 0,
    RMMI_CIND_HELD_ACTIVE_HOLD = 1,
    RMMI_CIND_HELD_HOLD = 2
} rmmi_cind_callheld;

typedef enum
{
    NW_BAND_PGSM900 = 0x01,
    NW_BAND_EGSM900 = 0x02,
    NW_BAND_RGSM900 = 0x04,
    NW_BAND_DCS1800 = 0x08,
    NW_BAND_PCS1900 = 0x10,
    NW_BAND_GSM450 = 0x20,
    NW_BAND_GSM480 = 0x40,
    NW_BAND_GSM850 = 0x80
} l4c_nw_band_enum;

typedef enum {

   CM_RADIO_LINK_FAIL = 0,




   CM_UNASSIGNED_NUM = 1,
   CM_NO_ROUTE_TO_DESTINATION = 3,
   CM_CHANNEL_UN_ACCP = 6,
   CM_OPR_DTR_BARRING = 8,
   CM_CALL_BARRED = 10,
   CM_RESERVED = 11,

   CM_NORMAL_CALL_CLR = 16,
   CM_USER_BUSY = 17,
   CM_NO_USER_RESPONDING = 18,
   CM_NO_ANSWER_ON_ALERT = 19,
   CM_CALL_REJECTED = 21,
   CM_NUMBER_CHANGED = 22,
   CM_CALL_REJECT_DUO_TO_FEATURE = 24,
   CM_PRE_EMPTION = 25,
   CM_NON_SEL_USER_CLEAR = 26,
   CM_DEST_OUT_OF_ORDER = 27,
   CM_INVALID_NUMBER_FORMAT = 28,
   CM_FACILITY_REJECT = 29,
   CM_RES_STATUS_ENQ = 30,
   CM_NORMAL_UNSPECIFIED = 31,

   CM_NO_CIRCUIT_CHANNEL_AVAIL = 34,
   CM_NETWORK_OUT_OF_ORDER = 38,
   CM_TEMPORARY_FAILURE = 41,
   CM_SWITCH_EQUIPMENT_CONGESTION = 42,
   CM_ACCESS_INFO_DISCARDED = 43,
   CM_REQUESTED_CKT_CHANEL_NOT_AVIL = 44,
   CM_RESOURCE_UNAVAIL_UNSPECIFIED = 47,

   CM_QOS_UNAVAIL = 49,
   CM_REQ_FAC_NOT_SUBS = 50,
   CM_IC_BAR_CUG = 55,
   CM_BEARER_CAP_NOT_AUTHORISED = 57,
   CM_BEARER_CAP_NOT_AVAIL = 58,
   CM_SER_UNAVAILABLE = 63,

   CM_BEARER_SER_UNIMPL = 65,
   CM_ACM_EXCEEDED = 68,
   CM_REQ_FACILITY_UNAVAIL = 69,
   CM_RESTR_DIGITAL_INFO = 70,
   CM_SER_OPT_UNIMPL = 79,

   CM_INVALID_TI_VALUE = 81,
   CM_USER_NOT_IN_CUG = 87,
   CM_INCOMPATIBLE_DEST = 88,
   CM_INVALID_TRANSIT_NW_SEL = 91,
   CM_SEMANTIC_ERR = 95,

   CM_INVALID_MANDATORY_INF = 96,
   CM_MSG_TYPE_UNIMPL = 97,
   CM_MSG_TYPE_NOT_COMPATIBLE = 98,
   CM_IE_NON_EX = 99,
   CM_COND_IE_ERR = 100,
   CM_INCOMP_MESG_WITH_STATE = 101,
   CM_RECOVERY_ON_TIMER_EXPIRY = 102,
   CM_PROTOCOL_ERR_UNSPECIFIED = 111,

   CM_INTER_WRK_UNSPECIFIED = 127,







   TELEMATIC_INT_WRK_NOT_SUPPORT = 0x80,
   SMS_TYPE0_NOT_SUPPORT = 0x81,
   CANNOT_REPLACE_MSG = 0x82,
   UNSPECIFIED_PID_ERROR = 0x8F,


   ALPHABET_NOT_SUPPORT = 0x90,
   MSG_CLASS_NOT_SUPPORT = 0x91,
   UNSPECIFIED_TP_DCS = 0x9f,


   CMD_CANNOT_ACTION = 0xa0,
   CMD_NOT_SUPPORT = 0xa1,
   UNSPECIFIED_CMD_ERROR = 0xaf,

   TPDU_NOT_SUPPORT = 0xb0,
   SC_BUSY = 0xc0,
   NO_SC_SUBSCRIPTION = 0xc1,
   SC_SYS_FAILURE = 0xc2,
   INVALID_SME_ADDR = 0xc3,
   DEST_SME_BARRED = 0xc4,
   SM_REJ_DUP_SM = 0xc5,
   TP_VPF_NOT_SUPPORT = 0xc6,
   TP_VP_NOT_SUPPORT = 0xc7,

   SIM_STORAGE_FULL = 0xd0,
   NO_SMS_STO_IN_SIM = 0xd1,
   ERROR_IN_MS = 0xd2,
   MEM_CAP_EXCEEDED = 0xd3,


   SMS_SAT_BUSY = 0xd4,
   SMS_SAT_DL_ERROR = 0xd5,


   SMS_CP_RETRY_EXCEED = 0xe0,
   SMS_RP_TR1M_TIMEOUT = 0xe1,
   SMS_CONNECTION_BROKEN = 0xe2,

   UNSPECIFIED_TP_FCS = 0xff,



   INVALID_PDU_MODE_PARA = 304,
   INVALID_TEXT_MODE_PARA = 305,
   SMS_SIM_FAILURE = 313,
   MEM_FAILURE = 320,
   INVALID_MEM_INDEX = 321,
   MEM_FULL = 322,
   SCA_UNKNOWN = 330,
   NO_CNMA_EXPECTED = 340,
   SMSAL_UNSPECIFIED_ERROR_CAUSE = 500,


   SMSAL_NO_ERROR = 512,
   MSG_LEN_EXCEEDED = 513,

   INVALID_REQ_PARAMETER = 514,
   SMS_ME_STORAGE_FAILURE = 515,
   SMSAL_INVALID_BEARER = 516,
   SMSAL_INVALID_SERVICE_MODE = 517,
   SMSAL_INVALID_STORAGE_TYPE = 518,
   SMSAL_INVALID_MSG_FORMAT = 519,
   TOO_MANY_MO_CONCAT_MSG = 520,
   SMSAL_NOT_READY = 521,
   SMSAL_NO_MO_SERVICE = 522,
   NOT_SUPP_SR_CMD_IN_STORAGE = 523,
   SMSAL_NOT_SUPPORT_MSG_TYPE = 524,
   SMS_RL_NO_FREE_ENTITY = 525,
   SMS_PORT_NUM_ALREADY_REG = 526,
   SMS_PORT_NUM_NO_FREE_ENTITY= 527,
   SMS_RL_MMS_STATE_ERR = 528,
   SMS_MO_SMS_NOT_ALLOW = 529,
   SMS_PS_SUSPENDED = 530,
   SMS_ME_STORAGE_FULL = 531,
   SMS_SIM_REFRESHING = 532,




 CSMCC_CMD_NOT_ALLOW = 768,
 CSMCC_ILLEGAL_CALL_ID,
 CSMCC_CALL_ALLOC_FAIL,
 CSMCC_BC_FILL_FAIL,
 CSMCC_CALL_RE_EST,
 CSMCC_ILLEGAL_DTMF_TONE,
 CSMCC_ILLEGAL_BC,
 CSMCC_MODIFY_ACTUAL_MODE,
 CSMCC_DATA_ACT_FAIL,
 CSMCC_NO_RESPONSE_FROM_NW,
 CSMCC_CALL_ACCEPT_NOT_ALLOW,
        CSMCC_SAT_CALL_CTRL_REJECTED,
        CSMCC_VT_NO_UMTS_CAPABILITY,

   CM_L4C_GEN_CAUSE = 896,
   CM_L4C_CC_CALL_ABORT = 897,

   CM_L4C_CC_CALL_DISC_IND = 898,





   CM_SS_ERR_START = 1024,
   CM_SS_ERR_UNKNOWNSUBSCRIBER = 1 + CM_SS_ERR_START,
   CM_SS_ERR_ILLEGALSUBSCRIBER = 9 + CM_SS_ERR_START,
   CM_SS_ERR_BEARERSERVICENOTPROVISIONED = 10 + CM_SS_ERR_START,
   CM_SS_ERR_TELESERVICENOTPROVISIONED = 11 + CM_SS_ERR_START,
   CM_SS_ERR_ILLEGALEQUIPMENT = 12 + CM_SS_ERR_START,
   CM_SS_ERR_CALLBARRED = 13 + CM_SS_ERR_START,
   CM_SS_ERR_ILLEGALSS_OPERATION = 16 + CM_SS_ERR_START,
   CM_SS_ERR_SS_ERRORSTATUS = 17 + CM_SS_ERR_START,
   CM_SS_ERR_SS_NOTAVAILABLE = 18 + CM_SS_ERR_START,
   CM_SS_ERR_SS_SUBSCRIPTIONVIOLATION = 19 + CM_SS_ERR_START,
   CM_SS_ERR_SS_INCOMPABILITY = 20 + CM_SS_ERR_START,
   CM_SS_ERR_FACILITYNOTSUPPORTED = 21 + CM_SS_ERR_START,
   CM_SS_ERR_ABSENTSUBSCRIBER = 27 + CM_SS_ERR_START,
   CM_SS_ERR_SHORTTERMDENIAL = 29 + CM_SS_ERR_START,
   CM_SS_ERR_LONGTERMDENIAL = 30 + CM_SS_ERR_START,
   CM_SS_ERR_SYSTEMFAILURE = 34 + CM_SS_ERR_START,
   CM_SS_ERR_DATAMISSING = 35 + CM_SS_ERR_START,
   CM_SS_ERR_UNEXPECTEDDATAVALUE = 36 + CM_SS_ERR_START,
   CM_SS_ERR_PW_REGISTRATIONFAILURE = 37 + CM_SS_ERR_START,
   CM_SS_ERR_NEGATIVEPW_CHECK = 38 + CM_SS_ERR_START,
   CM_SS_ERR_NUMBEROFPW_ATTEMPTSVIOLATION = 43 + CM_SS_ERR_START,
   CM_SS_ERR_POSITIONMETHODFAILURE = 54 + CM_SS_ERR_START,
   CM_SS_ERR_UNKNOWNALPHABET = 71 + CM_SS_ERR_START,
   CM_SS_ERR_USSD_BUSY = 72 + CM_SS_ERR_START,
   CM_SS_ERR_REJECTEDBYUSER = 121 + CM_SS_ERR_START,
   CM_SS_ERR_REJECTEDBYNETWORK = 122 + CM_SS_ERR_START,
   CM_SS_ERR_DEFLECTIONTOSERVEDSUBSCRIBER = 123 + CM_SS_ERR_START,
   CM_SS_ERR_SPECIALSERVICECODE = 124 + CM_SS_ERR_START,
   CM_SS_ERR_INVALIDDEFLECTIONTONUMBER = 125 + CM_SS_ERR_START,
   CM_SS_ERR_MAXNUMBEROFMPTY_PARTICIPANTSEXCEEDED = 126 + CM_SS_ERR_START,
   CM_SS_ERR_RESOURCESNOTAVAILABLE = 127 + CM_SS_ERR_START,

   CM_SS_GENERALPROBLEM_START = 1152,
   CM_SS_GENERALPROBLEM_UNRECOGNIZEDCOMPONENT = CM_SS_GENERALPROBLEM_START,
   CM_SS_GENERALPROBLEM_MISTYPEDCOMPONENT = 1 + CM_SS_GENERALPROBLEM_START,
   CM_SS_GENERALPROBLEM_BADLYSTRUCTUREDCOMPONENT = 2 + CM_SS_GENERALPROBLEM_START,

   CM_SS_INVOKEPROBLEM_START = 1155,
   CM_SS_INVOKEPROBLEM_DUPLICATEINVOKEID = CM_SS_INVOKEPROBLEM_START,
   CM_SS_INVOKEPROBLEM_UNRECOGNIZEDOPERATION = 1 + CM_SS_INVOKEPROBLEM_START,
   CM_SS_INVOKEPROBLEM_MISTYPEDPARAMETER = 2 + CM_SS_INVOKEPROBLEM_START,
   CM_SS_INVOKEPROBLEM_RESOURCELIMITATION = 3 + CM_SS_INVOKEPROBLEM_START,
   CM_SS_INVOKEPROBLEM_INITIATINGRELEASE = 4 + CM_SS_INVOKEPROBLEM_START,
   CM_SS_INVOKEPROBLEM_UNRECOGNIZEDLINKDID = 5 + CM_SS_INVOKEPROBLEM_START,
   CM_SS_INVOKEPROBLEM_LINKEDRESONSEUNEXPECTED = 6 + CM_SS_INVOKEPROBLEM_START,
   CM_SS_INVOKEPROBLEM_UNEXPECTEDLINKEDOPERATION = 7 + CM_SS_INVOKEPROBLEM_START,

   CM_SS_RETURNRESULTPROBLEM_START = 1163,
   CM_SS_RETURNRESULTPROBLEM_RR_UNRECOGNIZEDINVOKEID = CM_SS_RETURNRESULTPROBLEM_START,
   CM_SS_RETURNRESULTPROBLEM_RR_RETURNRESULTUNEXPECTED = 1 + CM_SS_RETURNRESULTPROBLEM_START,
   CM_SS_RETURNRESULTPROBLEM_RR_MISTYPEDPARAMETER = 2 + CM_SS_RETURNRESULTPROBLEM_START,

   CM_SS_RETURNERRORPROBLEM_START = 1166,
   CM_SS_RETURNERRORPROBLEM_RE_UNRECOGNIZEDINVOKEID = CM_SS_RETURNERRORPROBLEM_START,
   CM_SS_RETURNERRORPROBLEM_RE_RETURNERRORUNEXPECTED = 1 + CM_SS_RETURNERRORPROBLEM_START,
   CM_SS_RETURNERRORPROBLEM_RE_UNRECOGNIZEDERROR = 2 + CM_SS_RETURNERRORPROBLEM_START,
   CM_SS_RETURNERRORPROBLEM_RE_UNEXPECTEDERROR = 3 + CM_SS_RETURNERRORPROBLEM_START,
   CM_SS_RETURNERRORPROBLEM_RE_MISTYPEDPARAMETER = 4 + CM_SS_RETURNERRORPROBLEM_START,


   CM_SS_LCS_EMM_STATUS_START = 1171,
   CM_SS_LCS_EMM_STATUS_SUCCESS = CM_SS_LCS_EMM_STATUS_START,
   CM_SS_LCS_EMM_STATUS_ERR_CONN_FAIL = 1 + CM_SS_LCS_EMM_STATUS_START,
   CM_SS_LCS_EMM_STATUS_ERR_NW_NO_LCS = 2 + CM_SS_LCS_EMM_STATUS_START,
   CM_SS_LCS_EMM_STATUS_ERR_CS_LCS_ONLY = 3 + CM_SS_LCS_EMM_STATUS_START,


   CM_SS_OTHER_CAUSE_START = 1181,
   CM_SS_CTRL_BY_SIM_FAIL_NOT_INFORM_USER = CM_SS_OTHER_CAUSE_START,
# 3258 "interface/modem/general/ps_public_enum.h"
   CM_MM_CAUSE_START = 2048,
   CM_MM_CAUSE_NONE = 0x00 + CM_MM_CAUSE_START,
   CM_MM_IMSI_UNKNOWN_IN_HLR = 0x02 + CM_MM_CAUSE_START,
   CM_MM_ILLEGAL_MS = 0x03 + CM_MM_CAUSE_START,
   CM_MM_IMSI_UNKNOWN_IN_VLR = 0x04 + CM_MM_CAUSE_START,
   CM_MM_IMEI_NOT_ACCEPTED = 0x05 + CM_MM_CAUSE_START,
   CM_MM_ILLEGAL_ME = 0x06 + CM_MM_CAUSE_START,
   CM_MM_GPRS_NOT_ALLOWED = 0x07 + CM_MM_CAUSE_START,
   CM_MM_GPRS_NON_GPRS_NOT_ALLOWED = 0x08 + CM_MM_CAUSE_START,
   CM_MM_MS_ID_NOT_DERIVED_BY_NW = 0x09 + CM_MM_CAUSE_START,
   CM_MM_IMPLICIT_DETACH = 0x0a + CM_MM_CAUSE_START,
   CM_MM_PLMN_NOT_ALLOWED = 0x0b + CM_MM_CAUSE_START,
   CM_MM_LOCATION_AREA_NOT_ALLOWED = 0x0c + CM_MM_CAUSE_START,
   CM_MM_ROAMING_AREA_NOT_ALLOWED = 0x0d + CM_MM_CAUSE_START,
   CM_MM_GPRS_NOT_ALLOWED_IN_PLMN = 0x0e + CM_MM_CAUSE_START,
   CM_MM_NO_SUITABLE_CELLS_IN_LA = 0x0f + CM_MM_CAUSE_START,
   CM_MM_MSC_TEMP_NOT_REACHABLE = 0x10 + CM_MM_CAUSE_START,
   CM_MM_NETWORK_FAILURE = 0x11 + CM_MM_CAUSE_START,
   CM_MM_MAC_FAILURE = 0x14 + CM_MM_CAUSE_START,
   CM_MM_SYNC_FAILURE = 0x15 + CM_MM_CAUSE_START,
   CM_MM_CONGESTION = 0x16 + CM_MM_CAUSE_START,
   CM_MM_NOT_AUTHORIZED_FOR_THIS_CSG = 0x19 + CM_MM_CAUSE_START,
   CM_MM_SERV_OPTION_NOT_SUPPORTED = 0x20 + CM_MM_CAUSE_START,
   CM_MM_REQ_SERV_OPTION_NOT_SUBSCRIBED = 0x21 + CM_MM_CAUSE_START,
   CM_MM_SERV_OPTION_TEMP_OUT_OF_ORDER = 0x22 + CM_MM_CAUSE_START,
   CM_MM_CALL_CANNOT_BE_IDENTIFIED = 0x26 + CM_MM_CAUSE_START,
   CM_MM_NO_PDP_CONTEXT_ACTIVATED = 0x28 + CM_MM_CAUSE_START,
   CM_MM_RETRY_UPON_ENTRY_INTO_NEWCELL_MIN = 0x30 + CM_MM_CAUSE_START,
   CM_MM_RETRY_UPON_ENTRY_INTO_NEWCELL_MAX = 0x3f + CM_MM_CAUSE_START,
   CM_MM_SEMANTICALLY_INCORRECT_MSG = 0x5f + CM_MM_CAUSE_START,
   CM_MM_INVALID_MM_MAND_INFO = 0x60 + CM_MM_CAUSE_START,
   CM_MM_MSG_TYPE_NON_EXISTENT = 0x61 + CM_MM_CAUSE_START,
   CM_MM_MSG_TYPE_NOT_IMPLEMENTED = 0x61 + CM_MM_CAUSE_START,
   CM_MM_MSG_TYPE_INCOMPAT_WITH_PROTO_STATE = 0x62 + CM_MM_CAUSE_START,
   CM_MM_IE_NOT_IMPLEMENTED = 0x63 + CM_MM_CAUSE_START,
   CM_MM_CONDITIONAL_MM_IE_ERROR = 0x64 + CM_MM_CAUSE_START,
   CM_MM_MSG_NOT_COMPAT_WITH_PROTO_STATE = 0x65 + CM_MM_CAUSE_START,
   CM_MM_PROTO_ERROR_UNSPECIFIED = 0x6f + CM_MM_CAUSE_START,


   CM_MM_ACCESS_BARRED ,
   CM_MM_ASSIGNMENT_REJECT ,
   CM_MM_RANDOM_ACCES_FAILURE ,
   CM_MM_RR_NO_SERVICE ,
   CM_RR_PLMN_SRCH_REJ_EMERGENCY,
   CM_MM_RR_CONN_RELEASE,


   CM_MM_AUTH_FAILURE,
   CM_MM_IMSI_DETACH,
   CM_MM_ABORT_BY_NW ,
   CM_MM_CONN_TIMEOUT,

   CM_MM_CM_ENQUEUE_FAIL,
   CM_MM_NOT_UPDATED ,
   CM_MM_STATE_NOT_ALLOWED_CM,
   CM_MM_EMERGENCY_NOT_ALLOWED,
   CM_MM_NO_SERVICE,
   CM_MM_ACCESS_CLASS_BARRED,
   CM_MM_PS_SERVICE_ERROR,
   CM_MM_MT_CALL_INCOMING,

   CM_RR_SUSPEND_FOR_CS_SIG,
   CM_RR_SUSPEND_FOR_CS_CALL,
   CM_RR_SUSPEND_FOR_PS_SIG,
   CM_RR_SUSPEND_FOR_PS_DATA,
   CM_RR_SUSPEND_UNSPECIFIED,

   CM_MM_CAUSE_END = 2048 + 256,



   SIM_CAUSE_START = 2560,
   SIM_CAUSE_CMD_SUCCESS = SIM_CAUSE_START,
   SIM_CAUSE_CMD_FAIL = 1 + SIM_CAUSE_START,
   SIM_CAUSE_FATAL_ERROR = 2 + SIM_CAUSE_START,
   SIM_CAUSE_NO_INSERTED = 3 + SIM_CAUSE_START,
   SIM_CAUSE_CHV_NOT_INIT = 4 + SIM_CAUSE_START,
   SIM_CAUSE_CHV_VERIFY_ERROR = 5 + SIM_CAUSE_START,
   SIM_CAUSE_CHV_BLOCK = 6 + SIM_CAUSE_START,
   SIM_CAUSE_ACCESS_NOT_ALLOW = 7 + SIM_CAUSE_START,
   SIM_CAUSE_SAT_CMD_BUSY = 8 + SIM_CAUSE_START,
   SIM_CAUSE_DL_ERROR = 9 + SIM_CAUSE_START,
   SIM_CAUSE_MEMORY_PROBLEM = 10 + SIM_CAUSE_START,
   SIM_CAUSE_TECHNICAL_PROBLEM = 11 + SIM_CAUSE_START,
   SIM_CAUSE_PUK_UNLOCK = 12 + SIM_CAUSE_START,

   SIM_CAUSE_END,



   PHB_CAUSE_FDN_BLOCKED = 2600,
   PHB_L4C_ERROR = 2601,






    SM_CAUSE_START = 0x0C00,

    SM_CAUSE_EMPTY = 0x01 + SM_CAUSE_START,
    OPERATOR_DETERMINED_BARRING = 0x08 + SM_CAUSE_START,
    LLC_SND_FAILURE = 0X19 + SM_CAUSE_START,
    INSUFF_RESOURCE = 0X1A + SM_CAUSE_START,
    UNKNOWN_APN = 0X1B + SM_CAUSE_START,
    UNKNOWN_PDP_ADDR_OR_TYPE = 0X1C + SM_CAUSE_START,
    AUTHENTICATION_FAILURE = 0X1D + SM_CAUSE_START,
    ACTIVATION_REJ_GGSN = 0X1E + SM_CAUSE_START,
    ACTIVATION_REJ_UNSPECIFIED = 0X1F + SM_CAUSE_START,
    UNSUPPORTED_SERVICE_OPTION = 0X20 + SM_CAUSE_START,
    UNSUBSCRIBED_SERVICE_OPTION = 0X21 + SM_CAUSE_START,
    SERVICE_OPTION_TEMPORARILY_OUT_OF_ORDER = 0X22 + SM_CAUSE_START,
    PTI_ALREADY_USED = 0X23 + SM_CAUSE_START,
    REGULAR_DEACTIVATION = 0X24 + SM_CAUSE_START,
    QOS_NOT_ACCEPTED = 0X25 + SM_CAUSE_START,
    NETWORK_FAIL = 0X26 + SM_CAUSE_START,
    REACTIVATION_REQD = 0X27 + SM_CAUSE_START,
    UNSUPPORTED_NW_CONTEXT_ACTIVATION = 0X28 + SM_CAUSE_START,
    SEMANTIC_ERROR_IN_TFT_OP = 0X29 + SM_CAUSE_START,
    SYNTACTICAL_ERROR_IN_TFT_OP = 0X2A + SM_CAUSE_START,
    UNKNOWN_PDP_CONTEXT = 0X2B + SM_CAUSE_START,
    SEMANTIC_ERROR_IN_PACKET_FILTER = 0X2C + SM_CAUSE_START,
    SYNTAX_ERROR_IN_PACKET_FILTER = 0X2D + SM_CAUSE_START,
    PDP_CONTEXT_WO_TFT_ALREADY_ACT = 0X2E + SM_CAUSE_START,
    PTI_MISMATCH = 0X2F + SM_CAUSE_START,
    ACTIVATION_REJ_BCM_VIOLATION = 0X30 + SM_CAUSE_START,
    LAST_PDN_DISC_NOT_ALLOWED = 0X31 + SM_CAUSE_START,
    PDP_TYPE_IPV4_ONLY_ALLOWED = 0X32 + SM_CAUSE_START,
    PDP_TYPE_IPV6_ONLY_ALLOWED = 0X33 + SM_CAUSE_START,
    SINGLE_ADDR_BEARERS_ONLY_ALLOWED = 0X34 + SM_CAUSE_START,
    ESM_INFORMATION_NOT_RECEIVED = 0X35 + SM_CAUSE_START,
    PDN_CONNENCTION_NOT_EXIST = 0X36 + SM_CAUSE_START,
    MULTIPLE_PDN_APN_NOT_ALLOWED = 0X37 + SM_CAUSE_START,
    COLLISION_WITH_NW_INITIATED_REQ = 0X38 + SM_CAUSE_START,
    UNSUPPORTED_QCI_VALUE = 0X3B + SM_CAUSE_START,

    INVALID_TI = 0X51 + SM_CAUSE_START,
    SM_SEMANTICALLY_INCORRECT_MSG = 0X5F + SM_CAUSE_START,
    INVALID_MAND_INFO = 0X60 + SM_CAUSE_START,
    SM_MSG_TYPE_NON_EXISTENT_OR_NOT_IMPLEMENTED = 0X61 + SM_CAUSE_START,
    SM_MSG_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE = 0X62 + SM_CAUSE_START,
    IE_NON_EXISTENCE_OR_NOT_IMPLEMENTED = 0X63 + SM_CAUSE_START,
    CONDITIONAL_IE_ERROR = 0X64 + SM_CAUSE_START,
    SM_MSG_NOT_COMPATIBLE_WITH_PROTOCOL_STATE = 0X65 + SM_CAUSE_START,
    SM_PROTOCOL_ERROR_UNSPECIFIED = 0X6F + SM_CAUSE_START,
    APN_RESTRICTION_VALUE_INCOMPATIBLE_WITH_ACTIVE_PDP_CTX = 0X70 + SM_CAUSE_START,
    SM_CAUSE_END,





    ESM_CAUSE_START = 0x0D00,
    ESM_NO_CAUSE = 1 + ESM_CAUSE_START,
    ESM_OPERATOR_DETERMINED_BARRING = 8 + ESM_CAUSE_START,
    ESM_INSUFFICIENT_RESOURCES = 26 + ESM_CAUSE_START,
    ESM_UNKNOWN_OR_MISSING_APN = 27 + ESM_CAUSE_START,
    ESM_UNKNOWN_PDN_TYPE = 28 + ESM_CAUSE_START,
    ESM_USER_AUTH_FAILED = 29 + ESM_CAUSE_START,
    ESM_REQUEST_REJECTED_BY_SGW_OR_PDNGW = 30 + ESM_CAUSE_START,
    ESM_REQUEST_REJECTED_UNSPECIFIED = 31 + ESM_CAUSE_START,
    ESM_SERVICE_OPT_NOT_SUPPORTED = 32 + ESM_CAUSE_START,
    ESM_REQ_SERVICE_NOT_SUBSCRIBED = 33 + ESM_CAUSE_START,
    ESM_SERVICE_TEMP_OUT_OF_ORDER = 34 + ESM_CAUSE_START,
    ESM_PTI_ALREADY_USED = 35 + ESM_CAUSE_START,
    ESM_REGULAR_DEACTIVATION = 36 + ESM_CAUSE_START,
    ESM_EPS_QOS_NOT_ACCEPTED = 37 + ESM_CAUSE_START,
    ESM_NETWORK_FAILURE = 38 + ESM_CAUSE_START,
    ESM_REACTIVATION_REQUESTED = 39 + ESM_CAUSE_START,
    ESM_SEMANTIC_ERROR_IN_TFT = 41 + ESM_CAUSE_START,
    ESM_SYNTACTIC_ERROR_IN_TFT = 42 + ESM_CAUSE_START,
    ESM_INVALID_EPS_BEARER_IDENTITY = 43 + ESM_CAUSE_START,
    ESM_SEMANTIC_ERROR_IN_PACKET_FILTERS = 44 + ESM_CAUSE_START,
    ESM_SYNTACTIC_ERROR_IN_PACKET_FILTERS = 45 + ESM_CAUSE_START,
    ESM_EPSB_CTXT_WITHOUT_TFT_ACTIVATED = 46 + ESM_CAUSE_START,
    ESM_PTI_MISMATCH = 47 + ESM_CAUSE_START,
    ESM_LAST_PDN_DISC_NOT_ALLOWED = 49 + ESM_CAUSE_START,
    ESM_PDN_TYPE_IPV4_ONLY_ALLOWED = 50 + ESM_CAUSE_START,
    ESM_PDN_TYPE_IPV6_ONLY_ALLOWED = 51 + ESM_CAUSE_START,
    ESM_SINGLE_ADDRESS_ONLY_ALLOWED = 52 + ESM_CAUSE_START,
    ESM_ESM_INFORMATION_NOT_RECEIVED = 53 + ESM_CAUSE_START,
    ESM_PDN_CONNENCTION_NOT_EXIST = 54 + ESM_CAUSE_START,
    ESM_MULTIPLE_PDN_APN_NOT_ALLOWED = 55 + ESM_CAUSE_START,
    ESM_COLLISION_WITH_NW_INIT_REQUEST = 56 + ESM_CAUSE_START,
    ESM_UNSUPPORTED_QCI_VALUE = 59 + ESM_CAUSE_START,
    ESM_INVALID_PTI_VALUE = 81 + ESM_CAUSE_START,
    ESM_SEMANTIC_INCORRECT_MSG = 95 + ESM_CAUSE_START,
    ESM_INVALID_MANDATORY_IE = 96 + ESM_CAUSE_START,
    ESM_MSG_TYPE_NON_EXISTENT = 97 + ESM_CAUSE_START,
    ESM_MSG_TYPE_NOT_COMPATIBLE_STATE = 98 + ESM_CAUSE_START,
    ESM_IE_NON_EXISTENT_NOT_IMPLEMENTED = 99 + ESM_CAUSE_START,
    ESM_CONDITIONAL_IE_ERROR = 100 + ESM_CAUSE_START,
    ESM_MSG_NOT_COMPATIBLE_STATE = 101 + ESM_CAUSE_START,
    ESM_PROTOCOL_ERROR_UNSPECIFIED = 111 + ESM_CAUSE_START,
    ESM_APN_RESTRICT_VALUE_INCOMPATIBLE = 112 + ESM_CAUSE_START,

    ESM_CAUSE_END,







     SM_PROPRIETARY_CAUSE_START = 0x0E00,
     SM_PROPRIETARY_CAUSE_IRAT_TO_LTE_LOCAL_DEACTIVATED,
     SM_PROPRIETARY_CAUSE_IRAT_TO_LTE_BUT_BEARER_MAP_INVALID,
     SM_PROPRIETARY_CAUSE_IRAT_TO_LTE_BUT_LTE_BEARER_MAP_FAILED,
     SM_PROPRIETARY_CAUSE_IRAT_TO_LTE_BUT_BEARER_MAP_FAILED_DUE_TO_DETACH,

     SM_LOCAL_REJECT_ACT_REQ_DUE_TO_CURRENT_STATE_NOT_COMPATIBLE,
     SM_LOCAL_REJECT_ACT_REQ_DUE_TO_QOS_NOT_REASONALBE,
     SM_LOCAL_REJECT_ACT_REQ_DUE_TO_QOS_TRAFFIC_CLASS_NOT_SUPPORTED,
     SM_LOCAL_REJECT_ACT_REQ_DUE_TO_NO_AVAILABLE_TI,
     SM_LOCAL_REJECT_ACT_REQ_DUE_TO_PROCESS_QUEUE_FULL,
     SM_LOCAL_REJECT_ACT_REQ_DUE_TO_GPRS_SUSPENDED,
     SM_LOCAL_REJECT_ACT_REQ_DUE_TO_NSAPI_INVALID,
     SM_LOCAL_REJECT_ACT_REQ_DUE_TO_GPRS_DETACH,
     SM_LOCAL_REJECT_ACT_REQ_DUE_TO_GPRS_ATTACH_FAILURE,
     SM_LOCAL_REJECT_ACT_REQ_DUE_TO_GEMINI_SM_CONTEXT_MEMORY_OCCUPIED,
     SM_LOCAL_REJECT_ACT_REQ_DUE_TO_REACH_RETRY_COUNTER,

     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_CURRENT_STATE_NOT_COMPATIBLE,
     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_NO_AVAILABLE_TI,
     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_LINKED_NSAPI_INVALID,
     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_PROCESS_QUEUE_FULL,
     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_NOT_SUPPORT_SECONDARY_PDP,
     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_GPRS_SUSPENDED,
     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_GPRS_DETACH,
     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_COMPOSE_TFT_ERROR,

     SM_LOCAL_REJECT_MOD_REQ_DUE_TO_PROCESS_QUEUE_FULL,
     SM_LOCAL_REJECT_MOD_REQ_DUE_TO_GPRS_SUSPENDED,
     SM_LOCAL_REJECT_MOD_REQ_DUE_TO_GPRS_DETACH,
     SM_LOCAL_REJECT_MOD_REQ_DUE_TO_CURRENT_STATE_NOT_COMPATIBLE,
     SM_LOCAL_REJECT_MOD_REQ_DUE_TO_GEMINI_SM_CONTEXT_MEMORY_OCCUPIED,
     SM_LOCAL_REJECT_MOD_REQ_DUE_TO_FIRST_PDP_NOT_SUPPORT_QOS_MODIFY_FROM_UE,
     SM_LOCAL_REJECT_MOD_REQ_DUE_TO_MODIFY_COLLISION_WITH_NW,
     SM_LOCAL_REJECT_MOD_REQ_DUE_TO_REACH_RETRY_COUNTER,
     SM_LOCAL_REJECT_MOD_REQ_DUE_TO_QOS_NOT_ACCEPTED,
     SM_LOCAL_REJECT_MOD_REQ_DUE_TO_TFT_ENCODE_ERROR,
     SM_LOCAL_REJECT_MOD_REQ_DUE_TO_NOTHING_NEED_TO_MODIFY,

     SM_LOCAL_REJECT_DEACT_REQ_DUE_TO_GEMINI_SM_CONTEXT_MEMORY_OCCUPIED,
     SM_LOCAL_REJECT_DEACT_REQ_DUE_TO_GPRS_DETACH,

     SM_LOCAL_DEACTIVATION_DUE_TO_MT_PDP_COLLISION,

     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_TFT_ENCODE_ERROR,

     SM_LOCAL_REJECT_DUE_TO_CURRENT_RAT_IS_UNKNOWN,
     SM_PROPRIETARY_CAUSE_SILENT_DEACTIVATION_IN_ESM_TRANSFERRED_EPSB_CONTEXT,

     SM_PROPRIETARY_CAUSE_GPRS_DETACH,


     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_NO_NW_INIT_SEC_ACT_REQ_PROCEDURE,
     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_TOKEN_ID_NOT_ACCEPTED,
     SM_LOCAL_REJECT_SEC_ACT_REQ_DUE_TO_LOCAL_PARA_NOT_SYNC_WITH_NW_SM_AIR_MSG,
     SM_LOCAL_DEACTIVATION_DUE_TO_MT_SEC_PDP_COLLISION,

     SM_PROPRIETARY_CAUSE_NULL,

     SM_PROPRIETARY_CAUSE_END,
# 3549 "interface/modem/general/ps_public_enum.h"
    TCM_CAUSE_START = 0x0F00,

    TCM_L4C_CHECKED_ACT_WITH_CID_UNEXPECTED,
    TCM_L4C_CHECKED_ACT_WITH_CID_NOT_DEFINED,
    TCM_L4C_CHECKED_ACT_WITH_FSM_UNEXPECTED,
    TCM_L4C_CHECKED_ACT_WITH_CID_SECONDARY_WITHOUT_TFT,
    TCM_L4C_CHECKED_ACT_WITH_PRIMARY_IS_NOT_ACTIVATED,

    TCM_L4C_CHECKED_DEACT_WITH_CID_UNEXPECTED,
    TCM_L4C_CHECKED_DEACT_WITH_FSM_UNEXPECTED,
    TCM_L4C_CHECKED_DEACT_WITH_ACTIVATED_FROM_UNEXPECTED,

    TCM_L4C_CHECKED_MODIFY_WITH_CID_UNEXPECTED,
    TCM_L4C_CHECKED_MODIFY_WITH_FSM_UNEXPECTED,
    TCM_L4C_CHECKED_MODIFY_WITH_NO_QOS_OR_TFT_SET,

    TCM_L4C_CHECKED_CGDATA_WITH_CID_UNEXPECTED,
    TCM_L4C_CHECKED_CGDATA_WITH_FSM_UNEXPECTED,

    TCM_L4C_DCONT_CID_UNEXPECTED,
    TCM_L4C_DCONT_NOT_ALLOW_FOR_PPP_TYPE,
    TCM_L4C_DCONT_INVALID_PARAMETER,
    TCM_L4C_DCONT_INVALID_PDP_TYPE,
    TCM_L4C_DCONT_CID_ALREADY_IN_USE,
    TCM_L4C_DCONT_INVALID_APN,

    TCM_L4C_DSCONT_CID_UNEXPECTED,
    TCM_L4C_DSCONT_INVALID_PARAMETER,
    TCM_L4C_DSCONT_CID_PRIMARY_IS_NOT_IN_USE,
    TCM_L4C_DSCONT_CID_PRIMARY_IS_NOT_ACTIVATED,
    TCM_L4C_DSCONT_NOT_ALLOW_FOR_PPP_TYPE,
    TCM_L4C_DSCONT_CID_ALREADY_IN_USE,

    TCM_L4C_PRCO_CID_ALREADY_IN_USE,
    TCM_L4C_PRCO_CID_UNEXPECTED,

    TCM_L4C_ACT_NOT_SUPPORT_EMERGENCY_BEARER_ACTIVATION,
    TCM_L4C_ACT_ALLOC_NSAPI_FAIL,

    TCM_L4C_DEACT_IND_BY_TIMER_EXPIRY,
    TCM_L4C_DEACT_IND_BY_NO_USER_RESPONSE_TILL_RAT_CHANGE_COMPLETE_IND,






    TCM_L4C_MOD_PRESERVED_PDP_CONTEXT,
    TCM_L4C_MOD_CHECK_TFT_FAIL,
    TCM_L4C_MOD_REJ_DUE_TO_DEACT_IND,

    TCM_L4C_SET_MULTI_PDN_SUCCESS,
    TCM_L4C_SET_MULTI_PDN_CID_UNEXPECTED,
    TCM_L4C_SET_MULTI_PDN_PARA_UNEXPECTED,
    TCM_L4C_SET_MULTI_PDN_INVALID_PDP_TYPE_AND_LEN,
    TCM_L4C_SET_MULTI_PDN_INVALID_APN,

    TCM_PPP_CHECKED_ACT_WITH_CID_UNEXPECTED,
    TCM_PPP_CHECKED_ACT_WITH_PDP_TYPE_LEN_UNEXPECTED,
    TCM_PPP_CHECKED_ACT_WITH_INVALID_CONFIG_PROTOCOL,
    TCM_PPP_CHECKED_ACT_WITH_CID_NOT_DEFINED,
    TCM_PPP_CHECKED_ACT_WITH_FSM_UNEXPECTED,

    TCM_PPP_CHECKED_DEACT_WITH_CID_UNEXPECTED,
    TCM_PPP_CHECKED_DEACT_WITH_FSM_UNEXPECTED,
    TCM_PPP_CHECKED_DEACT_WITH_ACTIVATED_FROM_UNEXPECTED,

    TCM_PPP_CHECKED_CGDATA_WITH_CID_UNEXPECTED,
    TCM_PPP_CHECKED_CGDATA_WITH_FSM_UNEXPECTED,

    TCM_DISPATCH_PDP_ACT_CHECK_TFT_FAIL,

    TCM_UPCM_BIND_CNF_BEARER_HAS_BEEN_DEACTIVATED_ALREADY,
    TCM_UPCM_UNBIND_CNF_BEARER_HAS_BEEN_DEACTIVATED_ALREADY,

    TCM_ACL_APN_NOT_EXIST_IN_ACL,
    TCM_ACL_ACTION_NOT_ALLOWED,
    TCM_ACL_SIM_FILE_FULL,
    TCM_ACL_ADD_ENTRY_FAILED,
    TCM_ACL_DEL_ENTRY_FAILED,
    TCM_ACL_SET_ENTRY_FAILED,
    TCM_ACL_SIM_READ_FAILED,
    TCM_ACL_SIM_WRITE_FAILED,
# 3656 "interface/modem/general/ps_public_enum.h"
    TCM_ESM_FAIL_CAUSE_EMPTY,
    TCM_ESM_USER_CANCEL,
    TCM_ESM_CID_ALREADY_CONNECT,
    TCM_ESM_PDN_NOT_ACTIVATED,
    TCM_ESM_BEARER_NOT_ACTIVATED,
    TCM_ESM_RMV_LAST_PDN_NOT_ALLOWED,
    TCM_ESM_LOCAL_RELEASE,
    TCM_ESM_DETACH,
    TCM_ESM_IE_ERROR,
    TCM_ESM_TIMER_TIMEOUT,
    TCM_ESM_TX_FAILURE,
    TCM_ESM_FAIL_CAUSE_RAT_CHANGE,
    TCM_ESM_FAIL_CAUSE_PS_SWITCH,
    TCM_ESM_ACTION_NOT_ALLOWED,
    TCM_ESM_FAIL_CAUSE_SERIOUS_ERROR_AT_LOW_LAYER,
    TCM_ESM_FAIL_CAUSE_OTHERS,


    RAT_TCM_RETRY_NEEDED_AFTER_IRAT,
    RAT_TCM_LOCAL_REJECTED_DUE_TO_PS_SWITCH,
 AP_RETRY_NEEDED_AFTER_LTE_TO_C2K_IRAT,


    RAT_TCM_DEACT_SUCCESS_DUE_TO_CONTEXT_NEVER_ACTIVATED,
    RAT_TCM_MODIFY_FAIL_DUE_TO_CONTEXT_DEACTIVATED,
    RAT_TCM_MODIFY_FAIL_DUE_TO_CONTEXT_NOT_ACTIVATED,
    RAT_TCM_DEACTIVATED_DUE_TO_NAS_TFT_TRIGGERED_DEACTIVATION,
    RAT_TCM_23G_MT_PRIMARY_PDP_IS_ABORTED_DUE_TO_CHANGE_TO_4G,
    RAT_TCM_DEACTIVATE_SUCCESS_IMMEDIATELY_BECAUSE_ACTIVATION_IS_NOT_PROCESSED_BY_TCM_YET,
    RAT_TCM_EGACT_ACTIVATE_REJ_DUE_TO_ERROR_RAT,
    RAT_TCM_EGACT_DEACTIVATE_REJ_DUE_TO_ERROR_RAT,


 TCM_ETCM_CID_NOT_DEFINE_TFT_QOS,
 TCM_ETCM_CID_IS_NOT_PRIMARY,
 TCM_ETCM_TFT_VALIDATION_ERROR,
 TCM_ETCM_PTI_IS_FULL,


    TCM_L4C_CHECKED_EGLD_WITH_CID_UNEXPECTED,
    TCM_L4C_CHECKED_EGLD_WITH_FSM_UNEXPECTED,


    TCM_L4C_MOD_PRIMARY_QOS_IS_NOT_ALLOWED,
    TCM_L4C_MOD_QOS_FOR_NO_MS_PF_IS_NOT_ALLOWED,

    TCM_CAUSE_END,



    L4C_CAUSE_START = 0x1000,

    L4C_TYPE_1_OLD_CAUSE_START = L4C_CAUSE_START,
    L4C_CMD_CONFLICT = L4C_TYPE_1_OLD_CAUSE_START,
    L4C_CMD_CONFLICT_CHANNEL_BUSY,
    L4C_LOCAL_DISCONNECT_CSD,

    L4C_OPTION_CONFLICT,
    L4C_AT_CMD_INVALID_PARAMETER_OR_MISSING,
    L4C_AT_CMD_PARAMETER_OUT_OF_RANGE,
    L4C_AT_CMD_INVALID_PARAMETER,
    L4C_AT_CMD_CID_UNEXPECTED,
    L4C_CONTEXT_CONFLICT_PPP_DEACTIVATING,
    L4C_CONTEXT_CONFLICT_ACT_ALREADY_ACTIVATED,
    L4C_CONTEXT_CONFLICT_DEACT_ALREADY_DEACTIVATED,
    L4C_CONTEXT_CONFLICT_V4V6FB_NOT_COMPLETED,
    L4C_CONTEXT_CONFLICT_ACT_ABORTED_BY_ANOTHER_DEACT,
    L4C_CONTEXT_CONFLICT_CID0_NOT_ACTIVATED_BY_ATTACH,
    L4C_AT_CMD_CONFIGURATION_ONGOING,
    L4C_CONTEXT_CONFLICT_DUAL_PS_ATTACH,
    L4C_CONTEXT_CONFLICT_DUAL_ALWAYS_TYPE,
    L4C_AT_CMD_IN_WRONG_STATE,
    L4C_OMADM_CHECKING_FAIL,
    L4C_AT_CMD_RAC_NOTIFY_CGACT_ERROR,
    L4C_TYPE_1_OLD_CAUSE_END = 0x101f,

    L4C_TYPE_2_CAUSE_START = 0x1020,
    L4C_TYPE_2_CAUSE_END = 0x103f,
    L4C_TYPE_3_CAUSE_START = 0x1040,
    L4C_TYPE_3_CAUSE_END = 0x105f,
    L4C_TYPE_4_CAUSE_START = 0x1060,
    L4C_TYPE_4_CAUSE_END = 0x107f,

    L4C_TYPE_5_C2K_CAUSE_START = 0x1080,
    L4C_CMD_CONFLICT_C2K_IRAT_ONGOING = L4C_TYPE_5_C2K_CAUSE_START,
    L4C_CMD_CONFLICT_C2K_AP_DEACT_RETRY_NEEDED,
    L4C_TYPE_5_C2K_CAUSE_END = 0x109f,

    L4C_TYPE_6_CAUSE_START = 0x10a0,
    L4C_TYPE_6_CAUSE_END = 0x10bf,
    L4C_TYPE_7_CAUSE_START = 0x10c0,
    L4C_TYPE_7_CAUSE_END = 0x10df,
    L4C_TYPE_8_CAUSE_START = 0x10e0,
    L4C_TYPE_8_CAUSE_END = 0x10ff,
    L4C_CAUSE_END = L4C_TYPE_8_CAUSE_END,



    HIF_CAUSE_START = 0x1100,


    HIF_IPC_OK = HIF_CAUSE_START,


    HIF_IPC_PDN_BIND_RSP_UNSUPPORTED_IP_ADDR_TYPE,
    HIF_IPC_PDN_BIND_RSP_NULL_PARAM,
    HIF_IPC_PDN_BIND_RSP_INVALID_NETIF,
    HIF_IPC_PDN_BIND_RSP_NEW_SESSION_FAIL,
    HIF_IPC_PDN_BIND_RSP_SESSION_RLOCK_FAIL,
    HIF_IPC_PDN_BIND_RSP_EPSB_FAIL,

    UPCM_PDN_UNBIND_RSP_EPSB_NONACT ,
    UPCM_PDN_UNBIND_RSP_EPSB_NONPDN ,
    UPCM_PDN_UNBIND_RSP_EPSB_NONBIND ,

    HIF_CAUSE_END,

}ps_cause_enum;


typedef enum {
   L4_ALLSS,
   L4_EMLPP,
   L4_EMLPP0,
   L4_EMLPP1,
   L4_EMLPP2,
   L4_EMLPP3,
   L4_EMLPP4,
   L4_CD,
   L4_CLIP,
   L4_CLIR,
   L4_COLP,
   L4_COLR,
   L4_CFU,
   L4_CFB,
   L4_CFNRY,
   L4_CFNRC,
   L4_CFA,
   L4_CFC,
   L4_CW,
   L4_HOLD,
   L4_MPTY,
   L4_UUS1,
   L4_UUS2,
   L4_UUS3,
   L4_UUSALL,
   L4_BAOC,
   L4_BOIC,
   L4_BOICEXHC,
   L4_BAIC,
   L4_BAICROAM,
   L4_BAC,
   L4_BOC,
   L4_BIC,
   L4_ECT,
   L4_CCBS,
   L4_FM,
   L4_CNAP,
   L4_MSP1,
   L4_MSP2,
   L4_MSP3,
   L4_MSP4,
   L4_MC,
   L4_CDIP
} l4_ss_code_enum;

typedef enum {


   L4_ALL_TELESERVICES = 10,
   L4_TELEPHONY = 11,
   L4_ALL_DATA_TELESERVICES = 12,
   L4_FACSIMILE_SERVICES = 13,
   L4_SHORT_MESSAGE_SERVICES = 16,
   L4_ALL_TELESERVICES_EXCEPT_SMS = 19,

   L4_VOICE_GROUP_CALL_SERVICE = 17,
   L4_VOICE_BROADCAST_SERVICE = 18,

   L4_ALL_BEARER_SERVICES = 20,
   L4_ALL_ASYNC_SERVICES = 21,
   L4_ALL_SYNC_SERVICES = 22,
   L4_ALL_DATA_CIRCUIT_SYNC = 24,
   L4_ALL_DATA_CIRCUIT_ASYNC = 25,
   L4_AUXILIARY_TELEPHONY = 89,
   L4_ALL_GPRS_BEARER_SERVICES = 99,


   L4_BS_ALLPADACCESSCA_SERVICES = 100,
   L4_BS_ALLDATAPDS_SERVICES = 101
} l4_bs_code_enum;

typedef enum {
    L4_GERAN_RXLEVEL,
    L4_GERAN_BER,
    L4_UTRA_RSCP,
    L4_UTRA_ECNO,
    L4_EUTRA_RSRQ,
    L4_EUTRA_RSRP
} l4_cesq_param_enum;
# 3866 "interface/modem/general/ps_public_enum.h"
typedef enum
{
    UE_MODE_PS_MODE_2 = 0,
    UE_MODE_CS_PS_MODE_1,
    UE_MODE_CS_PS_MODE_2,
    UE_MODE_PS_MODE_1,
    UE_MODE_INVALID,

} ue_mode_enum;

typedef enum
{
    VOICE_CENTRIC = 0,
    DATA_CENTRIC
} ue_usage_setting_enum;


typedef enum
{
    L4_CS_VOICE_ONLY = 1,
    L4_CS_VOICE_PREFERRED_IMS_PS_VOICE_AS_SECONDARY,
    L4_IMS_PS_VOICE_PREFERRED_CS_VOICE_AS_SECONDARY,
    L4_IMS_PS_VOICE_ONLY
} l4_voice_domain_preference_enum;

typedef enum
{
    L4_IMS_SMMA_OP_UPDATE_MEM = 1,
    L4_IMS_SMMA_OP_UPDATE_FILE,
} l4_ims_smma_op_enum;


typedef enum
{
    VOICE_MODE_CS_ONLY,
    VOICE_MODE_VOIP_ONLY,
    VOICE_MODE_CS_PREFERRED,
    VOICE_MODE_VOIP_PREFERRED
} voice_mode_enum;


typedef enum
{
    VDM_NW_SELECTION_ANY_PLMN_FOR_EMERG = 0,
    VDM_NW_SELECTION_PLMN_RESELECTION
} vdm_nw_selection_type_enum;


typedef enum
{
    VDM_NWSEL_RESULT_FAILURE = 0,
    VDM_NWSEL_RESULT_SUCCESS
} vdm_nw_selection_result_enum;



typedef enum{
    VDM_VOICE_STATUS_START =0,
    VDM_VOICE_STATUS_STOP
} vdm_voice_status_enum;







typedef enum
{

    SBP_PERMANENT_AUTO_SEL_MODE,
    SBP_UMTS_CB_OFF,
    SBP_MM_TRY_ABNORMAL_LAI_ONCE_MORE,
    SBP_MM_DISABLE_RETRY_ABNORMAL_LAI,
    SBP_DISABLE_AUTO_RETURN_PRE_RPLMN,
    SBP_MM_HPPLMN_1ST_ATTEMPT_ENHANCE,
    SBP_OOS_EARLY_IND,
    SBP_L2_RANDOM_FILL_BIT,


    SBP_CB_3G_SERVICE_BY_PLMN,
    SBP_MM_IGNORE_EQPLMN_IN_MANUAL_MODE,
    SBP_MM_IGNORE_YOIGO_EQPLMN,
    SBP_MM_IGNORE_PLAY_EQPLMN,
    SBP_MM_IGNORE_EQPLMN_IN_AUTO_MODE,
    SBP_MM_DISABLE_PREVIOUS_RPLMN_FROM_NVRAM,
    SBP_MM_INTERNATIONAL_HPPLMN_SEARCH,
    SBP_ATNT_HPPLMN_SEARCH,


    SBP_HPPLMN_REGARDLESS_ANY_MCC,
    SBP_DISABLE_RPLMN_FROM_GLOCI,
    SBP_DISABLE_PLMNSEL_OPLMN_COEXIST,
    SBP_DISABLE_DISPLAY_ROAMING_HPLMN_IN_EPLMN,
    SBP_RPLMN_HPLMN_COMBINED_SEARCH,
    SBP_MM_SEARCH_HPLMN_BEFORE_RPLMN,
    SBP_DISABLE_PLMN_SEL_WHEN_ACCESS_BARRED,
    SBP_TMO_PLMN_MATCHING,


    SBP_MM_NOT_TRY_ANOTHER_RAT_FOR_LU_ABNORMAL,
    SBP_ENS,
    SBP_MM_PERFORM_PLMN_SEARCH_AFTER_LU_ABNORMAL,
    SBP_RESUME_GPRS_AFTER_LU_ABNORMAL,
    SBP_TMO_ECC_NOTIFICATION_ENABLE,
    SBP_ENS_RAT_BALANCING,
    SBP_ORANGE_H_PLUS,
    SBP_USIM_CSP_SUPPORT,


    SBP_SAT_NO_EVDL_IN_SESSION,
    SBP_IMEI_LOCK_SUPPORT,
    SBP_DOCOMO_IOT_SMS,
    SBP_USE_SM_QOS_SUBSCRIBED,
    SBP_NO_SUPPORT_A5_3,
    SBP_DOCOMO_IOT_CC,
    SBP_AT_ME_IDENTIFICATION_WITHOUT_HEADER,
    SBP_STAR_SHORT_STRING_AS_CALL,


    SBP_CUSTOMIZED_IDLE_STRING_AS_CALL,
    SBP_DISABLE_SKIP_NEW_FPLMN_MANUAL_RESEL,
    SBP_ADAPTIVE_PAGING_PERIOD_IN_UNACK_MODE,
    SBP_OP01_ROAMING_RAT_ORDER,
    SBP_BG_SEARCH_2G4_FDD,
    SBP_BG_SEARCH_3G4_FDD,
    SBP_BG_SEARCH_2G4_TDD,
    SBP_BG_SEARCH_3G4_TDD,


    SBP_PREFER_SEARCH_3G,
    SBP_PREFER_SEARCH_4G,
    SBP_TMO_GBA,
    SBP_OP01_TEST_MODE_CONSIDER_SIM,
    SBP_DISABLE_EUTRAN_AFTER_ABNORMAL,
    SBP_DISABLE_RPLMN_FROM_EPSLOCI,
    SBP_DISABLE_EUTRAN_AFTER_NO_SUITABLE,
    SBP_MM_NOT_STAY_ON_FBLA_FOR_REG_PROV,


    SBP_NO_OPTIONAL_RAU_AFTER_CCO_FAILURE,
    SBP_SAT_PROVIDE_PS_LOCAL_INFO,
    SBP_EMR_REPORTING_WITH_SI2Q_BSIC_PARA,
    SBP_AMR_WB_GSM,
    SBP_AMR_WB_UMTS,
    SBP_TMO_REMOTE_SIM_LOCK,
    SBP_MODE_1_PS_ONLY_LTE_NETWORK_SUPPORT,
    SBP_IGNORE_PLMN_CHANGE_FOR_MANUAL_MODE,


    SBP_CLEAR_CODE_33,
    SBP_RELEASE_PS_CONN_FOR_EUTRAN_UPDATE,
    SBP_SAT_REISSUE_REFRESH_AFTER_CALL_END,
    SBP_ALLOW_SIM_REFRESH_RESET_WHEN_IN_CALL,
    SBP_TMO_IRAT_SET_ACTIVE_FLAG,
    SBP_IS_ATT_CONN_REJ,
    SBP_RELEASE_DEACTIVATING_BEARER_DURING_IRAT,
    SBP_SDM_RETRY_IMS_WHEN_CS_SEND_FAIL,


    SBP_EMM_RETRY_EMC_WHEN_ABNORMAL,
    SBP_EMM_RETRY_EMC_IN_SHARED_NW,
    SBP_EMM_RETRY_EMC_IN_SAME_PLMN,
    SBP_EMM_RETRY_EMC_IN_DIFF_PLMN,
    SBP_MM_IMSI_DETACH_WHEN_MM_CONN_ACTIVE,
    SBP_3G_CSG,
    SBP_DISABLE_4G_CSG,
    SBP_FINGERPRINT,


    SBP_R11_COMB_BUT_EPS_ABNORMAL_HANDLE,
    SBP_CSFB_REJECT,
    SBP_CONSERVATIVE_IPV4V6_FALLBACK_STRATEGY,
    SBP_IS_OP07,
    SBP_SDM_ALWAYS_CS_WHEN_2G,
    SBP_SDM_ALWAYS_CS_WHEN_3G,
    SBP_SDM_TRY_CS_WHEN_2G_VOICE_CALL,
    SBP_SDM_DISABLE_SMS_OVER_SGS,


    SBP_SDM_PREFER_SMS_OVER_SGS_TO_IMS,
    SBP_SDM_RETRY_CS_WHEN_IMS_SEND_FAIL,
    SBP_REPORT_CSG_LIST_IN_SIGNAL_DECREASING_ORDER,
    SBP_GSMA_NETWORK_ACCESS_CONTROL,
    SBP_IS_CONN_PAGING_LOCAL_REL,
    SBP_LTE_FAST_POWER_ON_SEARCH,
    SBP_LTE_CONN_ALWAYS_RCV_UE_PCH,
    SBP_LTE_MRU_SEARCH,


    SBP_VDM_REDIAL_IMS_VT_TO_CS_VOICE,
    SBP_SLT,
    SBP_OP09_SIM_LOCK,
    SBP_ERRC_DETECTION_TIMER,
    SBP_UMAC_TVM_DECREASE_TRANSMITTED,
    SBP_UMAC_TVM_FAVOR_POW_PERF,
    SBP_ECC_NOT_PREEMPT_SEARCH,
    SBP_RAC_CHANGE_VDP_WHEN_IMS_ONOFF,


    SBP_MM_T3212_OPTION,
    SBP_DISABLE_EUTRAN_MEAS_AND_REP_CAP,
    SBP_CLEAR_LOCI_WHEN_UICC_RESET,
    SBP_SAT_LOCATION_INFO_CHANGE_LIMITED_TO_NORMAL_FIRST_TIME,
    SBP_PLMN_SEARCH_ABORT_SUPPORT,
    SBP_CC_SIM_ORIG_DIALLED_NUM,
    SBP_CC_SIM_SPECIFIC_ERROR_CAUSE,
    SBP_DISABLE_EUTRAN_AFTER_ROAMING_NOT_ALLOWED,


    SBP_NWSEL_BACKUP_RPLMN_IN_AUTO_MODE,
    SBP_LTE_IGNORE_CONN_PS_PAGING,
    SBP_ROAMING_NOT_ALLOW_AS_NO_SUITABLE,
    SBP_DISABLE_2MIN_MINIMUM_HPPLMN_TIMER,
    SBP_SPEED_CS_FEATURE,
    SBP_EMM_IGNORE_MT_CS_WHEN_IMS_CALL,
    SBP_TMOUS_VOLTE_FT,
    SBP_CMCC_VOLTE_FT,


    SBP_AUTO_RESEL_ONLY_WHEN_NO_SERVICE,
    SBP_ENHANCED_SOR,
    SBP_C2K_OM_SOLUTION1,
    SBP_RAC_UEMODE_WITHOUT_CONSIDER_VDP,
    SBP_DATA_SR_RETRY_THROTTLING,
    SBP_EMM_CONN_FAIL_ABNORMAL_B,
    SBP_USER_REQ_NOT_INIT_MM_PROC_WHEN_ABNORMAL_T3212_RUNNING,
    SBP_USER_REQ_NOT_INIT_GMM_PROC_WHEN_ABNORMAL_T3302_RUNNING,


    SBP_DISABLE_MO_SMS_OVER_PS,
    SBP_LBS_CP_PLMN_BLACK_LIST,
    SBP_LBS_CP_BLACK_NILR,
    SBP_SEARCH_4G_WHEN_FIRST_PS_ATTACH,
    SBP_DISABLE_BEARER_RSC_ALLOC,
    SBP_DISABLE_BEARER_RSC_MOD,
    SBP_EMM_IGNORE_TAC_ALL_ZEROS_CHECK,
    SBP_4G_BACKGROUND_SEARCH_OPTIMIZATION_3G,


    SBP_4G_BACKGROUND_SEARCH_OPTIMIZATION_2G,
    SBP_MM_SKIP_LU_AFTER_CSFB_FOR_EAFR,
    SBP_FAST_ROAMING_SEARCH,
    SBP_SEARCH_NOT_PREFERRED_AVAILABLE_PLMN,
    SBP_MCC_ASSIST_FULLBAND_RAT_SELECTION,
    SBP_FULLBAND_RAT_ORDER_ON_CUSTOM_SETTING,
    SBP_REG_HISTORY_FOR_PLMN_SELECTION,
    SBP_SEARCH_AVAILABLE_PLMN_IMMEDIATELY,


    SBP_FAST_HPPLMN_SEARCH,
    SBP_LTE_DISABLE_ENH_CELLSEL,
    SBP_CLEAR_LOCI_WHEN_REFRESH_INIT_FCN,
    SBP_DRX_TEST_TRACE,
    SBP_DISABLE_PAGING_RESPONSE_IN_LIMITED_SIM_ME_LOCK,
    SBP_LTE_FORCE_RX_NESIB_B4_CONN,
    SBP_DISABLE_LTE_B41,
 SBP_DISABLE_CS_DETACH_FOR_SET_MULTIRAT,


    SBP_SEL_AUTO_MODE_FROM_MANUAL_MODE_IF_REFRESH_TYPE_RESET,
    SBP_SM_DISABLE_PS_SIG_CONN_RETRY_TIMER,
    SBP_CELL_FACH_LTE_APBCR,
    SBP_NWSEL_DO_NOT_SEARCH_NEXT_FOR_REJ_12,
    SBP_NO_3G_FULL_BAND_SEARCH_DURING_CSFB_REDIR,
    SBP_CS_AUTHENTICATION_REJECT_PS_UNAFFECTED,
    SBP_FORCE_LU_FOR_SPECIAL_NW_EMM_DETACH,
    SBP_PREFER_3G_IN_23G_MODE,


    SBP_WAIT_RRC_CONN_REL_FOR_SET_RAT_MODE,
    SBP_AVOID_PS_DETACH_WHEN_EUTRAN_DISABLED,
    SBP_LTE_PARTIAL_BAND,
    SBP_LTE_DISABLE_BW,
    SBP_GAS_SMART_SCAN,
    SBP_SDM_RETRY_IMS_WHEN_IMS_SEND_FAIL,
    SBP_SAT_ALLOW_REFRESH_RESET_SIM_BY_MODEM,
    SBP_NOT_PREFER_HPLMNWACT_INFO,


    SBP_IGNORE_INT_CHECK_FOR_NAS_MSG,
    SBP_RAC_CHANGE_USAGE_SETTING_BY_SIM,
    SBP_DO_NOT_START_TD_DISABLE_TIMER,
    SBP_BEFORE_RINGING_CSFB,
    SBP_SET_FOLLOW_ON_REQUEST_FOR_IMS_PDP,
    SBP_NOT_REPORT_IMS_UL_DATA_STATUS,
    SBP_LTE_ENH_RSRP_SEARCH,
    SBP_ALLOW_CSFB_FOR_DATAONLY,


    SBP_VDM_DELAY_ENW_RESUME_ADS,
    SBP_NWSEL_INCREMENTAL_LTE_DISABLE_FOR_NW_REJ,
    SBP_MM_DO_NOT_START_FOP_GUARD_TIMER,
    SBP_EXTRA_FILE_SELECTION_AFTER_SAT_COMMAND,
    SBP_ALLOW_REGISTRATION_FOR_PPAC_RESTRICTION,
    SBP_CUSTOM_FPLMN_USED,
    SBP_DISABLE_MM_SKIP_LU_WHEN_BACK_TO_REGISTERED_LAI,
    SBP_DISABLE_SMS_RETRY,


    SBP_DO_NOT_CLEAR_CS_FPLMN_FOR_RAT_MODE_CHANGE,
    SBP_TELSTRA_BAND_PRIORITY_SEARCH,
    SBP_CB_CHANNEL_STORED_IN_SIM_FIRST,
    SBP_REL_12_EPLMN_LIST_HANDLING,
    SBP_AVOID_INTRA_LTE_PINGPONG_RESEL,
    SBP_STAY_ON_23G_FOR_LIMITED_WHEN_NO_IMS,
    SBP_DISABLE_ISR_SUPPORT,
    SBP_TERMINAL_CAPABILITY_FLEX,


    SBP_CMCC_SRVCC_CDRX_EHEN,
    SBP_SRVCC_STOP_UAS_MEAS,
    SBP_SRVCC_STOP_EAS_MEAS,
    SBP_SRVCC_DRX_INC_GAP,
    SBP_SKIP_VDP_IE_IN_ATTACH_TAU_REQ,
    SBP_CMHK_CUSTOMIZE_EPLMN,
    SBP_HSR_ENHANCE,
    SBP_LTE_EPLMN_SEARCH,


    SBP_OMIT_PTMSI_TYPE_FOR_TESTSIM,
    SBP_4G23_LOCAL_REL_IMS_PDN,
    SBP_CB_CHANNEL_ONLY_STORED_IN_NVRAM,
    SBP_SIM_RETRY_WHEN_CDMA_DETECTION_RESET_ERROR,
    SBP_SCA_CONFIGURED_BY_CUSTOMER,
    SBP_BAR_EUTRA_FREQ_BASED_ON_EUTRA_DISABLE_TIMER,
    SBP_SDM_DISABLE_SMS_OVER_WIFI,
 SBP_MPT_REJ_8_MAPPING_TO_15,


    SBP_X2G_HO_START_CPHR_CR0585_ENABLE,
    SBP_VDM_ADS_RETRY_CS_AND_REDIAL_VT_TO_CS_VOICE_FOR_BEREJECT,
    SBP_CONVERT_ATTACH_REJECT_FROM_CAUSE_7_TO_14,
    SBP_GMM_REATTACH_FOR_NW_DETACH_OTHER_CAUSE,
    SBP_MM_STRICT_PRECONDITION_FOR_REL7_MANUAL_RHPLMN_SEL,
    SBP_LTE_SET_RAT_DO_COMBINED_DETACH,
    SBP_DCM_ETWS_TEST_UE,
    SBP_ROHC_COMPR_DECOMPR_TRACE,


    SBP_NWSEL_CUSTOMIZE_EHPLMN,
    SBP_RAC_NW_LOSS_OPTIMIZATION,
    SBP_STKSMS_NO_PDU_CHK,
    SBP_IGNORE_EFSMSP_PARAM_IND_FOR_SMSC,
    SBP_DISABLE_CTCH_IF_CONFLICT_WITH_BCH,
    SBP_R13_DOS_ENHANCE,
    SBP_DISABLE_RETRY_FOR_SAT_SMS,
 SBP_DISABLE_CSFB_PAGE_CSMT_3G,


    SBP_EMM_REJ_CAUSE_2_ADD_TO_FTAI,
    SBP_CS_PS_MODE2_NO_SEARCH_AFTER_ABN,
    SBP_DISABLE_BIP_SUPPORT,
    SBP_VDM_DISABLE_RETRY_FOR_4_DIGIT_NUMBER_WHEN_VOWIFI_FAIL,


    SBP_MAX_MD_FEATURE

}sbp_md_feature_enum;






typedef enum
{

    SBP_DATA_VAMOS,

    SBP_IDC_EN,

    SBP_IDC_BAND7_IM3_TX_PWR,

    SBP_IDC_BAND13_GPS_TX_PWR,

    SBP_IDC_802_ANT_ISOLATION,

    SBP_IDC_GPS_ANT_ISOLATION,

    SBP_GERAN_TO_EUTRAN_SUPPORT_IN_GERAN_PTM,

    SBP_PLMN_SEARCH_ABORT_3G_TIMER_PERIOD,

    SBP_PLMN_SEARCH_ABORT_4G_TIMER_PERIOD,

    SBP_EUTRAN_DISABLE_TIMER_VALUE,

    SBP_SS_DISABLE_AFR_TIMER_PERIOD,

 SBP_SIM_MAX_RETRY_WHEN_CDMA_DETECTION_RESET_ERROR,

 SBP_VDM_ADS_SEL_ALGO_MASK_WFCP_VDP_PRIORITY_GROUP1,

 SBP_VDM_ADS_SEL_ALGO_MASK_WFCP_VDP_PRIORITY_GROUP2,


    SBP_DATA_MAX_MD_FEATURE
}sbp_md_feature_data_enum;







typedef enum
{
    CUSATS_BEFORE_PROFILE_DL,
    CUSATS_UICC_START_HALTED,
    CUSATS_PROFILE_DL_COMPLETED,
    CUSATS_AWAITING_PIN_VERIFY,
    CUSATS_UICC_ACTIVE
}cusats_uicc_state_enum;






typedef enum
{
    FULL_BAND_SEARCHED_FALSE = 0,
    FULL_BAND_SEARCHED_TRUE,
    FULL_BAND_SEARCHED_UNKNOWN
} full_band_searched_enum;






typedef enum
{
    AP_BASED_IRAT,
    MD_BASED_IRAT,
    MD_BASED_IRAT_LCG
}l4c_irat_type_enum;






typedef enum
{
    RECONFIG_SIM_SWITCH = 1,
    RECONFIG_SBP_CHANGE = 2,
    RECONFIG_DUPLEX_MODE = 4
} l4c_me_reconfig_enum;
# 307 "interface/modem/general/ps_public_struct.h" 2
# 1 "interface/modem/general/sim_ps_enum.h" 1
# 222 "interface/modem/general/sim_ps_enum.h"
typedef enum
{
    SIM_NO_FILE_ID = 0x0000,
    MASTER_FILE_ID = 0x3f00,

    DF_GSM_ID = 0x7f20,
    DF_TELECOM_ID = 0x7f10,


    DF_IRIDIUM_ID = 0x5f30,
    DF_GLOBST_ID = 0x5f31,
    DF_ICO_ID = 0x5f32,
    DF_ACeS_ID = 0x5f33,
    DF_EIA_ID = 0x5f40,
    DF_CTS_ID = 0x5f60,
    DF_SoLSA_ID = 0x5f70,
    DF_MExE_ID = 0x5f3C,

    DF_GRAPHICS_ID = 0x5f50,

    EF_ICCID_ID = 0x2fE2,
    EF_ELP_ID = 0x2f05,

    EF_SAI_ID = 0x4f30,
    EF_SLL_ID = 0x4f31,

    EF_MExE_ST_ID = 0x4f40,
    EF_ORPK_ID = 0x4f41,
    EF_ARPK_ID = 0x4f42,
    EF_TPRPK_ID = 0x4f43,

    EF_IMG_ID = 0x4f20,
    EF_IMG_1_ID = 0x4f01,
    EF_IMG_2_ID = 0x4f02,
    EF_IMG_3_ID = 0x4f03,
    EF_IMG_4_ID = 0x4f04,
    EF_IMG_5_ID = 0x4f05,
    EF_IMG_6_ID = 0x4f06,
    EF_IMG_7_ID = 0x4f07,
    EF_IMG_8_ID = 0x4f08,
    EF_IMG_9_ID = 0x4f09,
    EF_IMG_A_ID = 0x4f0a,
    EF_IMG_B_ID = 0x4f0b,
    EF_IMG_C_ID = 0x4f0c,
    EF_IMG_D_ID = 0x4f0d,
    EF_IMG_E_ID = 0x4f0e,
    EF_IMG_F_ID = 0x4f0f,


    EF_LP_ID = 0x6f05,
    EF_IMSI_ID = 0x6f07,
    EF_Kc_ID = 0x6f20,
    EF_PLMNsel_ID = 0x6f30,
    EF_HPLMN_ID = 0x6f31,
    EF_ACMax_ID = 0x6f37,
    EF_SST_ID = 0x6f38,
    EF_ACM_ID = 0x6f39,
    EF_GID1_ID = 0x6f3E,
    EF_GID2_ID = 0x6f3F,
    EF_SPN_ID = 0x6f46,
    EF_PUCT_ID = 0x6f41,
    EF_CBMI_ID = 0x6f45,
    EF_BCCH_ID = 0x6f74,
    EF_ACC_ID = 0x6f78,
    EF_FPLMN_ID = 0x6f7B,
    EF_LOCI_ID = 0x6f7E,
    EF_AD_ID = 0x6fAD,
    EF_PHASE_ID = 0x6fAE,
    EF_VGCS_ID = 0x6fB1,
    EF_VGCSS_ID = 0x6fB2,
    EF_VBS_ID = 0x6fB3,
    EF_VBSS_ID = 0x6fB4,
    EF_eMLPP_ID = 0x6fB5,
    EF_AAeM_ID = 0x6fB6,
    EF_CBMID_ID = 0x6f48,
    EF_ECC_ID = 0x6fB7,
    EF_CBMIR_ID = 0x6f50,
    EF_DCK_ID = 0x6f2C,
    EF_CNL_ID = 0x6f32,
    EF_NIA_ID = 0x6f51,
    EF_KcGPRS_ID = 0x6f52,
    EF_LOCIGPRS_ID = 0x6f53,
    EF_SUME_ID = 0x6f54,
    EF_PLMNwACT_ID = 0x6f60,
    EF_OPLMNwACT_ID = 0x6f61,
    EF_HPLMNACT_ID = 0x6f62,
    EF_CPBCCH_ID = 0x6f63,
    EF_INVSCAN_ID = 0x6f64,
    EF_VM_WAIT_ID = 0x6F11,
    EF_CPHS_SST_ID = 0x6F12,
    EF_CF_FLAG_ID = 0x6F13,
    EF_OP_STRING_ID = 0x6F14,
    EF_CSP_ID = 0x6F15,
    EF_CPHS_INFO_ID = 0x6F16,
    EF_MAILBOX_NUM_ID = 0x6F17,
    EF_OP_SHORTFORM_ID = 0x6F18,
    EF_INFO_NUM_ID = 0x6F19,

    EF_ADN_ID = 0x6f3A,
    EF_FDN_ID = 0x6f3B,
    EF_SMS_ID = 0x6f3C,
    EF_CCP_ID = 0x6f3D,
    EF_ECCP_ID = 0x6f4F,
    EF_MSISDN_ID = 0x6f40,
    EF_SMSP_ID = 0x6f42,
    EF_SMSS_ID = 0x6f43,
    EF_LND_ID = 0x6f44,
    EF_SDN_ID = 0x6f49,
    EF_EXT1_ID = 0x6f4A,
    EF_EXT2_ID = 0x6f4B,
    EF_EXT3_ID = 0x6f4C,
    EF_BDN_ID = 0x6f4D,
    EF_EXT4_ID = 0x6f4E,
    EF_SMSR_ID = 0x6f47,
    EF_CMI_ID = 0x6f58,

    DF_VID_ID = 0x7F43,
    EF_HZ_ID = 0x6F60,
    EF_HZ_CACHE1_ID = 0x6F61,
    EF_HZ_CACHE2_ID = 0x6F62,
    EF_HZ_CACHE3_ID = 0x6F63,
    EF_HZ_CACHE4_ID = 0x6F64,

    DF_ENS_7F66_ID = 0x7F66,
    DF_ENS_5F30_ID = 0x5F30,
    EF_ENS_ACTING_HPLMN = 0x4F34,
    EF_ENS_TERMINAL_SUPPORT_TABLE = 0x6FD2,
    EF_PNN_ID = 0x6FC5,
    EF_OPL_ID = 0x6FC6,
    EF_MBDN_ID = 0x6FC7,
    EF_EXT6_ID = 0x6FC8,
    EF_MBI_ID = 0x6FC9,
    EF_MWIS_ID = 0x6FCA,
    EF_CFIS_ID = 0x6FCB,
    EF_EXT7_ID = 0x6FCC,
    EF_SPDI_ID = 0x6FCD,
    EF_MMSN_ID = 0x6FCE,
    EF_EXT8_ID = 0x6FCF,
    EF_MMSICP_ID = 0x6FD0,
    EF_MMSUP_ID = 0x6FD1,
    EF_MMSUCP_ID = 0x6FD2,
    EF_DIR_ID = 0x2F00,

    EF_ARR_ID = 0x2F06,
    DF_USIM_ID = 0x7FFF,
    EF_U_LI_ID = 0x6F05,
    EF_U_IMSI_ID = 0x6F07,
    EF_U_KEYS_ID = 0x6F08,
    EF_U_KEYSPS_ID = 0x6F09,
    EF_U_PLMNWACT_ID = 0x6F60,
    EF_U_HPPLMN_ID = 0x6F31,
    EF_U_ACMMAX_ID = 0x6F37,
    EF_U_UST_ID = 0x6F38,
    EF_U_ACM_ID =0x6F39,
    EF_U_GID1_ID = 0x6F3E,
    EF_U_GID2_ID = 0x6F3F,
    EF_U_SPN_ID = 0x6F46,
    EF_U_PUCT_ID = 0x6F41,
    EF_U_CBMI_ID = 0x6F45,
    EF_U_ACC_ID = 0x6F78,
    EF_U_FPLMN_ID = 0x6F7B,
    EF_U_LOCI_ID = 0x6F7E,
    EF_U_AD_ID = 0x6FAD,
    EF_U_CBMID_ID = 0x6F48,
    EF_U_ECC_ID = 0x6FB7,
    EF_U_CBMIR_ID = 0x6F50,
    EF_U_PSLOCI_ID = 0x6F73,
    EF_U_FDN_ID = 0x6F3B,
    EF_U_SMS_ID = 0x6F3C,
    EF_U_MSISDN_ID = 0x6F40,
    EF_U_SMSP_ID = 0x6F42,
    EF_U_SMSS_ID = 0x6F43,
    EF_U_SDN_ID = 0x6F49,
    EF_U_EXT2_ID = 0x6F4B,
    EF_U_EXT3_ID = 0x6F4C,
    EF_U_SMSR_ID = 0x6F47,
    EF_U_ICI_ID = 0x6F80,
    EF_U_OCI_ID = 0x6F81,
    EF_U_ICT_ID = 0x6F82,
    EF_U_OCT_ID = 0x6F83,
    EF_U_EXT5_ID = 0x6F4E,
    EF_U_CCP2_ID = 0x6F4F,
    EF_U_EMLPP_ID = 0x6FB5,
    EF_U_AAEM_ID = 0x6FB6,
    EF_U_HIDDENKEY_ID = 0x6FC3,
    EF_U_BDN_ID = 0x6F4D,
    EF_U_EXT4_ID = 0x6F55,
    EF_U_CMI_ID = 0x6F58,
    EF_U_EST_ID = 0x6F56,
    EF_U_ACL_ID = 0x6F57,
    EF_U_DCK_ID = 0x6F2C,
    EF_U_CNL_ID = 0x6F32,
    EF_U_STARTHFN_ID = 0x6F5B,
    EF_U_THRESHOLD_ID = 0x6F5C,
    EF_U_OPLMNWACT_ID = 0x6F61,
    EF_U_HPLMNWACT_ID = 0x6F62,
    EF_U_ARR_ID = 0x6F06,
    EF_U_NETPAR_ID = 0x6FC4,
    EF_U_PNN_ID = 0x6FC5,
    EF_U_OPL_ID = 0x6FC6,
    EF_U_MBDN_ID = 0x6FC7,
    EF_U_EXT6_ID = 0x6FC8,
    EF_U_MBI_ID = 0x6FC9,
    EF_U_MWIS_ID = 0x6FCA,
    EF_U_CFIS_ID = 0x6FCB,
    EF_U_EXT7_ID = 0x6FCC,
    EF_U_SPDI_ID = 0x6FCD,
    EF_U_MMSN_ID = 0x6FCE,
    EF_U_EXT8_ID = 0x6FCF,
    EF_U_MMSICP_ID = 0x6FD0,
    EF_U_MMSUP_ID = 0x6FD1,
    EF_U_MMSUCP_ID = 0x6FD2,
    EF_U_NIA_ID = 0x6FD3,
    EF_U_VGCS_ID = 0x6FB1,
    EF_U_VGCSS_ID = 0x6FB2,
    EF_U_VBS_ID = 0x6FB3,
    EF_U_VBSS_ID = 0x6FB4,
    EF_U_VGCSCA_ID = 0x6FD4,
    EF_U_VBSCA_ID = 0x6FD5,
    EF_U_GBAP_ID = 0x6FD6,
    EF_U_MSK_ID = 0x6FD7,
    EF_U_MUK_ID = 0x6FD8,
    EF_U_GBANL_ID = 0x6FDA,
    DF_U_SOLSA_ID = 0x5F70,
    EF_U_SAI_ID = 0x4F30,
    EF_U_SLL_ID = 0x4F31,
    EF_U_LSAD_ID = 0x0000,
    DF_U_PHONEBOOK_ID = 0x5F3A,
    EF_U_PBR_ID = 0x4F30,
    EF_U_IAP_ID = 0x0000,
    EF_U_ADN_ID = 0x0000,
    EF_U_EXT1_ID = 0x0000,
    EF_U_PBC_ID = 0x0000,
    EF_U_GRP_ID = 0x0000,
    EF_U_AAS_ID = 0x0000,
    EF_U_GAS_ID = 0x0000,
    EF_U_ANR_ID = 0x0000,
    EF_U_SNE_ID = 0x0000,
    EF_U_CCP1_ID = 0x0000,
    EF_U_UID_ID = 0x0000,
    EF_U_PSC_ID = 0x4F22,
    EF_U_CC_ID = 0x4F23,
    EF_U_PUID_ID = 0x4F24,
    EF_U_EMAIL_ID = 0x0000,
    DF_U_GSMACCESS_ID = 0x5F3B,
    EF_U_KC_ID = 0x4F20,
    EF_U_KCGPRS_ID = 0x4F52,
    EF_U_CPBCCH_ID = 0x4F63,
    EF_U_INVSCAN_ID = 0x4F64,
    DF_U_MEXE_ID = 0x5F3C,
    EF_U_MEXEST_ID = 0x4F40,
    EF_U_ORPK_ID = 0x4F41,
    EF_U_ARPK_ID = 0x4F42,
    EF_U_TPRPK_ID = 0x4F43,
    EF_U_TKCDF_ID = 0x0000,
    DF_U_WLAN_ID = 0x5F40,
    EF_U_PSEUDO_ID = 0x4F41,
    EF_U_UPLMNWLAN_ID = 0x4F42,
    EF_U_OPLMNWLAN_ID = 0x4F43,
    EF_U_USSIDL_ID = 0x4F44,
    EF_U_OSSIDL_ID = 0x4F45,
    EF_U_WRI_ID = 0x4F46,
    DF_G_PHONEBOOK_ID = 0x5F3A,
    EF_G_PBR_ID = 0x4F30,
    EF_G_IAP_ID = 0x0000,
    EF_G_ADN_ID = 0x0000,
    EF_G_EXT1_ID = 0x0000,
    EF_G_PBC_ID = 0x0000,
    EF_G_GRP_ID = 0x0000,
    EF_G_AAS_ID = 0x0000,
    EF_G_GAS_ID = 0x0000,
    EF_G_ANR_ID = 0x0000,
    EF_G_SNE_ID = 0x0000,
    EF_G_CCP1_ID = 0x0000,
    EF_G_UID_ID = 0x0000,
    EF_G_PSC_ID = 0x4F22,
    EF_G_CC_ID = 0x4F23,
    EF_G_PUID_ID = 0x4F24,
    EF_G_EMAIL_ID = 0x0000,
    DF_MULTIMEDIA_ID = 0x5F3B,
    EF_MML_ID = 0x4F47,
    EF_MMDF_ID = 0x4F48,
    EF_U_EHPLMN_ID = 0x6FD9,
    EF_U_EHPLMNPI_ID = 0x6FDB,
    EF_U_LRPLMNSI_ID = 0x6FDC,

    EF_U_CSP_ID = 0x6F15,
    EF_U_ENS_RAT_ID = 0x4F36,
    EF_U_ENS_TERMINAL_SUPPORT_TABLE = 0x6FD2,

    DF_U_HNB_ID = 0x5F50,
    EF_U_ACSGL_ID = 0x4F81,
    EF_U_CSGT_ID = 0x4F82,
    EF_U_HNBN_ID = 0x4F83,
    EF_U_EPSLOCI_ID = 0x6FE3,
    EF_U_EPSNSC_ID = 0x6FE4,
    EF_U_OCSGL_ID = 0x4F84,

    EF_PSISMSC_ID = 0x6FE5,
    DF_ISIM_ID = 0x7FFF,
    EF_I_IST_ID = 0x6F07,
    EF_I_IMPI_ID = 0x6F02,
    EF_I_DOMAIN_ID = 0x6F03,
    EF_I_IMPU_ID = 0x6F04,
    EF_I_AD_ID = 0x6FAD,
    EF_I_ARR_ID = 0x6F06,
    EF_I_PCSCF_ID = 0x6F09,
    EF_I_GBAP_ID = 0x6FD5,
    EF_I_GBANL_ID = 0x6FD7,
    EF_I_NAFKCA_ID = 0x6FDD,
    EF_I_UICCIARI_ID = 0x6FE7,
    EF_I_SMS_ID = 0x6F3C,
    EF_I_SMSS_ID = 0x6F43,
    EF_I_SMSR_ID = 0x6F47,
    EF_I_SMSP_ID = 0x6F42,



    EF_U_NAFKCA_ID = 0x6FDD,
    EF_U_SPNI_ID = 0x6FDE,
    EF_U_PNNI_ID = 0x6FDF,
    EF_U_NCPIP_ID = 0x6FE2,


    EF_U_UFC_ID = 0x6FE6,
    EF_U_UICCIARI_ID = 0x6FE7,
    EF_U_NASCONFIG_ID = 0x6FE8,
    EF_U_PWS_ID = 0x6FEC,



    DF_MMSS_ID = 0x5f3c,
    EF_MLPL_ID = 0x4f20,
    EF_MSPL_ID = 0x4f21,
    EF_MMSSMODE_ID = 0x4f22,
    DF_CSIM_ID = 0x7FFF,
    EF_C_IMSI_M_ID = 0x6F22,


    EF_NULL = 0xFFFF
}sim_file_id_enum;

typedef enum
{
    SIMCALLCONTROL_NOMODIFY,
    SIMCALLCONTROL_CALLTOSS,
    SIMCALLCONTROL_CALLTOUSSD,
    SIMCALLCONTROL_SSTOCALL,
    SIMCALLCONTROL_SSTOUSSD,
    SIMCALLCONTROL_USSDTOCALL,
    SIMCALLCONTROL_USSDTOSS,
    SIMCALLCONTROL_L4RETRY
}sim_call_control_type_enum;

typedef enum
{
   TYPE_NONE=0,
   TYPE_ADN=0x2,
   TYPE_FDN=0x4,
   TYPE_BDN=0x8,
   TYPE_ADN_BDN=0x0A,
   TYPE_FDN_BDN=0x0C
}sim_dn_enum;

typedef enum
{
   SIM_CHV_1=1,
   SIM_CHV_2=2
}sim_chv_type_enum;

typedef enum
{
   SIM_START_MODE_RESET,
   SIM_START_MODE_INIT,
   SIM_START_MODE_PUK1
}sim_start_mode_enum;

typedef enum
{
   UICC_ISIM_APP,
   UICC_USIM_APP,
   UICC_CSIM_APP,
   UICC_MAX_APP_NUM
}uicc_app_type_enum;

typedef enum
{
   SIM_ELP,
   SIM_LP,
   USIM_LI,
   USIM_PL
}sim_lp_file_type_enum;

typedef enum
{
   SIM_PHASE_0,
   SIM_PHASE_2=2,
   SIM_PHASE_3=3
}sim_phase_enum;

typedef enum
{
   SIM_FILE_SIZE,
   SIM_REC_NUM,
   SIM_REC_SIZE,
   SIM_RES_DATA_LEN
}sim_info_type_enum;



typedef enum
{
   SAT_MM_NO_SERVICE,
   SAT_MM_LIMITED_SERVICE,
   SAT_MM_NORMAL_SERVICE
}sat_mm_status_enum;

typedef enum
{
    SIM_FILE_TRANSP = 0x00,
    SIM_FILE_LINEAR_FIXED= 0x01,
    SIM_FILE_CYCLIC = 0x03,
    SIM_FILE_NO_STRUCTURE = 0x07,
    SIM_FILE_BER_TLV = 0x0f
} sim_file_structure_enum;

typedef enum
{
   USIM_FILE_SIZE,
   USIM_REC_NUM,
   USIM_REC_SIZE
}usim_info_type_enum;

typedef enum
{
   USIM_ACL_SERVICE_NOT_AVAILABLE,
   USIM_ACL_SERVICE_NOT_ACTIVATED,
   USIM_ACL_SERVICE_ACTIVATED,
   USIM_NOT_INITIALIZED
}usim_acl_type_enum;
# 670 "interface/modem/general/sim_ps_enum.h"
typedef enum
{
    SIM_NO_TIMER_STATUS = 0,
    SIM_TIMER_RUNNING,
    SIM_TIMER_NOT_RUNNING,
    SIM_TIMER_STOPPED,
    SIM_TIMER_TIMED_OUT
} sim_timer_status_enum;

typedef enum
{
    UICC_NOT_INIT,
    SIM_CARD_INSIDE,
    UICC_USIM_INSIDE,
    UICC_ISIM_INSIDE,
    SIM_RUIM_INSIDE,
    UICC_CSIM_INSIDE
} uicc_card_type_enum;

typedef enum
{
 SIM_CHANNEL_OPEN,
 SIM_CHANNEL_CLOSE
} sim_manage_channel_mode_enum;


typedef enum
{
    VSIM_SIM_TYPE,
 VSIM_USIM_TYPE
}vsim_card_type_enum;



typedef enum
{

    SIM_PROFILE_TE = 0,
    SIM_PROFILE_MT,
    SIM_PROFILE_DEFAULT_MT,
    SIM_PROFILE_ACTIVE,
    SIM_PROFILE_UST,
    SIM_PROFILE_MT_ONLY = 5,
    SIM_PROFILE_CONFLICT = 5,


    SIM_PROFILE_TE_MT = 128
} sim_profile_storage_enum;


typedef enum
{
   CMD_DETAIL_TAG=1,
   DEVICE_ID_TAG,
   RESULT_TAG,
   DURATION_TAG,
   ALPHA_ID_TAG,
   ADDRESS_TAG,
   CCP_TAG,
   SUBADDR_TAG,
   SS_STRING_TAG,
   USSD_STRING_TAG,
   SMS_TPDU_TAG,
   CB_PAGE_TAG,
   TEXT_STRING_TAG,
   TONE_TAG,
   ITEM_TAG,
   ITEM_ID_TAG,
   RSP_LEN_TAG,
   FILE_LIST_TAG,
   LOCI_TAG,
   IMEI_TAG,
   HELP_REQ_TAG,
   NET_MEASURE_RES_TAG,
   DEFAULT_TEXT_TAG,
   ITEM_NEXT_ACTION_IND_TAG,
   EVENT_LIST_TAG,
   CAUSE_TAG,
   LOCATION_STATUS_TAG,
   TID_TAG,
   BCCH_CHAN_LIST_TAG,
   ICON_ID_TAG,
   ITEM_ICON_ID_LIST_TAG,
   CARD_READER_STATUS_TAG,
   CARD_ATR_TAG,
   C_APDU_TAG,
   R_APDU_TAG,
   TIMER_ID_TAG,
   TIMER_VALUE_TAG,
   DATE_TIME_ZONE_TAG,
   CC_REQ_ACTION_TAG,
   AT_CMD_TAG,
   AT_RSP_TAG,
   BC_REPEAT_IND_TAG,
   IMMEDIATE_RSP_TAG,
   DTMF_STRING_TAG,
   LANGUAGE_TAG,
   TA_TAG,
   RFU1_TAG,
   BROWSER_ID_TAG,
   URL_TAG,
   IMS_REQUEST_URI_TAG = URL_TAG,
   BEARER_TAG,
   PROVISIONING_REF_FILE_TAG,
   BROWSER_TERMINATION_CAUSE_TAG,
   BEARER_DESCRIPTION_TAG,
   CHAN_DATA_TAG,
   CHAN_DATA_LEN_TAG,
   CHAN_STATUS_TAG,
   BUFFER_SIZE_TAG,
   CARD_READER_ID_TAG,
   RFU2_TAG,
   SIM_ME_INTERFACE_LEVEL_TAG,
   RFU3_TAG,
   OTHER_ADDR_TAG,
   ACCESS_TECH_TAG,
   RFU4_TAG,
   RFU5_TAG,
   NETWORK_ACCESS_NAME_TAG = 0x47,
   IWLAN_ID_TAG = 0x4a,
   IWLAN_ACCESS_STATUS_TAG = 0x4b,
   PDP_CTX_ACTIVATE_PARAM_TAG = 0x52,
   CONTACTLESS_FUNCTIONALITY_STATE_TAG = 0x54,
   CSG_CELL_SELECT_STATUS_TAG = 0x55,
   CSG_ID_TAG = 0x56,
   HNB_NAME_TAG = 0x57,
   IMEISV_TAG = 0x62,
   NETWORK_SEARCH_MODE_TAG = 0x65,
   NMR_QUAL_TAG = 0x69,
   PLMNwACT_LIST_TAG = 0x72,
   ROUTING_AREA_ID_TAG = 0x73,
   UPDATE_ATTCH_TYPE_TAG = 0x74,
   REJECT_CAUSE_TAG = 0x75,
   GEO_LOCATION_PARAM_TAG = 0x76,
   IARI_TAG = 0x76,
   GAD_SHAPES_TAG = 0x77,
   IMPU_LIST_TAG = 0x77,
   NMEA_SENTENCE_TAG = 0x78,
   IMS_STATUS_CODE_TAG = 0x78,
   PLMN_LIST_TAG = 0x79,
   ACTIVATE_DESCRIPTOR_TAG = 0x7b,
   EPS_PDN_CONNECT_PARAM_TAG = 0x7c,
   TRACKING_AREA_ID_TAG = 0x7d,
   CSG_ID_LIST_TAG = 0x7e,
   PROACTIVE_CMD_TAG = 0xD0,
   SMS_PP_DL_TAG,
   CB_DL_TAG,
   MENU_SELECTION_TAG,
   CALL_CONTROL_TAG,
   MO_SMS_CONTROL_TAG,
   EVENT_DL_TAG,
   TIMER_EXPIR_TAG,
   RFU6_TAG=0xDF
}sat_tag_enum;

typedef enum
{
   SAT_SETUP_CALL=ADDRESS_TAG,
   SAT_SEND_SS=SS_STRING_TAG,
   SAT_SEND_USSD=USSD_STRING_TAG
}sat_call_ctrl_type_enum;

typedef enum
{
   SAT_ALLOWED_NO_MODIFICATION=0,
   SAT_NOT_ALLOWED,
   SAT_ALLOWED_WITH_MODIFICATION,
   SAT_SIM_ERROR
}sat_call_ctrl_by_sim_result_enum;

typedef enum
{
    SAT_BIP_NO_SPECIFIC_CAUSE,
    SAT_BIP_NO_CHANNEL_AVAILABLE,
    SAT_BIP_CHANNEL_CLOSED,
    SAT_BIP_CHANNEL_IDENTIFIER_NOT_VALID,
    SAT_BIP_REQUESTED_BUFFER_SIZE_NOT_AVAILABLE,
    SAT_BIP_SECURITY_ERROR,
    SAT_BIP_REQUESTED_TRANSPORT_LEVEL_NOT_AVAILABLE
}sat_bearer_independent_protocol_additional_info_for_res_enum;

typedef enum
{
    SAT_CSD_BEARER = 0x01,
    SAT_GPRS_BEARER,
    SAT_SERVER_MODE_BEARER
}sat_bearer_enum;

typedef enum
{
    SAT_UDP_PROTOCOL = 0x01,
    SAT_TCP_PROTOCOL,
    SAT_RAW_PROTOCOL
}sat_protocol_type_enum;

typedef enum
{
    SAT_CLOSE_CHANNEL_FINISHED,
    SAT_SEND_DATA_FINISHED,
    SAT_SEND_DATA_TERMINATED,
    SAT_RECEIVE_DATA_FINISHED,
    SAT_RECEIVE_DATA_TERMINATED,
    SAT_DISCONNECT_EVENT_DOWNLOAD
} sat_notify_mmi_enum;

typedef enum
{
   SAT_DL_BUSY,
   SAT_DL_ERROR
}sat_sms_dl_error_cause_enum;

typedef enum
{
   SAT_RR_IDLE,
   SAT_RR_NOT_IDLE
}sat_me_status_enum;

typedef enum
{
   SAT_NO_CHANNEL=0x00,
   SAT_CH1=0x21,
   SAT_CH2=0x22,
   SAT_CH3=0x23,
   SAT_CH4=0x24,
   SAT_CH5=0x25,
   SAT_CH6=0x26,
   SAT_CH7=0x27
}sat_channel_id_enum;

typedef enum
{
    RSAT_DISPLAY_TEXT,
    RSAT_GET_INKEY,
    RSAT_GET_INPUT,
    RSAT_MORE_TIME,
    RSAT_PLAY_TONE,
    RSAT_POLL_INTERVAL,
    RSAT_REFRESH_I,
    RSAT_REFRESH_II,
    RSAT_REFRESH_III,
    RSAT_REFRESH_IV,
    RSAT_REFRESH_V,
    RSAT_REFRESH_VI,
    RSAT_REFRESH_VII,
    RSAT_REFRESH_VIII,
    RSAT_SETUP_MENU,
    RSAT_SELECT_ITEM,
    RSAT_SEND_SMS,
    RSAT_SEND_SS,
    RSAT_SEND_USSD,
    RSAT_SETUP_CALL,
    RSAT_POLLING_OFF,
    RSAT_LOCAL_INFO_I,
    RSAT_LOCAL_INFO_II,
    RSAT_LOCAL_INFO_III,
    RSAT_LOCAL_INFO_IV,
    RSAT_LOCAL_INFO_V,
    RSAT_LOCAL_INFO_VI,
    RSAT_LOCAL_INFO_VII,
    RSAT_LOCAL_INFO_VIII,
    RSAT_LOCAL_INFO_IX,
    RSAT_LOCAL_INFO_X,
    RSAT_SETUP_EVENT_LIST,
    RSAT_TIMER_MANAGEMENT,
    RSAT_SETUP_IDLE_TEXT,
    RSAT_RUN_AT_COMMAND,
    RSAT_SEND_DTMF,
    RSAT_LANG_NOTIFY,
    RSAT_LAUNCH_BROWSER,
    RSAT_OPEN_CHANNEL,
    RSAT_CLOSE_CHANNEL,
    RSAT_RECEIVE_DATA,
    RSAT_SEND_DATA,
    RSAT_GET_CHANNEL_STATUS,
    RSAT_ACTIVATE,
    RSAT_CONTACTLESS_STATE_CHANGE,
    RSAT_SIZE
} rsat_type_enum;

typedef enum
{
    SAT_CC_NULL,

    SAT_MMI_SETUP_CALL_TO_SEND_SS,
    SAT_MMI_SETUP_CALL_TO_SEND_USSD,
    SAT_STK_SETUP_CALL_TO_SEND_SS,
    SAT_STK_SETUP_CALL_TO_SEND_USSD,

    SAT_MMI_SEND_SS_TO_SETUP_CALL,
    SAT_MMI_SEND_SS_TO_SEND_USSD,
    SAT_STK_SEND_SS_TO_SETUP_CALL,
    SAT_STK_SEND_SS_TO_SEND_USSD,

    SAT_MMI_SEND_USSD_TO_SETUP_CALL,
    SAT_MMI_SEND_USSD_TO_SEND_SS,
    SAT_STK_SEND_USSD_TO_SETUP_CALL,
    SAT_STK_SEND_USSD_TO_SEND_SS
} sat_call_ctrl_by_sim_state_enum;

typedef enum
{
   SAT_CALL_DISCONNECT,
   SAT_CALL_CONNECT
}sat_call_status_enum;

typedef enum
{
   SAT_PDP_DEACTIVATE,
   SAT_PDP_ACTIVATE
}sat_pdp_status_enum;

typedef enum
{
   CMD_REFRESH=0x01,
   CMD_MORE_TIME=0x02,
   CMD_POLL_INTERVAL=0x03,
   CMD_POLLING_OFF=0x04,
   CMD_SETUP_EVENT_LIST=0x05,
   CMD_SETUP_CALL=0x10,
   CMD_SEND_SS=0x11,
   CMD_SEND_USSD=0x12,
   CMD_SEND_SMS=0x13,
   CMD_DTMF=0x14,
   CMD_LAUNCH_BROWSER=0x15,
   CMD_PLAY_TONE=0x20,
   CMD_DSPL_TXT=0x21,
   CMD_GET_INKEY=0x22,
   CMD_GET_INPUT=0x23,
   CMD_SELECT_ITEM=0x24,
   CMD_SETUP_MENU=0x25,
   CMD_PROVIDE_LOCAL_INFO=0x26,
   CMD_TIMER_MANAGER=0x27,
   CMD_IDLE_MODEL_TXT=0x28,
   CMD_PERFORM_CARD_APDU=0x30,
   CMD_POWER_ON_CARD=0x31,
   CMD_POWER_OFF_CARD=0x32,
   CMD_GET_READER_STATUS=0x33,
   CMD_RUN_AT=0x34,
   CMD_LANGUAGE_NOTIFY=0x35,
   CMD_OPEN_CHAN=0x40,
   CMD_CLOSE_CHAN=0x41,
   CMD_RECEIVE_DATA=0x42,
   CMD_SEND_DATA=0x43,
   CMD_GET_CHAN_STATUS=0x44,
   CMD_RFU=0x60,
   CMD_ACTIVATE=0x70,
   CMD_CONTACTLESS_STATE_CHANGED=0x71,
   CMD_END_PROACTIVE_SESSION=0x81,
   CMD_DETAIL=0xFF
}sat_proactive_cmd_enum;

typedef enum
{
   RSAT_BY_TE,
   RSAT_BY_SIM,

   RSAT_NULL
} rsat_config_enum;
# 308 "interface/modem/general/ps_public_struct.h" 2
# 1 "interface/modem/general/sim_public_enum.h" 1
# 244 "interface/modem/general/sim_public_enum.h"
# 1 "interface/common/global_def.h" 1
# 245 "interface/modem/general/sim_public_enum.h" 2
# 1 "interface/sap/cross_core/sim_public_enum_public.h" 1
# 12 "interface/sap/cross_core/sim_public_enum_public.h"
typedef enum
{
  SIM_CARD_REMOVED,
  SIM_ACCESS_ERROR,
  SIM_REFRESH,
  SIM_REFRESH_POWER_OFF,
  SIM_PUK1,
  SIM_ACCESS_PROFILE_ON,
  SIM_ACCESS_PROFILE_OFF,
  DUALSIM_DISCONNECTED,
  DUALSIM_CONNECTED,
  SIM_VSIM_ON,
  SIM_VSIM_OFF,
  SIM_PLUG_OUT,
  SIM_PLUG_IN,
  SIM_RECOVERY_START,
  SIM_RECOVERY_END,
  SIM_IMEI_LOCK_FAIL,
  SIM_OP09_LOCK_FAIL,
  SIM_CARD_TECHNICAL_PROBLEM
}sim_error_cause_enum;


typedef enum
{
  SIM_CMD_SUCCESS = 2560,
  SIM_CMD_FAIL = 2561,
  SIM_FATAL_ERROR = 2562,
  SIM_NO_INSERTED = 2563,
  SIM_CHV_NOT_INIT = 2564,
  SIM_CHV_RETRY_ALLOW = 2565,
  SIM_CHV_BLOCK = 2566,
  SIM_ACCESS_NOT_ALLOW = 2567,
  SIM_SAT_CMD_BUSY = 2568,
  SIM_DL_ERROR = 2569,
  SIM_MEMORY_PROBLEM = 2570,
  SIM_TECHNICAL_PROBLEM = 2571,
  SIM_PUK_UNLOCK = 2572,
  SIM_EF_RECORD_FULL = 2573,
  SIM_SELECT_FILE_INVALID = 2574,
  SIM_SELECT_DF_TERMINATED = 2575,
  SIM_NO_EF_SELECTED = 2576,
  SIM_FILE_NOT_FOUND = 2577,
  SIM_RECORD_NOT_FOUND = 2578,
  SIM_REF_DATA_NOT_FOUND = 2579,
  SIM_INCREASE_FAIL = 2580,
  SIM_AUTH_ERROR_WRONG_MAC = 2581,
  SIM_AUTH_ERROR_GSM_NOT_SUPPORT = 2582,
  SIM_WRONG_INSTRUCTION_CLASS = 2583
}sim_cmd_result_enum;


typedef enum
{
    USIM_DEFAULT_CH = 0x00,
    USIM_LOGIC_CH_1 = 0x01,
    USIM_LOGIC_CH_2 = 0x02,
    USIM_LOGIC_CH_3 = 0x03,
    USIM_LOGIC_CH_4 = 0x04,
    USIM_LOGIC_CH_5 = 0x05,
    USIM_LOGIC_CH_6 = 0x06,
    USIM_LOGIC_CH_7 = 0x07,
    USIM_LOGIC_CH_8 = 0x08,
    USIM_LOGIC_CH_9 = 0x09,
    USIM_LOGIC_CH_10 = 0x0a,
    USIM_LOGIC_CH_11 = 0x0b,
    USIM_LOGIC_CH_12 = 0x0c,
    USIM_LOGIC_CH_13 = 0x0d,
    USIM_LOGIC_CH_14 = 0x0e,
    USIM_LOGIC_CH_15 = 0x0f,
    USIM_LOGIC_CH_16 = 0x10,
    USIM_LOGIC_CH_17 = 0x11,
    USIM_LOGIC_CH_18 = 0x12,
    USIM_LOGIC_CH_19 = 0x13,
    USIM_LOGIC_CH_SIZE,
    USIM_LOGIC_CH_INVALID = 0xFF
} usim_logic_channel_enum;

typedef enum
{
    AKA_CONTEXT,
    GBA_CONTEXT,
    MAX_AUTH_CONTEXT
} uicc_auth_mode_enum;
# 246 "interface/modem/general/sim_public_enum.h" 2


typedef enum
{
    SIM_ACCESS_EXTERNAL_READ_BINARY,
    SIM_ACCESS_EXTERNAL_READ_RECORD,
    SIM_ACCESS_EXTERNAL_UPDATE_BINARY,
    SIM_ACCESS_EXTERNAL_UPDATE_RECORD,
    SIM_ACCESS_EXTERNAL_FILE_INFO,
    SIM_ACCESS_EXTERNAL_AUTHENTICATION
}sim_access_extmd_op_enum;

typedef enum
{
    SIM_NOTIFY_INITIALIZATION,
    SIM_RESPONSE_ACCESS,
    SIM_NOTIFY_CARD_STATUS,
    SIM_NOTIFY_CARD_TYPE,
    SIM_NOTIFY_FILE_CHANGE
}sim_extmd_notify_enum;



typedef enum
{
   SIM_TYPE_NULL,
   SIM_TYPE_TEST_SIM,
   SIM_TYPE_TEST_USIM,
   SIM_TYPE_SIM,
   SIM_TYPE_USIM
} sim_type_query_enum;


typedef enum
{
   SERVICE_CHV_DISABLE_FUNCTION=1,
   SERVICE_ADN,
   SERVICE_FDN,
   SERVICE_SMS,
   SERVICE_AOC,
   SERVICE_CCP,
   SERVICE_PLMNSEL,
   SERVICE_RFU1,
   SERVICE_MSISDN,
   SERVICE_EXT1,
   SERVICE_EXT2,
   SERVICE_SMSP,
   SERVICE_LND,
   SERVICE_CBMI,
   SERVICE_GID1,
   SERVICE_GID2,
   SERVICE_SPN,
   SERVICE_SDN,
   SERVICE_EXT3,
   SERVICE_RFU2,
   SERVICE_VGCS,
   SERVICE_VBS,
   SERVICE_EMLPP,
   SERVICE_AAEM,
   SERVICE_DATA_DOWNLOAD_SMS_CB,
   SERVICE_DATA_DOWNLOAD_SMS_PP,
   SERVICE_MENU_SELECTION,
   SERVICE_CALL_CONTROL,
   SERVICE_PROACTIVE_SIM,
   SERVICE_CBMIR,
   SERVICE_BDN,
   SERVICE_EXT4,
   SERVICE_DCK,
   SERVICE_CNL,
   SERVICE_SMSR,
   SERVICE_NW_IND_ALERT,
   SERVICE_MO_SMS,
   SERVICE_GPRS,
   SERVICE_IMAGE,
   SERVICE_SOLSA,
   SERVICE_USSD,
   SERVICE_RUN_AT_CMD,
   SERVICE_PLMNWACT,
   SERVICE_OPLMNWACT,
   SERVICE_HPLMNWACT,
   SERVICE_CPBCCH,
   SERVICE_INVSCAN,
   SERVICE_ECCP,
   SERVICE_MEXE,
   SERVICE_RFU,
   SERVICE_PLMN_NAME,
   SERVICE_OPLMN_LIST,
   SERVICE_MAILBOX_DIAL_NUM,
   SERVICE_MSG_WAIT_IND,
   SERVICE_CALL_FWD_IND,
   SERVICE_SP_DSPL_INFO,
   SERVICE_MMS,
   SERVICE_EXT8,
   SERVICE_MMS_UCP,
   SERVICE_EMPTY,
   SERVICE_CSP,
   SERVICE_SST,
   SERVICE_MAILBOX_NUM,
   SERVICE_OPNAME_SHORTFORM,
   SERVICE_INFO_NUM,
   SERVICE_END,
   SERVICE_U_LOCAL_PHB,
   SERVICE_U_FDN,
   SERVICE_U_EXT2,
   SERVICE_U_SDN,
   SERVICE_U_EXT3,
   SERVICE_U_BDN,
   SERVICE_U_EXT4,
   SERVICE_U_OCI_OCT,
   SERVICE_U_ICI_ICT,
   SERVICE_U_SMS,
   SERVICE_U_SMSR,
   SERVICE_U_SMSP,
   SERVICE_U_AOC,
   SERVICE_U_CCP,
   SERVICE_U_CBMI,
   SERVICE_U_CBMIR,
   SERVICE_U_GID1,
   SERVICE_U_GID2,
   SERVICE_U_SPN,
   SERVICE_U_PLMNWACT,
   SERVICE_U_MSISDN,
   SERVICE_U_IMG,
   SERVICE_U_SOLSA,
   SERVICE_U_EMLPP,
   SERVICE_U_AAEM,
   SERVICE_U_RFU,
   SERVICE_U_GSM_ACCESS,
   SERVICE_U_DATA_DOWNLOAD_SMS_PP,
   SERVICE_U_DATA_DOWNLOAD_SMS_CB,
   SERVICE_U_CALL_CONTROL,
   SERVICE_U_SMS_CONTROL,
   SERVICE_U_RUN_AT_CMD,
   SERVICE_U_RFU_1,
   SERVICE_U_EST,
   SERVICE_U_ACL,
   SERVICE_U_DCK,
   SERVICE_U_CO_NWLIST,
   SERVICE_U_GSM_SECURITY_CTX,
   SERVICE_U_CPBCCH,
   SERVICE_U_INVSCAN,
   SERVICE_U_MEXE,
   SERVICE_U_OPLMNWACT,
   SERVICE_U_HPLMNWACT,
   SERVICE_U_EXT5,
   SERVICE_U_PLMN_NAME,
   SERVICE_U_OPLMN_LIST,
   SERVICE_U_MAILBOX_DIAL_NUM,
   SERVICE_U_MSG_WAIT_IND,
   SERVICE_U_CALL_FWD_IND,
   SERVICE_U_RFU_2,
   SERVICE_U_SP_DSPL_INFO,
   SERVICE_U_MMS,
   SERVICE_U_EXT8,
   SERVICE_U_GPRS_CALL_CONTROL,
   SERVICE_U_MMS_UCP,
   SERVICE_U_NIA,
   SERVICE_U_VGCS,
   SERVICE_U_VBS,
   SERVICE_U_PSEUDO,
   SERVICE_U_UPLMNWLAN,
   SERVICE_U_OPLMNWLAN,
   SERVICE_U_UWSIDL,
   SERVICE_U_OWSIDL,
   SERVICE_U_VGCS_SECURITY,
   SERVICE_U_VBS_SECURITY,
   SERVICE_U_WRI,
   SERVICE_U_MULTIMEDIA_MSG_STORAGE,
   SERVICE_U_GBA,
   SERVICE_U_MBMS_SECURITY,
   SERVICE_U_DATA_DOWNLOAD_USSD,
   SERVICE_U_EHPLMN,
   SERVICE_U_ADDITIONAL_TERMINAL_PROFILE,
   SERVICE_U_EHPLMNPI,
   SERVICE_U_LRPLMNSI,
   SERVICE_U_OMA_BCAST,
   SERVICE_U_GBA_LOCAL_KEY,
   SERVICE_U_TERMINAL_AP,
   SERVICE_U_SPNI,
   SERVICE_U_PNNI,
   SERVICE_U_CPIP,
   SERVICE_U_HWSIDL,
   SERVICE_U_WEHPLMNPI,
   SERVICE_U_WHPI,
   SERVICE_U_WLRPLMN,
   SERVICE_U_EPS_MM_INFO,
   SERVICE_U_ACSGL,
   SERVICE_U_CC_EPS_PDN,
   SERVICE_U_HPLMNDA,
   SERVICE_U_ECALL_DATA,
   SERVICE_U_OCSGL,
   SERVICE_U_SM_OVER_IP,
   SERVICE_U_CSG_DISPLAY,
   SERVICE_U_COMM_CTRL_IMS,
   SERVICE_U_EXT_TERMINAL_APP,
   SERVICE_U_UICC_ACCESS_IMS,
   SERVICE_U_NAS_CONFIG,
   SERVICE_U_PWS_CONFIG,
   SERVICE_U_END
}sim_service_enum;

typedef enum
{
   SERVICE_NOT_SUPPORT,
   SERVICE_SUPPORT,
   SERVICE_ALLOCATE,
   SERVICE_UNDEFINED
}sim_service_state_enum;

typedef enum
{
   SIM_NOT_READY,
   SIM_CARD_NOT_INSERTED,
   NORMAL_SIM_PRESENCE,
   TEST_SIM_PRESENCE,
   SIM_ERROR_SIM_PRESENCE
}sim_card_status_enum;

typedef enum
{
    FILE_NONE,
    FILE_MF_IDX,
    FILE_GSM_IDX,
    FILE_TELECOM_IDX,
    FILE_IRIDIUM_IDX,
    FILE_GLOBST_IDX,
    FILE_ICO_IDX,
    FILE_ACES_IDX,
    FILE_EIA_IDX,
    FILE_CTS_IDX,
    FILE_SOLSA_IDX,
    FILE_MEXE_IDX,
    FILE_GRAPHICS_IDX,
    GLOBAL_FILES_START,
    FILE_ICCID_IDX = GLOBAL_FILES_START,
    FILE_ELP_IDX,
    GLOBAL_FILES_END = FILE_ELP_IDX,
    FILE_SAI_IDX,
    FILE_SLL_IDX,
    FILE_MEXE_ST_IDX,
    FILE_ORPK_IDX,
    FILE_ARPK_IDX,
    FILE_TPRPK_IDX,
    FILE_IMG_IDX,
    FILE_LP_IDX,
    FILE_IMSI_IDX,
    FILE_KC_IDX,
    FILE_PLMNSEL_IDX,
    FILE_HPLMN_IDX,
    FILE_ACMAX_IDX,
    FILE_SST_IDX,
    FILE_ACM_IDX,
    FILE_GID1_IDX,
    FILE_GID2_IDX,
    FILE_SPN_IDX,
    FILE_PUCT_IDX,
    FILE_CBMI_IDX,
    FILE_BCCH_IDX,
    FILE_ACC_IDX,
    FILE_FPLMN_IDX,
    FILE_LOCI_IDX,
    FILE_AD_IDX,
    FILE_PHASE_IDX,
    FILE_VGCS_IDX,
    FILE_VGCSS_IDX,
    FILE_VBS_IDX,
    FILE_VBSS_IDX,
    FILE_EMLPP_IDX,
    FILE_AAEM_IDX,
    FILE_CBMID_IDX,
    FILE_ECC_IDX,
    FILE_CBMIR_IDX,
    FILE_DCK_IDX,
    FILE_CNL_IDX,
    FILE_NIA_IDX,
    FILE_KCGPRS_IDX,
    FILE_LOCIGPRS_IDX,
    FILE_SUME_IDX,
    FILE_PLMNWACT_IDX,
    FILE_OPLMNWACT_IDX,
    FILE_HPLMNACT_IDX,
    FILE_CPBCCH_IDX,
    FILE_INVSCAN_IDX,
    FILE_VM_WAIT_IDX,
    FILE_CPHS_SST_IDX,
    FILE_CF_FLAG_IDX,
    FILE_OP_STRING_IDX,
    FILE_CSP_IDX,
    FILE_CPHS_INFO_IDX,
    FILE_MAILBOX_NUM_IDX,
    FILE_OP_SHORTFORM_IDX,
    FILE_INFO_NUM_IDX,
    FILE_ADN_IDX,
    FILE_FDN_IDX,
    FILE_SMS_IDX,
    FILE_CCP_IDX,
    FILE_ECCP_IDX,
    FILE_MSISDN_IDX,
    FILE_SMSP_IDX,
    FILE_SMSS_IDX,
    FILE_LND_IDX,
    FILE_SDN_IDX,
    FILE_EXT1_IDX,
    FILE_EXT2_IDX,
    FILE_EXT3_IDX,
    FILE_BDN_IDX,
    FILE_EXT4_IDX,
    FILE_SMSR_IDX,
    FILE_CMI_IDX,
    FILE_IMG_1_IDX,
    FILE_IMG_2_IDX,
    FILE_IMG_3_IDX,
    FILE_IMG_4_IDX,
    FILE_IMG_5_IDX,
    FILE_IMG_6_IDX,
    FILE_IMG_7_IDX,
    FILE_IMG_8_IDX,
    FILE_IMG_9_IDX,
    FILE_IMG_A_IDX,
    FILE_IMG_B_IDX,
    FILE_IMG_C_IDX,
    FILE_IMG_D_IDX,
    FILE_IMG_E_IDX,
    FILE_IMG_F_IDX,

    FILE_VID_IDX,
    FILE_HZ_IDX,
    FILE_HZ_CACHE1_IDX,
    FILE_HZ_CACHE2_IDX,
    FILE_HZ_CACHE3_IDX,
    FILE_HZ_CACHE4_IDX,


    FILE_ENS_DF_7F66_IDX,
    FILE_ENS_DF_5F30_IDX,
    FILE_ENS_ACTING_HPLMN_IDX,
    FILE_ENS_TERMINAL_SUPPORT_TABLE_IDX,

    FILE_PNN_IDX,
    FILE_OPL_IDX,
    FILE_MBDN_IDX,
    FILE_EXT6_IDX,
    FILE_MBI_IDX,
    FILE_MWIS_IDX,
    FILE_CFIS_IDX,
    FILE_EXT7_IDX,
    FILE_SPDI_IDX,
    FILE_MMSN_IDX,
    FILE_EXT8_IDX,
    FILE_MMSICP_IDX,
    FILE_MMSUP_IDX,
    FILE_MMSUCP_IDX,
    SIM_TOT_FILES,
    FILE_DIR_IDX = SIM_TOT_FILES,
    FILE_ARR_IDX,
    FILE_USIM_IDX,
    FILE_U_LI_IDX,
    FILE_U_IMSI_IDX,
    FILE_U_KEYS_IDX,
    FILE_U_KEYSPS_IDX,
    FILE_U_PLMNWACT_IDX,
    FILE_U_HPPLMN_IDX,
    FILE_U_ACMMAX_IDX,
    FILE_U_UST_IDX,
    FILE_U_ACM_IDX,
    FILE_U_GID1_IDX,
    FILE_U_GID2_IDX,
    FILE_U_SPN_IDX,
    FILE_U_PUCT_IDX,
    FILE_U_CBMI_IDX,
    FILE_U_ACC_IDX,
    FILE_U_FPLMN_IDX,
    FILE_U_LOCI_IDX,
    FILE_U_AD_IDX,
    FILE_U_CBMID_IDX,
    FILE_U_ECC_IDX,
    FILE_U_CBMIR_IDX,
    FILE_U_PSLOCI_IDX,
    FILE_U_FDN_IDX,
    FILE_U_SMS_IDX,
    FILE_U_MSISDN_IDX,
    FILE_U_SMSP_IDX,
    FILE_U_SMSS_IDX,
    FILE_U_SDN_IDX,
    FILE_U_EXT2_IDX,
    FILE_U_EXT3_IDX,
    FILE_U_SMSR_IDX,
    FILE_U_ICI_IDX,
    FILE_U_OCI_IDX,
    FILE_U_ICT_IDX,
    FILE_U_OCT_IDX,
    FILE_U_EXT5_IDX,
    FILE_U_CCP2_IDX,
    FILE_U_EMLPP_IDX,
    FILE_U_AAEM_IDX,
    FILE_U_HIDDENKEY_IDX,
    FILE_U_BDN_IDX,
    FILE_U_EXT4_IDX,
    FILE_U_CMI_IDX,
    FILE_U_EST_IDX,
    FILE_U_ACL_IDX,
    FILE_U_DCK_IDX,
    FILE_U_CNL_IDX,
    FILE_U_STARTHFN_IDX,
    FILE_U_THRESHOLD_IDX,
    FILE_U_OPLMNWACT_IDX,
    FILE_U_HPLMNWACT_IDX,
    FILE_U_ARR_IDX,
    FILE_U_NETPAR_IDX,
    FILE_U_PNN_IDX,
    FILE_U_OPL_IDX,
    FILE_U_MBDN_IDX,
    FILE_U_EXT6_IDX,
    FILE_U_MBI_IDX,
    FILE_U_MWIS_IDX,
    FILE_U_CFIS_IDX,
    FILE_U_EXT7_IDX,
    FILE_U_SPDI_IDX,
    FILE_U_MMSN_IDX,
    FILE_U_EXT8_IDX,
    FILE_U_MMSICP_IDX,
    FILE_U_MMSUP_IDX,
    FILE_U_MMSUCP_IDX,
    FILE_U_NIA_IDX,
    FILE_U_VGCS_IDX,
    FILE_U_VGCSS_IDX,
    FILE_U_VBS_IDX,
    FILE_U_VBSS_IDX,
    FILE_U_VGCSCA_IDX,
    FILE_U_VBSCA_IDX,
    FILE_U_GBAP_IDX,
    FILE_U_MSK_IDX,
    FILE_U_MUK_IDX,
    FILE_U_GBANL_IDX,
    FILE_U_SOLSA_IDX,
    FILE_U_SAI_IDX,
    FILE_U_SLL_IDX,
    FILE_U_LSAD_IDX,
    FILE_U_PHONEBOOK_IDX,
    FILE_U_PBR_IDX,
    FILE_U_IAP_IDX,
    FILE_U_ADN_IDX,
    FILE_U_EXT1_IDX,
    FILE_U_PBC_IDX,
    FILE_U_GRP_IDX,
    FILE_U_AAS_IDX,
    FILE_U_GAS_IDX,
    FILE_U_ANR_IDX,
    FILE_U_SNE_IDX,
    FILE_U_CCP1_IDX,
    FILE_U_UID_IDX,
    FILE_U_PSC_IDX,
    FILE_U_CC_IDX,
    FILE_U_PUID_IDX,
    FILE_U_EMAIL_IDX,
    FILE_U_GSMACCESS_IDX,
    FILE_U_KC_IDX,
    FILE_U_KCGPRS_IDX,
    FILE_U_CPBCCH_IDX,
    FILE_U_INVSCAN_IDX,
    FILE_U_MEXE_IDX,
    FILE_U_MEXEST_IDX,
    FILE_U_ORPK_IDX,
    FILE_U_ARPK_IDX,
    FILE_U_TPRPK_IDX,
    FILE_U_TKCDF_IDX,
    FILE_U_WLAN_IDX,
    FILE_U_PSEUDO_IDX,
    FILE_U_UPLMNWLAN_IDX,
    FILE_U_OPLMNWLAN_IDX,
    FILE_U_USSIDL_IDX,
    FILE_U_OSSIDL_IDX,
    FILE_U_WRI_IDX,
    FILE_G_PHONEBOOK_IDX,
    FILE_G_PBR_IDX,
    FILE_G_IAP_IDX,
    FILE_G_ADN_IDX,
    FILE_G_EXT1_IDX,
    FILE_G_PBC_IDX,
    FILE_G_GRP_IDX,
    FILE_G_AAS_IDX,
    FILE_G_GAS_IDX,
    FILE_G_ANR_IDX,
    FILE_G_SNE_IDX,
    FILE_G_CCP1_IDX,
    FILE_G_UID_IDX,
    FILE_G_PSC_IDX,
    FILE_G_CC_IDX,
    FILE_G_PUID_IDX,
    FILE_G_EMAIL_IDX,
    FILE_MULTIMEDIA_IDX,
    FILE_MML_IDX,
    FILE_MMDF_IDX,
    FILE_U_EHPLMN_IDX,
    FILE_U_EHPLMNPI_IDX,
    FILE_U_LRPLMNSI_IDX,

    FILE_U_CSP_IDX,

    FILE_U_ENS_RAT_IDX,
    FILE_U_ENS_TERMINAL_SUPPORT_TABLE_IDX,
    FILE_U_ENS_DF_7F66_IDX,
    FILE_U_ENS_DF_5F30_IDX,
    FILE_U_ENS_ACTING_HPLMN_IDX,

    FILE_U_HNB_IDX,
    FILE_U_ACSGL_IDX,
    FILE_U_CSGT_IDX,
    FILE_U_HNBN_IDX,
    FILE_U_OCSGL_IDX,

    FILE_U_EPSLOCI_IDX,
    FILE_U_EPSNSC_IDX,

    FILE_PSISMSC_IDX,
    FILE_ISIM_IDX,
    FILE_I_IST_IDX,
    FILE_I_IMPI_IDX,
    FILE_I_DOMAIN_IDX,
    FILE_I_IMPU_IDX,
    FILE_I_AD_IDX,
    FILE_I_ARR_IDX,
    FILE_I_PCSCF_IDX,
    FILE_I_GBAP_IDX,
    FILE_I_GBANL_IDX,
    FILE_I_NAFKCA_IDX,
    FILE_I_UICCIARI_IDX,
    FILE_I_SMS_IDX,
    FILE_I_SMSS_IDX,
    FILE_I_SMSR_IDX,
    FILE_I_SMSP_IDX,



    FILE_U_NAFKCA_IDX,
    FILE_U_SPNI_IDX,
    FILE_U_PNNI_IDX,
    FILE_U_NCPIP_IDX,


    FILE_U_UFC_IDX,
    FILE_U_UICCIARI_IDX,
    FILE_U_NASCONFIG_IDX,
    FILE_U_PWS_IDX,



    FILE_MMSS_IDX,
    FILE_MLPL_IDX,
    FILE_MSPL_IDX,
    FILE_MMSSMODE_IDX,
    FILE_CSIM_IDX,
    FILE_C_IMSI_M_IDX,


    UICC_TOTAL_FILES
}sim_file_index_enum;

typedef enum
{
   TYPE_SIM_INIT_AND_FULL_FILE_CHANGE,
   TYPE_FILE_CHANGE,
   TYPE_SIM_INIT_AND_FILE_CHANGE,
   TYPE_SIM_INIT,
   TYPE_SIM_RESET,
   TYPE_USIM_APPLICATION_RESET,
   TYPE_USIM_SESSION_RESET,
   TYPE_STEERING_OF_ROAMING,
   TYPE_NON_SAT_REFRESH = 0xFE
}sat_refresh_type_enum;

typedef enum
{
   PROTOCOL_1 = 0x00,
   PROTOCOL_2 = 0x01,
   PROTOCOL_3 = 0x02,
   PROTOCOL_4 = 0x03
}protocol_id_enum;

typedef enum
{
   SIM1 = 0x00,
   SIM2 = 0x01,
   SIM3 = 0x02,
   SIM4 = 0x03
}sim_interface_enum;

typedef enum
{
    SIM_INFO_ATR,
    SIM_INFO_CDMA,
    SIM_INFO_MAX
}sim_query_info_enum;

typedef enum
{
   SIM_ECALL_NONE,
   SIM_ECALL_ONLY,
   SIM_ECALL_AND_NORMAL,
   SIM_ECALL_TEST_DISABLE
}sim_ecall_mode_enum;

typedef enum
{
    GSMCDMA_DUALSIM_DISCONNECT,
    GSMCDMA_DUALSIM_CONNECT
}gsmcdma_dualsim_mode_enum;

typedef enum
{
    DUALSIM_CMD_SUCCESS,
    DUALSIM_CMD_FAIL_RESET_ABNORMAL,
    DUALSIM_CMD_FAIL_CHVINFO_ABNORMAL,
    DUALSIM_CMD_FAIL_DISCONNECT_NOT_ALLOWED,
    DUALSIM_CMD_FAIL_CONNECT_NOT_ALLOWED,
    DUAKSIM_CMD_FAIL_UNDEFINED_OPERATION,
    DUALSIM_CMD_FAIL_PUK_STATE
}gsmcdma_dualsim_result_enum;

typedef enum
{
   VERIFY,
   DISABLE,
   ENABLE,
   CHANGE,
   UNBLOCK,
   SUPER_VERIFY,
}sim_security_operation_enum;

typedef enum
{
   TYPE_ONLY_DIGIT,
   TYPE_SMS_DEFAULT_SET,
   TYPE_UCS2,
   TYPE_YES_NO,
   TYPE_ONLY_DIGIT_UCS2
}sat_input_type_enum;

typedef enum
{
   SAT_CMD_PERFORMED_SUCCESSFULLY= 0,
   SAT_CMD_PERFORMED_WITH_PARTIAL_COMPREHENSION= 0X01,
   SAT_CMD_PERFORMED_WITH_MISSING_INFO= 0X02,
   SAT_REFRESH_PERFORMED_WITH_ADDITIONAL_EF_READ= 0X03,
   SAT_CMD_PERFORMED_BUT_ICON_COULD_NOT_DSPL= 0X04,
   SAT_CMD_PERFORMED_BUT_MODIFIED_CC_BY_SIM= 0X05,
   SAT_CMD_PERFORMED_LIMITED_SERVICE= 0X06,
   SAT_CMD_PERFORMED_WITH_MODIFIED= 0X07,
   SAT_PROACTIVE_CMD_TERMINATED_BY_USER= 0X10,
   SAT_BACKWARD_MOVE_IN_PROACTIVE_SESSION_BY_USER= 0X11,
   SAT_NO_RESPONSE_FROM_USER= 0X12,
   SAT_HELP_INFO_REQUEST_BY_USER= 0X13,
   SAT_USSD_SS_TRANSACTION_TERMINATION_BY_USER= 0X14,
   SAT_ME_CURRENTLY_UNABLE_TO_PROCESS_CMD= 0X20,
   SAT_NET_CURRENTLY_UNABLE_TO_PROCESS_CMD= 0X21,
   SAT_USER_DID_NOT_ACCEPT_THE_PROACTIVE_CMD= 0X22,
   SAT_USER_CLEAR_DOWN_CALL_BEFORE_CONNECTION_RELEASE= 0X23,
   SAT_ACTION_IN_CONTRACTION_WITH_CURRENT_TIMER_STATE= 0X24,
   SAT_INTERACTION_WITH_CALL_CTRL_BY_SIM_TEMPORARY_ERROR= 0X25,
   SAT_LAUNCH_BROWER_GENERIC_ERROR_CODE= 0X26,
   SAT_CMD_BEYOND_ME_CAP= 0X30,
   SAT_CMD_TYPE_NOT_UNDERSTAND_BY_ME= 0X31,
   SAT_CMD_DATA_NOT_UNDERSTAND_BY_ME= 0X32,
   SAT_CMD_NUMBER_NOT_KNOWN_BY_ME= 0X33,
   SAT_SS_RETURN_ERROR= 0X34,
   SAT_SMS_RP_ERROR= 0X35,
   SAT_ERROR_REQUIRED_VALUE_MISSING= 0X36,
   SAT_USSD_RETURN_ERROR= 0X37,
   SAT_MULTICARD_CMD_ERROR= 0X38,
   SAT_INTERACTION_WITH_CALL_CTRL_BY_SIM_PERMANENT_ERROR= 0X39,
   SAT_BEARER_INDEPENDENT_PROTOCOL_ERROR= 0X3A
}sat_terminal_res_enum;

typedef enum
{
   SAT_NO_SPECIFIC_CAUSE,
   SAT_SCREEN_BUSY,
   SAT_ME_CURRENTLY_BUSY_ON_CALL,
   SAT_ME_CURRENTLY_BUSY_ON_SS,
   SAT_NO_SERVICE,
   SAT_ACCESS_CTRL_CLASS_BAR,
   SAT_RR_NOT_BRANTED,
   SAT_NOT_IN_SPEECH_MODE,
   SAT_ME_CURRENTLY_BUSY_ON_USSD,
   SAT_ME_CURRENTLY_BUSY_ON_DTMF
}sat_additional_info_for_res_enum;

typedef enum
{
   SAT_LAUNCH_BROWSER_IF_NOT_ALREADY_LAUNCHED = 0x00,
   SAT_USE_EXISTING_BROWSER = 0x02,
   SAT_CLOSE_EXISTING_BROWSER_AND_LAUNCH_NEW = 0x03
}sat_launch_browser_mode_enum;

typedef enum
{
   SAT_LAUNCH_BROWSER_NO_SPECIFIC_CAUSE,
   SAT_LAUNCH_BROWSER_BEARER_UNAVALIABLE,
   SAT_LAUNCH_BROWSER_BROWSER_UNAVALIABLE,
   SAT_LAUNCH_BROWSER_ME_UNABLE_TO_READ_PROVISION_DATA
}sat_launch_browser_additional_info_for_res_enum;

typedef enum
{
   SAT_BROWSER_USER_TERMINATION,
   SAT_BROWSER_ERROR_TERMINATION
}sat_browser_termination_mode_enum;


typedef enum
{
   SETUP_CALL_IF_NO_ANOTHER_CALL,
   SETUP_CALL_WITH_REDIAL_IF_NO_ANOTHER_CALL,
   SETUP_CALL_PUT_ANOTHER_HOLD,
   SETUP_CALL_WITH_REDIAL_PUT_ANOTHER_HOLD,
   SETUP_CALL_DISCON_ANOTHER,
   SETUP_CALL_WITH_REDIAL_DISCON_ANOTHER
}sat_setup_call_condition_enum;

typedef enum
{
   SAT_OPERATION_CHANGED_BY_SIM,

   SAT_NUM_CHANGED_CALL_TO_CALL,
   SAT_NUM_CHANGED_CALL_TO_SS,
   SAT_NUM_CHANGED_CALL_TO_USSD,
   SAT_NUM_CHANGED_SS_TO_CALL,
   SAT_NUM_CHANGED_SS_TO_SS,
   SAT_NUM_CHANGED_SS_TO_USSD,
   SAT_NUM_CHANGED_USSD_TO_CALL,
   SAT_NUM_CHANGED_USSD_TO_SS,
   SAT_NUM_CHANGED_USSD_TO_USSD,
   SAT_NUM_CHANGED_SMS,

   SAT_CALL_NOT_ALLOWED,
   SAT_SS_NOT_ALLOWED,
   SAT_USSD_NOT_ALLOWED,
   SAT_SMS_NOT_ALLOWED,
   SIM_MEM_PROBLEM,
   SIM_SECRET_CODE_REJ,
   SIM_TECH_PROBLEM,
   SAT_ALLOWED_NO_CHANGE
}sat_mmi_info_type_enum;

typedef enum
{
   SAT_TONE_DIAL=0x01,
   SAT_TONE_CALLED_SUBSCRIBER_BUSY=0x02,
   SAT_TONE_CONGESTION=0x03,
   SAT_TONE_RADIO_PATH_ACK=0x04,
   SAT_TONE_RADIO_NO_PATH=0x05,
   SAT_TONE_ERROR=0x06,
   SAT_TONE_CALL_WAITING=0x07,
   SAT_TONE_RING=0x08,
   SAT_TONE_GENERAL_BEEP=0x10,
   SAT_TONE_POS_ACK=0x11,
   SAT_TONE_NEG_ACK=0x12
}sat_tone_id_enum;

typedef enum
{

    SIM_RESET_SMART_DETECTION,
    SIM_RESET_USIM_PREFER,
    SIM_RESET_SIM_PREFER
} sim_reset_method_enum;

typedef enum
{
    SAT_NW_REJ_LOCATION_INFO,
    SAT_NW_REJ_ROUTE_AREA_ID,
    SAT_NW_REJ_TRACK_AREA_ID
} sat_nw_rej_info_enum;


typedef enum
{
    SAT_NW_REJ_TYPE_NORMAL_LU,
    SAT_NW_REJ_TYPE_PERIODIC_LU,
    SAT_NW_REJ_TYPE_IMSI_ATTACH,
    SAT_NW_REJ_TYPE_GPRS_ATTACH,
    SAT_NW_REJ_TYPE_COMBINED_ATTACH,

    SAT_NW_REJ_TYPE_RAU,
    SAT_NW_REJ_TYPE_COMBINED_RA_LAU,
    SAT_NW_REJ_TYPE_COMBINED_RA_LAU_WITH_IMSI,
    SAT_NW_REJ_TYPE_PERIODIC_RAU,

    SAT_NW_REJ_TYPE_EPS_ATTACH,
    SAT_NW_REJ_TYPE_COMBINED_EPS_IMSI_ATTACH,
    SAT_NW_REJ_TYPE_TAU,
    SAT_NW_REJ_TYPE_COMBINED_TA_LAU,
    SAT_NW_REJ_TYPE_COMBINED_TA_LAU_WITH_IMSI,
    SAT_NW_REJ_TYPE_PERIODIC_TAU
} sat_nw_rej_type_enum;


typedef enum
{
    SAT_NMR_UTRAN_INTRA_FRQ = 0x01,
    SAT_NMR_UTRAN_INTER_FRQ = 0x02,
    SAT_NMR_UTRAN_INTRAT_GSM = 0x03,
    SAT_NMR_UTRAN_INTRAT_EUTRAN = 0x04,
    SAT_NMR_EUTRAN_INTRA_FRQ = 0x05,
    SAT_NMR_EUTRAN_INTER_FRQ = 0x06,
    SAT_NMR_EUTRAN_INTRAT_GSM = 0x07,
    SAT_NMR_EUTRAN_INTRAT_UTRAN = 0x08
} sat_nmr_qual_enum;


typedef enum
{
    SAT_PROFILE_DL_MT_DEFAULT,
    SAT_PROFILE_DL_MT_TE,
    SAT_PROFILE_DL_HALT,
    SAT_PROFILE_DL_DISABLE = 0xFF
}sat_profile_download_enum;

typedef enum
{
    SAT_PROFILE_ACT_QUERY,
    SAT_PROFILE_ACT_ENABLE_TE_FACILITY,
    SAT_PROFILE_ACT_MT_DEFAULT,
    SAT_PROFILE_ACT_MT_TE,


    SAT_PROFILE_ACT_DL_ME_DEFAULT = 0xD0,
    SAT_PROFILE_ACT_WAIT_ENABLE_TE,
    SAT_PROFILE_ACT_HALT,
    SAT_PROFILE_ACT_DISABLE = 0xFF
}sat_profile_activate_enum;
# 309 "interface/modem/general/ps_public_struct.h" 2

# 1 "./mtk_rel/HCT6737M_65_N/LWG_DSDS/BASIC/mcd/mcd_l4_common.h" 1
# 57 "./mtk_rel/HCT6737M_65_N/LWG_DSDS/BASIC/mcd/mcd_l4_common.h"
extern kal_uint32 l4_pun_src_buff[180];
extern kal_uint32 l4_pun_dest_buff[200];
typedef struct _l4_addr_bcd_struct
{
 kal_uint8 addr_length;
 kal_uint8 addr_bcd[41];
} l4_addr_bcd_struct;


typedef struct _l4_name_struct
{
 kal_uint8 name_length;
 kal_uint8 name_dcs;
 kal_uint8 name[42];
} l4_name_struct;


typedef struct _l4_csd_name_struct
{
 kal_uint8 name_length;
 kal_uint8 name_dcs;
 kal_uint8 name[32];
} l4_csd_name_struct;
# 311 "interface/modem/general/ps_public_struct.h" 2
# 356 "interface/modem/general/ps_public_struct.h"
typedef struct l4c_result_struct
{
   kal_uint8 flag;
   kal_uint16 cause;

} l4c_result_struct;

typedef struct
{
   kal_uint32 total_rx_data;
   kal_uint32 total_tx_data;
   kal_uint32 last_rx_data;
   kal_uint32 last_tx_data;
} l4c_gprs_statistics_info_struct;

typedef struct
{
    kal_uint8 apn[100];
} l4c_tcm_acl_entry_struct;


typedef struct {
    kal_uint16 protocol_id;
    kal_uint8 protocol_config_len;
    kal_uint8 protocol_config[(42 +33 +6)];
} config_option_struct;

typedef struct
{
    kal_uint8 context_id;
    kal_uint8 apn_length;
    kal_uint8 apn [ 100 ];
    kal_uint8 dcomp_algo;
    kal_uint8 hcomp_algo;
    pdp_addr_type_enum pdp_type;
    pdp_addr_len_enum pdp_addr_len;
    kal_uint8 addr_val[ 16 ];
    kal_uint8 ipv4addralloc;
 kal_uint8 request_type;
 kal_uint8 p_cscf_discovery;
 kal_uint8 im_cn_signalling_flag;
} l4c_prim_pdp_info_struct;

typedef struct
{
    kal_uint8 context_id;
    kal_uint8 prim_context_id;
    kal_uint8 dcomp_algo;
    kal_uint8 hcomp_algo;

 kal_uint8 im_cn_signalling_flag;
} l4c_sec_pdp_info_struct;
# 439 "interface/modem/general/ps_public_struct.h"
typedef struct {
    kal_uint8 pfi;
    kal_uint8 epi;
    kal_uint8 src_addr_sb_net_mask_len;
    kal_uint8 src_addr_sb_net_mask[32];
    kal_bool prot_number_present;
    kal_uint8 prot_number_next_hdr;
    kal_uint8 dst_port_len;
    kal_uint16 dst_port_range[2];
    kal_uint8 src_port_len;
    kal_uint16 src_port_range[2];
    kal_bool ipsec_spi_present;
    kal_uint32 ipsec_spi;
    kal_uint8 tos_len;
    kal_uint8 tos_traffic_class_mask[2];
    kal_bool flow_label_present;
    kal_uint32 flow_label;
} l4c_pf_struct_only_for_mmi;


typedef struct
{
   kal_uint8 context_id;
   kal_uint8 tot_pf_count;
   l4c_pf_struct_only_for_mmi pf[8];
} l4c_tft_struct_only_for_mmi;


typedef struct
{
    atci_qos_enum qos_type;
    kal_uint8 context_id;
    delay_class_enum delay_class;
    reliability_class_enum reliability_class;
    peak_throughput_class peak_throughput;
    precedence_class_enum precedence_class;
    mean_throughput_enum mean_throughput;
} l4c_qos_struct;

typedef struct
{
    atci_qos_enum qos_type;
    kal_uint8 context_id;
    kal_uint8 traffic_class;
    kal_uint8 delivery_order;
    kal_uint8 delivery_of_err_sdu;
    kal_uint8 max_sdu_size;
    kal_uint8 max_bitrate_up_lnk;
    kal_uint8 max_bitrate_down_lnk;
    kal_uint8 residual_bit_err_rate;
    kal_uint8 sdu_err_ratio;
    kal_uint8 transfer_delay;
    kal_uint8 traffic_hndl_priority;
    kal_uint8 guarntd_bit_rate_up_lnk;
    kal_uint8 guarntd_bit_rate_down_lnk;
    kal_uint8 signalling_indication;
    kal_uint8 source_statistics_descriptor;
    kal_uint8 ext_max_bitrate_down_lnk;
    kal_uint8 ext_guarntd_bit_rate_down_lnk;
    kal_uint8 ext_max_bitrate_up_lnk;
    kal_uint8 ext_guarntd_bit_rate_up_lnk;
} l4c_eqos_struct;


typedef struct
{
    kal_uint8 context_id;
    kal_uint8 qci;
    kal_bool max_bitrate_present;
    kal_uint8 max_bitrate_up_lnk;
    kal_uint8 max_bitrate_down_lnk;
    kal_uint8 ext_max_bitrate_up_lnk;
    kal_uint8 ext_max_bitrate_down_lnk;
    kal_uint8 ext2_max_bitrate_up_lnk;
    kal_uint8 ext2_max_bitrate_down_lnk;
    kal_bool guarntd_bit_rate_present;
    kal_uint8 guarntd_bit_rate_up_lnk;
    kal_uint8 guarntd_bit_rate_down_lnk;
    kal_uint8 ext_guarntd_bit_rate_up_lnk;
    kal_uint8 ext_guarntd_bit_rate_down_lnk;
    kal_uint8 ext2_guarntd_bit_rate_up_lnk;
    kal_uint8 ext2_guarntd_bit_rate_down_lnk;
} l4c_eps_qos_struct;


typedef struct
{
    kal_uint8 qci;
    kal_uint8 unused1;
    kal_uint8 unused2;
    kal_uint8 unused3;
    kal_uint8 max_bitrate_up_lnk;
    kal_uint8 max_bitrate_down_lnk;
    kal_uint8 guarntd_bit_rate_up_lnk;
    kal_uint8 guarntd_bit_rate_down_lnk;
    kal_uint8 ext_max_bitrate_up_lnk;
    kal_uint8 ext_max_bitrate_down_lnk;
    kal_uint8 ext_guarntd_bit_rate_up_lnk;
    kal_uint8 ext_guarntd_bit_rate_down_lnk;
    kal_uint8 ext2_max_bitrate_up_lnk;
    kal_uint8 ext2_max_bitrate_down_lnk;
    kal_uint8 ext2_guarntd_bit_rate_up_lnk;
    kal_uint8 ext2_guarntd_bit_rate_down_lnk;
} tcm_eps_qos_struct;

typedef struct
{
    kal_uint8 authentication_type;
    kal_uint8 user_name[42];
    kal_uint8 password[33];
    kal_uint8 dns[4];
    kal_uint8 sec_dns[4];
    kal_uint8 apn[100];
    kal_uint8 apn_length;


    kal_uint8 dcomp_algo;
    kal_uint8 hcomp_algo;
    kal_uint8 pdp_type;
    kal_uint8 pdp_addr_len;
    kal_uint8 pdp_addr_val[4];
} l4c_gprs_account_info_struct;

typedef struct
{
   kal_uint8 call_id;
   kal_uint8 call_state;
   kal_uint8 mpty;
   kal_uint8 number[81];
} l4c_call_list_entry_struct;

typedef struct
{
   kal_uint8 length;
   l4c_call_list_entry_struct list[7];
} l4c_call_list_struct;

typedef struct
{
   kal_uint8 type;
   kal_uint8 length;
   kal_uint8 number[81];
} l4c_number_struct;

typedef struct
{
   kal_uint8 type;
   kal_uint8 length;
   kal_uint8 number[81];
} l4c_sub_addr_struct;

typedef struct {
   kal_uint8 bs_code;
   kal_uint8 ss_status;
   kal_uint8 no_reply_timer;
   kal_uint8 subaddress_flag;
   kal_char address[81];
   kal_char subaddress[41];
} forwarding_list_struct;

typedef struct {
   kal_uint8 bs_code;
   kal_uint8 ss_status;
} barring_list_struct;

typedef struct {
   kal_uint8 ss_status;
   kal_uint8 subaddress_flag;
   l4_addr_bcd_struct address;
   l4_addr_bcd_struct subaddress;
   kal_uint8 bs_code;
} ccbs_list_struct;

typedef struct
{
    kal_bool cug_flag;
    kal_uint8 clir_flag;
    kal_uint8 call_type;
    csmss_string_op_enum opcode;
    l4c_number_struct addr;
} l4c_ss_string_info_struct;

typedef struct {
    kal_uint8 icon_attr;
    kal_uint8 icon_id;
} sat_icon_struct;

typedef struct {
    kal_uint8 length;
    kal_uint8 procomm[256];
    rsat_config_enum is_wait_for_rsp;
} sat_procomm_struct;

typedef struct {
    kal_uint8 p_class;
    kal_uint8 d_class;
    kal_uint8 r_class;
    kal_uint8 peak_rate;
    kal_uint8 mean_rate;
    kal_uint8 proto_type;
} sat_gprs_bearer_para_struct;

typedef struct {
    kal_uint8 speed;
    kal_uint8 service_name;
    kal_uint8 ce;
} sat_csd_bearer_para_struct;



typedef struct L4C_SS_Ext_GeographicalInformation
{
   kal_uint8 numOctets;
   kal_uint8 stringData[20];
}
L4C_SS_Ext_GeographicalInformation;


typedef struct L4C_SS_DecipheringKeys
{
   kal_uint8 numOctets;
   kal_uint8 stringData[15];
}
L4C_SS_DecipheringKeys;


typedef struct L4C_SS_Add_GeographicalInformation
{
   kal_uint8 numOctets;
   kal_uint8 stringData[91];
}
L4C_SS_Add_GeographicalInformation;
# 681 "interface/modem/general/ps_public_struct.h"
typedef struct L4C_SS_DeferredLocationEventType
{
   kal_uint8 numBits;
   kal_uint8 stringData[2];
}
L4C_SS_DeferredLocationEventType;


typedef struct L4C_SS_AddressString
{
   kal_uint8 numOctets;
   kal_uint8 stringData[20];
}
L4C_SS_AddressString;

typedef L4C_SS_AddressString L4C_SS_ISDN_AddressString;

typedef struct
{
 kal_uint32 valueLen;
 kal_uint8 *value;
}L4C_LCS_applib2_UnKnowExtensionItem;

typedef struct
{
 kal_uint32 valueLen;
 L4C_LCS_applib2_UnKnowExtensionItem *value;
}L4C_LCS_applib2_UnKnowExtensionItemArray;


typedef struct L4C_SS_PrivateExtension
{
   L4C_LCS_applib2_UnKnowExtensionItemArray UnKnowItem;
}
L4C_SS_PrivateExtension;


typedef struct L4C_SS_PrivateExtensionList
{
   kal_uint8 numElements;

   L4C_SS_PrivateExtension element[10];
}
L4C_SS_PrivateExtensionList;


typedef struct L4C_SS_ExtensionContainer
{
   kal_uint8 validity;




   L4C_SS_PrivateExtensionList privateExtensionList;
}
L4C_SS_ExtensionContainer;


typedef struct L4C_SS_USSD_DataCodingScheme
{
   kal_uint8 numOctets;
   kal_uint8 stringData[1];
}
L4C_SS_USSD_DataCodingScheme;


typedef struct L4C_SS_USSD_String
{
   kal_uint8 numOctets;
   kal_uint8 stringData[160];
}
L4C_SS_USSD_String;


typedef L4C_SS_USSD_String L4C_SS_NameString;


typedef L4C_SS_USSD_String L4C_SS_RequestorIDString;


typedef struct L4C_SS_LCSClientName
{
   kal_uint8 validity;



   L4C_SS_USSD_DataCodingScheme dataCodingScheme;
   L4C_SS_NameString nameString;

   kal_uint8 lcs_FormatIndicator;
}
L4C_SS_LCSClientName;


typedef struct L4C_SS_LCSRequestorID
{
   kal_uint8 validity;



   L4C_SS_USSD_DataCodingScheme dataCodingScheme;
   L4C_SS_RequestorIDString requestorIDString;

   kal_uint8 lcs_FormatIndicator;
}
L4C_SS_LCSRequestorID;


typedef L4C_SS_USSD_String L4C_SS_LCSCodewordString;


typedef struct L4C_SS_LCSCodeword
{
   L4C_SS_USSD_DataCodingScheme dataCodingScheme;
   L4C_SS_LCSCodewordString lcsCodewordString;
}
L4C_SS_LCSCodeword;


typedef kal_uint8 L4C_SS_LCSServiceTypeID;


typedef kal_uint16 L4C_SS_AgeOfLocationInformation;


typedef struct L4C_SS_LocationNotificationRes
{
   kal_uint8 validity;



   kal_uint8 verificationResponse;
}
L4C_SS_LocationNotificationRes;


typedef struct L4C_SS_LCS_ReferenceNumber
{
   kal_uint8 numOctets;
   kal_uint8 stringData[1];
}
L4C_SS_LCS_ReferenceNumber;


typedef struct L4C_SS_GSN_Address
{
   kal_uint8 numOctets;
   kal_uint8 stringData[17];
}
L4C_SS_GSN_Address;


typedef struct L4C_SS_LCS_AreaEventReportArg
{
   kal_uint8 validity;



   L4C_SS_LCS_ReferenceNumber referenceNumber;
   L4C_SS_GSN_Address h_gmlc_address;
   L4C_SS_GSN_Address r_gmlc_address;
}
L4C_SS_LCS_AreaEventReportArg;

typedef struct L4C_SS_LCS_AreaEventCancellationArg
{
   L4C_SS_LCS_ReferenceNumber referenceNumber;
   L4C_SS_GSN_Address h_gmlc_address;
}
L4C_SS_LCS_AreaEventCancellationArg;


typedef struct L4C_SS_AreaIdentification
{
   kal_uint8 numOctets;
   kal_uint8 stringData[7];
}
L4C_SS_AreaIdentification;


typedef struct L4C_SS_Area
{
   kal_uint8 areaType;
   L4C_SS_AreaIdentification areaIdentification;
}
L4C_SS_Area;


typedef struct L4C_SS_AreaList
{
   kal_uint8 numElements;

   L4C_SS_Area element[10];
}
L4C_SS_AreaList;


typedef struct L4C_SS_AreaDefinition
{
   L4C_SS_AreaList areaList;
}
L4C_SS_AreaDefinition;


typedef kal_uint16 L4C_SS_IntervalTime;


typedef struct L4C_SS_AreaEventInfo
{
   kal_uint8 validity;




   L4C_SS_AreaDefinition areaDefinition;
   kal_uint8 occurrenceInfo;
   L4C_SS_IntervalTime intervalTime;
}
L4C_SS_AreaEventInfo;


typedef struct L4C_SS_LCS_AreaEventRequestArg
{
   kal_uint8 validity;



   L4C_SS_LCS_ReferenceNumber referenceNumber;
   L4C_SS_GSN_Address h_gmlc_address;
   L4C_SS_GSN_Address r_gmlc_address;
   L4C_SS_DeferredLocationEventType deferredLocationEventType;
   L4C_SS_AreaEventInfo areaEventInfo;
}
L4C_SS_LCS_AreaEventRequestArg;


typedef struct L4C_SS_ResponseTime
{
   kal_uint8 responseTimeCategory;
}
L4C_SS_ResponseTime;


typedef struct L4C_SS_Vertical_Accuracy
{
   kal_uint8 numOctets;
   kal_uint8 stringData[1];
}
L4C_SS_Vertical_Accuracy;


typedef struct L4C_SS_Horizontal_Accuracy
{
   kal_uint8 numOctets;
   kal_uint8 stringData[1];
}
L4C_SS_Horizontal_Accuracy;


typedef struct L4C_SS_LCS_QoS
{
   kal_uint8 validity;







   L4C_SS_Horizontal_Accuracy horizontal_accuracy;
   kal_int8 verticalCoordinateRequest;
   L4C_SS_Vertical_Accuracy vertical_accuracy;
   L4C_SS_ResponseTime responseTime;
   L4C_SS_ExtensionContainer extensionContainer;
}
L4C_SS_LCS_QoS;
# 973 "interface/modem/general/ps_public_struct.h"
typedef struct L4C_SS_SupportedGADShapes
{
   kal_uint8 numBits;
   kal_uint8 stringData[2];
}
L4C_SS_SupportedGADShapes;


typedef struct L4C_SS_GPSAssistanceData
{
   kal_uint8 numOctets;
   kal_uint8 stringData[38];
}
L4C_SS_GPSAssistanceData;


typedef struct L4C_SS_LCSClientExternalID
{
   kal_uint8 validity;




   L4C_SS_ISDN_AddressString externalAddress;
   L4C_SS_ExtensionContainer extensionContainer;
}
L4C_SS_LCSClientExternalID;


typedef struct L4C_SS_LocationType
{
   kal_uint8 validity;



   kal_uint8 locationEstimateType;

   L4C_SS_DeferredLocationEventType deferredLocationEventType;
}
L4C_SS_LocationType;


typedef struct L4C_SS_LCS_MOLRArg
{
   kal_uint16 validity;
# 1030 "interface/modem/general/ps_public_struct.h"
   kal_uint8 molr_Type;
   kal_uint8 locationMethod;
   L4C_SS_LCS_QoS lcs_QoS;
   L4C_SS_LCSClientExternalID lcsClientExternalID;
   L4C_SS_ISDN_AddressString mlc_Number;
   L4C_SS_GPSAssistanceData gpsAssistanceData;

   L4C_SS_SupportedGADShapes supportedGADShapes;

   L4C_SS_LCSServiceTypeID lcsServiceTypeID;
   L4C_SS_AgeOfLocationInformation ageOfLocationInfo;
   L4C_SS_LocationType locationType;
   kal_uint8 pseudonymIndicator;
}
L4C_SS_LCS_MOLRArg;


typedef struct L4C_SS_LocationNotificationArg
{
   kal_uint8 validity;







   kal_uint8 notificationType;
   L4C_SS_LocationType locationType;
   L4C_SS_LCSClientExternalID lcsClientExternalID;
   L4C_SS_LCSClientName lcsClientName;

   L4C_SS_LCSRequestorID lcsRequestorID;
   L4C_SS_LCSCodeword lcsCodeword;
   L4C_SS_LCSServiceTypeID lcsServiceTypeID;
}
L4C_SS_LocationNotificationArg;


typedef struct L4C_SS_LCS_MOLRRes
{
   kal_uint8 validity;





   L4C_SS_Ext_GeographicalInformation locationEstimate;
   L4C_SS_DecipheringKeys decipheringKeys;

   L4C_SS_Add_GeographicalInformation add_LocationEstimate;
}
L4C_SS_LCS_MOLRRes;



typedef struct {

    kal_uint32 PWM1_freq_Level_Info[5];
 kal_uint32 PWM1_duty_Level_Info[5];
 kal_uint32 PWM2_freq_Level_Info[5];
 kal_uint32 PWM2_duty_Level_Info[5];
 kal_uint32 PWM3_freq_Level_Info[5];
 kal_uint32 PWM3_duty_Level_Info[5];

 kal_uint8 MainLCD_Contrast_Level_Info[15];
 kal_uint8 MainLCD_Bias_Level_Info[5];
 kal_uint8 MainLCD_Linerate_Level_Info[5];
 kal_uint8 MainLCD_Temp_Level_Info[5];

 kal_uint8 SubLCD_Contrast_Level_Info[15];
 kal_uint8 SubLCD_Bias_Level_Info[5];
 kal_uint8 SubLCD_Linerate_Level_Info[5];
 kal_uint8 SubLCD_Temp_Level_Info[5];

 kal_uint32 Battery_Level_Info[10];





}
l4c_hw_profile_struct;

typedef struct {
    kal_uint8 rtc_sec;
    kal_uint8 rtc_min;
    kal_uint8 rtc_hour;
    kal_uint8 rtc_day;
    kal_uint8 rtc_mon;
    kal_uint8 rtc_wday;
    kal_uint8 rtc_year;
} rtc_format_struct;

typedef struct {
    kal_uint8 alarm_format;
    kal_uint8 alarm_index;
    kal_uint8 type;
    kal_uint8 text[30];
    kal_uint8 recurr;
    rtc_format_struct data_time;
} rtc_alarm_info_struct;

typedef struct mmi_at_alarm_info_struct
{
   kal_uint8 alarm_index;
   kal_uint8 recurr;
   rtc_format_struct date_time;
} mmi_at_alarm_info_struct;

typedef enum{
    VT_EM_REVERSE_INVALID = -1,
    VT_EM_REVERSE_DATA = 0,
    VT_EM_REVERSE_NULL
}vt_em_reverse_channel_data_type;

typedef enum{
    VT_EM_AL_INVALID = -1,
    VT_EM_AL2_WITH_SEQUENCE_NUMBER = 0,
    VT_EM_AL2_WITHOUT_SEQUENCE_NUMBER,
    VT_EM_AL3_CONTROL_FIELD_SIZE_0,
    VT_EM_AL3_CONTROL_FIELD_SIZE_1,
    VT_EM_AL3_CONTROL_FIELD_SIZE_2
}vt_em_al_choice;

typedef enum{
    VT_EM_MUX_LEVEL_INVALID = -1,
    VT_EM_MUX_LEVEL_0 = 0,
    VT_EM_MUX_LEVEL_1,
    VT_EM_MUX_LEVEL_1_WITH_DOUBLE_FLAG,
    VT_EM_MUX_LEVEL_2,
    VT_EM_MUX_LEVEL_2_WITH_OPTIONAL_HEADER,
    VT_EM_MUX_LEVEL_3,
    VT_EM_MUX_LEVEL_3_WITH_OPTIONAL_HEADER
}vt_em_mux_level_choice;

typedef enum{
    VT_EM_WNSRP_INVALID = -1,
    VT_EM_WNSRP_OFF = 0,
    VT_EM_WNSRP_ON
}vt_em_wnsrp_choice;

typedef enum{
    VT_EM_CODEC_INVALID = -1,
    VT_EM_CODEC_MPEG4_H263 = 0,
    VT_EM_CODEC_H263_MPEG4
}vt_em_video_codec_preference_choice;

typedef enum{
    VT_EM_AUTO_DROP_INVALID = -1,
    VT_EM_DISABLE_AUTO_DROP_IF_CHANNEL_FAIL = 0,
    VT_EM_ENABLE_AUTO_DROP_IF_CHANNEL_FAIL
}vt_em_auto_drop_if_channel_fail_choice;

typedef enum{
    VT_EM_TERMINAL_TYPE_INVALID = -1,
    VT_EM_TERMINAL_TYPE_NORMAL = 0,
    VT_EM_TERMINAL_TYPE_MASTER,
    VT_EM_TERMINAL_TYPE_SLAVE
}vt_em_terminal_type_choice;

typedef struct{
    vt_em_mux_level_choice mux_level_choice;
    vt_em_wnsrp_choice wnsrp_choice;
    vt_em_al_choice audio_al_choice;
    vt_em_al_choice video_al_choice;
    vt_em_reverse_channel_data_type video_reverse_data_type_choice;
    vt_em_video_codec_preference_choice video_codec_preference_choice;
    vt_em_auto_drop_if_channel_fail_choice auto_drop_if_channel_fail_choice;
    vt_em_terminal_type_choice terminal_type_choice;
    kal_int32 timer_T101;
    kal_int32 timer_T109;
    kal_int32 timer_T401;
    kal_int32 user_specified_1;
    kal_int32 user_specified_2;
    kal_uint8 user_specified_3[64];
}vt_em_config_struct;

typedef struct
{
 kal_uint8 mcc[3];
 kal_uint8 mnc[3];
 kal_uint8 lac[2];
 kal_uint16 cell_id;
 kal_uint8 nc_info_index;
    kal_uint8 rac;


    kal_uint8 nmo;

    kal_uint8 supported_Band;
} rr_em_lai_info_struct;
# 1329 "interface/modem/general/ps_public_struct.h"
typedef struct
{
# 1354 "interface/modem/general/ps_public_struct.h"
    kal_uint8 unused;
}pmu6223_config_param_struct;
# 1527 "interface/modem/general/ps_public_struct.h"
typedef struct
{
# 1562 "interface/modem/general/ps_public_struct.h"
    kal_uint8 unused;
}pmu6238_config_param_struct;
# 1580 "interface/modem/general/ps_public_struct.h"
typedef struct
{


    kal_uint8 unused;
}pmu6326_config_param_struct;
# 1762 "interface/modem/general/ps_public_struct.h"
typedef struct
{
# 1798 "interface/modem/general/ps_public_struct.h"
    kal_uint8 unused;
}pmic_config_param_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint16 arfcn;
    kal_int16 afc;
    kal_uint8 band;
    kal_int8 tsc;
    kal_int8 pcl;
    kal_uint8 pattern;
}rf_test_gsm_tx_test_struct, l4cl1_em_rf_test_gsm_tx_test_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_int16 arfcn;
    kal_int16 gain;
    kal_uint8 band;
    kal_uint8 pattern;
}rf_test_gsm_rx_test_struct, l4cl1_em_rf_test_gsm_rx_test_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 band;
    kal_int16 arfcn_in;
    kal_int16 arfcn_out[20];
    kal_int16 power[20];
}rf_test_gsm_power_scan_struct,
l4cl1_em_rf_test_gsm_power_scan_req_struct,
l4cl1_em_rf_test_gsm_power_scan_cnf_struct;


typedef struct
{
    rf_test_gsm_tx_test_struct gsm_tx_test;
    rf_test_gsm_rx_test_struct gsm_rx_test;
    rf_test_gsm_power_scan_struct gsm_power_scan;
}rf_test_gsm_param_struct;

typedef struct
{
    kal_uint8 mono_enable;
}fm_radio_mono_struct;

typedef struct
{
    kal_uint8 stereo_enable;
    kal_uint8 sblend_onoff;
}fm_radio_stereo_struct;

typedef struct
{
    kal_uint8 level;
}fm_radio_rssi_struct;

typedef struct
{
    kal_uint8 item_value;
}fm_radio_if_count_delta_struct;

typedef struct
{
    fm_radio_mono_struct fm_radio_mono;
    fm_radio_stereo_struct fm_radio_stereo;
    fm_radio_rssi_struct fm_radio_rssi;
    fm_radio_if_count_delta_struct fm_radio_if;
}fm_radio_config_param_struct;
# 2019 "interface/modem/general/ps_public_struct.h"
typedef struct
{
    kal_uint8 addr_length;
    kal_uint8 addr_bcd[11];
}l4c_sms_addr_struct;

typedef struct
{
 l4c_sms_addr_struct sca;
 kal_uint8 tpdu[176];
 kal_uint8 pdu_len;
 kal_uint8 tpdu_len;
}l4c_usm_cmgw_struct;

typedef struct
{
 kal_uint8 mode;
 kal_uint8 mt;
 kal_uint8 bm;
 kal_uint8 ds;
 kal_uint8 bfr;
}l4c_usm_cnmi_struct;

typedef struct
{
 kal_uint16 reply_index;
 kal_uint16 data_len;
 kal_uint8 length;
 kal_uint8 pdu[176];
}l4c_usm_cmss_struct;

typedef struct {
   l4_name_struct name;
   l4c_number_struct number_info;
} l4c_sms_mailbox_info_struct;

typedef struct {
    kal_uint8 line_no;
    kal_uint8 msp_no;
    kal_uint8 waiting_num;
    kal_uint8 ind_type;
    kal_bool is_show_num;
    kal_bool is_clear;
    kal_bool is_from_storage;
} l4csmsal_msg_waiting_ind_ext_struct;

typedef struct {
   kal_uint16 mid[60];
   kal_uint16 dcs[30];
   kal_uint16 mir[60];
   kal_uint8 mid_mask[60];
   kal_uint8 mir_mask[30];
   kal_uint8 dcs_mask[30];
   kal_uint8 para_ind;

   kal_bool is_all_language_on;


   kal_bool is_cb_ready;
   kal_bool is_sim_change;

   l4c_cb_set_type_enum set_type;
} l4c_cb_info_struct;

typedef struct {
    kal_uint16 ref;
    kal_uint8 total_seg;
    kal_uint8 seg;
} smsal_concat_struct;

typedef struct {
    kal_uint8 mem1;
    kal_uint8 mem2;
    kal_uint8 mem3;
    kal_uint16 used1;
    kal_uint16 used2;
    kal_uint16 used3;
    kal_uint16 total1;
    kal_uint16 total2;
    kal_uint16 total3;
} smsal_prefer_storage_struct;


typedef struct
{

    kal_uint8 mbi_id[5];



} smsal_mbi_struct;

typedef struct {
    kal_uint8 mti;
    kal_uint8 status;
    kal_uint8 storage_type;
    kal_uint16 index;
} smsal_inbox_struct;

typedef struct {
    kal_uint16 msg_count;
    smsal_inbox_struct inbox_list[40];
} smsal_inbox_list_struct;

typedef struct {
    kal_uint8 mti;
    kal_uint8 status;
    kal_uint8 storage_type;
    kal_uint16 index;
} smsal_outbox_struct;

typedef struct {
    kal_uint16 msg_count;
    smsal_outbox_struct outbox_list[40];
} smsal_outbox_list_struct;


typedef struct
{
    kal_uint16 id;

    kal_uint8 msg_len_insec;
    kal_uint8 msg_retention_day;

    kal_uint8 priority;

    kal_uint8 msg_ext_flg;

    l4_addr_bcd_struct calling_line_addr;

    kal_uint8 msg_ext_len;
    kal_uint8 *msg_ext_data;
}smsal_evmi_msg_struct;

typedef struct {
    kal_uint8 addr_length;
    kal_uint8 addr_bcd[11];
} sms_addr_struct;

typedef struct {
   kal_uint8 storage;
   kal_uint8 type;
   kal_uint8 num_index;
   kal_uint8 aas_id;
   kal_uint16 index;
   kal_uint16 record_index;
   l4c_number_struct tel;
   l4_name_struct alpha_id;
} l4c_phb_entry_struct;

typedef struct {

   kal_uint8 address_type;
   union
   {
      l4c_number_struct tel;
      kal_uint8 uri[(41)];
   } address;



   l4_name_struct alpha_id;
   rtc_format_struct time;
   kal_uint8 count;
   kal_uint8 call_status;
   kal_int32 call_duration;
} l4c_phb_ln_entry_struct;

typedef struct {
    kal_uint16 record_size;
    kal_uint16 record_num;
    kal_uint8 alpha_length;
    kal_uint8 occurrence;
    kal_bool is_support;
} l4c_phb_desc_struct;

typedef l4_name_struct phb_sne_struct;
typedef l4_name_struct phb_aas_struct;
typedef l4_name_struct phb_gas_struct;

typedef struct {
    kal_uint8 email_length;
    kal_uint16 record_index;
    kal_uint16 adn_record_index;
    kal_uint8 email_address[61];
} phb_email_struct;

typedef struct
{
    kal_uint8 gas_id[10];
} phb_grp_struct;

typedef struct
{
    kal_uint8 ctrl_info;
    kal_uint8 hidden_info;
} phb_pbc_struct;

typedef union {
    phb_sne_struct sne;
    phb_aas_struct aas;
    phb_gas_struct gas;
    phb_grp_struct grp;
    phb_email_struct email;
    phb_pbc_struct pbc;
} l4c_phb_usim_field;

typedef struct {
    l4c_phb_usim_field field;
} l4c_phb_usim_entry;

typedef struct {
   kal_uint8 storage;
   kal_uint8 type;
   kal_uint16 index;
   kal_uint16 record_index;
   l4_addr_bcd_struct tel;
   l4_name_struct alpha_id;
} l4c_phb_bcd_entry_struct;


typedef struct
{
 kal_uint16 num_of_entry;
 l4c_phb_bcd_entry_struct phb_entry[1000/(54+42)];
} l4c_phb_entries_struct;


typedef struct {
   kal_uint8 plmn_id[7];
   kal_uint8 status;
} l4c_plmn_info_struct;

typedef struct {
   kal_uint8 plmn_id[7];
   kal_uint8 status;
   kal_uint8 rat;
   kal_uint8 lac[2];
} l4c_rat_plmn_info_struct;

typedef struct l4c_nw_time_zone_time_struct
{
 kal_uint8 year;
 kal_uint8 month;
 kal_uint8 day;
 kal_uint8 hour;
 kal_uint8 min;
 kal_uint8 sec;
 kal_uint8 time_zone;
} l4c_nw_time_zone_time_struct;


typedef struct l4c_rac_ecc_number_struct
{
 kal_uint8 category;
 l4_addr_bcd_struct tel_number;
} l4c_rac_ecc_number_struct;


typedef struct {
    kal_uint8 chv1_count;
    kal_uint8 chv2_count;
    kal_uint8 ubchv1_count;
    kal_uint8 ubchv2_count;
    kal_uint8 is_chv1_enabled;
    kal_uint8 is_chv1_verified;
    kal_uint8 is_chv2_enabled;
    kal_uint8 is_chv2_verified;
    kal_uint8 chv_key_ref[2];
} sim_chv_info_struct;

typedef struct {
    kal_uint8 chv1_status;
    kal_uint8 chv2_status;
    kal_uint8 ubchv1_status;
    kal_uint8 ubchv2_status;
} sim_chv_status_struct;

typedef struct {
    kal_uint8 ecc[3];
    kal_uint8 esc;
    kal_uint8 name_length;
    kal_uint8 name_dcs;
    kal_uint8 name[(32)];
} sim_ecc_entry_struct;

typedef struct {
   kal_uint8 alpha_id_dcs;
   kal_uint8 alpha_id_size;
   kal_uint8 alpha_id[32];
   kal_uint8 ton_npi;
   kal_uint8 digit_size;
   kal_uint8 digit[41];
} l4csmu_addr_struct;

typedef struct {
   kal_uint8 alpha_id_size;
   kal_uint8 alpha_id[21];
   kal_uint8 ton_npi;
   kal_uint8 digit_size;
   kal_uint8 digit[4];
   kal_uint8 index_level;
   kal_bool network_specific;
   kal_bool premium_rate;
} l4csmu_info_num_struct;

typedef struct {
    kal_uint8 rand[16];
    kal_bool is_auth_present;
    kal_uint8 auth[16];
    sim_interface_enum sim_id;
} smu_supc_sim_authenticate_request_struct;

typedef struct {
    kal_uint16 result;
    kal_uint8 kc[8];
    kal_uint8 sres[4];
    kal_uint8 ck[16];
    kal_uint8 ik[16];
    kal_uint8 res[16];
    kal_uint8 res_len;
    kal_uint8 auts[16];
    kal_uint8 auts_len;
} smu_supc_sim_authenticate_response_struct;

typedef struct {
  kal_uint8 ref_count;
  kal_uint16 msg_len;
   kal_uint8 cmd_detail[5];
   kal_bool is_icon_available;
   sat_icon_struct icon_info;
  kal_uint8 bearer_type;
} l4csmu_sat_open_channel_ind_struct;

typedef struct {
   kal_uint8 ref_count;
   kal_uint16 msg_len;
   kal_uint8 cmd_detail[5];
  kal_uint8 state;
  kal_bool is_icon_available;
  sat_icon_struct icon_info;
} l4csmu_sat_close_channel_ind_struct;

typedef struct {
   kal_uint8 ref_count;
   kal_uint16 msg_len;
   kal_uint8 cmd_detail[5];
  kal_uint8 state;
   kal_bool is_icon_available;
   sat_icon_struct icon_info;
} l4csmu_sat_send_data_ind_struct;

typedef struct {
   kal_uint8 ref_count;
   kal_uint16 msg_len;
   kal_uint8 cmd_detail[5];
  kal_uint8 state;
  kal_bool is_icon_available;
  sat_icon_struct icon_info;
} l4csmu_sat_recv_data_ind_struct;

typedef struct {
    kal_uint8 hnb_name_length;
    kal_uint8 hnb_name[48];
    csg_type_enum csg_type;
    kal_uint32 csg_id;
    kal_int8 power_level;
} csg_info_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 gsm_tx_pwr_red;
    kal_uint8 umts_tx_pwr_red;
} l4c_max_tx_pwr_red_req_struct;

typedef struct {
    pdp_addr_type_enum ip_addr_type;
    kal_uint8 ipv4[4];
    kal_uint8 ipv6[16];
} ip_addr_struct;

typedef struct
{
    kal_uint16 earfcn;
    kal_uint8 bandwidth;
} interrat_lte_cell_info_struct;

typedef struct {
    kal_bool is_dnsv4_present ;
    kal_uint8 dnsv4[IPV4_ADDR_LEN] ;
} ipv4_dns_struct ;

typedef struct {
    kal_bool is_dnsv6_present ;
    kal_uint8 dnsv6[IPV6_ADDR_LEN] ;
} ipv6_dns_struct ;


typedef struct {
    ipv4_dns_struct v4[2];
    ipv6_dns_struct v6[2];
} dns_struct ;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 length;
    kal_uint8 string[128];
}l4ctst_at_response_ind_struct;

typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_bool remote_wakeup_enable;
}l4c_usb_suspend_req_struct;
# 2448 "interface/modem/general/ps_public_struct.h"
typedef struct {
    kal_bool geran_tdma;
    kal_bool utran_fdd;
    kal_bool utran_tdd_lcr;
    kal_bool eutran_fdd;
    kal_bool eutran_tdd;
} l4c_radio_access_setting_struct;


typedef struct {
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 reconfig_type;
}l4c_me_reconfigure_req_struct, l4c_me_volte_reconfigure_req_struct;
# 101 "interface/modem/general/l4c2uem_struct.h" 2






typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
} l4cuem_startup_req_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 response;
    kal_uint8 cause;
} l4cuem_startup_cnf_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 type;
    kal_uint8 data1;
    kal_uint8 data2;
    kal_uint8 data3;
} l4cuem_set_profile_req_struct;

typedef struct {

   kal_uint8 mode;
   kal_uint8 melody[7];
   kal_uint8 keytone[7];
   kal_uint8 speech[7];
   kal_uint8 mic;
   kal_uint8 sidetone;

} l4cuem_audio_profile_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 mode;
 kal_uint8 melody[7];
 kal_uint8 keytone[7];
 kal_uint8 speech[7];
 kal_uint8 mic;
 kal_uint8 sidetone;

} l4cuem_set_audio_profile_req_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 type;
    kal_uint8 response;
    kal_uint8 cause;
} l4cuem_set_profile_cnf_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 response;
    kal_uint8 cause;
} l4cuem_set_audio_profile_cnf_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 response;
    kal_uint8 cause;
} l4cuem_set_audio_param_cnf_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 type;
    kal_uint8 index;
    kal_uint16 length;
    kal_uint8 imelody[300];
} l4cuem_store_imelody_req_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 response;
    kal_uint8 cause;
} l4cuem_store_imelody_cnf_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 index;
} l4cuem_delete_imelody_req_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 response;
    kal_uint8 cause;
} l4cuem_delete_imelody_cnf_struct;

typedef struct {
   kal_uint8 ref_count;
   kal_uint16 msg_len;
   kal_uint8 src_id;
   kal_uint16 file_name[50];
   kal_uint8 play_style;
   kal_uint16 identifier;
}
l4cuem_audio_play_by_name_req_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint16 file_name[50];
}
l4cuem_audio_stop_by_name_req_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 result;
}
l4cuem_audio_play_by_name_cnf_struct;

typedef struct {
   kal_uint8 ref_count;
   kal_uint16 msg_len;
   kal_uint8 src_id;
   kal_uint8 result;
}
l4cuem_audio_stop_by_name_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;

 kal_uint32 PWM1_freq_Level_Info[5];
 kal_uint32 PWM1_duty_Level_Info[5];
 kal_uint32 PWM2_freq_Level_Info[5];
 kal_uint32 PWM2_duty_Level_Info[5];
 kal_uint32 PWM3_freq_Level_Info[5];
 kal_uint32 PWM3_duty_Level_Info[5];

 kal_uint8 MainLCD_Contrast_Level_Info[15];
 kal_uint8 MainLCD_Bias_Level_Info[5];
 kal_uint8 MainLCD_Linerate_Level_Info[5];
 kal_uint8 MainLCD_Temp_Level_Info[5];

 kal_uint8 SubLCD_Contrast_Level_Info[15];
 kal_uint8 SubLCD_Bias_Level_Info[5];
 kal_uint8 SubLCD_Linerate_Level_Info[5];
 kal_uint8 SubLCD_Temp_Level_Info[5];

 kal_uint32 Battery_Level_Info[10];




} l4cuem_set_hw_level_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 response;
    kal_uint8 cause;
} l4cuem_set_hw_level_cnf_struct;
# 146 "./service/dhl/database/msglog_db/custom_parse_db.c" 2


# 1 "./build/HCT6737M_65_N/LWG_DSDS/nvram_auto_gen/nvram_gen_trc.h" 1
typedef enum {
    _NVRAM_EF_SYS_LID = 0,
    _NVRAM_EF_IMPT_COUNTER_LID = 8,
    _NVRAM_EF_L1_AGCPATHLOSS_LID = 15,
    _NVRAM_EF_L1_RAMPTABLE_GSM850_LID = 16,
    _NVRAM_EF_L1_RAMPTABLE_GSM900_LID = 17,
    _NVRAM_EF_L1_RAMPTABLE_DCS1800_LID = 18,
    _NVRAM_EF_L1_RAMPTABLE_PCS1900_LID = 19,
    _NVRAM_EF_L1_EPSK_RAMPTABLE_GSM850_LID = 20,
    _NVRAM_EF_L1_EPSK_RAMPTABLE_GSM900_LID = 21,
    _NVRAM_EF_L1_EPSK_RAMPTABLE_DCS1800_LID = 22,
    _NVRAM_EF_L1_EPSK_RAMPTABLE_PCS1900_LID = 23,
    _NVRAM_EF_L1_EPSK_INTERSLOT_RAMP_GSM850_LID = 24,
    _NVRAM_EF_L1_EPSK_INTERSLOT_RAMP_GSM900_LID = 25,
    _NVRAM_EF_L1_EPSK_INTERSLOT_RAMP_DCS1800_LID = 26,
    _NVRAM_EF_L1_EPSK_INTERSLOT_RAMP_PCS1900_LID = 27,
    _NVRAM_EF_L1_AFCDATA_LID = 28,
    _NVRAM_EF_L1_TXIQ_LID = 29,
    _NVRAM_EF_L1_RFSPECIALCOEF_LID = 30,
    _NVRAM_EF_L1_INTERSLOT_RAMP_GSM850_LID = 31,
    _NVRAM_EF_L1_INTERSLOT_RAMP_GSM900_LID = 32,
    _NVRAM_EF_L1_INTERSLOT_RAMP_DCS1800_LID = 33,
    _NVRAM_EF_L1_INTERSLOT_RAMP_PCS1900_LID = 34,
    _NVRAM_EF_L1_CRYSTAL_AFCDATA_LID = 35,
    _NVRAM_EF_L1_CRYSTAL_CAPDATA_LID = 36,
    _NVRAM_EF_L1_GMSK_TX_POWER_ROLLBACK_TABLE_LID = 37,
    _NVRAM_EF_L1_EPSK_TX_POWER_ROLLBACK_TABLE_LID = 38,
    _NVRAM_EF_L1_GMSK_TXPC_LID = 39,
    _NVRAM_EF_L1_EPSK_TXPC_LID = 40,
    _NVRAM_EF_L1_LNAPATHLOSS_LID = 41,
    _NVRAM_EF_L1_TEMPERATURE_ADC_LID = 42,
    _NVRAM_EF_UL1_TEMP_DAC_LID = 2816,
    _NVRAM_EF_UL1_PATHLOSS_BAND1_LID = 2817,
    _NVRAM_EF_UL1_PATHLOSS_BAND2_LID = 2818,
    _NVRAM_EF_UL1_PATHLOSS_BAND3_LID = 2819,
    _NVRAM_EF_UL1_PATHLOSS_BAND4_LID = 2820,
    _NVRAM_EF_UL1_PATHLOSS_BAND5_LID = 2821,
    _NVRAM_EF_UL1_PATHLOSS_BAND6_LID = 2822,
    _NVRAM_EF_UL1_PATHLOSS_BAND7_LID = 2823,
    _NVRAM_EF_UL1_PATHLOSS_BAND8_LID = 2824,
    _NVRAM_EF_UL1_PATHLOSS_BAND9_LID = 2825,
    _NVRAM_EF_UL1_PATHLOSS_BAND10_LID = 2826,
    _NVRAM_EF_UL1_PATHLOSS_BAND11_LID = 2827,
    _NVRAM_EF_UL1_PATHLOSS_BAND19_LID = 2835,
    _NVRAM_EF_UL1_TXDAC_BAND1_LID = 2836,
    _NVRAM_EF_UL1_TXDAC_BAND2_LID = 2837,
    _NVRAM_EF_UL1_TXDAC_BAND3_LID = 2838,
    _NVRAM_EF_UL1_TXDAC_BAND4_LID = 2839,
    _NVRAM_EF_UL1_TXDAC_BAND5_LID = 2840,
    _NVRAM_EF_UL1_TXDAC_BAND6_LID = 2841,
    _NVRAM_EF_UL1_TXDAC_BAND7_LID = 2842,
    _NVRAM_EF_UL1_TXDAC_BAND8_LID = 2843,
    _NVRAM_EF_UL1_TXDAC_BAND9_LID = 2844,
    _NVRAM_EF_UL1_TXDAC_BAND10_LID = 2845,
    _NVRAM_EF_UL1_TXDAC_BAND11_LID = 2846,
    _NVRAM_EF_UL1_TXDAC_BAND19_LID = 2854,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND1_LID = 2855,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND2_LID = 2856,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND3_LID = 2857,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND4_LID = 2858,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND5_LID = 2859,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND6_LID = 2860,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND7_LID = 2861,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND8_LID = 2862,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND9_LID = 2863,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND10_LID = 2864,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND11_LID = 2865,
    _NVRAM_EF_UL1_TXPAOCTLEV_BAND19_LID = 2873,
    _NVRAM_EF_UL1_PATHLOSS2_BAND1_LID = 2874,
    _NVRAM_EF_UL1_PATHLOSS2_BAND2_LID = 2875,
    _NVRAM_EF_UL1_PATHLOSS2_BAND3_LID = 2876,
    _NVRAM_EF_UL1_PATHLOSS2_BAND4_LID = 2877,
    _NVRAM_EF_UL1_PATHLOSS2_BAND5_LID = 2878,
    _NVRAM_EF_UL1_PATHLOSS2_BAND6_LID = 2879,
    _NVRAM_EF_UL1_PATHLOSS2_BAND7_LID = 2880,
    _NVRAM_EF_UL1_PATHLOSS2_BAND8_LID = 2881,
    _NVRAM_EF_UL1_PATHLOSS2_BAND9_LID = 2882,
    _NVRAM_EF_UL1_PATHLOSS2_BAND10_LID = 2883,
    _NVRAM_EF_UL1_PATHLOSS2_BAND11_LID = 2884,
    _NVRAM_EF_UL1_PATHLOSS2_BAND19_LID = 2892,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND1_LID = 2893,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND2_LID = 2894,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND3_LID = 2895,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND4_LID = 2896,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND5_LID = 2897,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND6_LID = 2898,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND7_LID = 2899,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND8_LID = 2900,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND9_LID = 2901,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND10_LID = 2902,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND11_LID = 2903,
    _NVRAM_EF_UL1_TXPADRIFTCOMP_BAND19_LID = 2911,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND1_LID = 2912,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND2_LID = 2913,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND3_LID = 2914,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND4_LID = 2915,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND5_LID = 2916,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND6_LID = 2917,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND7_LID = 2918,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND8_LID = 2919,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND9_LID = 2920,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND10_LID = 2921,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND11_LID = 2922,
    _NVRAM_EF_UL1_TXPRACHTMCOMP_BAND19_LID = 2930,
    _NVRAM_EF_UL1_AFCDAC_LID = 2931,
    _NVRAM_EF_UL1_AFCCAP_LID = 2932,
    _NVRAM_EF_BARCODE_NUM_LID = 107,
    _NVRAM_EF_CAL_FLAG_LID = 108,
    _NVRAM_EF_CAL_DATA_CHECK_LID = 109,
    _NVRAM_EF_IMEI_IMEISV_LID = 165,
    _NVRAM_EF_SML_LID = 166,
    _NVRAM_EF_SIM_LOCK_LID = 167,
    _NVRAM_EF_SYS_STATISTICS_LID = 7,
    _NVRAM_EF_AS_BAND_SETTING_LID = 121,
    _NVRAM_EF_L1_2G_RF_PARAMETER_LID = 113,
    _NVRAM_EF_BAND_INFO_LID = 122,
    _NVRAM_EF_GAS_WORKING_BAND_INFO_LID = 422,
    _NVRAM_EF_TST_FILTER_LID = 123,
    _NVRAM_EF_GAS_CSG_FINGERPRINT_LID = 188,
    _NVRAM_EF_DHL_FILTER_LID = 416,
    _NVRAM_EF_PORT_SETTING_LID = 124,
    _NVRAM_EF_SMSAL_SMS_LID = 158,
    _NVRAM_EF_SMSAL_MAILBOX_ADDR_LID = 159,
    _NVRAM_EF_SMSAL_COMMON_PARAM_LID = 160,
    _NVRAM_EF_SMSAL_SMSP_LID = 161,
    _NVRAM_EF_SMSAL_MWIS_LID = 162,
    _NVRAM_EF_CB_DEFAULT_CH_LID = 163,
    _NVRAM_EF_CB_CH_INFO_LID = 164,
    _NVRAM_EF_TCM_CID_0_PROFILE_LID = 150,
    _NVRAM_EF_TCM_PDP_PROFILE_LID = 151,
    _NVRAM_EF_CFU_FLAG_LID = 152,
    _NVRAM_EF_MM_LOCIGPRS_LID = 153,
    _NVRAM_EF_ALS_LINE_ID_LID = 155,
    _NVRAM_EF_MSCAP_LID = 156,
    _NVRAM_EF_CLASSMARK_RACAP_LID = 126,
    _NVRAM_EF_SIM_ASSERT_LID = 127,
    _NVRAM_EF_RTC_DATA_LID = 128,
    _NVRAM_EF_NET_PAR_LID = 129,
    _NVRAM_EF_UMTS_BAND_PRIORITY_LID = 142,
    _NVRAM_EF_UMTS_DMCR_SETTING_LID = 420,
    _NVRAM_EF_UMTS_SIB_SKIP_SETTING_LID = 421,
    _NVRAM_EF_UMTS_IMSI_LID = 131,
    _NVRAM_EF_UMTS_START_HFN_LID = 132,
    _NVRAM_EF_UMTS_USIME_RRC_DYNAMIC_CAP_LID = 133,
    _NVRAM_EF_UMTS_FREQUENCY_REPOSITORY_LID = 138,
    _NVRAM_EF_PREV_VISITED_CELL_INFO_LID = 139,
    _NVRAM_EF_UE_CSG_LIST_LID = 140,
    _NVRAM_EF_UMTS_FINGERPRINT_INFO_LID = 141,
    _NVRAM_EF_L1_3G_CAL_DATA_LID = 134,
    _NVRAM_EF_ETWS_SETTING_LID = 173,
    _NVRAM_EF_CSM_ESSP_LID = 176,
    _NVRAM_EF_CUST_HW_LEVEL_TBL_LID = 143,
    _NVRAM_EF_UEM_MANUFACTURE_DATA_LID = 144,
    _NVRAM_EF_UEM_RMI_DATA_LID = 145,
    _NVRAM_EF_GPS_SETTING_DATA_LID = 146,
    _NVRAM_EF_MS_SECURITY_LID = 168,
    _NVRAM_EF_PHB_LN_ENTRY_LID = 170,
    _NVRAM_EF_PHB_LN_TYPE_SEQ_LID = 171,
    _NVRAM_EF_SYS_CACHE_OCTET_LID = 181,
    _NVRAM_EF_RAC_PREFERENCE_LID = 185,
    _NVRAM_EF_PS_CONFORMANCE_TESTMODE_LID = 172,
    _NVRAM_EF_PHB_LID = 169,
    _NVRAM_EF_TST_CONFIG_LID = 196,
    _NVRAM_EF_MSQ_LIST_LID = 175,
    _NVRAM_EF_EPSLOCI_EPSNSC_TIN_LID = 261,
    _NVRAM_EF_LTE_PREFERENCE_LID = 262,
    _NVRAM_EF_ERRC_STORED_CARRIER_LID = 263,
    _NVRAM_EF_ERRC_PERFORMANCE_PARA_LID = 264,
    _NVRAM_EF_ERRC_FINGER_PRINT_LID = 265,
    _NVRAM_EF_ERRC_LEARNED_MCC_LID = 266,
    _NVRAM_EF_ERRC_STORED_CELL_LID = 267,
    _NVRAM_EF_ERRC_AFR_SETTING_LID = 268,
    _NVRAM_EF_LTE_CAP_LID = 269,
    _NVRAM_EF_UE_EUTRA_CAP_CSFB_LID = 270,
    _NVRAM_EF_UE_EUTRA_CAP_MMDC_LID = 271,
    _NVRAM_EF_NWSEL_DATA_LID = 187,
    _NVRAM_EF_EL1_PWRONCAL_LID = 197,
    _NVRAM_EF_EL1_DSPLOGFILTER_LID = 198,
    _NVRAM_EF_EL1_FREQADJTBL_LID = 199,
    _NVRAM_EF_EL1_RSSIGAINTBL_1STBAND_LID = 200,
    _NVRAM_EF_EL1_RSSIGAINTBL_2NDBAND_LID = 201,
    _NVRAM_EF_EL1_RSSIGAINTBL_3RDBAND_LID = 202,
    _NVRAM_EF_EL1_RSSIGAINTBL_4THBAND_LID = 203,
    _NVRAM_EF_EL1_RSSIGAINTBL_5THBAND_LID = 204,
    _NVRAM_EF_EL1_RSSIGAINTBL_6THBAND_LID = 205,
    _NVRAM_EF_EL1_RSSIGAINTBL_7THBAND_LID = 206,
    _NVRAM_EF_EL1_RSSIGAINTBL_8THBAND_LID = 207,
    _NVRAM_EF_EL1_RSSIGAINTBL_9THBAND_LID = 208,
    _NVRAM_EF_EL1_RSSIGAINTBL_10THBAND_LID = 209,
    _NVRAM_EF_EL1_RSSIGAINTBL_11THBAND_LID = 210,
    _NVRAM_EF_EL1_RSSIGAINTBL_12THBAND_LID = 211,
    _NVRAM_EF_EL1_RSSIGAINTBL_13THBAND_LID = 212,
    _NVRAM_EF_EL1_RSSIGAINTBL_14THBAND_LID = 213,
    _NVRAM_EF_EL1_CTRL_REG_RW_LID = 214,
    _NVRAM_EF_EL1_TXDAC_1STBAND_LID = 215,
    _NVRAM_EF_EL1_TXDAC_2NDBAND_LID = 216,
    _NVRAM_EF_EL1_TXDAC_3RDBAND_LID = 217,
    _NVRAM_EF_EL1_TXDAC_4THBAND_LID = 218,
    _NVRAM_EF_EL1_TXDAC_5THBAND_LID = 219,
    _NVRAM_EF_EL1_TXDAC_6THBAND_LID = 220,
    _NVRAM_EF_EL1_TXDAC_7THBAND_LID = 221,
    _NVRAM_EF_EL1_TXDAC_8THBAND_LID = 222,
    _NVRAM_EF_EL1_TXDAC_9THBAND_LID = 223,
    _NVRAM_EF_EL1_TXDAC_10THBAND_LID = 224,
    _NVRAM_EF_EL1_TXDAC_11THBAND_LID = 225,
    _NVRAM_EF_EL1_TXDAC_12THBAND_LID = 226,
    _NVRAM_EF_EL1_TXDAC_13THBAND_LID = 227,
    _NVRAM_EF_EL1_TXDAC_14THBAND_LID = 228,
    _NVRAM_EF_EL1_TXPAOCTLEV_1STBAND_LID = 229,
    _NVRAM_EF_EL1_TXPAOCTLEV_2NDBAND_LID = 230,
    _NVRAM_EF_EL1_TXPAOCTLEV_3RDBAND_LID = 231,
    _NVRAM_EF_EL1_TXPAOCTLEV_4THBAND_LID = 232,
    _NVRAM_EF_EL1_TXPAOCTLEV_5THBAND_LID = 233,
    _NVRAM_EF_EL1_TXPAOCTLEV_6THBAND_LID = 234,
    _NVRAM_EF_EL1_TXPAOCTLEV_7THBAND_LID = 235,
    _NVRAM_EF_EL1_TXPAOCTLEV_8THBAND_LID = 236,
    _NVRAM_EF_EL1_TXPAOCTLEV_9THBAND_LID = 237,
    _NVRAM_EF_EL1_TXPAOCTLEV_10THBAND_LID = 238,
    _NVRAM_EF_EL1_TXPAOCTLEV_11THBAND_LID = 239,
    _NVRAM_EF_EL1_TXPAOCTLEV_12THBAND_LID = 240,
    _NVRAM_EF_EL1_TXPAOCTLEV_13THBAND_LID = 241,
    _NVRAM_EF_EL1_TXPAOCTLEV_14THBAND_LID = 242,
    _NVRAM_EF_EL1_ETVINLUTDATA_1STBAND_LID = 243,
    _NVRAM_EF_EL1_ETVINLUTDATA_2NDBAND_LID = 244,
    _NVRAM_EF_EL1_ETVINLUTDATA_3RDBAND_LID = 245,
    _NVRAM_EF_EL1_ETVINLUTDATA_4THBAND_LID = 246,
    _NVRAM_EF_EL1_ETVINLUTDATA_5THBAND_LID = 247,
    _NVRAM_EF_EL1_ETVINLUTDATA_6THBAND_LID = 248,
    _NVRAM_EF_EL1_ETVINLUTDATA_7THBAND_LID = 249,
    _NVRAM_EF_EL1_ETVINLUTDATA_8THBAND_LID = 250,
    _NVRAM_EF_EL1_ETVINLUTDATA_9THBAND_LID = 251,
    _NVRAM_EF_EL1_ETVINLUTDATA_10THBAND_LID = 252,
    _NVRAM_EF_EL1_ETVINLUTDATA_11THBAND_LID = 253,
    _NVRAM_EF_EL1_ETVINLUTDATA_12THBAND_LID = 254,
    _NVRAM_EF_EL1_ETVINLUTDATA_13THBAND_LID = 255,
    _NVRAM_EF_EL1_ETVINLUTDATA_14THBAND_LID = 256,
    _NVRAM_EF_EL1_ETCOMPPARAM_LID = 257,
    _NVRAM_EF_EL1_TEMPERATUREDAC_LID = 258,
    _NVRAM_EF_EL1_BAND_INDICATOR_LID = 272,
    _NVRAM_EF_EL1_RX_PDATABASE_LID = 273,
    _NVRAM_EF_EL1_TX_PDATABASE_LID = 274,
    _NVRAM_EF_EL1_RF_IO_LID = 275,
    _NVRAM_EF_EL1_CUSTOM_DYNAMIC_INIT_LID = 276,
    _NVRAM_EF_EL1_CUSTOM_DYNAMIC_INIT_DEBUG_LID = 277,
    _NVRAM_EF_EL1_RF_RX_PATH_CONFIG_LID = 278,
    _NVRAM_EF_EL1_MIPI_FEATURE_LID = 279,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_1STBAND_LID = 284,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_2NDBAND_LID = 285,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_3RDBAND_LID = 286,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_4THBAND_LID = 287,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_5THBAND_LID = 288,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_6THBAND_LID = 289,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_7THBAND_LID = 290,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_8THBAND_LID = 291,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_9THBAND_LID = 292,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_10THBAND_LID = 293,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_11THBAND_LID = 294,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_12THBAND_LID = 295,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_13THBAND_LID = 296,
    _NVRAM_EF_EL1_MIPI_RX_EVENT_14THBAND_LID = 297,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_1STBAND_LID = 298,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_2NDBAND_LID = 299,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_3RDBAND_LID = 300,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_4THBAND_LID = 301,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_5THBAND_LID = 302,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_6THBAND_LID = 303,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_7THBAND_LID = 304,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_8THBAND_LID = 305,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_9THBAND_LID = 306,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_10THBAND_LID = 307,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_11THBAND_LID = 308,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_12THBAND_LID = 309,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_13THBAND_LID = 310,
    _NVRAM_EF_EL1_MIPI_TX_EVENT_14THBAND_LID = 311,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_1STBAND_LID = 326,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_2NDBAND_LID = 327,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_3RDBAND_LID = 328,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_4THBAND_LID = 329,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_5THBAND_LID = 330,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_6THBAND_LID = 331,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_7THBAND_LID = 332,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_8THBAND_LID = 333,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_9THBAND_LID = 334,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_10THBAND_LID = 335,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_11THBAND_LID = 336,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_12THBAND_LID = 337,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_13THBAND_LID = 338,
    _NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_14THBAND_LID = 339,
    _NVRAM_EF_EL1_MPRADJTBL_LID = 259,
    _NVRAM_EF_EL1_AMPRADJTBL_LID = 260,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_1STBAND_LID = 312,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_2NDBAND_LID = 313,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_3RDBAND_LID = 314,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_4THBAND_LID = 315,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_5THBAND_LID = 316,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_6THBAND_LID = 317,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_7THBAND_LID = 318,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_8THBAND_LID = 319,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_9THBAND_LID = 320,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_10THBAND_LID = 321,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_11THBAND_LID = 322,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_12THBAND_LID = 323,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_13THBAND_LID = 324,
    _NVRAM_EF_EL1_MIPI_TPC_EVENT_14THBAND_LID = 325,
    _NVRAM_EF_EL1_RXON_BPIOFFSET_LID = 280,
    _NVRAM_EF_EL1_TXON_BPIOFFSET_LID = 281,
    _NVRAM_EF_EL1_RXOFF_BPIOFFSET_LID = 282,
    _NVRAM_EF_EL1_TXOFF_BPIOFFSET_LID = 283,
    _NVRAM_EF_EL1_MIPI_BYPASS_FEATURE_LID = 373,
    _NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_1STBAND_LID = 374,
    _NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_2NDBAND_LID = 375,
    _NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_3RDBAND_LID = 376,
    _NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_1STBAND_LID = 379,
    _NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_2NDBAND_LID = 380,
    _NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_3RDBAND_LID = 381,
    _NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_1STBAND_LID = 384,
    _NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_2NDBAND_LID = 385,
    _NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_3RDBAND_LID = 386,
    _NVRAM_EF_EL1_MIPI_RX_DATA_1STBAND_LID = 340,
    _NVRAM_EF_EL1_MIPI_RX_DATA_2NDBAND_LID = 341,
    _NVRAM_EF_EL1_MIPI_RX_DATA_3RDBAND_LID = 342,
    _NVRAM_EF_EL1_MIPI_RX_DATA_4THBAND_LID = 343,
    _NVRAM_EF_EL1_MIPI_RX_DATA_5THBAND_LID = 344,
    _NVRAM_EF_EL1_MIPI_RX_DATA_6THBAND_LID = 345,
    _NVRAM_EF_EL1_MIPI_RX_DATA_7THBAND_LID = 346,
    _NVRAM_EF_EL1_MIPI_RX_DATA_8THBAND_LID = 347,
    _NVRAM_EF_EL1_MIPI_RX_DATA_9THBAND_LID = 348,
    _NVRAM_EF_EL1_MIPI_RX_DATA_10THBAND_LID = 349,
    _NVRAM_EF_EL1_MIPI_RX_DATA_11THBAND_LID = 350,
    _NVRAM_EF_EL1_MIPI_RX_DATA_12THBAND_LID = 351,
    _NVRAM_EF_EL1_MIPI_RX_DATA_13THBAND_LID = 352,
    _NVRAM_EF_EL1_MIPI_RX_DATA_14THBAND_LID = 353,
    _NVRAM_EF_EL1_MIPI_TX_DATA_1STBAND_LID = 354,
    _NVRAM_EF_EL1_MIPI_TX_DATA_2NDBAND_LID = 355,
    _NVRAM_EF_EL1_MIPI_TX_DATA_3RDBAND_LID = 356,
    _NVRAM_EF_EL1_MIPI_TX_DATA_4THBAND_LID = 357,
    _NVRAM_EF_EL1_MIPI_TX_DATA_5THBAND_LID = 358,
    _NVRAM_EF_EL1_MIPI_TX_DATA_6THBAND_LID = 359,
    _NVRAM_EF_EL1_MIPI_TX_DATA_7THBAND_LID = 360,
    _NVRAM_EF_EL1_MIPI_TX_DATA_8THBAND_LID = 361,
    _NVRAM_EF_EL1_MIPI_TX_DATA_9THBAND_LID = 362,
    _NVRAM_EF_EL1_MIPI_TX_DATA_10THBAND_LID = 363,
    _NVRAM_EF_EL1_MIPI_TX_DATA_11THBAND_LID = 364,
    _NVRAM_EF_EL1_MIPI_TX_DATA_12THBAND_LID = 365,
    _NVRAM_EF_EL1_MIPI_TX_DATA_13THBAND_LID = 366,
    _NVRAM_EF_EL1_MIPI_TX_DATA_14THBAND_LID = 367,
    _NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_1STBAND_LID = 368,
    _NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_2NDBAND_LID = 369,
    _NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_3RDBAND_LID = 370,
    _NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_4THBAND_LID = 377,
    _NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_5THBAND_LID = 378,
    _NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_4THBAND_LID = 382,
    _NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_5THBAND_LID = 383,
    _NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_4THBAND_LID = 387,
    _NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_5THBAND_LID = 388,
    _NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_4THBAND_LID = 371,
    _NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_5THBAND_LID = 372,
    _NVRAM_EF_EL1_TAS_PARAMETER_LID = 404,
    _NVRAM_EF_EL1_SVLTE_BAND_INDICATOR_LID = 407,
    _NVRAM_EF_EL1_GPS_CO_TMS_DATA_LID = 406,
    _NVRAM_EF_MML1_CUSTOM_DYNAMIC_INIT_LID = 408,
    _NVRAM_EF_MML1_MIPI_INITIAL_CW_LID = 409,
    _NVRAM_EF_MML1_MIPI_USID_CHANGE_LID = 410,
    _NVRAM_EF_HMU_CONFIG_LID = 411,
    _NVRAM_EF_HMU_HD_CONFIG_LID = 412,
    _NVRAM_EF_NMU_CONFIG_LID = 413,
    _NVRAM_EF_REGIONAL_PHONE_MODE_LID = 415,
    _NVRAM_EF_IMS_PROFILE_LID = 178,
    _NVRAM_EF_LTECSR_PROFILE_LID = 179,
    _NVRAM_EF_VDM_ADS_PROFILE_LID = 180,
    _NVRAM_EF_L1_MIPI_CTRL_TABLE_GSM850_LID = 116,
    _NVRAM_EF_L1_MIPI_CTRL_TABLE_GSM900_LID = 117,
    _NVRAM_EF_L1_MIPI_CTRL_TABLE_DCS1800_LID = 118,
    _NVRAM_EF_L1_MIPI_CTRL_TABLE_PCS1900_LID = 119,
    _NVRAM_EF_L1_CUSTOM_DRDI_STATUS_DEBUGINFO_LID = 120,
    _NVRAM_EF_L1_TAS_CUSTOM_PARAMES_LID = 54,
    _NVRAM_EF_L1_TAS_CUSTOM_PDATA_LID = 55,
    _NVRAM_EF_SBP_MODEM_CONFIG_LID = 417,
    _NVRAM_EF_SBP_MODEM_DATA_CONFIG_LID = 418,
    _NVRAM_EF_2G_BA_INFO_LID = 424,
    _NVRAM_EF_UL1_3G_RF_PARAMETER_LID = 1026,
    _NVRAM_EF_UL1_IOT_CUSTOMIZATION_LID = 1027,
    _NVRAM_EF_UL1_HSPA_CATEGORY_LID = 1028,
    _NVRAM_EF_UL1_CUSTOM_DYNAMIC_INIT_DEBUG_LID = 195,
    _NVRAM_EF_UL1_MIPI_TPC_HIGHBAND1_LID = 1029,
    _NVRAM_EF_UL1_MIPI_TPC_HIGHBAND2_LID = 1030,
    _NVRAM_EF_UL1_MIPI_TPC_HIGHBAND3_LID = 1031,
    _NVRAM_EF_UL1_MIPI_TPC_LOWBAND1_LID = 1032,
    _NVRAM_EF_UL1_MIPI_TPC_LOWBAND2_LID = 1033,
    _NVRAM_EF_UL1_MIPI_RX_EVENT_HIGHBAND1_LID = 1039,
    _NVRAM_EF_UL1_MIPI_RX_EVENT_HIGHBAND2_LID = 1040,
    _NVRAM_EF_UL1_MIPI_RX_EVENT_HIGHBAND3_LID = 1041,
    _NVRAM_EF_UL1_MIPI_RX_EVENT_LOWBAND1_LID = 1042,
    _NVRAM_EF_UL1_MIPI_RX_EVENT_LOWBAND2_LID = 1043,
    _NVRAM_EF_UL1_MIPI_RX_DATA_HIGHBAND1_LID = 1044,
    _NVRAM_EF_UL1_MIPI_RX_DATA_HIGHBAND2_LID = 1045,
    _NVRAM_EF_UL1_MIPI_RX_DATA_HIGHBAND3_LID = 1046,
    _NVRAM_EF_UL1_MIPI_RX_DATA_LOWBAND1_LID = 1047,
    _NVRAM_EF_UL1_MIPI_RX_DATA_LOWBAND2_LID = 1048,
    _NVRAM_EF_UL1_MIPI_TX_EVENT_HIGHBAND1_LID = 1049,
    _NVRAM_EF_UL1_MIPI_TX_EVENT_HIGHBAND2_LID = 1050,
    _NVRAM_EF_UL1_MIPI_TX_EVENT_HIGHBAND3_LID = 1051,
    _NVRAM_EF_UL1_MIPI_TX_EVENT_LOWBAND1_LID = 1052,
    _NVRAM_EF_UL1_MIPI_TX_EVENT_LOWBAND2_LID = 1053,
    _NVRAM_EF_UL1_MIPI_TX_DATA_HIGHBAND1_LID = 1054,
    _NVRAM_EF_UL1_MIPI_TX_DATA_HIGHBAND2_LID = 1055,
    _NVRAM_EF_UL1_MIPI_TX_DATA_HIGHBAND3_LID = 1056,
    _NVRAM_EF_UL1_MIPI_TX_DATA_LOWBAND1_LID = 1057,
    _NVRAM_EF_UL1_MIPI_TX_DATA_LOWBAND2_LID = 1058,
    _NVRAM_EF_UL1_MIPI_ASM_ISOLATION_HIGHBAND1_LID = 1059,
    _NVRAM_EF_UL1_MIPI_ASM_ISOLATION_HIGHBAND2_LID = 1060,
    _NVRAM_EF_UL1_MIPI_ASM_ISOLATION_HIGHBAND3_LID = 1061,
    _NVRAM_EF_UL1_MIPI_ASM_ISOLATION_LOWBAND1_LID = 1062,
    _NVRAM_EF_UL1_MIPI_ASM_ISOLATION_LOWBAND2_LID = 1063,
    _NVRAM_EF_UL1_MIPI_INIT_CW_LID = 1064,
    _NVRAM_EF_UL1_MIPI_SLEEP_CW_LID = 1065,
    _NVRAM_EF_SYS_EXCEPTION_LID = 6,
    _NVRAM_EF_ADC_LID = 2560,
    NVRAM_TRC_LID_TOTAL
}nvram_trc_lid_enum;
# 149 "./service/dhl/database/msglog_db/custom_parse_db.c" 2



# 1 "interface/service/nvram/nvram_data_items.h" 1
# 976 "interface/service/nvram/nvram_data_items.h"
# 1 "interface/service/nvram/nvram_defs.h" 1
# 977 "interface/service/nvram/nvram_data_items.h" 2


# 1 "interface/service/config/stack_buff_pool.h" 1
# 109 "interface/service/config/stack_buff_pool.h"
typedef struct buff_pool_info_struct {
   kal_poolid pool_id;
   kal_uint32 size;
   kal_uint16 no_of_buff;
   kal_uint32 num_of_misses;
} buff_pool_info_struct;




extern void stack_init_buff_pool_info(void);
extern kal_bool stack_resources_init(void);
extern void stack_ps_init_buff_pool_info(void);
extern kal_bool stack_ps_resources_init(void);
# 980 "interface/service/nvram/nvram_data_items.h" 2
# 1 "interface/service/config/ctrl_buff_pool.h" 1
# 429 "interface/service/config/ctrl_buff_pool.h"
# 1 "interface/service/config/kal_user_mem.h" 1
# 533 "interface/service/config/kal_user_mem.h"
# 1 "interface/service/config/stack_buff_pool.h" 1
# 534 "interface/service/config/kal_user_mem.h" 2
# 622 "interface/service/config/kal_user_mem.h"
typedef enum {
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE32 = 0,
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE64 = 0,
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE128 = 0,
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE256 = 0,
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE512 = 0,
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE1024 = 0,
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE2048 = 0,
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE4096 = 0,

   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE8192 = 0,
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE16384 = 0,
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE32768 = 0,
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE65536 = 0,
   NUM_CUSTOM_CTRL_BUFF_POOL_SIZE100000 = 0,

} custom_ctrl_num_buff_pool_size;
# 664 "interface/service/config/kal_user_mem.h"
typedef enum {
   CTRL_BUFF_POOL_SIZE32 = 32,
   CTRL_BUFF_POOL_SIZE64 = 64,
   CTRL_BUFF_POOL_SIZE128 = 128,
   CTRL_BUFF_POOL_SIZE256 = 256,
   CTRL_BUFF_POOL_SIZE512 = 512,
   CTRL_BUFF_POOL_SIZE1024 = 1024,
   CTRL_BUFF_POOL_SIZE2048 = 2048,
   CTRL_BUFF_POOL_SIZE4096 = 4096,

   CTRL_BUFF_POOL_SIZE8192 = 8192,
   CTRL_BUFF_POOL_SIZE16384 = 16384,
   CTRL_BUFF_POOL_SIZE32768 = 32768,
   CTRL_BUFF_POOL_SIZE65536 = 65536,
   CTRL_BUFF_POOL_SIZE100000 = 100000,
   CTRL_BUFF_POOL_MAX_BUFF_SIZE = CTRL_BUFF_POOL_SIZE100000



} ctrl_buff_pool_size;
# 719 "interface/service/config/kal_user_mem.h"
typedef enum {
   NUM_CTRL_BUFF_POOL_SIZE32 = 920,
   NUM_CTRL_BUFF_POOL_SIZE64 = 390,
   NUM_CTRL_BUFF_POOL_SIZE128 = 230,
   NUM_CTRL_BUFF_POOL_SIZE256 = 210,
   NUM_CTRL_BUFF_POOL_SIZE512 = 85,



   NUM_CTRL_BUFF_POOL_SIZE1024 = 55,

   NUM_CTRL_BUFF_POOL_SIZE2048 = 50,
   NUM_CTRL_BUFF_POOL_SIZE4096 = 15,
   NUM_CTRL_BUFF_POOL_SIZE8192 = 12,
   NUM_CTRL_BUFF_POOL_SIZE16384 = 10,
   NUM_CTRL_BUFF_POOL_SIZE32768 = 6,
   NUM_CTRL_BUFF_POOL_SIZE65536 = 5,

   NUM_CTRL_BUFF_POOL_SIZE100000 = 0



} ctrl_num_buff_pool_size;
# 1060 "interface/service/config/kal_user_mem.h"
extern buff_pool_info_struct ctrl_buff_pool_info_g[ 13];




extern void config_ctrl_buff_info( void );
# 430 "interface/service/config/ctrl_buff_pool.h" 2
# 981 "interface/service/nvram/nvram_data_items.h" 2
# 1 "interface/service/config/sysconf_statistics.h" 1
# 203 "interface/service/config/sysconf_statistics.h"
# 1 "interface/service/config/stack_config.h" 1
# 204 "interface/service/config/sysconf_statistics.h" 2
# 1 "interface/service/config/ctrl_buff_pool.h" 1
# 205 "interface/service/config/sysconf_statistics.h" 2
# 215 "interface/service/config/sysconf_statistics.h"
enum {
 STACK_STATS_NONE,
 STACK_STATS_UPDATE,
 STACK_STATS_END
};

enum
{
    STACK_STATS_HISR_NAME = 0,
    STACK_STATS_HISR_MAX_NAME = 8
};

typedef struct clib_heap_statistics_t {
    kal_uint32 curr_alloc_mem;
    kal_uint32 max_alloc_mem;
    kal_uint32 alloc_count;
    kal_uint32 alloc_fail_count;
    kal_uint32 config_size;
} clib_heap_statistics_struct;




struct kal_mod_res_cnt
{
    module_type owner_module;
    kal_uint16 count;
};

typedef struct
{
    kal_uint32 *adm_cb;
    kal_uint32 adm_cb_size;
    kal_uint32 max_mbsize_of_mini_left_size;
    kal_uint32 mini_left_size;
    kal_uint32 creator_caller;


}ADM_PROFILE;



typedef struct all_timers_stat_s
{



    kal_uint32 stack_timer_no;
    kal_uint32 kal_timer_no;
    kal_uint32 es_timer_no;
}all_timer_stat_s;


typedef struct runtime_sysmem_size
{
 kal_uint16 evshed;
 kal_uint16 mutex;
 kal_uint16 sem;
 kal_uint16 event_group;
 kal_uint16 stack_timer;
 kal_uint16 kal_timer;
 kal_uint16 enh_mutex;
} runtime_sysmem_size_s;

typedef struct runtime_max_amount
{
 kal_uint32 task_name;
 kal_uint8 evshed;
 kal_uint8 mutex;
 kal_uint8 sem;
 kal_uint8 event_group;
 kal_uint8 stack_timer;
 kal_uint8 kal_timer;
 kal_uint8 enh_mutex;
} runtime_max_amount_s;

typedef struct stack_statistics_t {
 kal_uint16 stack_stats_status;
 kal_uint32 max_sys_mem_used;
 kal_uint32 max_sysdebug_mem_used;

    kal_uint32 max_mutex_number;
    kal_uint32 max_event_number;
    kal_uint32 max_eventgroup_number;

    clib_heap_statistics_struct clib_heap_stats;
 kal_uint16 max_task_stack_used[255];
 kal_uint16 max_hisr_stack_used[((20)+(128))];

 kal_uint8 max_task_extq_enqued[255];
    kal_uint8 max_task_intq_enqued[255];


 kal_uint16 max_ctrl_buff_num_allocated[13];
# 319 "interface/service/config/sysconf_statistics.h"
    all_timer_stat_s timers_stat;



    runtime_sysmem_size_s runtime_sysmem_size;
    runtime_max_amount_s system_runtime_max_amount;
    runtime_max_amount_s task_runtime_max_amount[255];
    ADM_PROFILE top_adm_profile[(5)];
    ADM_PROFILE top_adm_user_profile[(5)];

} stack_statistics_struct;






extern kal_int32 stack_get_stats_info(kal_uint32 stats, void *buff, kal_uint32 buff_size);
extern void clib_get_heap_statistics(clib_heap_statistics_struct *pstat);
# 982 "interface/service/nvram/nvram_data_items.h" 2
# 991 "interface/service/nvram/nvram_data_items.h"
# 1 "interface/service/dhl/tst.h" 1
# 99 "interface/service/dhl/tst.h"
extern void tst_init_filters(char *src, unsigned short len);
extern void tst_save_filter_to_nvram(void);

typedef struct
{
  kal_bool spare_logging_enabled;
  kal_bool usb_dma_logging_enable;
  kal_bool malmo_disable;
  kal_bool dnt_enable;
  kal_uint8 meta_mode_trace_enable;
}
tst_config_struct_t;
# 992 "interface/service/nvram/nvram_data_items.h" 2


# 1 "interface/modem/l1/fdd/external/ul1cal.h" 1
# 71 "interface/modem/l1/fdd/external/ul1cal.h"
# 1 "interface/modem/l1/fdd/external/ul1d_rf_public.h" 1
# 231 "interface/modem/l1/fdd/external/ul1d_rf_public.h"
# 1 "interface/modem/l1/fdd/external/ul1d_rf_cid.h" 1
# 232 "interface/modem/l1/fdd/external/ul1d_rf_public.h" 2

# 1 "custom/modem/ul1_rf/MT6735_UMTS_FDD_MT6169_CUSTOM/ul1d_custom_mipi.h" 1
# 61 "custom/modem/ul1_rf/MT6735_UMTS_FDD_MT6169_CUSTOM/ul1d_custom_mipi.h"
# 1 "interface/modem/l1/fdd/external/ul1d_rf_cid.h" 1
# 62 "custom/modem/ul1_rf/MT6735_UMTS_FDD_MT6169_CUSTOM/ul1d_custom_mipi.h" 2
# 147 "custom/modem/ul1_rf/MT6735_UMTS_FDD_MT6169_CUSTOM/ul1d_custom_mipi.h"
typedef struct
{
   kal_uint16 mipi_data_st;
   kal_uint16 mipi_data_sp;
}UL1_MIPI_DATA_STSP;

typedef struct
{
   kal_uint16 addr;
   kal_uint32 data;
}UL1_MIPI_ADDR_DATA_EXPAND_TABLE_T;

typedef struct
{
   kal_uint16 mipi_elm_type;
   UL1_MIPI_DATA_STSP mipi_data_stsp;
   kal_uint16 mipi_evt_type;
   kal_uint32 mipi_evt_offset;
}UL1_MIPI_EVENT_TABLE_T;

typedef struct
{
   kal_uint16 mipi_subband_freq;
   UL1_MIPI_ADDR_DATA_EXPAND_TABLE_T mipi_data;
}UL1_MIPI_DATA_EXPAND_TABLE_T;

typedef struct
{
   kal_uint16 mipi_elm_type;
   kal_uint16 mipi_port_sel;
   kal_uint16 mipi_data_seq;
   kal_uint16 mipi_usid;
   UL1_MIPI_DATA_EXPAND_TABLE_T mipi_subband_data[5];
}UL1_MIPI_DATA_SUBBAND_TABLE_T;

typedef struct
{
   kal_uint16 mipi_elm_type;
   kal_uint16 mipi_port_sel;
   kal_uint16 mipi_data_seq;
   kal_uint16 mipi_usid;
   UL1_MIPI_ADDR_DATA_EXPAND_TABLE_T mipi_data;
}UL1_MIPI_DATA_TABLE_T;

typedef struct
{
   UL1_MIPI_EVENT_TABLE_T umts_mipi_tpc_event[8];
   UL1_MIPI_DATA_SUBBAND_TABLE_T umts_mipi_tpc_data[40];
}UL1_UMTS_MIPI_TPC_T;

typedef struct
{
   kal_uint16 mipi_subband_freq;
   kal_uint32 mipi_pa_tpc_data[8][5];
}UL1_MIPI_PA_TPC_SECTION_TABLE_T;



extern UL1_MIPI_DATA_TABLE_T UMTS_MIPI_INITIAL_CW[];
extern UL1_MIPI_DATA_TABLE_T UMTS_MIPI_INITIAL_CW_set0[];
extern UL1_MIPI_DATA_TABLE_T UMTS_MIPI_INITIAL_CW_set1[];
extern UL1_MIPI_DATA_TABLE_T UMTS_MIPI_SLEEP_CW[];
extern UL1_MIPI_EVENT_TABLE_T* UMTS_MIPI_RX_EVENT_TABLE[];
extern UL1_MIPI_EVENT_TABLE_T* UMTS_MIPI_RX_EVENT_TABLE_set0[];
extern UL1_MIPI_EVENT_TABLE_T* UMTS_MIPI_RX_EVENT_TABLE_set1[];
extern UL1_MIPI_DATA_SUBBAND_TABLE_T* UMTS_MIPI_RX_DATA_TABLE[];
extern UL1_MIPI_DATA_SUBBAND_TABLE_T* UMTS_MIPI_RX_DATA_TABLE_set0[];
extern UL1_MIPI_DATA_SUBBAND_TABLE_T* UMTS_MIPI_RX_DATA_TABLE_set1[];
extern UL1_MIPI_EVENT_TABLE_T* UMTS_MIPI_TX_EVENT_TABLE[];
extern UL1_MIPI_EVENT_TABLE_T* UMTS_MIPI_TX_EVENT_TABLE_set0[];
extern UL1_MIPI_EVENT_TABLE_T* UMTS_MIPI_TX_EVENT_TABLE_set1[];
extern UL1_MIPI_DATA_SUBBAND_TABLE_T* UMTS_MIPI_TX_DATA_TABLE[];
extern UL1_MIPI_DATA_SUBBAND_TABLE_T* UMTS_MIPI_TX_DATA_TABLE_set0[];
extern UL1_MIPI_DATA_SUBBAND_TABLE_T* UMTS_MIPI_TX_DATA_TABLE_set1[];
extern UL1_MIPI_EVENT_TABLE_T* UMTS_MIPI_TPC_EVENT_TABLE[];
extern UL1_MIPI_DATA_SUBBAND_TABLE_T* UMTS_MIPI_TPC_DATA_TABLE[];
extern UL1_MIPI_DATA_TABLE_T* UMTS_MIPI_ASM_ISOLATION_DATA_TABLE[];

extern UL1_UMTS_MIPI_TPC_T* UMTS_MIPI_TPC_TABLE[];
extern UL1_UMTS_MIPI_TPC_T* UMTS_MIPI_TPC_TABLE_set0[];
extern UL1_UMTS_MIPI_TPC_T* UMTS_MIPI_TPC_TABLE_set1[];
# 234 "interface/modem/l1/fdd/external/ul1d_rf_public.h" 2
# 757 "interface/modem/l1/fdd/external/ul1d_rf_public.h"
typedef kal_uint32 BPI_data_type;
# 793 "interface/modem/l1/fdd/external/ul1d_rf_public.h"
typedef enum
{
   UMTSBandNone = 0,
   UMTSBand1 = 1,
   UMTSBand2 = 2,
   UMTSBand3 = 3,
   UMTSBand4 = 4,
   UMTSBand5 = 5,
   UMTSBand6 = 6,
   UMTSBand7 = 7,
   UMTSBand8 = 8,
   UMTSBand9 = 9,
   UMTSBand10 = 10,
   UMTSBand11 = 11,
   UMTSBand12 = 12,
   UMTSBand13 = 13,
   UMTSBand14 = 14,
   UMTSBand15 = 15,
   UMTSBand16 = 16,
   UMTSBand17 = 17,
   UMTSBand18 = 18,
   UMTSBand19 = 19,
   UMTSBand20 = 20,
   UMTSBand21 = 21,
   UMTSBand22 = 22,
   UMTSBandcount
} UMTSBand;

typedef struct {
   kal_uint32 capability;
   kal_uint32 band_support;
   kal_uint32 rxd_band_support;
   kal_uint32 padrift_band_support;
} UMTS_MsCapabilityEx;

typedef struct
{
   kal_uint16 max_uarfcn;
   kal_int8 path_loss_H;
   kal_int8 path_loss_M;
   kal_int8 path_loss_L;
} U_sAGCGAINOFFSET;

typedef struct
{
   U_sAGCGAINOFFSET gain_of_uarfcn[15];
} U_sTEMPAGCOFFSET;

typedef struct
{
   kal_uint16 level_0;
   kal_uint16 level_1;
} U_sDC2DC;

typedef struct
{
   kal_uint16 start;
   kal_uint16 end;
} U_sHYSTERESISDATA;

typedef struct
{
   kal_uint16 max_uarfcn;
   kal_int16 pwr_offset_dB;
   kal_int16 pwr_offset_txdac;
} U_sARFCN_SECTION;

typedef struct
{
   kal_uint8 pwr_dt_thr;
   kal_uint8 pwr_dt_section;
   kal_uint16 pwr_dt_dac[ 32 ];
   kal_int16 pwr_dt_value[ 32 ];
   U_sARFCN_SECTION pwr_dt_comp_by_subband[ 15 ];
   kal_int16 pwr_dt_comp_by_temperature[8][2];
} U_sPWTDTDATA;

typedef struct
{
   kal_uint16 dc2dc_level;
   kal_uint16 vbias_dac;
   kal_uint8 vm1;
   kal_uint8 vm2;
} U_sPADATA;

typedef struct
{
   U_sPADATA pa_data;
   kal_uint16 vga_dac[10];
   U_sARFCN_SECTION vga_comp_by_subband[ 15 ];
   kal_int16 vga_comp_by_temperature[8][2];
} U_sTXPOWERDATA;

typedef struct
{
   kal_int16 vga_comp_by_temperature[8][2];
} U_sRACHCOMP;


typedef struct
{
   U_sRACHCOMP power_dac[3];
} U_sPARACHTMCOMPDATA;
# 924 "interface/modem/l1/fdd/external/ul1d_rf_public.h"
typedef enum
{
   ANT_RX_MAIN_ONLY = 0,
   ANT_RX_RXD_ONLY = 1,
   ANT_RX_BOTH = 2,
   ANT_RESUME_DEFAULT = 3
}ANT_SEL_TYPE;

typedef struct
{
   kal_bool rx_path_selection_enable;
   ANT_SEL_TYPE rx_path_type;
} U_sRxPathSelection;


typedef struct
{
   kal_uint16 initDac;
   kal_int32 slope;
} U_sAFCDACDATA;

typedef struct
{
   kal_int32 cap_id;
} U_sAFCCAPDATA;


typedef struct
{
   U_sDC2DC pa_dc2dc;
   U_sTXPOWERDATA power_dac[3];
   U_sHYSTERESISDATA tx_hysteresis[2];
   U_sPWTDTDATA pwr_dt_data;
} U_sRAMPDATA;

typedef struct
{
   kal_uint8 pa_mode;
   kal_int8 prf;
   kal_uint8 dc2dc_lvl;
   kal_uint8 vm1;
   kal_uint8 vm2;
   kal_uint16 vbias_dac;
   kal_uint16 pa_gain;
} U_sPMULEVHANDLE;

typedef struct
{







   kal_uint8 octlev_num_section;
   kal_uint8 reserved_byte;
   kal_uint32 pa_phase_compensation[3];
   U_sPMULEVHANDLE pmu_level_handle[8];
} U_sPAOCTLVLSETTING;


typedef struct
{
   kal_bool ADAPT_Customized;
   kal_bool reserved1;
   kal_bool reserved2;
   kal_bool reserved3;
} U_sUl1IotCustomSupportStruct;
# 1027 "interface/modem/l1/fdd/external/ul1d_rf_public.h"
typedef struct
{

   kal_uint8 tpc_step;
   kal_uint8 itp;
   kal_uint8 rpp;
   kal_uint8 fmt_idx;
   kal_uint8 dl_frame_type;
   kal_uint16 slot_mask;
   kal_int8 tpc_cmd[15];
   kal_uint8 beta_c;
   kal_uint8 beta_d;
# 1052 "interface/modem/l1/fdd/external/ul1d_rf_public.h"
} META_HWTPC_FRAME_INFO;


typedef struct
{
   kal_int8 temper_offset[8];
   U_sAGCGAINOFFSET gain_of_uarfcn[15];
} U_sAGCOFFSETRXD;

typedef struct
{
   kal_int16 pa_drift_comp_w_table[6][2];
   kal_int16 pa_drift_comp_h_table[6][4];
} U_sPADRIFTSETTING;


typedef enum
{
   MPRSetting0 = 0,
   MPRSetting1 = 1,
   MPRSetting2 = 2,
   MPRSetting3 = 3,
   MPRSetting4 = 4,
   MPRSettingCount
} MPR_Setting;


typedef enum
{
   MIPI_DEFAULT = 0,
   MIPI_DISABLE = 1,
   MIPI_ENABLE = 2



}MIPI_Setting;
# 1153 "interface/modem/l1/fdd/external/ul1d_rf_public.h"
typedef struct
{
   kal_uint16 maxOffset;
   kal_uint16 vmOffset;
   kal_uint16 vbiasOffset;
   kal_uint16 dc2dcOffset;
   kal_uint16 vgaOffset;
}U_sUl1dRfPaControlTiming;

typedef struct
{

   kal_int16 xTC_PR1;
   kal_int16 xTC_PR2;
   kal_int16 xTC_PR2B;


   kal_int16 xTC_PR3;
   kal_int16 xTC_PR3A;


   kal_int16 xTC_PT1;
   kal_int16 xTC_PT2;
   kal_int16 xTC_PT2B;


   kal_int16 xTC_PT3;
   kal_int16 xTC_PT3A;
}U_sUl1dRfBsiBpiTiming;

typedef struct
{

   BPI_data_type xPDATA_BAND1_PR1;
   BPI_data_type xPDATA_BAND1_PR2;
   BPI_data_type xPDATA_BAND1_PR2B;
   BPI_data_type xPDATA_BAND1_PR3;
   BPI_data_type xPDATA_BAND1_PR3A;
   BPI_data_type xPDATA_BAND1_PT1;
   BPI_data_type xPDATA_BAND1_PT2;
   BPI_data_type xPDATA_BAND1_PT2B;
   BPI_data_type xPDATA_BAND1_PT3;
   BPI_data_type xPDATA_BAND1_PT3A;

   BPI_data_type xPDATA_BAND1_RXD_PR1;
   BPI_data_type xPDATA_BAND1_RXD_PR2;
   BPI_data_type xPDATA_BAND1_RXD_PR2B;
   BPI_data_type xPDATA_BAND1_RXD_PR3;
   BPI_data_type xPDATA_BAND1_RXD_PR3A;



   BPI_data_type xPDATA_BAND2_PR1;
   BPI_data_type xPDATA_BAND2_PR2;
   BPI_data_type xPDATA_BAND2_PR2B;
   BPI_data_type xPDATA_BAND2_PR3;
   BPI_data_type xPDATA_BAND2_PR3A;
   BPI_data_type xPDATA_BAND2_PT1;
   BPI_data_type xPDATA_BAND2_PT2;
   BPI_data_type xPDATA_BAND2_PT2B;
   BPI_data_type xPDATA_BAND2_PT3;
   BPI_data_type xPDATA_BAND2_PT3A;

   BPI_data_type xPDATA_BAND2_RXD_PR1;
   BPI_data_type xPDATA_BAND2_RXD_PR2;
   BPI_data_type xPDATA_BAND2_RXD_PR2B;
   BPI_data_type xPDATA_BAND2_RXD_PR3;
   BPI_data_type xPDATA_BAND2_RXD_PR3A;



   BPI_data_type xPDATA_BAND3_PR1;
   BPI_data_type xPDATA_BAND3_PR2;
   BPI_data_type xPDATA_BAND3_PR2B;
   BPI_data_type xPDATA_BAND3_PR3;
   BPI_data_type xPDATA_BAND3_PR3A;
   BPI_data_type xPDATA_BAND3_PT1;
   BPI_data_type xPDATA_BAND3_PT2;
   BPI_data_type xPDATA_BAND3_PT2B;
   BPI_data_type xPDATA_BAND3_PT3;
   BPI_data_type xPDATA_BAND3_PT3A;

   BPI_data_type xPDATA_BAND3_RXD_PR1;
   BPI_data_type xPDATA_BAND3_RXD_PR2;
   BPI_data_type xPDATA_BAND3_RXD_PR2B;
   BPI_data_type xPDATA_BAND3_RXD_PR3;
   BPI_data_type xPDATA_BAND3_RXD_PR3A;



   BPI_data_type xPDATA_BAND4_PR1;
   BPI_data_type xPDATA_BAND4_PR2;
   BPI_data_type xPDATA_BAND4_PR2B;
   BPI_data_type xPDATA_BAND4_PR3;
   BPI_data_type xPDATA_BAND4_PR3A;
   BPI_data_type xPDATA_BAND4_PT1;
   BPI_data_type xPDATA_BAND4_PT2;
   BPI_data_type xPDATA_BAND4_PT2B;
   BPI_data_type xPDATA_BAND4_PT3;
   BPI_data_type xPDATA_BAND4_PT3A;

   BPI_data_type xPDATA_BAND4_RXD_PR1;
   BPI_data_type xPDATA_BAND4_RXD_PR2;
   BPI_data_type xPDATA_BAND4_RXD_PR2B;
   BPI_data_type xPDATA_BAND4_RXD_PR3;
   BPI_data_type xPDATA_BAND4_RXD_PR3A;



   BPI_data_type xPDATA_BAND5_PR1;
   BPI_data_type xPDATA_BAND5_PR2;
   BPI_data_type xPDATA_BAND5_PR2B;
   BPI_data_type xPDATA_BAND5_PR3;
   BPI_data_type xPDATA_BAND5_PR3A;
   BPI_data_type xPDATA_BAND5_PT1;
   BPI_data_type xPDATA_BAND5_PT2;
   BPI_data_type xPDATA_BAND5_PT2B;
   BPI_data_type xPDATA_BAND5_PT3;
   BPI_data_type xPDATA_BAND5_PT3A;

   BPI_data_type xPDATA_BAND5_RXD_PR1;
   BPI_data_type xPDATA_BAND5_RXD_PR2;
   BPI_data_type xPDATA_BAND5_RXD_PR2B;
   BPI_data_type xPDATA_BAND5_RXD_PR3;
   BPI_data_type xPDATA_BAND5_RXD_PR3A;



   BPI_data_type xPDATA_BAND6_PR1;
   BPI_data_type xPDATA_BAND6_PR2;
   BPI_data_type xPDATA_BAND6_PR2B;
   BPI_data_type xPDATA_BAND6_PR3;
   BPI_data_type xPDATA_BAND6_PR3A;
   BPI_data_type xPDATA_BAND6_PT1;
   BPI_data_type xPDATA_BAND6_PT2;
   BPI_data_type xPDATA_BAND6_PT2B;
   BPI_data_type xPDATA_BAND6_PT3;
   BPI_data_type xPDATA_BAND6_PT3A;

   BPI_data_type xPDATA_BAND6_RXD_PR1;
   BPI_data_type xPDATA_BAND6_RXD_PR2;
   BPI_data_type xPDATA_BAND6_RXD_PR2B;
   BPI_data_type xPDATA_BAND6_RXD_PR3;
   BPI_data_type xPDATA_BAND6_RXD_PR3A;



   BPI_data_type xPDATA_BAND7_PR1;
   BPI_data_type xPDATA_BAND7_PR2;
   BPI_data_type xPDATA_BAND7_PR2B;
   BPI_data_type xPDATA_BAND7_PR3;
   BPI_data_type xPDATA_BAND7_PR3A;
   BPI_data_type xPDATA_BAND7_PT1;
   BPI_data_type xPDATA_BAND7_PT2;
   BPI_data_type xPDATA_BAND7_PT2B;
   BPI_data_type xPDATA_BAND7_PT3;
   BPI_data_type xPDATA_BAND7_PT3A;

   BPI_data_type xPDATA_BAND7_RXD_PR1;
   BPI_data_type xPDATA_BAND7_RXD_PR2;
   BPI_data_type xPDATA_BAND7_RXD_PR2B;
   BPI_data_type xPDATA_BAND7_RXD_PR3;
   BPI_data_type xPDATA_BAND7_RXD_PR3A;



   BPI_data_type xPDATA_BAND8_PR1;
   BPI_data_type xPDATA_BAND8_PR2;
   BPI_data_type xPDATA_BAND8_PR2B;
   BPI_data_type xPDATA_BAND8_PR3;
   BPI_data_type xPDATA_BAND8_PR3A;
   BPI_data_type xPDATA_BAND8_PT1;
   BPI_data_type xPDATA_BAND8_PT2;
   BPI_data_type xPDATA_BAND8_PT2B;
   BPI_data_type xPDATA_BAND8_PT3;
   BPI_data_type xPDATA_BAND8_PT3A;

   BPI_data_type xPDATA_BAND8_RXD_PR1;
   BPI_data_type xPDATA_BAND8_RXD_PR2;
   BPI_data_type xPDATA_BAND8_RXD_PR2B;
   BPI_data_type xPDATA_BAND8_RXD_PR3;
   BPI_data_type xPDATA_BAND8_RXD_PR3A;



   BPI_data_type xPDATA_BAND9_PR1;
   BPI_data_type xPDATA_BAND9_PR2;
   BPI_data_type xPDATA_BAND9_PR2B;
   BPI_data_type xPDATA_BAND9_PR3;
   BPI_data_type xPDATA_BAND9_PR3A;
   BPI_data_type xPDATA_BAND9_PT1;
   BPI_data_type xPDATA_BAND9_PT2;
   BPI_data_type xPDATA_BAND9_PT2B;
   BPI_data_type xPDATA_BAND9_PT3;
   BPI_data_type xPDATA_BAND9_PT3A;

   BPI_data_type xPDATA_BAND9_RXD_PR1;
   BPI_data_type xPDATA_BAND9_RXD_PR2;
   BPI_data_type xPDATA_BAND9_RXD_PR2B;
   BPI_data_type xPDATA_BAND9_RXD_PR3;
   BPI_data_type xPDATA_BAND9_RXD_PR3A;



   BPI_data_type xPDATA_BAND10_PR1;
   BPI_data_type xPDATA_BAND10_PR2;
   BPI_data_type xPDATA_BAND10_PR2B;
   BPI_data_type xPDATA_BAND10_PR3;
   BPI_data_type xPDATA_BAND10_PR3A;
   BPI_data_type xPDATA_BAND10_PT1;
   BPI_data_type xPDATA_BAND10_PT2;
   BPI_data_type xPDATA_BAND10_PT2B;
   BPI_data_type xPDATA_BAND10_PT3;
   BPI_data_type xPDATA_BAND10_PT3A;

   BPI_data_type xPDATA_BAND10_RXD_PR1;
   BPI_data_type xPDATA_BAND10_RXD_PR2;
   BPI_data_type xPDATA_BAND10_RXD_PR2B;
   BPI_data_type xPDATA_BAND10_RXD_PR3;
   BPI_data_type xPDATA_BAND10_RXD_PR3A;


   BPI_data_type xPDATA_BAND11_PR1;
   BPI_data_type xPDATA_BAND11_PR2;
   BPI_data_type xPDATA_BAND11_PR2B;
   BPI_data_type xPDATA_BAND11_PR3;
   BPI_data_type xPDATA_BAND11_PR3A;
   BPI_data_type xPDATA_BAND11_PT1;
   BPI_data_type xPDATA_BAND11_PT2;
   BPI_data_type xPDATA_BAND11_PT2B;
   BPI_data_type xPDATA_BAND11_PT3;
   BPI_data_type xPDATA_BAND11_PT3A;
   BPI_data_type xPDATA_BAND11_RXD_PR1;
   BPI_data_type xPDATA_BAND11_RXD_PR2;
   BPI_data_type xPDATA_BAND11_RXD_PR2B;
   BPI_data_type xPDATA_BAND11_RXD_PR3;
   BPI_data_type xPDATA_BAND11_RXD_PR3A;


   BPI_data_type xPDATA_BAND19_PR1;
   BPI_data_type xPDATA_BAND19_PR2;
   BPI_data_type xPDATA_BAND19_PR2B;
   BPI_data_type xPDATA_BAND19_PR3;
   BPI_data_type xPDATA_BAND19_PR3A;
   BPI_data_type xPDATA_BAND19_PT1;
   BPI_data_type xPDATA_BAND19_PT2;
   BPI_data_type xPDATA_BAND19_PT2B;
   BPI_data_type xPDATA_BAND19_PT3;
   BPI_data_type xPDATA_BAND19_PT3A;
   BPI_data_type xPDATA_BAND19_RXD_PR1;
   BPI_data_type xPDATA_BAND19_RXD_PR2;
   BPI_data_type xPDATA_BAND19_RXD_PR2B;
   BPI_data_type xPDATA_BAND19_RXD_PR3;
   BPI_data_type xPDATA_BAND19_RXD_PR3A;

}U_sUl1dRfBpiData;
# 1572 "interface/modem/l1/fdd/external/ul1d_rf_public.h"
typedef struct
{
   UMTSBand HB1;
   UMTSBand HB2;


   UMTSBand HB3;


   UMTSBand LB1;

   UMTSBand LB2;

}U_sUl1dRfBandIndicator;

typedef struct
{
   kal_uint8 xBAND1_CHANNEL_SEL;
   kal_uint8 xBAND2_CHANNEL_SEL;
   kal_uint8 xBAND3_CHANNEL_SEL;
   kal_uint8 xBAND4_CHANNEL_SEL;
   kal_uint8 xBAND5_CHANNEL_SEL;
   kal_uint8 xBAND6_CHANNEL_SEL;
   kal_uint8 xBAND8_CHANNEL_SEL;
   kal_uint8 xBAND9_CHANNEL_SEL;
   kal_uint8 xBAND10_CHANNEL_SEL;

   kal_uint8 xBAND11_CHANNEL_SEL;
   kal_uint8 xBAND19_CHANNEL_SEL;

   kal_uint8 xBAND1_CHANNEL2_SEL;
   kal_uint8 xBAND2_CHANNEL2_SEL;
   kal_uint8 xBAND3_CHANNEL2_SEL;
   kal_uint8 xBAND4_CHANNEL2_SEL;
   kal_uint8 xBAND5_CHANNEL2_SEL;
   kal_uint8 xBAND6_CHANNEL2_SEL;
   kal_uint8 xBAND8_CHANNEL2_SEL;
   kal_uint8 xBAND9_CHANNEL2_SEL;
   kal_uint8 xBAND10_CHANNEL2_SEL;
   kal_uint8 xBAND11_CHANNEL2_SEL;
   kal_uint8 xBAND19_CHANNEL2_SEL;


}U_sUl1dRfRxLnaPortSel;

typedef struct
{
   kal_uint8 xBAND1_OUTPUT_SEL;
   kal_uint8 xBAND2_OUTPUT_SEL;
   kal_uint8 xBAND3_OUTPUT_SEL;
   kal_uint8 xBAND4_OUTPUT_SEL;
   kal_uint8 xBAND5_OUTPUT_SEL;
   kal_uint8 xBAND6_OUTPUT_SEL;
   kal_uint8 xBAND8_OUTPUT_SEL;
   kal_uint8 xBAND9_OUTPUT_SEL;
   kal_uint8 xBAND10_OUTPUT_SEL;

   kal_uint8 xBAND11_OUTPUT_SEL;
   kal_uint8 xBAND19_OUTPUT_SEL;

}U_sUl1dRfTxPathSel;

typedef struct
{
   kal_uint32 Rx_Main_Path_Onoff;
   kal_uint32 Rx_Diversity_Path_Onoff;
}U_sUl1dRxdPathSetting;


typedef struct
{
   MPR_Setting HSDPA_MprBackOff[20];
   MPR_Setting HSUPA_MprBackOff[20];
}U_sUl1dMprBackOff;


typedef struct
{

   kal_uint32 startPattern;


   kal_uint8 structVersion;
   kal_uint8 rfType;
   kal_uint8 isDataUpdate;

   kal_bool umtsRfSettingByNVRAM;



   U_sUl1dRfPaControlTiming umtsRfPaControlTimingOffset;


   U_sUl1dRfBsiBpiTiming umtsBsiBpiTiming;


   U_sUl1dRfBpiData umtsPdata;


   U_sUl1dRfBandIndicator umtsBandIndicator;


   U_sUl1dRfRxLnaPortSel umtsRxLnaPortSel;


   U_sUl1dRfTxPathSel umtsTxPathSel;


   kal_bool xPMU_PA_CONTROL;



   U_sUl1dMprBackOff umtsMprBackOff;



   kal_bool umtsRxDAlwaysOn;


   kal_uint32 umtsPADriftCompensation;


   kal_bool ultra_low_cost_solution;


   kal_bool customer_TM_enable;


   kal_bool isDrdiNvramSaved;

   kal_uint16 drdiCombinedIndex;


   kal_bool umtsIdleModeRxDOn;







   U_sRxPathSelection umtsRxPathSelection;




   kal_uint32 endPattern;

}U_sUl1dRfCustomInputData;





extern kal_uint8 ul1d_BandInfo[5];
# 1735 "interface/modem/l1/fdd/external/ul1d_rf_public.h"
extern U_sUl1dRfCustomInputData UMTS_RF_CUSTOM_INPUT_DATA;
extern U_sTEMPAGCOFFSET* U_AGC_PATHLOSS_TABLE[];
extern kal_uint16 U_TEMP_DAC[8];
extern U_sRAMPDATA* UMTS_RampData[];
extern U_sPAOCTLVLSETTING* U_PA_OCTLEV_TABLE[];
extern U_sPARACHTMCOMPDATA* U_PA_RACH_COMP_TABLE[];
extern U_sAFCDACDATA U_AFC_DAC;
extern U_sAFCCAPDATA U_AFC_CAP;

extern kal_uint8 DC2DC[(3)];
extern kal_uint8 VM_data[(3)];
extern kal_int16 UMTS_RX_START_TQ_TABLE[(9)];
extern kal_int16 UMTS_RX_END_TQ_TABLE[(5)];




extern kal_int16 UMTS_TX_START_TQ_TABLE[(7)];
extern kal_int16 UMTS_TX_END_TQ_TABLE[(3)];



extern BPI_data_type UMTS_PDATA_TABLE[][(2)][(5)];


extern BPI_data_type UMTS_PDATA2_RX_TABLE[][(5)];


extern kal_int16 max_rx_start_offset;
extern kal_int16 max_tx_start_offset;
extern kal_int16 min_rx_end_offset;
extern kal_int16 min_tx_end_offset;
extern kal_uint16 max_offset;
extern kal_uint16 vm_offset;
extern kal_uint16 vbias_offset;
extern kal_uint16 dc2dc_offset;
extern kal_uint16 vga_offset;
extern kal_uint8 pa_section;
extern kal_uint16 vbias_mode;



extern kal_uint32 UL1D_DCXO_CAPID;
extern kal_bool UL1D_Set_CAPID;


extern U_sAGCOFFSETRXD* U_AGC_PATHLOSS_RXD_TABLE[];
extern U_sPADRIFTSETTING* U_PA_DRIFT_TABLE[];
# 1800 "interface/modem/l1/fdd/external/ul1d_rf_public.h"
extern void UL1D_UeBandCapability(kal_uint16 *ue_cap);
extern void UL1D_UeBandCapabilityEx(kal_uint32 *ue_cap);
extern void UL1TST_MsCapability(UMTS_MsCapabilityEx *ms_cap);
extern void UL1D_RF_SetTempDac(void* table);
extern void UL1D_RF_SetPathLossTable(UMTSBand rf_band, void* table);
extern void UL1D_RF_SetTxDacData(UMTSBand rf_band, void* table );
extern void UL1D_RF_SetPaApcDac(UMTSBand rf_band, kal_uint16 idx, kal_uint8 pa_mode, kal_uint8 vm1, kal_uint8 vm2, kal_uint16 dc2dc_level, kal_uint16 vbias_dac, kal_uint16 apc_dac);
extern void UL1D_RF_SetImmediateBSI(kal_uint32 bsidata);
extern void UL1D_RF_GetImmediateBSI(kal_uint32 bsi_addr, kal_uint32 *bsi_data);
extern void UL1D_RF_SetTxPaOctLevData(UMTSBand rf_band, void* table);
extern void UL1D_RF_GetPwrDetMeas(kal_uint16 txpwr_set_idx, kal_uint16 *txpwr_meas);
extern void UL1D_RF_SetTxPrachTmCompData(UMTSBand rf_band, void* table);
extern void UL1D_RF_SetAfcDac(void* table);
extern void UL1D_RF_SetAfcCap(void* table);




extern void UL1D_RF_SetPathLossRxdTable( UMTSBand rf_band, void* table );
extern kal_uint8 UL1D_RF_GetCurrRxDLnaStatus(void);
extern void UL1D_RF_SetTxPaDriftData(UMTSBand rf_band, void* table);
extern void UL1D_RF_SetRxBandwidth(kal_bool is_5mhz);
# 1830 "interface/modem/l1/fdd/external/ul1d_rf_public.h"
extern void UL1D_Meta_HWTPC_Config(kal_uint8 pc_algo, kal_uint8 tpc_used_frame, kal_int16 pini, META_HWTPC_FRAME_INFO* info);



extern kal_bool UL1TST_GET_BIT_COUNT(kal_uint32* total_bits, kal_uint32* error_bits);
extern kal_int8 UL1D_RF_Replace_Gain_Table_for_Cal(kal_uint32 action);
extern kal_uint8 UL1D_RF_GetCurrRxLnaStatus(void);
extern kal_uint32 UL1D_RF_GetID(void);
extern kal_uint32 UL1TST_CAPID_MAX(void);
extern void UL1D_RF_SetCrystalCap(kal_uint32 cap_no);


extern void UL1D_RF_SetDefaultCalDataDetection(kal_uint8 index);
extern void nvram_init_uL1_RF_customInputData(void);


void nvram_init_uL1_mipiData(void);


void nvram_init_uL1_mipiTxData(void);
void nvram_init_uL1_mipiTxEvent(void);
void nvram_init_uL1_mipiRxData(void);
void nvram_init_uL1_mipiRxEvent(void);
void nvram_init_uL1_mipiInitCw(void);
void nvram_init_uL1_mipiSleepCw(void);
# 1932 "interface/modem/l1/fdd/external/ul1d_rf_public.h"
extern unsigned long UL1D_RF_GetRxDCOC_CW151(void);
# 72 "interface/modem/l1/fdd/external/ul1cal.h" 2
# 1 "interface/driver/peripheral/dcl.h" 1
# 272 "interface/driver/peripheral/dcl.h"
typedef char DCL_CHAR;
typedef signed char DCL_INT8;
typedef signed short DCL_INT16;
typedef signed long DCL_INT32;

typedef unsigned char DCL_UCHAR;
typedef unsigned char DCL_UINT8;
typedef unsigned short DCL_UINT16;
typedef unsigned long DCL_UINT32;





   typedef unsigned long long DCL_UINT64;
   typedef signed long long DCL_INT64;


typedef double DCL_DOUBLE;
typedef int DCL_INT;


typedef enum
{
   DCL_FALSE = 0,
   DCL_TRUE
}DCL_BOOLEAN;






# 1 "interface/driver/peripheral/dcl_gpt.h" 1
# 155 "interface/driver/peripheral/dcl_gpt.h"
typedef struct
{
   DCL_UINT16 u2Tick;
   DCL_UINT32 u4Tick;
   void (*pfCallback)(void *);
   void *vPara;
} SGPT_CTRL_START_T;


typedef DCL_UINT16 FGPT_CTRL_RETURN_COUNT_T;

typedef DCL_UINT16 GPT_BUSYWAIT_COUNT;



typedef struct
{
   DCL_UINT16 u2CountValue;
   DCL_BOOLEAN fgAutoReload;
} SGPT2_CTRL_RESET_DATA_T;

typedef struct
{
   DCL_UINT32 u4Clock;
} SGPT2_CTRL_CLK_T;


typedef DCL_UINT32 DCL_EVENT_NEW;

typedef void (*SGPT2_CALLBACK_FUNC)(DCL_EVENT_NEW event);

typedef struct{
 SGPT2_CALLBACK_FUNC gpt2CallBack;
}SGPT2_CALLBACK_FUNC_T;
# 221 "interface/driver/peripheral/dcl_gpt.h"
typedef struct
{
 void (*gpt1_func)(void);
 void (*gpt2_func)(void);
}gpt_func;

typedef struct
{
 kal_uint32 tick;
 void (*gptimer_func)(void *parameter);
 void *parameter;
}gptimer_item;

typedef struct
{
   kal_uint32 status;
   kal_bool GPTSTOP;
   kal_uint32 Hgpt_handle;
   kal_uint16 GPT_TICK;
   kal_uint8 MAX_GPTIMER_ITEMS;
   kal_uint8 GPTUsed[32];

   gptimer_item GPTItems[32];
   gpt_func GPT_FUNC;
   kal_hisrid hisr;
} GPTStruct;



typedef void (*gpt_ms_cb)(void *);
typedef struct
{
 kal_uint16 timeout_tick;
 gpt_ms_cb gpt_ms_callback;
 void * cb_parameter;
}GPT_MS_Struct;
# 306 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_gpio.h" 1
# 126 "interface/driver/peripheral/dcl_gpio.h"
# 1 "driver/drv_def/drv_features_gpio.h" 1



# 1 "driver/drv_def/drv_features_chip_select.h" 1
# 234 "driver/drv_def/drv_features_chip_select.h"
# 1 "driver/drv_def/drv_features_6735.h" 1
# 235 "driver/drv_def/drv_features_chip_select.h" 2
# 5 "driver/drv_def/drv_features_gpio.h" 2
# 127 "interface/driver/peripheral/dcl_gpio.h" 2
# 278 "interface/driver/peripheral/dcl_gpio.h"
typedef enum {
   mode_default = 0,
   mode_f32k_ck = 0x82,
   mode_max_num
 } gpio_clk_mode;
# 317 "interface/driver/peripheral/dcl_gpio.h"
typedef enum {
   div_max_num=16
} gpio_clk_div;
typedef struct
{
   kal_uint8 pin_num;
   kal_uint8 dir;
} GPIOCheckStruct;
# 448 "interface/driver/peripheral/dcl_gpio.h"
typedef struct
{


   DCL_UINT8 u1IOData;
} GPIO_CTRL_READ_T;


typedef struct
{
# 467 "interface/driver/peripheral/dcl_gpio.h"
   DCL_UINT8 u1RetMode;
} GPIO_CTRL_RETURN_MODE_T;


typedef struct
{




   DCL_UINT8 u1RetMode;
} GPO_CTRL_RETURN_MODE_T;


typedef struct
{


   DCL_UINT8 u1RetDirData;
} GPIO_CTRL_RETURN_DIR_T;


typedef struct
{
   DCL_UINT8 u1RetOutData;
} GPIO_CTRL_RETURN_OUT_T;


typedef struct
{
   DCL_UINT8 u1RetApData;
} GPIO_CTRL_RETURN_AP_T;


typedef struct
{


   DCL_UINT8 u1RetOutData;
} GPO_CTRL_RETURN_OUT_T;


typedef struct
{
   DCL_BOOLEAN fgSetDinv;
} GPIO_CTRL_SET_DINV_T;


typedef struct
{
   DCL_BOOLEAN fgSetDebug;
} GPIO_CTRL_SET_DEBUG_T;


typedef struct
{
   DCL_UINT16 u2ClkNum;
   gpio_clk_mode u2Mode;

} GPIO_CTRL_SET_CLK_OUT_T;



typedef struct
{
    DCL_UINT16 u2ClkNum;
    gpio_clk_div u2Div;

}GPIO_CTRL_SET_CLK_DIV_T;


typedef struct
{
   DCL_UINT8 data;
   DCL_UINT16 no;
   DCL_UINT16 remainder_shift;
} GPIO_CTRL_WRITE_FOR_SPI_T;


typedef struct
{




 DCL_UINT8 u1DriveMode;
}GPIO_CTRL_RETURN_DRIVE_T,GPIO_CTRL_SET_DRIVE_T;



typedef struct
{


 DCL_UINT8 u1OwnerShip;
}GPIO_CTRL_RETURN_OWNERSHIP_T;
# 309 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_uart.h" 1
# 254 "interface/driver/peripheral/dcl_uart.h"
# 1 "interface/modem/general/cmux_vp_num.h" 1
# 255 "interface/driver/peripheral/dcl_uart.h" 2
# 451 "interface/driver/peripheral/dcl_uart.h"
typedef enum
{
 DCL_UART_TYPE = 0x00,
 DCL_UART_USB_TYPE,
 DCL_UART_BLUETOOTH_TYPE,
 DCL_UART_CMUX_TYPE,
 DCL_UART_SPPA_TYPE,
 DCL_UART_CCCI_TYPE,
 DCL_UART_CCIF_TYPE,
 DCL_UART_DCC_TYPE,
 DCL_UART_LOGACC_TYPE,
 DCL_UART_LMU_TYPE,
 DCL_UART_SP_USB_TYPE,
 DCL_UART_MINI_LOG_TYPE,
 DCL_UART_DEV_TYPE_MAX
}SIO_TYPE_T;

typedef DCL_UINT32 UART_BAUDRATE_T;
typedef UART_BAUDRATE_T UART_baudrate;
typedef DCL_UINT16 UART_PORT;
# 495 "interface/driver/peripheral/dcl_uart.h"
typedef enum {
      LEN_5=5,
      LEN_6,
      LEN_7,
      LEN_8
} UART_BITS_PER_CHAR_T;

typedef enum {
      SB_1=1,
      SB_2,
      SB_1_5
} UART_STOP_BITS_T;

typedef enum {
      PA_NONE=0,
      PA_ODD,
      PA_EVEN,
      PA_SPACE
} UART_PARITY_T;







typedef enum {
      FC_NONE=1,
      FC_HW,
      FC_SW
} UART_FLOW_CTRL_MODE_T;

typedef enum {
      DCL_NONE_VFIFO,
      DCL_RX_VFIFO,
      DCL_TX_VFIFO,
      DCL_TXRX_VFIFO
} UART_VFIFO_T;

typedef enum {
      uart_sleep_on_tx_allow = 0,
      uart_sleep_on_tx_forbid
} UART_SLEEP_ON_TX;



typedef struct
{
   UART_BAUDRATE_T u4Baud;
   DCL_UINT8 u1DataBits;
   DCL_UINT8 u1StopBits;
   DCL_UINT8 u1Parity;
   DCL_UINT8 u1FlowControl;
   DCL_UCHAR ucXonChar;
   DCL_UCHAR ucXoffChar;
   DCL_BOOLEAN fgDSRCheck;
} UART_CONFIG_T;

typedef enum
{
 DCL_IO_Low=0,
 DCL_IO_High
} IO_LEVEL_T;


typedef enum {
      DCL_RX_BUF,
      DCL_TX_BUF
} UART_BUFFER_T;

typedef enum {
      DCL_UART_SLEEP_ON_TX_ALLOW = 0,
      DCL_UART_SLEEP_ON_TX_FORBID,
} UART_SLEEP_ON_TX_T;

typedef enum {
      DCL_UART_BY_VFIFO,
      DCL_UART_BY_DMA,
      DCL_UART_BY_MCU,
      DCL_UART_BY_UNKNOWN
} UART_WORK_MODE;





typedef struct _tty_io_request_t tty_io_request_t;





struct _tty_io_request_t{



    tty_io_request_t *next_request;



    void *first_gpd;



    void *last_gpd;
};


typedef struct
{
 DCL_UINT32 u4Flag;
}UART_CTRL_INIT_T;


typedef struct
{
  DCL_UINT32 u4OwenrId;
}UART_CTRL_OPEN_T;


typedef struct
{
  DCL_UINT32 u4OwenrId;
}UART_CTRL_CLOSE_T;


typedef struct
{
 DCL_UINT16 u2Length;
 DCL_UINT32 u4OwenrId;
 DCL_UINT16 u2RetSize;
 DCL_UINT8* puBuffaddr;
 DCL_UINT8* pustatus;

}UART_CTRL_GET_BYTES_T;



typedef struct
{
 DCL_UINT16 u2Length;
 DCL_UINT32 u4OwenrId;
 DCL_UINT16 u2RetSize;
 DCL_UINT8* puBuffaddr;
}UART_CTRL_PUT_BYTES_T;

typedef struct
{
 DCL_UINT32 u4OwnerId;
 void *putIor;
}UART_CTRL_PUT_BYTES_IOR_T;


typedef struct
{
 DCL_UINT16 u2RetSize;
}UART_CTRL_RX_AVAIL_T;



typedef struct
{
 DCL_UINT16 u2RetSize;
}UART_CTRL_TX_AVAIL_T;


typedef struct
{
 DCL_UINT32 u4OwenrId;
 UART_BUFFER_T dir;
}UART_CTRL_PURGE_T;



typedef struct
{
 DCL_UINT32 u4OwenrId;
}UART_CTRL_OWNER_T;


typedef struct
{
 DCL_UINT32 u4OwenrId;
 DCL_BOOLEAN bXON;
}UART_CTRL_FLOW_CTRL_T;


typedef struct
{
   DCL_UINT32 u4OwenrId;
   DCL_UINT8 uEscChar;
   DCL_UINT16 u2ESCGuardtime;
} UART_CTRL_CONFIG_ESP_T;




typedef struct
{
 DCL_UINT32 u4OwenrId;
 UART_CONFIG_T rUARTConfig;
} UART_CTRL_DCB_T;



typedef struct
{
 DCL_UINT32 u4OwenrId;
 IO_LEVEL_T rIOLevelDCD;
} UART_CTRL_DCD_T;


typedef struct
{
 DCL_UINT32 u4OwenrId;
 UART_FLOW_CTRL_MODE_T FlowCtrlMode;
}UART_CTRL_GET_FC_T;


typedef struct
{
 DCL_UINT32 chunkSize;
} UART_CTRL_GET_CHUNK_SIZE_T;


typedef struct
{
 DCL_UINT32 u4OwnerId;
 DCL_BOOLEAN needTxDoneCb;
} UART_CTRL_NEED_TX_DONE_CB_T;


typedef struct
{
 DCL_UINT32 ulmtu_sz;
 DCL_UINT32 dlmtu_sz;
} UART_CTRL_GET_MTU_SIZE_T;


typedef struct
{
 DCL_BOOLEAN need_indication;
} UART_CTRL_SET_INDICATION_T;




typedef enum _tty_drv_state {



      DRV_ST_DETACHED = 0,



      DRV_ST_ATTACHED
} tty_drv_state_e;


typedef struct
{
 DCL_UINT32 u4OwnerId;
 tty_drv_state_e drv_state;
} UART_CTRL_GET_DRV_STATE_T;


typedef struct
{
 DCL_UINT32 u4OwnerId;
 void *ior;
} UART_CTRL_ASSIGN_RX_IOR_T;


typedef struct
{
  DCL_UINT32 u4OwenrId;
   IO_LEVEL_T rIOLevelBRK;
} UART_CTRL_BREAK_T;



typedef struct
{
   DCL_UINT32 u4OwenrId;
} UART_CTRL_CLR_BUFFER_T;


typedef struct
{
   DCL_UINT32 u4OwenrId;
   UART_BAUDRATE_T baudrate;
} UART_CTRL_BAUDRATE_T;



typedef struct
{
 DCL_UINT32 u4OwenrId;
 DCL_UINT8* puBuffaddr;
 DCL_UINT16 u2Length;
 DCL_UINT8 umode;
 DCL_UINT8 uescape_char;
 DCL_UINT16 u2RetSize;
}UART_CTRL_SEND_DATA_T;


typedef struct
{
   DCL_UINT32 u4OwenrId;
} UART_CTRL_AUTO_BAUDDIV_T;

typedef void (*DCL_UART_TX_FUNC)(DCL_UINT32 u4Port);
typedef void (*DCL_UART_RX_FUNC)(DCL_UINT32 u4Port) ;



typedef struct
{
   DCL_UINT32 u4OwenrId;
   DCL_UART_TX_FUNC func;
} UART_CTRL_REG_TX_CB_T;



typedef struct
{
   DCL_UINT32 u4OwenrId;

   DCL_UART_RX_FUNC func;
} UART_CTRL_REG_RX_CB_T;

typedef enum
{
 UART_TX = 0,
 UART_RX,
 DSP_TX,
 DSP_RX
}UART_IO_DIR;


typedef struct
{
 UART_IO_DIR dir;
}UART_CTRL_REG_DEF_CB_T;


typedef struct
{
 DCL_UINT8 uByte;
}UART_CTRL_GET_UART_BYTE_T;


typedef struct
{
 DCL_UINT8 u1retByte;
 DCL_UINT8 uByte;
 DCL_UINT32 u4timeout_value;
}UART_CTRL_GET_UART_BYTE_WITH_TIMEOUT_T;


typedef struct
{
 DCL_UINT8 uData;
}UART_CTRL_PUT_UART_BYTE_T;


typedef struct
{
 DCL_UINT8* puBuffaddr;
 DCL_UINT16 u2Length;

}UART_CTRL_PUT_UART_BYTES_T;


typedef struct
{
  DCL_UINT32 u4OwenrId;
 IO_LEVEL_T rIOLevelSRI;

}UART_CTRL_RI_T;


typedef struct
{
  DCL_UINT32 u4OwenrId;
 IO_LEVEL_T rIOLevelDTR;
}UART_CTRL_DTR_T;


typedef struct
{
 IO_LEVEL_T rIOLevelDSR;
 IO_LEVEL_T rIOLevelCTS;
}UART_CTRL_RHS_T;


typedef struct
{
 DCL_UINT16 tx_level;
 DCL_UINT16 rx_level;
}UART_CTRL_SFT_T;


typedef struct
{
 DCL_BOOLEAN bFlag_Poweron;
}UART_CTRL_POWERON_T;


typedef struct
{
 DCL_BOOLEAN bFlag;
}UART_CTRL_CHECK_TBE_T;


typedef struct
{
 DCL_BOOLEAN bFlag;
}UART_CTRL_CHECK_TSO_T;


typedef struct
{
 DCL_UINT32* ptotal_size;
 DCL_UINT32* preturn_size;
}UART_CTRL_GET_TBS_T;



typedef struct
{
 UART_SLEEP_ON_TX_T bFlag;
}UART_CTRL_SLEEP_ON_TX_ENABLE_T;


typedef struct
{
 DCL_BOOLEAN bFlag;
}UART_CTRL_SLEEP_ENABLE_T;



typedef struct
{
 DCL_UINT8* puBuffaddr;
 DCL_UINT16 u2Length;
}UART_CTRL_BOOT_PUTBYTES_T;



typedef struct
{
 DCL_BOOLEAN bUseVFifo;
}UART_CTRL_USE_VFIFO_T;


typedef struct
{
 kal_uint32 max_baudrate;
}UART_CTRL_GET_MAXBAUDRATE_T;


typedef struct
{
 void *first_gpd;
 void *last_gpd;
}TTY_CTRL_EXCP_TX_GPD_T;


typedef struct
{
 void *first_gpd;
 void *last_gpd;
 DCL_UINT32 num;
}TTY_CTRL_EXCP_TX_DONE_INFO_T;


typedef enum _tty_excp_hif_state {
 HIF_STATE_NORMAL = 0,
 HIF_STATE_TXERROR
} tty_excp_hif_state;
typedef struct
{
 tty_excp_hif_state hif_state;
}TTY_CTRL_EXCP_HIF_STATE_T;


typedef struct
{
 void *first_gpd;
 void *last_gpd;
}TTY_CTRL_EXCP_ASSIGN_RX_GPD_T;


typedef struct
{
 void *first_gpd;
 void *last_gpd;
 DCL_UINT32 num;
}TTY_CTRL_EXCP_GET_RX_GPD_T;


typedef struct
{
 void *first_gpd;
 void *last_gpd;
 DCL_UINT32 num;
}TTY_CTRL_EXCP_FLUSH_TX_T;


typedef struct
{
 void *first_gpd;
 void *last_gpd;
 DCL_UINT32 num;
}TTY_CTRL_EXCP_FLUSH_RX_T;


typedef struct
{
 DCL_BOOLEAN reset_event;
}TTY_CTRL_EXCP_HIF_POLL_T;

typedef enum {
      NONE_VFIFO,
      RX_VFIFO,
      TX_VFIFO,
      TXRX_VFIFO
} UART_TxRx_VFIFO_support;

typedef enum {
      RX_BUF,
      TX_BUF
} UART_buffer;

typedef enum {
   Compensate_None = 0,
   Compensate_Wait,
   Compensate_AT,
   Compensate_at
}UART_Compensate_enum;


typedef enum {
      len_5=5,
      len_6,
      len_7,
      len_8
} UART_bitsPerCharacter;

typedef enum {
      sb_1=1,
      sb_2,
      sb_1_5
} UART_stopBits;

typedef enum {
      pa_none=0,
      pa_odd,
      pa_even,
      pa_mark,
      pa_space
} UART_parity;

typedef enum {
      fc_none=1,
      fc_hw,
      fc_sw
} UART_flowCtrlMode;

typedef struct
{
      UART_baudrate baud;
      UART_bitsPerCharacter dataBits;
      UART_stopBits stopBits;
      UART_parity parity;
      UART_flowCtrlMode flowControl;
      kal_uint8 xonChar;
      kal_uint8 xoffChar;
      kal_bool DSRCheck;
} UARTDCBStruct;

typedef struct
{
      kal_uint8 EscChar;
      kal_uint16 GuardTime;
} UART_ESCDetectStruct;

typedef struct
{
      kal_uint8 *rx_buffer;
      kal_uint8 *tx_buffer;
      kal_uint8 *txISR_buffer;
} UART_RingBufferStruct;


   typedef enum {
      uart_null_buffer=0,
      uart_isr_buffer,
      uart_normal_buffer
   } UART_RingBuffer_Type;

   typedef struct
   {
         UART_RingBuffer_Type type;
         kal_uint16 index;
   } UART_RingBuffer_SaveIndex;


typedef struct
{
 kal_uint16 tst_port_ps;
 kal_uint16 ps_port;
 UART_baudrate tst_baudrate_ps;
 UART_baudrate ps_baudrate;
 kal_bool High_Speed_SIM_Enabled;
 kal_uint8 swdbg;
   kal_uint8 uart_power_setting;
   kal_uint8 cti_uart_port;
   UART_baudrate cti_baudrate;
   kal_uint8 tst_port_l1;
   UART_baudrate tst_baudrate_l1;
    kal_uint8 tst_output_mode;
    kal_uint8 usb_logging_mode;
    kal_uint16 tst_port_dsp;
    UART_baudrate tst_baud_rate_dsp;
 kal_uint8 usb_cdrom_config;
 kal_uint16 speech_port;
 kal_uint16 ndis_port;
} port_setting_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
 DCL_UINT16 port;
}uart_ready_to_read_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
 DCL_UINT16 port;
}uart_ready_to_write_ind_struct;

 typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
 DCL_UINT16 port;
}uart_dsr_change_ind_struct;

 typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
 DCL_UINT16 port;
}uart_escape_detected_ind_struct;

 typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
 DCL_UINT16 port;
}uart_plugin_ind_struct;

 typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
 DCL_UINT16 port;
}uart_plugout_ind_struct;
# 312 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_wdt.h" 1
# 140 "interface/driver/peripheral/dcl_wdt.h"
 typedef struct
 {
  DCL_UINT16 rstInterval;
 }WDT_CTRL_GET_RSTINTERVAL_T;


typedef struct
{
   DCL_BOOLEAN fgEnable;
} WDT_CTRL_ENABLE_T;

typedef struct
{
   DCL_BOOLEAN fgIOHigh;
} WDT_CTRL_SET_EXT_POL_T;

typedef struct
{
   DCL_BOOLEAN fgEnable;
} WDT_CTRL_SET_EXT_RESET_T;

typedef struct
{
   DCL_UINT16 u2Value;
} WDT_CTRL_SET_VALUE_T;







typedef struct
{
   DCL_BOOLEAN fgEnable;
} WDT_CTRL_IRQ_T;

typedef struct
{
   DCL_BOOLEAN fgEnable;
}WDT_CTRL_DEBUG_T;
# 315 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_adc.h" 1
# 185 "interface/driver/peripheral/dcl_adc.h"
typedef struct
{
   DCL_UINT32 u4Period;
   DCL_UINT32 u4Sapid;
   DCL_UINT8 u1OwnerId;
   DCL_UINT8 u1AdcChannel;
   DCL_UINT8 u1EvaluateCount;
   DCL_BOOLEAN fgSendPrimitive;
} ADC_CTRL_CREATE_OBJECT_T;


typedef struct
{
   DCL_UINT32 u4Period;
   DCL_UINT8 u1EvaluateCount;
} ADC_CTRL_MODIFY_PARAM_T;





typedef struct
{
   DCL_UINT16 u2Channel;
   DCL_UINT16 u2ADCValue;
} ADC_CTRL_IMM_MEASURE_T;

typedef struct
{
   DCL_UINT16 u2Channel;
   DCL_UINT16 u2ADCValue;
} ADC_CTRL_SYNC_MEASURE_T;

typedef struct
{
   DCL_UINT16 u2Event0;
   DCL_UINT16 u2Event1;
} ADC_CTRL_TDMA_SYNC_SETUP_T;

typedef struct
{
   DCL_BOOLEAN fgEnable;
} ADC_CTRL_POWER_T;


typedef struct
{
   DCL_UINT8 u1Channel;
   DCL_UINT16 u2MeaCount;
   DCL_UINT32 u4ADCData;
} ADC_CTRL_GET_DATA_2_META_T;


typedef struct
{
   DCL_UINT8 u1Channel;
   DCL_UINT32 u4ADCData;
} ADC_CTRL_GET_DATA_T;


typedef struct
{
   DCL_UINT8 u1Channel;
   DCL_UINT16 u2MeaCount;
   DCL_UINT32 u4ADCData;
} ADC_CTRL_GET_META_DATA_T;


typedef struct
{
   DCL_UINT32 u4Channel;
   DCL_UINT32 u4MeaCount;
   DCL_UINT16 *u2ADCData;
} ADC_CTRL_GET_IMM_DATA_ON_BOOTING_T;


typedef struct
{
    DCL_UINT16 u2Channel;
    DCL_INT16 i2Temp;
} ADC_CTRL_GET_TEMP_T;


typedef struct
{
   DCL_BOOLEAN fgPageAlign;
} ADC_CTRL_TIMER_ALIGN_T;


typedef enum {
   DCL_VBAT_ADC_CHANNEL = 0,
   DCL_VISENSE_ADC_CHANNEL,
   DCL_VBATTMP_ADC_CHANNEL,
   DCL_BATTYPE_ADC_CHANNEL,
   DCL_VCHARGER_ADC_CHANNEL,
   DCL_PCBTMP_ADC_CHANNEL,
   DCL_AUX_ADC_CHANNEL,
   DCL_CHR_USB_ADC_CHANNEL,
   DCL_OTG_VBUS_ADC_CHANNEL,
   DCL_RFTMP_ADC_CHANNEL,
   DCL_MDTMP_ADC_CHANNEL,
   DCL_PMICTMP_ADC_CHANNEL,
   DCL_MAX_ADC_CHANNEL
} DCL_ADC_CHANNEL_TYPE_ENUM;

typedef struct
{
   DCL_UINT8 u1AdcPhyCh;
   DCL_UINT16 u2AdcName;
} ADC_CTRL_GET_PHYSICAL_CHANNEL_T;


typedef struct
{
   DCL_DOUBLE d8AdcValue;
   DCL_UINT32 u4Volt;
   DCL_UINT8 u1AdcPhyCh;
} ADC_CTRL_TRANSFORM_INTO_VOLT_T;


typedef struct
{
   DCL_UINT32 u4Volt;
   DCL_UINT32 u4Temp;
} ADC_CTRL_TRANSFORM_INTO_TEMP_T;


typedef struct
{
   DCL_UINT32 u4Volt;
   DCL_UINT32 u4Curr;
} ADC_CTRL_TRANSFORM_INTO_CURR_T;



typedef struct
{
   kal_timer_func_ptr pfMeasure_cb;
} ADC_CTRL_REGISTER_MEASURE_CB_T;

typedef void (*PFN_DCLSADC_COMPLETE_CALLBACK)(DCL_INT32 handle, DCL_INT32 volt_result, DCL_DOUBLE adc_result);
typedef void (*PFN_DCLSADC_COMPLETE_MULTI_CALLBACK)(DCL_INT32 handle, DCL_INT32 *volt_array_result, DCL_DOUBLE *adc_array_result);

typedef struct
{
   PFN_DCLSADC_COMPLETE_CALLBACK pfComplete_cb;
} ADC_CTRL_REGISTER_COMPLETE_CB_T;

typedef struct
{
   PFN_DCLSADC_COMPLETE_MULTI_CALLBACK pfComplete_cb;
} ADC_CTRL_REGISTER_COMPLETE_MULTI_CB_T;



typedef struct{
  DCL_UINT32 u4Ownerid;
  DCL_UINT32 u4Sapid;
 DCL_UINT32 u4Period;
 DCL_UINT8 u1Adc_phy_id;
 DCL_UINT8 u1Adc_logic_id;
 DCL_UINT8 u1Evaluate_count;
 DCL_BOOLEAN bSend_primitive;
 DCL_BOOLEAN bConti_measure;
 DCL_UINT32 u4Adc_sche_event_id;
 void (*complete)(DCL_INT32 adc_handle, DCL_INT32 volt_result, DCL_DOUBLE adc_result);
}DCL_ADC_SCHEDULER_PARA_T;
typedef struct
{
   DCL_UINT32 u4Handle;
   DCL_ADC_SCHEDULER_PARA_T pPara;
} ADC_CTRL_GET_SCHEDULER_PARAMETER_T;


typedef struct
{
 DCL_UINT32 u4Adc_max_ch;
} ADC_CTRL_GET_MAX_PHYSICAL_CH_T;


typedef struct
{
 void *ilm_ptr;
}ADC_CTRL_SET_CALIBRATION_DATA_T;


typedef struct
{
   DCL_INT32 i4ADCSlope[16];
   DCL_INT32 i4ADCOffset[16];
}ADC_CTRL_READ_CALIBRATION_DATA_T;


typedef struct{
  DCL_UINT32 u4Handle;
   DCL_UINT32 u4Adc_sche_id;
}DCL_CTRL_SCHE_ID_GET_HANDLE_T;

typedef struct{
 DCL_UINT8 bEnable;
 DCL_UINT8 *u4ADC_ch_number;
 DCL_UINT8 u4Adc_max_ch_number;
 PFN_DCLSADC_COMPLETE_MULTI_CALLBACK complete_multi_cb;
}DCL_MULTI_CHANNEL_PARA_T;
# 318 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_bmt.h" 1
# 156 "interface/driver/peripheral/dcl_bmt.h"
typedef struct
{
    DCL_UINT8 call_state;
}BMT_CTRL_CALLSTATE_T;


typedef struct
{
    DCL_BOOLEAN bEnable;
}BMT_CTRL_CHARGE_T;


typedef enum
{
    DCL_GET_BATTERY_TYPE,
 DCL_GET_CHECK_BATTERY,
 DCL_GET_CHECK_CHARGER_VOLTAGE,
 DCL_GET_CHECK_BATT_TEMP,
 DCL_GET_MAX_VBAT_LI
}DCL_GET_CUSTOM_CHR_PARA;


typedef struct
{
    DCL_UINT32 u4ChargingParameter;
    DCL_GET_CUSTOM_CHR_PARA eGetParaCmd;
}BMT_CTRL_GET_CUSTOMIZED_PARA_T;


typedef enum
{
    DCL_BMT_EXT_CHR_DRV_INIT = 0,
    DCL_BMT_EXT_CHR_ENABLE_INTR,
    DCL_BMT_EXT_CHR_CHARGE_ENABLE,
    DCL_BMT_EXT_CHR_SET_CHARGE_CURRENT,
    DCL_BMT_EXT_CHR_GET_CHR_FAC_MEASURE_SUPPORT,
    DCL_BMT_EXT_CHR_GET_CHR_FAC_CHECK_SUPPORT,
    DCL_BMT_EXT_CHR_CHECK_CHR_STATUS,
    DCL_BMT_EXT_CHR_GET_CHR_STATUS,
    DCL_BMT_EXT_CHR_GET_VBAT,
    DCL_BMT_EXT_CHR_GET_ISENSE,
    DCL_BMT_EXT_CHR_GET_VCHARGER,
    DCL_BMT_EXT_CHR_GET_BAT_TEMP,
    DCL_BMT_EXT_CHR_GET_CHARGE_FULL,
    DCL_BMT_EXT_CHR_GET_CHARGE_UNDER_EXTREMETMP,
    DCL_BMT_EXT_CHR_GET_CHARGE_EXTREMETMP_FULL,
    DCL_BMT_EXT_CHR_GET_CHARGE_EXTREMETMP_RECHARGE,
    DCL_BMT_EXT_CHR_GET_CHARGE_HOLD,
    DCL_BMT_EXT_CHR_GET_CHR_BATT_STATE_TRANSIT_SUPPORT,
    DCL_BMT_EXT_CHR_CHR_BATT_STATE_TRANSIT,
    DCL_BMT_EXT_CHR_GET_CURR_CHR_BATT_STATE,
    DCL_BMT_EXT_CHR_GET_SPECIFIC_CHR_CURRENT,
    DCL_BMT_EXT_CHR_GET_VBAT_SPECIFIC_FULL_VOLTAGE_STATE
}DCL_BMT_EXT_CHR_CMD;


typedef struct
{
    DCL_BMT_EXT_CHR_CMD eExtChargerCtrl;
}BMT_CTRL_SET_EXT_CHARGER_T;


typedef struct
{
    DCL_BOOLEAN fgBatIsOn;
}BMT_CTRL_IS_BAT_ON_T;


typedef enum
{
    DCL_BMT_CHARGER_IN = 0,
    DCL_BMT_CHARGER_OUT,
    DCL_BMT_OVERVOLPROTECT,
    DCL_BMT_OVERBATTEMP,
    DCL_BMT_LOWBATTEMP,
    DCL_BMT_OVERCHARGECURRENT,
    DCL_BMT_CHARGE_COMPLETE,
    DCL_BMT_INVALID_BAT,
    DCL_BMT_INVALID_CHARGER,
    DCL_BMT_CHARGE_TIMEOUT,
    DCL_BMT_LOWCHARGECURRENT,
    DCL_BMT_CHARGE_BAD_CONTACT,
    DCL_BMT_BATTERY_BAD_CONTACT,
    DCL_BMT_USB_CHARGER_IN,
    DCL_BMT_USB_CHARGER_OUT,
    DCL_BMT_USB_NO_CHARGING_IN,
    DCL_BMT_USB_NO_CHARGING_OUT,
    DCL_BMT_BATT_IN,
    DCL_BMT_BATT_OUT
}DCL_BMT_CHR_MSG;


typedef struct
{
    DCL_BMT_CHR_MSG ChargerMsg;
}BMT_CTRL_SENDMES2UEM_T;


typedef enum {
 DCL_BMT_CHR_IN = 0,
 DCL_BMT_CHR_OUT,
 DCL_BMT_CHR_UNINIT = 0xff
}DCL_BMT_CHR_STAT;


typedef struct
{
    DCL_BMT_CHR_STAT ChargerStat;
}BMT_CTRL_SET_CHR_STATUS_T;
# 321 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_pfc.h" 1
# 114 "interface/driver/peripheral/dcl_pfc.h"
typedef enum {
 PPP_PFC_CHANNEL_0 = 0,
 PPP_PFC_CHANNEL_1,
 PPP_PFC_CHANNEL_2,
} PPP_PFC_CHANNEL;




typedef enum {
 PFC_ENCODE = 0,
 PFC_DECODE,
} PFC_OPERATION_SEL_T;
# 156 "interface/driver/peripheral/dcl_pfc.h"
typedef struct
{
 DCL_UINT32 en_de;
 DCL_UINT32 channel;
} PFC_CTRL_RESET_T;


typedef struct
{
 DCL_UINT32 en_de;
 DCL_UINT32 channel;
 DCL_BOOLEAN f32;
 DCL_BOOLEAN acfc;
 DCL_BOOLEAN pfc;
 DCL_UINT16 max_pkt_sz;
 DCL_UINT16 ptc;
 DCL_UINT32 pfc_accm[7];
} PFC_CTRL_SET_CONFIG_T;


typedef struct
{
 DCL_UINT32 channel;
 void *head;
 void *tail;
} PFC_CTRL_ENCODE_T;


typedef struct
{
 DCL_UINT32 channel;
 void *head;
 void *tail;
} PFC_CTRL_DECODE_T;


typedef struct
{
 DCL_UINT32 en_de;
 DCL_UINT32 channel;
 void **head;
 void **tail;
 DCL_UINT32 *queue_len;
} PFC_CTRL_DEQUEUE_T;


typedef struct
{
 DCL_UINT32 en_de;
 DCL_UINT32 channel;
 void *head;
 void *tail;
 DCL_UINT32 queue_len;
} PFC_CTRL_RELOAD_RX_T;
# 324 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_rtc.h" 1
# 321 "interface/driver/peripheral/dcl_rtc.h"
typedef struct
{
 DCL_UINT8 rtc_sec;
 DCL_UINT8 rtc_min;
 DCL_UINT8 rtc_hour;
 DCL_UINT8 rtc_day;
 DCL_UINT8 rtc_mon;
 DCL_UINT8 rtc_wday;
 DCL_UINT8 rtc_year;
}DCL_RTC_DATA_T;


typedef struct
{
    DCL_BOOLEAN fgBootloaderPowerOn;
}RTC_CTRL_BOOTLOADER_POWERON_T;


typedef enum
{
    DCL_RTC_PDN1 = 0,
    DCL_RTC_PDN2,
 DCL_RTC_MAX_INDEX
}DCL_RTC_PDN_INDEX_T;


typedef struct
{
 DCL_RTC_PDN_INDEX_T PDNIndex;
 DCL_UINT16 fgConfigBit;
 DCL_UINT16 PDNValue;
}RTC_CTRL_CONFIG_PDN_BIT_T;


typedef struct
{
    DCL_UINT8 u1ALEn;
    DCL_UINT8 u1TCEn;
}RTC_CTRL_CONFIG_AL_TC_T;





typedef struct
{
 DCL_BOOLEAN fgMetaReset;
}RTC_CTRL_FT_POWEROFF_T;


typedef struct
{
    DCL_UINT8 u1Sec;
    DCL_UINT8 u1Min;
    DCL_UINT8 u1Hour;
    DCL_UINT8 u1Day;
    DCL_UINT8 u1Mon;
    DCL_UINT8 u1WDay;
    DCL_UINT8 u1Year;
    DCL_BOOLEAN ALEnBit;
}RTC_CTRL_GET_ALARM_TIME_T;


typedef struct
{
    DCL_UINT8 u1Sec;
    DCL_UINT8 u1Min;
    DCL_UINT8 u1Hour;
    DCL_UINT8 u1Day;
    DCL_UINT8 u1Mon;
    DCL_UINT8 u1WDay;
    DCL_UINT8 u1Year;
}RTC_CTRL_GET_TIME_T;


typedef enum {
    DCL_RTC_GPIO_NO_PULL = 0,
    DCL_RTC_GPIO_PULL_DOWN,
    DCL_RTC_GPIO_PULL_UP
}DCL_RTC_GPIO_PULL_TYPE_T;


typedef enum {
    DCL_RTC_GPIO_DS_4mA = 0,
    DCL_RTC_GPIO_DS_8mA,
    DCL_RTC_GPIO_DS_12mA,
    DCL_RTC_GPIO_DS_16mA
}DCL_RTC_GPIO_DRIVING_STRENGTH_T;


typedef struct
{
    DCL_RTC_GPIO_PULL_TYPE_T rPullType;
    DCL_RTC_GPIO_DRIVING_STRENGTH_T rPullStrength;
    DCL_BOOLEAN InputValue;
    DCL_BOOLEAN OutputValue;
    DCL_BOOLEAN is_SmithTrigger;
    DCL_BOOLEAN is_SlewRateControl;
}RTC_CTRL_GPIO_TIME_T;





typedef struct
{
    void (*RTC_TCCallback)(void);
    void (*RTC_ALCallback)(void);
}RTC_CTRL_INIT_T;





typedef struct
{
 DCL_BOOLEAN fgIsValid;
}RTC_CTRL_IS_CONFIG_VALID_T;


typedef struct
{
    DCL_BOOLEAN fgFirstOn;
}RTC_CTRL_IS_FIRST_ON_T;


typedef struct
{
 DCL_BOOLEAN fgMSFirstPowerOn;
}RTC_CTRL_IS_MS_FIRSTPOWERON_T;


typedef struct
{
    DCL_UINT8 u1Sec;
    DCL_UINT8 u1Min;
    DCL_UINT8 u1Hour;
    DCL_UINT8 u1Day;
    DCL_UINT8 u1Mon;
    DCL_UINT8 u1WDay;
    DCL_UINT8 u1Year;
    DCL_BOOLEAN isTimeValid;
}RTC_CTRL_IS_TIME_VALID_T;


typedef struct
{
 DCL_BOOLEAN fgIsPowerOn;
}RTC_CTRL_PWIC_CHECK_POWERON_T;


typedef struct
{
    DCL_UINT8 u1Sec;
    DCL_UINT8 u1Min;
    DCL_UINT8 u1Hour;
    DCL_UINT8 u1Day;
    DCL_UINT8 u1Mon;
    DCL_UINT8 u1WDay;
    DCL_UINT8 u1Year;
}RTC_CTRL_PWIC_FIRST_POWERON_INIT_RTCTIME_T;
# 493 "interface/driver/peripheral/dcl_rtc.h"
typedef enum
{
    DCL_RTC_SPAR0 = 0,
    DCL_RTC_SPAR1,
 DCL_RTC_SPAR_MAX_INDEX
}DCL_RTC_SPAR_INDEX_T;


typedef struct
{
 DCL_RTC_SPAR_INDEX_T SPARIndex;
 DCL_UINT16 WriteValue;
 DCL_UINT16 ReadValue;
}RTC_CTRL_CONFIG_SPAR_T;


typedef struct
{
 DCL_UINT8 XOSCValue;
}RTC_CTRL_READ_XOSC_REG_T;





typedef struct
{
    DCL_UINT8 u1Sec;
    DCL_UINT8 u1Min;
    DCL_UINT8 u1Hour;
    DCL_UINT8 u1Day;
    DCL_UINT8 u1Mon;
    DCL_UINT8 u1WDay;
    DCL_UINT8 u1Year;
}RTC_CTRL_SET_ALARM_TIME_T;


typedef struct
{
 DCL_BOOLEAN fgPowerOn;
}RTC_CTRL_SET_FIRST_POWERON_T;





typedef struct
{
    DCL_UINT8 u1Sec;
    DCL_UINT8 u1Min;
    DCL_UINT8 u1Hour;
    DCL_UINT8 u1Day;
    DCL_UINT8 u1Mon;
    DCL_UINT8 u1WDay;
    DCL_UINT8 u1Year;
}RTC_CTRL_SET_TIME_T;


typedef struct
{
 DCL_UINT16 BBPUReg;
}RTC_CTRL_SETBBPU_T;
# 572 "interface/driver/peripheral/dcl_rtc.h"
typedef struct
{
 DCL_UINT8 XOSC_Reg;
}RTC_CTRL_WRITE_XOSC_REG_T;

typedef struct
{
    DCL_UINT32 dest_mod_id;
    DCL_UINT32 sap_id;
    DCL_UINT32 msg_id;
    DCL_BOOLEAN fgRegisterILM;
}RTC_CTRL_REGISTER_MODULE_ILM_INFO_T;


typedef struct
{
 DCL_UINT16 OSC32CON_Reg;
}RTC_CTRL_WRITE_OSC32CON_REG_T;
# 327 "interface/driver/peripheral/dcl.h" 2
# 338 "interface/driver/peripheral/dcl.h"
# 1 "interface/driver/peripheral/DclH_kbd.h" 1
# 115 "interface/driver/peripheral/DclH_kbd.h"
typedef struct
{
   DCL_UINT16 u2KeyNum;
} HKBD_CTRL_KNUM_T;



typedef struct
{
   DCL_UINT32 kbdmap_reg;
   DCL_UINT32 kbdmap_reg1;
   DCL_UINT32 kbdmap_reg2;
} HKBD_CTRL_STA_MAP_T;


typedef struct
{
 DCL_BOOLEAN sta;
 DCL_UINT8 key;
}HKBD_CTRL_KEY_STA_T;


typedef struct
{
   DCL_BOOLEAN fgPKP;
} HKBD_CTRL_POWKEY_T;
# 339 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/DclS_kbd.h" 1
# 91 "interface/driver/peripheral/DclS_kbd.h"
typedef enum {
      DCL_kbd_onekey_press=0,
      DCL_kbd_onekey_release,




      DCL_kbd_onekey_longpress,
      DCL_kbd_onekey_repeated,
      DCL_kbd_onekey_fullpress,
      DCL_kbd_twokey_detection_enable,
      DCL_kbd_threekey_detection_enable,
      DCL_kbd_multikey_detection_disable
} DCL_KBD_EVENT;


typedef enum {
   DCL_kbd_1_key_det_mode = 0,
   DCL_kbd_2_keys_det_mode,
   DCL_kbd_3_keys_det_mode
}DCL_kbd_key_det_mode;


typedef struct
{
   DCL_BOOLEAN bFlag;
   DCL_UINT8 Det_Mode;
} SKBD_CTRL_MODE_T;


typedef struct
{
 DCL_UINT8 keycnt;
}SKBD_CTRL_KEY_CNT_T;


typedef struct
{
   DCL_KBD_EVENT Keyevent;



   DCL_UINT8 Keydata[1];





} SKBD_CTRL_KEYDATA_T;


typedef struct
{
 SKBD_CTRL_KEYDATA_T* keydata;
 DCL_BOOLEAN specify_read;

 DCL_UINT32 read_pointer;
 DCL_UINT32* current_read_pointer;

}SKBD_CTRL_PEEKDATA_T;



typedef struct
{
   DCL_BOOLEAN fgIMK;
   DCL_UINT8 uKey;
} SKBD_CTRL_MULTIKEY_T;



typedef struct
{
   DCL_UINT8 uKey;
   DCL_BOOLEAN fgIKBS;
} SKBD_CTRL_KEYSUPPORT_T;


typedef struct
{
   DCL_UINT32 u4Tick;
} SKBD_CTRL_TIME_T;


typedef struct
{
 DCL_UINT8 keydata;
}SKBD_CTRL_PUTKEY_T;

typedef struct
{
  DCL_UINT32 *number;
  DCL_UINT8 *two_step;
}SKBD_CTRL_FIND_TWO_STEP_T;
# 342 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_sts.h" 1
# 156 "interface/driver/peripheral/dcl_sts.h"
typedef enum
{
    RTP_Type = 0,
    CTP_Type

}DCL_TP_TYPE_Enum;

typedef struct
{
    DCL_TP_TYPE_Enum TouchPanelType;
}DCL_TP_TYPE_T;



typedef enum
{
    TP_PARAM_GET = 0,
    TP_PARAM_SET,
    TP_PARAM_RESET
}TP_CTRL_PARAM_TYPE;

typedef struct {
   kal_uint32 ts_debounce_time;
   kal_uint32 touch_panel_cali_check_offset;
   kal_uint32 min_pen_move_offset;
   kal_uint32 hand_writing_max_offset;
   kal_uint32 nonhand_writing_max_offset;
   kal_uint32 max_stroke_move_offset;
   kal_uint32 multiple_point_selection;
   kal_uint32 touch_pressure_threshold_high;
   kal_uint32 touch_pressure_threshold_low;
   kal_uint32 pressure_check_boundary;
   kal_uint32 pressure_shifting_boundary;
   kal_uint32 border_pass_criterion;
   kal_uint32 non_border_pass_criterion;
   kal_uint32 border_range;
   kal_uint32 jitter_circuit_interval;
   kal_uint32 Dump_Screen;
   kal_uint32 reserve_parameter1;
   kal_uint32 reserve_parameter2;
   kal_uint32 reserve_parameter3;
   kal_uint32 height;
   kal_uint32 width;
} TouchPanel_EM_custom_data_struct;

typedef struct
{
    TP_CTRL_PARAM_TYPE type;
    TouchPanel_EM_custom_data_struct* pEmData;
}DCL_CTRL_CUSTOM_PARAM_T;



typedef struct
{
 kal_int32 ts_debounce_time_min;
 kal_int32 ts_debounce_time_max;
kal_int32 touch_panel_cali_check_offset_min;
kal_int32 touch_panel_cali_check_offset_max;
kal_int32 min_pen_move_offset_min;
kal_int32 min_pen_move_offset_max;
kal_int32 hand_writing_max_offset_min;
kal_int32 hand_writing_max_offset_max;
kal_int32 nonhand_writing_max_offset_min;
kal_int32 nonhand_writing_max_offset_max;
kal_int32 max_stroke_move_offset_min;
kal_int32 max_stroke_move_offset_max;
kal_int32 multiple_point_selection_min;
kal_int32 multiple_point_selection_max;
kal_int32 touch_pressure_threshold_high_min;
kal_int32 touch_pressure_threshold_high_max;
kal_int32 pressure_check_boundary_min;
kal_int32 pressure_check_boundary_max;
kal_int32 pressure_shifting_boundary_min;
kal_int32 pressure_shifting_boundary_max;
kal_int32 border_pass_criterion_min;
kal_int32 border_pass_criterion_max;
kal_int32 nonborder_pass_criterion_min;
kal_int32 nonborder_pass_criterion_max;
kal_int32 border_range_min;
kal_int32 border_range_max;
kal_uint32 jitter_circuit_interval_min;
kal_uint32 jitter_circuit_interval_max;
kal_uint32 Dump_Screen_min;
kal_uint32 Dump_Screen_max;
kal_int32 reserve_parameter1_min;
kal_int32 reserve_parameter1_max;
kal_int32 reserve_parameter2_min;
kal_int32 reserve_parameter2_max;
kal_int32 reserve_parameter3_min;
kal_int32 reserve_parameter3_max;
}TP_PARAM_RANGE;


typedef struct
{
    TP_CTRL_PARAM_TYPE type;
    TP_PARAM_RANGE* pEmDataRange;
}DCL_CTRL_CUSTOM_PARAM_RANGE_T;


typedef struct
{
    kal_uint32 x_micronmeter;
    kal_uint32 y_micronmeter;
    kal_uint32 x_coord;
    kal_uint32 y_coord;
}DCL_CTRL_MICRONMETER_COORD_T;





typedef enum {
      DCL_PEN_DOWN,
      DCL_PEN_UP,
      DCL_PEN_MOVE,
      DCL_PEN_LONGTAP,
      DCL_PEN_REPEAT,
      DCL_PEN_ABORT,
      DCL_TP_UNKNOWN_EVENT,
      DCL_STROKE_MOVE,
      DCL_STROKE_STATICAL,
      DCL_STROKE_HOLD,
      DCL_PEN_LONGTAP_HOLD,
      DCL_PEN_REPEAT_HOLD,
      DCL_STROKE_DOWN=0xc0,
      DCL_STROKE_LONGTAP=0x7e,
      DCL_STROKE_UP=0x7f
} DCL_TP_Event_enum;
# 297 "interface/driver/peripheral/dcl_sts.h"
typedef struct
{

   DCL_UINT16 u2Event;

   DCL_UINT16 u2x;
   DCL_UINT16 u2y;
   DCL_UINT16 u2z;
} DCL_TP_SINGLE_EVENT_T;

typedef struct
{
   DCL_UINT16 uModel;
   DCL_UINT16 uPadding;
   DCL_UINT32 u2Time_stamp;
   DCL_TP_SINGLE_EVENT_T rPoints[5];
} STS_CTRL_GET_T;


typedef struct
{
   DCL_BOOLEAN fgEnable;
} STS_CTRL_EN_T;

typedef struct
{
 kal_uint8 ref_count;
 kal_uint16 msg_len;
 kal_bool result;
}tp_cali_done_struct;


typedef struct
{
   DCL_INT16 i2x;
   DCL_INT16 i2y;
} TS_COORD_T;
typedef struct
{
   TS_COORD_T *rpPoint;
   DCL_UINT16 u2Num;
} STS_CTRL_SC_T;


typedef struct
{

   double x_slope;
   double x_offset;

   double y_slope;
   double y_offset;
} TS_CALI_T;
typedef struct
{
   TS_CALI_T rCali;
} STS_CTRL_RC_T;


typedef struct
{
   TS_CALI_T rCali;
} STS_CTRL_SETC_T;


typedef struct
{
   DCL_BOOLEAN fgSkipUnreleaseEnable;
} STS_CTRL_RESET_T;


typedef struct
{
   DCL_UINT32 u4Low;
   DCL_UINT32 u4High;
} STS_CTRL_CSP_T;


typedef struct
{
   DCL_UINT16 u2Pen_offset;
   DCL_UINT16 u2Stroke_offset;
   DCL_UINT16 u2Longtap_pen_offset;
   DCL_UINT16 u2Longtap_stroke_offset;
} STS_CTRL_CMO_T;


typedef struct
{
   TS_COORD_T rMin;
   TS_COORD_T rMax;
} TS_HandArea_T;
typedef struct
{
   TS_HandArea_T *rArea;
   DCL_UINT16 u2n;
   TS_HandArea_T *rExtArea;
} STS_CTRL_CHW_T;


typedef struct
{
   DCL_UINT32 u4Longtap;
   DCL_UINT32 u4Repeat;
   DCL_UINT32 u4Handwriting_longtap;
} STS_CTRL_CTP_T;


typedef struct
{
   DCL_BOOLEAN fgPowerOn;
} STS_CTRL_POWER_ON_T;


typedef enum
{
   DCL_CTP_ACTIVE_MODE,
   DCL_CTP_IDLE_MODE,
   DCL_CTP_SLEEP_MODE,
   DCL_CTP_GESTURE_DETECTION_MODE,
   DCL_CTP_MULTIPLE_POINT_MODE,
   DCL_CTP_FIRMWARE_UPDATE,
   DCL_CTP_FM_ENABLE,
   DCL_CTP_FM_DISABLE
}DCL_CTP_DEVICE_MODE_enum;

typedef struct
{
   DCL_CTP_DEVICE_MODE_enum mode;
} STS_CTRL_SET_DEVICE_T;


typedef enum
{
   DCL_CTP_COMMAND_GET_VERSION,
   DCL_CTP_COMMAND_GET_CONFIG,
   DCL_CTP_COMMAND_LOAD_INT_CONFIG,
   DCL_CTP_COMMAND_LOAD_EXT_CONFIG,
   DCL_CTP_COMMAND_GET_DIFF_DATA,
   DCL_CTP_COMMAND_GET_FW_BUFFER,
   DCL_CTP_COMMAND_DO_FW_UPDATE
}DCL_CTP_CTRL_COMMAND_enum;

typedef struct
{
   DCL_UINT32 u4Command;
   void *pVoid1;
   void *pVoid2;
} STS_CTRL_COMMAND_T;
# 345 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_msdc.h" 1
# 154 "interface/driver/peripheral/dcl_msdc.h"
# 1 "interface/driver/peripheral/dcl.h" 1
# 155 "interface/driver/peripheral/dcl_msdc.h" 2
# 168 "interface/driver/peripheral/dcl_msdc.h"
typedef DCL_UINT32 DCL_SDC_CMD_STATUS;



typedef enum{
 DCL_SDIO_FIX,
 DCL_SDIO_INC
}DCL_SDIO_cmd53_op_enum;


typedef enum{
 DCL_SDIO_FUCN_0=0,
 DCL_SDIO_FUCN_1,
 DCL_SDIO_MAX_FUCN_ID,
 DCL_SDIO_FUCN_MEM=0x1000
}DCL_SDIO_function_id_enum;


typedef enum{
 DCL_BIT_1W = 0x0000,
 DCL_BIT_4W = 0x0002
}DCL_SD_BITWIDTH;

typedef void ( *MSDC_CALLBACK) (void);






typedef DCL_SDC_CMD_STATUS (*DCL_SINGLE_BLK_RD) (DCL_UINT32 data_adrs, DCL_UINT32 *rxbuffer);
typedef DCL_SDC_CMD_STATUS (*DCL_MUL_BLK_RD) (DCL_UINT32 data_adrs, DCL_UINT32 *rxbuffer, DCL_UINT32 num);
typedef DCL_SDC_CMD_STATUS (*DCL_SINGLE_BLK_WR) (DCL_UINT32 address, DCL_UINT32 *txbuffer);
typedef DCL_SDC_CMD_STATUS (*DCL_MUL_BLK_WR) (DCL_UINT32 address, DCL_UINT32 *txbuffer, DCL_UINT32 num);
typedef DCL_SDC_CMD_STATUS (*DCL_SD_INITITALIZE) (void);
typedef DCL_SDC_CMD_STATUS (*DCL_SET_PRE_ERASE_CNT) (DCL_UINT32 num);
typedef DCL_SDC_CMD_STATUS (*DCL_SD_SET_CALLBACK)(MSDC_CALLBACK callback1, MSDC_CALLBACK callback2, MSDC_CALLBACK callback3,MSDC_CALLBACK callback4,MSDC_CALLBACK callback5,MSDC_CALLBACK callback6);
typedef DCL_SDC_CMD_STATUS (*DCL_SET_READ_TEST_FLAG)(kal_uint32 readTestFlag);
typedef DCL_SDC_CMD_STATUS(*DCL_SD_READ_TEST)(void);
typedef DCL_SDC_CMD_STATUS(*DCL_SD_SET_UPLL_CLOCK_TEST)(void);
typedef DCL_SDC_CMD_STATUS(*DCL_SD_ERASE_BLK)(DCL_UINT32 startSector, DCL_UINT32 sectorNum);
typedef DCL_SDC_CMD_STATUS (*DCL_GPD_MUL_BLK_RD) (DCL_UINT32 data_addrs,DCL_UINT32 num, void *data_buf);
typedef DCL_SDC_CMD_STATUS (*DCL_GPD_MUL_BLK_WR) (DCL_UINT32 data_addrs,DCL_UINT32 num, void *data_buf);


typedef struct
{
 DCL_SINGLE_BLK_RD singleBlkRd;
 DCL_MUL_BLK_RD mulBlkRd;
 DCL_SINGLE_BLK_WR singleBlkWr;
 DCL_MUL_BLK_WR mulBlkWr;
 DCL_SD_INITITALIZE sdInititalize;
 DCL_SET_PRE_ERASE_CNT setPreEraseCnt;
 DCL_SD_SET_CALLBACK sdSetCallBack;
 DCL_SET_READ_TEST_FLAG sdSetReadTestFlag;
 DCL_SD_READ_TEST sdSetReadTest;
 DCL_SD_SET_UPLL_CLOCK_TEST sdSetUpllClock;
 DCL_SD_ERASE_BLK eraseBlk;
    DCL_GPD_MUL_BLK_RD GpdMulBlkRd;
    DCL_GPD_MUL_BLK_WR GpdMulBlkWr;
}SDDriver_t;


typedef DCL_BOOLEAN (*DCL_SDIO_REG_WR) (DCL_SDIO_function_id_enum function, DCL_UINT32 addr, DCL_UINT32 data, DCL_SDIO_cmd53_op_enum op);
typedef DCL_BOOLEAN (*DCL_SDIO_REG_WR_ISR) (DCL_SDIO_function_id_enum function, DCL_UINT32 addr, DCL_UINT32 data, DCL_SDIO_cmd53_op_enum op);
typedef DCL_BOOLEAN (*DCL_SDIO_DATA_WR) (DCL_SDIO_function_id_enum function, DCL_UINT32 addr, DCL_UINT8 *data, DCL_SDIO_cmd53_op_enum op, DCL_UINT32 count, DCL_BOOLEAN block);
typedef DCL_BOOLEAN (*DCL_SDIO_REG_RD) (DCL_SDIO_function_id_enum function, DCL_UINT32 addr, DCL_UINT32 *data, DCL_SDIO_cmd53_op_enum op);
typedef DCL_BOOLEAN (*DCL_SDIO_DATA_RD) (DCL_SDIO_function_id_enum function, DCL_UINT32 addr, DCL_UINT8 *data, DCL_SDIO_cmd53_op_enum op, DCL_UINT32 count, DCL_BOOLEAN block);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_CHECK_INTR) (DCL_SDIO_function_id_enum function, DCL_BOOLEAN *pending);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_ENABLE_INTR) (DCL_SDIO_function_id_enum function, DCL_BOOLEAN enable);
typedef DCL_UINT32 (*DCL_SDIO_INIT) (void);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_ABORT) (DCL_SDIO_function_id_enum function);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_SW_RST) (void);
typedef DCL_UINT32 (*DCL_SDIO_QRY_BLOCK_SIZE) (DCL_SDIO_function_id_enum function);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_SET_BLOCK_SIZE) (DCL_SDIO_function_id_enum function, DCL_UINT32 size);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_GET_BLOCK_SIZE) (DCL_SDIO_function_id_enum function, DCL_UINT32 *size);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_ENABLE_IO) (DCL_SDIO_function_id_enum function, DCL_BOOLEAN enable);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_SET_BUS_WIDTH) (DCL_SD_BITWIDTH bus);
typedef void (*DCL_SDIO_GET_CCCR) (DCL_UINT8 *buf, DCL_UINT32 bufLen);
typedef void (*DCL_SDIO_GET_FBR) (DCL_UINT8 *buf, DCL_UINT32 bufLen);

typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_CMD52_READ)(DCL_SDIO_function_id_enum function, DCL_UINT32 addr, DCL_UINT8 *rdata, DCL_UINT8 *r5resp);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_CMD52_WRITE)(DCL_SDIO_function_id_enum function, DCL_UINT32 addr, DCL_UINT8 wdata, DCL_UINT8 *r5resp);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_CMD52_WRITE_READ)(DCL_SDIO_function_id_enum function, DCL_UINT32 addr, DCL_UINT8 wdata, DCL_UINT8 *rdata, DCL_UINT8 *r5resp);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_CMD53_READ)(DCL_SDIO_function_id_enum function, DCL_UINT32 addr, DCL_UINT32 data, DCL_SDIO_cmd53_op_enum op, DCL_UINT32 count, DCL_BOOLEAN block, DCL_UINT8 *r5resp);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_CMD53_WRITE)(DCL_SDIO_function_id_enum function, DCL_UINT32 addr, DCL_UINT32 data, DCL_SDIO_cmd53_op_enum op, DCL_UINT32 count, DCL_BOOLEAN block, DCL_UINT8 *r5resp);
typedef void (*DCL_SDIO_int_registration)(DCL_SDIO_function_id_enum function, void (func)(void));
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_MCUDMA_READ)(DCL_UINT32 *rdata);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_MCUDMA_WRITE)(DCL_UINT32 wdata);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_CLKPADRED_READ)(DCL_UINT32 *rdata);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_CLKPADRED_WRITE)(DCL_UINT32 wdata);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_FORCEMCU_READ)(DCL_UINT32 *rdata);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_FORCEMCU_WRITE)(DCL_UINT32 wdata);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_GETCLK)(DCL_UINT32 *rdata);
typedef DCL_SDC_CMD_STATUS (*DCL_SDIO_SETCLK)(DCL_UINT32 wdata);



typedef struct
{
 DCL_SDIO_REG_WR regWr;
 DCL_SDIO_REG_WR_ISR regWrInIsr;
 DCL_SDIO_DATA_WR dataWr;
 DCL_SDIO_REG_RD regRd;
 DCL_SDIO_DATA_RD dataRd;
 DCL_SDIO_CHECK_INTR checkIntr;
 DCL_SDIO_ENABLE_INTR enableIntr;
 DCL_SDIO_INIT sdioInititalize;
 DCL_SDIO_ABORT abort;
 DCL_SDIO_SW_RST swRst;
 DCL_SDIO_QRY_BLOCK_SIZE qryBlkSize;
 DCL_SDIO_SET_BLOCK_SIZE setBlkSize;
 DCL_SDIO_GET_BLOCK_SIZE getBlkSize;
 DCL_SDIO_ENABLE_IO enableIO;
 DCL_SDIO_SET_BUS_WIDTH setBusWidth;
 DCL_SDIO_GET_CCCR getCCCR;
 DCL_SDIO_GET_FBR getFBR;

    DCL_SDIO_CMD52_READ cmd52_read;
    DCL_SDIO_CMD52_WRITE cmd52_write;
    DCL_SDIO_CMD52_WRITE_READ cmd52_write_read;
    DCL_SDIO_CMD53_READ cmd53_read;
    DCL_SDIO_CMD53_WRITE cmd53_write;
    DCL_SDIO_int_registration hisr_callback;
    DCL_SDIO_MCUDMA_READ mcudma_read;
    DCL_SDIO_MCUDMA_WRITE mcudma_write;
    DCL_SDIO_CLKPADRED_READ clkpadred_read;
    DCL_SDIO_CLKPADRED_WRITE clkpadred_write;
    DCL_SDIO_FORCEMCU_READ forcemcu_read;
    DCL_SDIO_FORCEMCU_WRITE forcemcu_write;
    DCL_SDIO_GETCLK getclk;
    DCL_SDIO_SETCLK setclk;

}SDIODriver_t;

typedef void (* DCL_MSDC_PDN)(DCL_BOOLEAN pwDown);

typedef struct
{

 DCL_MSDC_PDN modulePDN;
}MSDCDriver_t;
# 367 "interface/driver/peripheral/dcl_msdc.h"
typedef struct
{
 DCL_UINT32 u4Sector;
 DCL_UINT32 u4Sectors;
 void *bufferAddr;
} SD_CTRL_READ_T;


typedef struct
{
 DCL_UINT32 u4Sector;
 DCL_UINT32 u4Sectors;
 void *bufferAddr;
} SD_CTRL_WRITE_T;


typedef struct
{
 DCL_UINT32 u4Sector;
 DCL_UINT32 u4Sectors;
 void *bufferHead;
 void *bufferTail;
} SD_CTRL_GPD_READ_T;


typedef struct
{
 DCL_UINT32 u4Sector;
 DCL_UINT32 u4Sectors;
 void *bufferHead;
 void *bufferTail;
} SD_CTRL_GPD_WRITE_T;
typedef struct
{
    DCL_UINT32 max_bd_num;
} SD_CTRL_MAX_BD_STRUCT_NUM_T;


typedef struct
{
 DCL_UINT32 u4Sector;
 DCL_UINT32 u4Size;
 void *bufferAddr;
} SD_CTRL_READ_ODD_T;


typedef struct
{
 DCL_UINT32 u4Sector;
 DCL_UINT32 u4Size;
 void *bufferAddr;
} SD_CTRL_WRITE_ODD_T;


typedef struct
{
 DCL_UINT32 u4TargetInterface;
} SD_CTRL_ANALOG_SWITCH_T;


typedef struct
{
 DCL_BOOLEAN gHighCapacityCard;
 DCL_UINT64 pu8Capacity;
} SD_CTRL_GET_CAPACITY_T;


typedef struct
{
 DCL_BOOLEAN fgInited;
} SD_CTRL_INITED_T;


typedef struct
{
 DCL_BOOLEAN fgPresent;
} SD_CTRL_EXISTENCE_T;


typedef struct
{
 DCL_BOOLEAN fgReadOnly;
} SD_CTRL_WRITE_PROTECTION_T;


typedef struct
{
 DCL_BOOLEAN fgEverPLugOut;
} SD_CTRL_QUERY_EVER_PLUGOUT_T;


typedef struct
{
 DCL_BOOLEAN fgIsItTrue;
} SD_CTRL_FORCE_SINGLE_LINE_T;


typedef struct
{
 DCL_BOOLEAN fgIsCACHEABLE;
} SD_CTRL_CACHEABLE_BUFFER_T;

typedef struct
{
 MSDC_CALLBACK callback1;
 MSDC_CALLBACK callback2;
 MSDC_CALLBACK callback3;
 MSDC_CALLBACK callback4;
 MSDC_CALLBACK callback5;
 MSDC_CALLBACK callback6;
}SD_CTRL_CALLBACK_T;

typedef struct
{
 DCL_UINT32 readTestFlag;
}SD_CTRL_SET_READ_TEST_FLAG_T;

typedef struct
{
 DCL_UINT32 startSector;
 DCL_UINT32 sectorNum;
}SD_CTRL_FLUSH_T;

typedef struct
{
 DCL_BOOLEAN enable;
}SD_CTRL_FAST_FORMAT_T;

typedef struct
{
 DCL_BOOLEAN changed;
}SD_CTRL_MEDIA_CHANGED_T;
# 580 "interface/driver/peripheral/dcl_msdc.h"
typedef struct
{
 DCL_SDIO_function_id_enum function;
 DCL_UINT32 addr;
 DCL_UINT32 data;
 DCL_SDIO_cmd53_op_enum op;
} SDIO_CTRL_REG_RW_T;


typedef struct{
 DCL_SDIO_function_id_enum function;
 DCL_BOOLEAN block;
 DCL_SDIO_cmd53_op_enum op;
 DCL_UINT16 count;
 DCL_UINT32 addr;
 DCL_UINT32 buffer;
}SDIO_CTRL_DAT_RW_T;


typedef struct{
 DCL_SDIO_function_id_enum function;
 DCL_UINT32 size;
}SDIO_CTRL_SET_BLK_SIZE_T;


typedef struct{
 DCL_SDIO_function_id_enum function;
 DCL_BOOLEAN *pending;
}SDIO_CTRL_CHECK_INTR_T;


typedef struct{
 DCL_SDIO_function_id_enum function;
 DCL_BOOLEAN enable;
}SDIO_CTRL_ENABLE_T;


typedef struct{
 DCL_UINT8 *buffer;
 DCL_UINT32 bufferLength;
}SDIO_CTRL_GET_INFO_T;

typedef struct{

 kal_uint8 rw;
 kal_uint8 func;
 kal_uint8 rdata;
 kal_uint8 wdata;
 kal_bool raw;
 kal_bool stop;
 kal_uint32 addr;
    kal_uint8 r5_resp;
}SDIO_CTRL_CMD52_T;

typedef struct{

 kal_uint8 rw;
 kal_uint8 func;
    kal_uint8 r5_resp;

    kal_uint8 op;
    kal_bool block;
    kal_uint16 count;
    kal_uint32 addr;
    kal_uint32 buffer;
}SDIO_CTRL_CMD53_T;

typedef struct{
    kal_uint32 data;
}SDIO_CTRL_CMD_REG_T;
# 348 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h" 1
# 168 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
# 1 "interface/driver/peripheral/dcl.h" 1
# 169 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h" 2
# 275 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
typedef enum
{
 USB_PHY_OWNER_USB = 0,
 USB_PHY_OWNER_BMT,
 USB_PHY_OWNER_MAX = 31
}USB_PHY_OWNER;


typedef enum
{
 USB_DMA0_TYPE = 0,
 USB_DMA1_TYPE,
 USB_DMA2_TYPE
} USB_DMA_TYPE;


typedef enum
{
 USB_TEST_MODE_TYPE_NONE = 0,
 USB_TEST_MODE_TYPE_J,
 USB_TEST_MODE_TYPE_K,
 USB_TEST_MODE_TYPE_SE0_NAK,
 USB_TEST_MODE_TYPE_PACKET
}USB_TEST_MODE_TYPE;



typedef enum
{
 USB_EP_TX_DIR = 0,
 USB_EP_RX_DIR
}USB_EP_DIRECTION;



typedef enum
{
 USB_ENDPT_CTRL = 0,
 USB_ENDPT_BULK,
 USB_ENDPT_INTR,
 USB_ENDPT_ISO
}USB_ENDPT_TXFER_TYPE;



typedef enum
{
 USB_EP_USE_NO_DMA = 0,
 USB_EP_USE_ONLY_DMA,
 USB_EP_USE_DMA_ON_DEMAND
}USB_ENDPT_DMA_USAGE;



typedef enum
{
 USB_EP_STATE_DISABLE = 0,
 USB_EP_STATE_FIFO,
 USB_EP_STATE_DMA
}USB_EP_STATE;




typedef enum
{
 USB_EP0_DRV_STATE_READ_END,
 USB_EP0_DRV_STATE_WRITE_RDY,
 USB_EP0_DRV_STATE_TRANSACTION_END,
 USB_EP0_DRV_STATE_CLEAR_SENT_STALL
}USB_EP0_DRV_STATE;



typedef enum
{
 USB_DRV_HDLR_RESET,
 USB_DRV_HDLR_SUSPEND,
 USB_DRV_HDLR_RESUME,
 USB_DRV_HDLR_EP0,
 USB_DRV_HDLR_EP_TX,
 USB_DRV_HDLR_EP_RX
}USB_DRV_HDLR_TYPE;




typedef enum
{
 USB_SET_ADDR_DATA,
 USB_SET_ADDR_STATUS
}USB_SET_ADDR_STATE;



typedef void (*usb_drv_intr_handler_ptr)(void);

typedef void (*usb_dma_callback)(void);
typedef void (*usb_dmaq_callback)(DCL_UINT32 u4_port);






typedef enum
{
 DCL_USB_PHY_OWNER_USB = 0,
 DCL_USB_PHY_OWNER_BMT,
 DCL_USB_PHY_OWNER_MAX = 31
}DCL_USB_PHY_OWNER;


typedef enum
{
 DCL_USB_DMA0_TYPE = 0,
 DCL_USB_DMA1_TYPE,
 DCL_USB_DMA2_TYPE
}DCL_USB_DMA_TYPE;


typedef enum
{
 DCL_USB_TEST_MODE_TYPE_NONE = 0,
 DCL_USB_TEST_MODE_TYPE_J,
 DCL_USB_TEST_MODE_TYPE_K,
 DCL_USB_TEST_MODE_TYPE_SE0_NAK,
 DCL_USB_TEST_MODE_TYPE_PACKET
}DCL_USB_TEST_MODE_TYPE;



typedef enum
{
 DCL_USB_PDN_OWNER_USB = 0,
 DCL_USB_PDN_OWNER_IRDA,

}DCL_USB_PDN_OWNER;


typedef enum
{
 DCL_USB_EP_TX_DIR = 0,
 DCL_USB_EP_RX_DIR
}DCL_USB_EP_DIRECTION;



typedef enum
{
 DCL_USB_ENDPT_CTRL = 0,
 DCL_USB_ENDPT_BULK,
 DCL_USB_ENDPT_INTR,
 DCL_USB_ENDPT_ISO
}DCL_USB_ENDPT_TXFER_TYPE;




typedef enum
{
 DCL_USB_EP_USE_NO_DMA = 0,
 DCL_USB_EP_USE_ONLY_DMA,
 DCL_USB_EP_USE_DMA_ON_DEMAND
}DCL_USB_ENDPT_DMA_USAGE;



typedef enum
{
 DCL_USB_EP_STATE_DISABLE = 0,
 DCL_USB_EP_STATE_FIFO,
 DCL_USB_EP_STATE_DMA
}DCL_USB_EP_STATE;



typedef enum
{
 DCL_USB_EP0_DRV_STATE_READ_END,
 DCL_USB_EP0_DRV_STATE_WRITE_RDY,
 DCL_USB_EP0_DRV_STATE_TRANSACTION_END,
 DCL_USB_EP0_DRV_STATE_CLEAR_SENT_STALL
}DCL_USB_EP0_DRV_STATE;



typedef enum
{
 DCL_USB_DRV_HDLR_RESET,
 DCL_USB_DRV_HDLR_SUSPEND,
 DCL_USB_DRV_HDLR_RESUME,
 DCL_USB_DRV_HDLR_EP0,
 DCL_USB_DRV_HDLR_EP_TX,
 DCL_USB_DRV_HDLR_EP_RX
}DCL_USB_DRV_HDLR_TYPE;




typedef enum
{
 DCL_USB_SET_ADDR_DATA,
 DCL_USB_SET_ADDR_STATUS
}DCL_USB_SET_ADDR_STATE;


typedef enum
{
 DCL_USB_TOTAL_FIFO_SIZE_4096 = 0,
 DCL_USB_TOTAL_FIFO_SIZE_2304,
 DCL_USB_TOTAL_FIFO_SIZE_NONE
}DCL_USB_TOTAL_FIFO_SIZE;


typedef enum
{
 DCL_USB_IP_V3 = 0,
 DCL_USB_IP_V1,
 DCL_USB_IP_V1_PLUS
}DCL_USB_IP_VERSION;


typedef void (*DCL_USB_FUNC_TYPE_0)(void);
# 643 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_ENDPT_TXFER_TYPE type;
 DCL_USB_EP_DIRECTION direction;
}USB_DRV_CTRL_EP_COMMON_FUNC_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_DRV_HDLR_TYPE type;
 DCL_USB_FUNC_TYPE_0 hdlr;
}USB_DRV_CTRL_REGISTER_DRV_INFO_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_EP_DIRECTION direction;
 DCL_BOOLEAN fg_result;
}USB_DRV_CTRL_EP_CTRL_FUNC_1_T;



typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT8 u1addr;
 DCL_USB_SET_ADDR_STATE state;
}USB_DRV_CTRL_USB_SET_ADDR_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_UINT16 u2data_size;
 DCL_USB_ENDPT_TXFER_TYPE type;
 DCL_BOOLEAN fgdouble_fifo;
}USB_DRV_CTRL_USB_EP_INIT_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_ENDPT_TXFER_TYPE ep_type;
 DCL_USB_ENDPT_DMA_USAGE dma_usage_type;
 DCL_BOOLEAN fgis_flush;
 DCL_BOOLEAN fgis_ft_mode;
}USB_DRV_CTRL_EP_ENABLE_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_ENDPT_DMA_USAGE dma_usage_type;
}USB_DRV_CTRL_EP_DISABLE_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_ENDPT_TXFER_TYPE ep_type;
 DCL_BOOLEAN fg_is_switch_to_dma;
}USB_DRV_CTRL_EP_CONFIG_TYPE_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_EP_STATE result;
}USB_DRV_CTRL_EP_STATE_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_USB_TOTAL_FIFO_SIZE fifo_size;
}USB_DRV_CTRL_GET_FIFO_SIZE_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_USB_IP_VERSION ip_version;
}USB_DRV_CTRL_GET_IP_VERSION_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_ENDPT_TXFER_TYPE ep_type;
 DCL_BOOLEAN fg_reset_toggle;
}USB_DRV_CTRL_EP_CTRL_FUNC_2_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_UINT32 u4result;
}USB_DRV_CTRL_EP_CTRL_FUNC_3_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_ENDPT_TXFER_TYPE ep_type;
 DCL_BOOLEAN fgresult;
}USB_DRV_CTRL_EP_CTRL_FUNC_4_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_EP_DIRECTION direction;
 DCL_UINT32 u4count;
}USB_DRV_CTRL_EP_CTRL_FUNC_6_T;


typedef struct
{
 DCL_UINT8 u1_ip_port;
 DCL_BOOLEAN fg_is_ft_mode;
}USB_DRV_CTRL_EP_CTRL_FUNC_7_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_UINT16 u2nBytes;
 void *paddr;
 DCL_BOOLEAN fg_force_one_byte_access;
}USB_DRV_CTRL_EP_FIFO_RW_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_EP_DIRECTION direction;
 DCL_BOOLEAN fgen;
}USB_DRV_CTRL_EP_STALL_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_BOOLEAN fg_transaction_end;
 DCL_BOOLEAN fg_sent_stall;
}USB_DRV_CTRL_GET_EP_STATUS_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_USB_EP0_DRV_STATE state;
 DCL_BOOLEAN fgstall;
 DCL_BOOLEAN fgend;
}USB_DRV_CTRL_UPDATE_EPSTATE_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_tx_num;
 DCL_UINT32 u4ep_rx_num;
 DCL_USB_EP_DIRECTION direction;
 DCL_BOOLEAN fgsame_chan;
}USB_DRV_CTRL_DMA_FUNC_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT8 u1dma_chan;
 DCL_BOOLEAN fgenable;
 DCL_UINT8 u1timer_ticks;
}USB_DRV_CTRL_DMA_TIMER_FUNC_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT8 u1dma_chan;
 DCL_BOOLEAN fgresult;
}USB_DRV_CTRL_DMA_CTRL_FUNC_1_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_EP_DIRECTION direction;
 DCL_UINT8 u1chan_num;
 DCL_BOOLEAN fgsame_chan;
}USB_DRV_CTRL_DMA_CTRL_FUNC_2_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_EP_DIRECTION direction;
 DCL_USB_ENDPT_TXFER_TYPE ep_type;
 DCL_UINT32 u4addr;
 DCL_UINT32 u4length;
 DCL_USB_FUNC_TYPE_0 callback;
 DCL_BOOLEAN fgcallback_upd_run;
 DCL_BOOLEAN fgknown_size;
 DCL_USB_DMA_TYPE dma_type;
}USB_DRV_CTRL_DMA_SETUP_FUNC_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_UINT32 u4ep_num;
 DCL_USB_EP_DIRECTION direction;
 DCL_BOOLEAN fgstatus;
}USB_DRV_CTRL_DMA_STATUS_FUNC_T;


typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_USB_TEST_MODE_TYPE test_selector;
}USB_DRV_CTRL_USB_TEST_MODE_FUNC_T;



typedef struct
{
 DCL_UINT32 u4ip_port;
 DCL_USB_PHY_OWNER owner;
}USB_DRV_CTRL_PHY_FUNC_T;

typedef struct
{
  DCL_BOOLEAN is_cdcacm;
} USB_DRV_CTRL_COM_TYPE_QUERY_T;


typedef struct
{
  DCL_BOOLEAN enable;
  DCL_UINT32 u4OwenrId;
  DCL_BOOLEAN u2Retresult;
  DCL_UINT8 ptransfer_type;
} USB_DRV_CTRL_COM_HIGH_SPEED_IF, USB_DRV_CTRL_COM_DIRECT_PATH_IF;


typedef struct
{
 DCL_UINT16 u2Length;
 DCL_UINT32 u4OwenrId;
 DCL_UINT16 u2RetSize;
 DCL_UINT8* puBuffaddr;
 DCL_UINT8 ptransfer_type;
} USB_DRV_CTRL_COM_SEND_DATA;



typedef struct
{
 DCL_UINT16 u2Length;
 DCL_UINT32 u4OwenrId;
 DCL_UINT16 u2RetSize;
 DCL_UINT8* puBuffaddr;
 DCL_UINT8 umode;
 DCL_UINT8 uescape_char;
 DCL_UINT8 ptransfer_type;
} USB_DRV_CTRL_COM_SEND_ISR_DATA;


typedef struct
{
 DCL_UINT16 u2Length;
 DCL_UINT32 u4OwenrId;
 DCL_UINT16 u2RetSize;
 DCL_UINT8** puBuffaddr;
 DCL_UINT8* pustatus;
 DCL_UINT8 ptype;
 DCL_UINT8 ptransfer_type;
} USB_DRV_CTRL_COM_GET_DATA;

typedef struct
{
 DCL_UINT32 u4OwenrId;
} USB_DRV_CTRL_COM_PUSH_DATA;



typedef struct
{
 DCL_BOOLEAN u2Retresult;
} USB_DRV_CTRL_COM_RESPONSE;

typedef struct
{
 DCL_BOOLEAN u2set;
 DCL_BOOLEAN u2Retresult;
} USB_DRV_CTRL_SET;

typedef struct
{
 DCL_BOOLEAN fgbset;
 DCL_UINT32 u4OwenrId;
} USB_DRV_CTRL_COM_RB_THRESHOLD_EN;

typedef struct
{
  DCL_UINT8 u1ftPort;
} USB_DRV_CTRL_COM_FT_PORT;

typedef struct
{
  DCL_UINT32 u4info;
} USB_DRV_CTRL_COM_INFO;

typedef struct
{
 DCL_UINT8 uindex;
 DCL_UINT32 u4max_size;
} USB_VIDEO_CTRL_FUNC1_T;

typedef struct
{
 DCL_UINT8* uaddr;
 DCL_UINT32 u4size;
 DCL_UINT32 u4time;
 DCL_UINT32 u4size_type;
} USB_VIDEO_CTRL_FUNC2_T;

typedef struct
{
 DCL_UINT8* u2Retresult;
} USB_VIDEO_CTRL_FUNC3_T;

typedef struct
{
 DCL_UINT16* u2String;
} USB_IMAGE_CTRL_FUNC1_T;
# 351 "interface/driver/peripheral/dcl.h" 2
# 362 "interface/driver/peripheral/dcl.h"
# 1 "interface/driver/peripheral/dcl_sim.h" 1
# 79 "interface/driver/peripheral/dcl_sim.h"
typedef DCL_UINT16 DCL_SIM_STATUS_WORD;

typedef enum
{
 DCL_ME_UNKNOW =0,
 DCL_ME_18V_30V,
 DCL_ME_30V_ONLY,
 DCL_ME_18V_ONLY
} DCL_SIM_ENV;

typedef enum{
 DCL_USIM_NO_ERROR = 0,


 DCL_USIM_WAITING_EVENT = 1,
 DCL_USIM_BLOCK_REC = 2,
 DCL_USIM_POWER_OFF = 3,
 DCL_USIM_ATR_REC = 4,
 DCL_USIM_S_BLOCK_REC = 5,


 DCL_USIM_NO_INSERT = -1,
 DCL_USIM_VOLT_NOT_SUPPORT = -2,
 DCL_USIM_NO_ATR = -3,
 DCL_USIM_TS_INVALID = -4,
 DCL_USIM_ATR_ERR = -5,
 DCL_USIM_INVALID_ATR = -6,
 DCL_USIM_PTS_FAIL = -7,
 DCL_USIM_RX_INVALID = -8,
 DCL_USIM_BWT_TIMEOUT = -9,
 DCL_USIM_DATA_ABORT = -10,
 DCL_USIM_DEACTIVATED = -11,
 DCL_USIM_S_BLOCK_FAIL = -12,
 DCL_USIM_INVALID_WRST = -13,
 DCL_USIM_GPT_TIMEOUT = -14
}DCL_SIM_STATUS;


typedef enum{
 DCL_UNKNOWN_POWER_CLASS = 0,
 DCL_CLASS_A_50V = 1,
 DCL_CLASS_B_30V = 2,
 DCL_CLASS_AB = 3,
 DCL_CLASS_C_18V = 4,
 DCL_ClASS_BC = 6,
 DCL_CLASS_ABC = 7
}DCL_SIM_POWER;

typedef DCL_UINT32 DCL_SIM_HW_CB;


typedef enum
{
 DCL_SIM_PROTOCOL,
 DCL_USIM_PROTOCOL
}DCL_SIM_APP_PROTOCOL;




typedef enum
{
 DCL_T0_PROTOCOL,
 DCL_T1_PROTOCOL,
 DCL_UNKNOWN_PROTOCOL
}DCL_SIM_PHY_PROTOCOL;


typedef enum{
 DCL_CLOCK_STOP_NOT_SUPPORT = 0x0,
 DCL_CLOCK_STOP_LOW = 0x40,
 DCL_CLOCK_STOP_HIGH = 0x80,
 DCL_CLOCK_STOP_ANY = 0xc0,
 DCL_CLOCK_STOP_MSK = 0xc0,
 DCL_CLOCK_STOP_UNKONW = 0x0f
}DCL_SIM_CLK_STOP;


typedef enum{
 DCL_SPEED_372,
 DCL_SPEED_64,
 DCL_SPEED_32,
 DCL_SPEED_16
}DCL_SIM_CARD_SPEED;


typedef struct{
 DCL_SIM_POWER power;
 DCL_SIM_CARD_SPEED speed;
 DCL_SIM_CLK_STOP clock_stop;
 DCL_SIM_APP_PROTOCOL app_proto;
 DCL_SIM_PHY_PROTOCOL phy_proto;
 kal_bool T0_support;
 kal_bool T1_support;
 kal_uint8 hist_index;
 kal_uint8 *ATR;
       kal_bool TAiExist;
    kal_uint8 ATR_length;
    kal_bool isSW6263;
    kal_uint8 TB15;
}DCL_SIM_INFO;
# 188 "interface/driver/peripheral/dcl_sim.h"
typedef DCL_SIM_STATUS (* DCL_SIM_RST)(DCL_SIM_POWER ExpectVolt, DCL_SIM_POWER *ResultVolt, kal_bool warm, DCL_SIM_HW_CB handle);

typedef DCL_SIM_STATUS_WORD (* DCL_SIM_CMD)(kal_uint8 *txData,kal_uint32 *txSize,kal_uint8 *rxData, kal_uint32 *rxSize, DCL_SIM_HW_CB handle);

typedef void (* DCL_SIM_PWOFF)(DCL_SIM_HW_CB handle);

typedef void (* DCL_SIM_GET_CARD_INFO)(DCL_SIM_INFO *info, DCL_SIM_HW_CB handle);

typedef void (* DCL_SIM_SET_MAX_SPEED)(DCL_SIM_CARD_SPEED speed, DCL_SIM_HW_CB handle);

typedef void (* DCL_SIM_SET_PREFER_PROTOCOL)(DCL_SIM_PHY_PROTOCOL T, DCL_SIM_HW_CB handle);

typedef kal_bool (* DCL_SIM_SET_CLK_STOP_MODE)(DCL_SIM_CLK_STOP mode, DCL_SIM_HW_CB handle);

typedef void (* DCL_SIM_TOUT_TEST)(kal_uint32 toutValue, DCL_SIM_HW_CB handle);

typedef kal_uint32 (* DCL_SIM_ASSIGN_LOGICAL)(kal_uint32 logicalNumber);

typedef DCL_SIM_CARD_SPEED (*DCL_SIM_GAT_CARD_SPEED)(DCL_SIM_HW_CB handle);

typedef DCL_BOOLEAN (*DCL_SIM_QUERY_GET_9000_WHEN_SELECT)(DCL_SIM_HW_CB handle);


typedef void (*DCL_SIM_PLUG_OUT_CALLBACK)(kal_uint32 simIf);

typedef void (*DCL_SIM_PLUG_IN_CALLBACK)(kal_uint32 simIf);




typedef struct
{
 DCL_SIM_RST rst;
 DCL_SIM_CMD cmd;
 DCL_SIM_PWOFF pwOff;
 DCL_SIM_GET_CARD_INFO getCardInfo;
 DCL_SIM_SET_MAX_SPEED setSpeed;
 DCL_SIM_SET_PREFER_PROTOCOL setPreferT;
 DCL_SIM_SET_CLK_STOP_MODE setClockStopMode;
 DCL_SIM_TOUT_TEST toutTest;
 DCL_SIM_ASSIGN_LOGICAL assignLogical;
 DCL_SIM_GAT_CARD_SPEED getCardSpeed;
 DCL_SIM_QUERY_GET_9000_WHEN_SELECT query9000WhenSelect;
}DCL_SIMDriver_t;


typedef enum
{
 SIM_CONFIG_AP_TYPE_PHONE1,
 SIM_CONFIG_AP_TYPE_PHONE2,
 SIM_CONFIG_AP_TYPE_CMMB_SMD,
 SIM_CONFIG_AP_TYPE_PHONE3,
 SIM_CONFIG_AP_TYPE_PHONE4
} DCL_SIM_CONFIG_AP_TYPE;


typedef struct
{
 DCL_SIM_CONFIG_AP_TYPE apType;
    DCL_SIM_PLUG_IN_CALLBACK hotPlugInCb;
 DCL_SIM_PLUG_OUT_CALLBACK hotPlugOutCb;
} SIM_CONFIG_T;
# 299 "interface/driver/peripheral/dcl_sim.h"
typedef struct
{
 DCL_SIM_POWER ExpectVolt;
 DCL_SIM_POWER *ResultVolt;
 kal_bool warm;
 DCL_SIM_STATUS rstResult;
} SIM_CTRL_RST_T;


typedef struct
{
 kal_uint8 *txData;
 kal_uint32 *txSize;
 kal_uint8 *rxData;
 kal_uint32 *rxSize;
 kal_uint16 *statusWord;
} SIM_CTRL_CMD_T;




typedef struct
{
 DCL_SIM_INFO *info;
} SIM_CTRL_GET_CARD_INFO_T;


typedef struct
{
 DCL_SIM_CARD_SPEED speed;
} SIM_CTRL_SET_MAX_SPEED_T;


typedef struct
{
 DCL_SIM_PHY_PROTOCOL T;
} SIM_CTRL_SET_PREFER_PROTOCOL_T;


typedef struct
{
 DCL_SIM_CLK_STOP mode;
} SIM_CTRL_SET_CLK_STOP_MODE_T;


typedef struct
{
 DCL_UINT32 toutValue;
} SIM_CTRL_TOUT_TEST_T;


typedef struct
{
 DCL_SIM_CARD_SPEED *speed;
} SIM_CTRL_GET_SPEED_T;


typedef struct
{
 DCL_BOOLEAN *got9000;
} SIM_CTRL_QUERY_9000_T;


typedef struct
{
 DCL_BOOLEAN rlt;
} SIM_CTRL_SET_SLT_RLT_T;
# 363 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_pmu.h" 1
# 342 "interface/driver/peripheral/dcl_pmu.h"
typedef enum
{
 VA12,
 VRTC,
 VMIC,
 VAUDN,
 VAUDP,
 VRF28,
 VRF=VRF28,
 VRF28_1=VRF28,
 VRF28_2,
 VTCXO,
 VTCXO_1=VTCXO,
 VTCXO_2,
 VA25,
 VCAMA,
 VCAMD,
 VCAM_IO,
 VCAM_AF,
 VIO28,
 VUSB,
 VBT,
 VSIM,
 VSIM1 = VSIM,
 VSIM2,
 VIBR,
 VMC,
 VMC1,
 VMCH,
 VCAMA2,
 VCAMD2,
 VFM,
 VM12,
 VM12_1,
 VM12_2,
 VM12_INT,
 VCORE,
 VCORE2,
 VIO18,
 VPA_SW,
 VPROC,
 VRF18,
 VRF18_1=VRF18,
 VRF18_2,
 VRF1,
 VRF2,
 VA28,
 VM,
 VSF,
 VWIFI2V8,
 VWIFI3V3,
 V3GTX,
 V3GRX,
 VGP,
 VGP2,
 VSDIO,
 VDIG,
 VBUS,
 VA1,
 VA2,
 VMIPI,
 VBACKUP,
 PMU_LDO_BUCK_MAX
}PMU_LDO_BUCK_LIST_ENUM;


typedef enum
{
 VPA,
 VPA1=VPA,
 PMU_VPA_MAX
}PMU_VPA_LIST_ENUM;


typedef enum
{
 PMIC_VRF18,
 PMIC_VRF18_1 = PMIC_VRF18,
 PMIC_VRF18_2,
 PMIC_VRF18_MAX
}PMIC_VRF18_LIST_ENUM;


typedef enum
{
 PMIC_VSIM,
 PMIC_VSIM1 = PMIC_VSIM,
 PMIC_VSIM2,
 PMIC_VSIM_MAX
}PMIC_VSIM_LIST_ENUM;


typedef enum
{
 KPLED,
 PMU_KPLED_MAX
}PMU_KPLED_LIST_ENUM;


typedef enum
{
 CHR,
 PMU_CHR_MAX
}PMU_CHR_LIST_ENUM;


typedef enum
{
 STRUP,
 PMU_STRUP_MAX
}PMU_STRUP_LIST_ENUM;


typedef enum
{
 ISINK0,
 ISINK1,
 ISINK2,
 ISINK3,
 ISINK4,
    ISINK5,
 PMU_ISINK_MAX
}PMU_ISINK_LIST_ENUM;


typedef enum
{
 BOOST,
 BOOST1=BOOST,
 BOOST2,
 PMU_BOOST_MAX
}PMU_BOOST_LIST_ENUM;


typedef enum
{
 SPK,
 PMU_SPK_MAX
}PMU_SPK_LIST_ENUM;


typedef enum
{
 LPOSC,
 PMU_LPOSC_MAX
}PMU_LPOSC_LIST_ENUM;


typedef enum
{
 PMU_VOLT_00_000000_V = 0,
 PMU_VOLT_00_100000_V = 100000,
 PMU_VOLT_00_200000_V = 200000,
 PMU_VOLT_00_300000_V = 300000,
 PMU_VOLT_00_400000_V = 400000,
 PMU_VOLT_00_500000_V = 500000,
 PMU_VOLT_00_550000_V = 550000,
 PMU_VOLT_00_600000_V = 600000,
 PMU_VOLT_00_650000_V = 650000,
 PMU_VOLT_00_700000_V = 700000,
 PMU_VOLT_00_725000_V = 725000,
 PMU_VOLT_00_750000_V = 750000,
 PMU_VOLT_00_775000_V = 775000,
 PMU_VOLT_00_800000_V = 800000,
 PMU_VOLT_00_825000_V = 825000,
 PMU_VOLT_00_850000_V = 850000,
 PMU_VOLT_00_875000_V = 875000,
 PMU_VOLT_00_900000_V = 900000,
 PMU_VOLT_00_925000_V = 925000,
 PMU_VOLT_00_950000_V = 950000,
 PMU_VOLT_00_975000_V = 975000,
 PMU_VOLT_01_000000_V = 1000000,
 PMU_VOLT_01_025000_V = 1025000,
 PMU_VOLT_01_050000_V = 1050000,
        PMU_VOLT_01_060000_V = 1060000,
 PMU_VOLT_01_075000_V = 1075000,
 PMU_VOLT_01_100000_V = 1100000,
 PMU_VOLT_01_125000_V = 1125000,
 PMU_VOLT_01_150000_V = 1150000,
 PMU_VOLT_01_175000_V = 1175000,
 PMU_VOLT_01_200000_V = 1200000,
 PMU_VOLT_01_225000_V = 1225000,
 PMU_VOLT_01_250000_V = 1250000,
 PMU_VOLT_01_275000_V = 1275000,
 PMU_VOLT_01_300000_V = 1300000,
 PMU_VOLT_01_325000_V = 1325000,
 PMU_VOLT_01_350000_V = 1350000,
 PMU_VOLT_01_375000_V = 1375000,
 PMU_VOLT_01_400000_V = 1400000,
 PMU_VOLT_01_425000_V = 1425000,
 PMU_VOLT_01_450000_V = 1450000,
 PMU_VOLT_01_475000_V = 1475000,
 PMU_VOLT_01_500000_V = 1500000,
 PMU_VOLT_01_520000_V = 1520000,
 PMU_VOLT_01_525000_V = 1525000,
 PMU_VOLT_01_540000_V = 1540000,
 PMU_VOLT_01_550000_V = 1550000,
 PMU_VOLT_01_560000_V = 1560000,
 PMU_VOLT_01_575000_V = 1575000,
 PMU_VOLT_01_580000_V = 1580000,
 PMU_VOLT_01_600000_V = 1600000,
 PMU_VOLT_01_620000_V = 1620000,
 PMU_VOLT_01_625000_V = 1625000,
 PMU_VOLT_01_640000_V = 1640000,
 PMU_VOLT_01_650000_V = 1650000,
 PMU_VOLT_01_660000_V = 1660000,
 PMU_VOLT_01_675000_V = 1675000,
 PMU_VOLT_01_680000_V = 1680000,
 PMU_VOLT_01_700000_V = 1700000,
 PMU_VOLT_01_720000_V = 1720000,
 PMU_VOLT_01_725000_V = 1725000,
 PMU_VOLT_01_740000_V = 1740000,
 PMU_VOLT_01_750000_V = 1750000,
 PMU_VOLT_01_760000_V = 1760000,
 PMU_VOLT_01_775000_V = 1775000,
 PMU_VOLT_01_780000_V = 1780000,
 PMU_VOLT_01_800000_V = 1800000,
 PMU_VOLT_01_820000_V = 1820000,
 PMU_VOLT_01_825000_V = 1825000,
 PMU_VOLT_01_840000_V = 1840000,
 PMU_VOLT_01_850000_V = 1850000,
 PMU_VOLT_01_860000_V = 1860000,
 PMU_VOLT_01_875000_V = 1875000,
 PMU_VOLT_01_880000_V = 1880000,
 PMU_VOLT_01_900000_V = 1900000,
 PMU_VOLT_01_920000_V = 1920000,
 PMU_VOLT_01_925000_V = 1925000,
 PMU_VOLT_01_940000_V = 1940000,
 PMU_VOLT_01_950000_V = 1950000,
 PMU_VOLT_01_960000_V = 1960000,
 PMU_VOLT_01_975000_V = 1975000,
 PMU_VOLT_01_980000_V = 1980000,
 PMU_VOLT_02_000000_V = 2000000,
 PMU_VOLT_02_020000_V = 2020000,
 PMU_VOLT_02_025000_V = 2025000,
 PMU_VOLT_02_040000_V = 2040000,
 PMU_VOLT_02_050000_V = 2050000,
 PMU_VOLT_02_060000_V = 2060000,
 PMU_VOLT_02_075000_V = 2075000,
 PMU_VOLT_02_080000_V = 2080000,
 PMU_VOLT_02_100000_V = 2100000,
 PMU_VOLT_02_120000_V = 2120000,
 PMU_VOLT_02_125000_V = 2125000,
 PMU_VOLT_02_140000_V = 2140000,
 PMU_VOLT_02_150000_V = 2150000,
 PMU_VOLT_02_175000_V = 2175000,
 PMU_VOLT_02_200000_V = 2200000,
 PMU_VOLT_02_225000_V = 2225000,
 PMU_VOLT_02_250000_V = 2250000,
 PMU_VOLT_02_275000_V = 2275000,
 PMU_VOLT_02_300000_V = 2300000,
 PMU_VOLT_02_350000_V = 2350000,
 PMU_VOLT_02_425000_V = 2425000,
 PMU_VOLT_02_400000_V = 2400000,
 PMU_VOLT_02_450000_V = 2450000,
 PMU_VOLT_02_500000_V = 2500000,
 PMU_VOLT_02_550000_V = 2550000,
 PMU_VOLT_02_575000_V = 2575000,
 PMU_VOLT_02_600000_V = 2600000,
 PMU_VOLT_02_650000_V = 2650000,
 PMU_VOLT_02_700000_V = 2700000,
 PMU_VOLT_02_725000_V = 2725000,
 PMU_VOLT_02_750000_V = 2750000,
 PMU_VOLT_02_760000_V = 2760000,
 PMU_VOLT_02_800000_V = 2800000,
 PMU_VOLT_02_850000_V = 2850000,
 PMU_VOLT_02_875000_V = 2875000,
 PMU_VOLT_02_900000_V = 2900000,
 PMU_VOLT_02_950000_V = 2950000,
 PMU_VOLT_03_000000_V = 3000000,
 PMU_VOLT_03_025000_V = 3025000,
 PMU_VOLT_03_050000_V = 3050000,
 PMU_VOLT_03_100000_V = 3100000,
 PMU_VOLT_03_150000_V = 3150000,
 PMU_VOLT_03_175000_V = 3175000,
 PMU_VOLT_03_200000_V = 3200000,
 PMU_VOLT_03_250000_V = 3250000,
 PMU_VOLT_03_275000_V = 3275000,
 PMU_VOLT_03_300000_V = 3300000,
 PMU_VOLT_03_325000_V = 3325000,
 PMU_VOLT_03_350000_V = 3350000,
 PMU_VOLT_03_400000_V = 3400000,
 PMU_VOLT_03_450000_V = 3450000,
 PMU_VOLT_03_500000_V = 3500000,
 PMU_VOLT_03_550000_V = 3550000,
 PMU_VOLT_03_600000_V = 3600000,
 PMU_VOLT_03_650000_V = 3650000,
 PMU_VOLT_03_800000_V = 3800000,
 PMU_VOLT_03_950000_V = 3950000,
 PMU_VOLT_04_000000_V = 4000000,
 PMU_VOLT_04_012500_V = 4012500,
 PMU_VOLT_04_025000_V = 4025000,
 PMU_VOLT_04_037500_V = 4037500,
 PMU_VOLT_04_050000_V = 4050000,
 PMU_VOLT_04_062500_V = 4062500,
 PMU_VOLT_04_067500_V = 4067500,
 PMU_VOLT_04_075000_V = 4075000,
 PMU_VOLT_04_087500_V = 4087500,
 PMU_VOLT_04_100000_V = 4100000,
 PMU_VOLT_04_112500_V = 4112500,
 PMU_VOLT_04_115000_V = 4115000,
 PMU_VOLT_04_116000_V = 4116000,
 PMU_VOLT_04_125000_V = 4125000,
 PMU_VOLT_04_137500_V = 4137500,
 PMU_VOLT_04_150000_V = 4150000,
 PMU_VOLT_04_162500_V = 4162500,
 PMU_VOLT_04_175000_V = 4175000,
 PMU_VOLT_04_187500_V = 4187500,
 PMU_VOLT_04_200000_V = 4200000,
 PMU_VOLT_04_212500_V = 4212500,
 PMU_VOLT_04_225000_V = 4225000,
 PMU_VOLT_04_237500_V = 4237500,
 PMU_VOLT_04_250000_V = 4250000,
 PMU_VOLT_04_262500_V = 4262500,
 PMU_VOLT_04_275000_V = 4275000,
 PMU_VOLT_04_287500_V = 4287500,
 PMU_VOLT_04_300000_V = 4300000,
 PMU_VOLT_04_325000_V = 4325000,
 PMU_VOLT_04_350000_V = 4350000,
 PMU_VOLT_04_375000_V = 4375000,
 PMU_VOLT_04_400000_V = 4400000,
 PMU_VOLT_04_411500_V = 4411500,
 PMU_VOLT_04_450000_V = 4450000,
 PMU_VOLT_04_500000_V = 4500000,
 PMU_VOLT_04_550000_V = 4550000,
 PMU_VOLT_04_600000_V = 4600000,
 PMU_VOLT_04_700000_V = 4700000,
 PMU_VOLT_04_800000_V = 4800000,
 PMU_VOLT_04_850000_V = 4850000,
 PMU_VOLT_04_950000_V = 4950000,
 PMU_VOLT_05_000000_V = 5000000,
 PMU_VOLT_05_150000_V = 5150000,
 PMU_VOLT_05_250000_V = 5250000,
 PMU_VOLT_05_300000_V = 5300000,
 PMU_VOLT_05_450000_V = 5450000,
 PMU_VOLT_06_000000_V = 6000000,
 PMU_VOLT_06_500000_V = 6500000,
 PMU_VOLT_06_750000_V = 6750000,
 PMU_VOLT_07_000000_V = 7000000,
 PMU_VOLT_07_250000_V = 7250000,
 PMU_VOLT_07_500000_V = 7500000,
 PMU_VOLT_08_000000_V = 8000000,
 PMU_VOLT_08_500000_V = 8500000,
 PMU_VOLT_09_500000_V = 9500000,
 PMU_VOLT_10_000000_V = 10000000,
 PMU_VOLT_10_500000_V = 10500000,
 PMU_VOLT_MAX,
 PMU_VOLT_INVALID

}PMU_VOLTAGE_ENUM;

typedef enum
{
    PMU_VOLT_CAL_MINUS_00_140000_V = -140000,
    PMU_VOLT_CAL_MINUS_00_120000_V = -120000,
    PMU_VOLT_CAL_MINUS_00_100000_V = -100000,
    PMU_VOLT_CAL_MINUS_00_080000_V = -80000,
    PMU_VOLT_CAL_MINUS_00_060000_V = -60000,
    PMU_VOLT_CAL_MINUS_00_040000_V = -40000,
    PMU_VOLT_CAL_MINUS_00_020000_V = -20000,
 PMU_VOLT_CAL_00_000000_V = 0,
 PMU_VOLT_CAL_00_020000_V = 20000,
    PMU_VOLT_CAL_00_040000_V = 40000,
    PMU_VOLT_CAL_00_060000_V = 60000,
    PMU_VOLT_CAL_00_080000_V = 80000,
    PMU_VOLT_CAL_00_100000_V = 100000,
    PMU_VOLT_CAL_00_120000_V = 120000,
    PMU_VOLT_CAL_00_140000_V = 140000,
    PMU_VOLT_CAL_00_160000_V = 160000,
 PMU_VOLT_CAL_MAX,
 PMU_VOLT_CAL_INVALID
} PMU_VOLTAGE_CALIBRATION_ENUM;


typedef enum
{
 PMIC_SPK_VOL_00_00_dB = 0,
 PMIC_SPK_VOL_00_50_dB = 50,
 PMIC_SPK_VOL_01_00_dB = 100,
 PMIC_SPK_VOL_01_50_dB = 150,
 PMIC_SPK_VOL_02_00_dB = 200,
 PMIC_SPK_VOL_02_50_dB = 250,
 PMIC_SPK_VOL_03_00_dB = 300,
 PMIC_SPK_VOL_03_50_dB = 350,
 PMIC_SPK_VOL_04_00_dB = 400,
 PMIC_SPK_VOL_04_50_dB = 450,
 PMIC_SPK_VOL_05_00_dB = 500,
 PMIC_SPK_VOL_05_50_dB = 550,
 PMIC_SPK_VOL_06_00_dB = 600,
 PMIC_SPK_VOL_06_50_dB = 650,
 PMIC_SPK_VOL_07_00_dB = 700,
 PMIC_SPK_VOL_07_50_dB = 750,
 PMIC_SPK_VOL_08_00_dB = 800,
 PMIC_SPK_VOL_08_50_dB = 850,
 PMIC_SPK_VOL_09_00_dB = 900,
 PMIC_SPK_VOL_09_50_dB = 950,
 PMIC_SPK_VOL_10_00_dB = 1000,
 PMIC_SPK_VOL_10_50_dB = 1050,
 PMIC_SPK_VOL_11_00_dB = 1100,
 PMIC_SPK_VOL_11_50_dB = 1150,
 PMIC_SPK_VOL_12_00_dB = 1200,
 PMIC_SPK_VOL_12_50_dB = 1250,
 PMIC_SPK_VOL_13_00_dB = 1300,
 PMIC_SPK_VOL_13_50_dB = 1350,
 PMIC_SPK_VOL_14_00_dB = 1400,
 PMIC_SPK_VOL_14_50_dB = 1450,
 PMIC_SPK_VOL_15_00_dB = 1500,
 PMIC_SPK_VOL_15_50_dB = 1550,
 PMIC_SPK_VOL_16_00_dB = 1600,
 PMIC_SPK_VOL_16_50_dB = 1650,
 PMIC_SPK_VOL_17_00_dB = 1700,
 PMIC_SPK_VOL_17_50_dB = 1750,
 PMIC_SPK_VOL_18_00_dB = 1800,
 PMIC_SPK_VOL_18_50_dB = 1850,
 PMIC_SPK_VOL_19_00_dB = 1900,
 PMIC_SPK_VOL_19_50_dB = 1950,
 PMIC_SPK_VOL_20_00_dB = 2000,
 PMIC_SPK_VOL_20_50_dB = 2050,
 PMIC_SPK_VOL_21_00_dB = 2100,
 PMIC_SPK_VOL_21_50_dB = 2150,
 PMIC_SPK_VOL_22_00_dB = 2200,
 PMIC_SPK_VOL_22_50_dB = 2250,
 PMIC_SPK_VOL_23_00_dB = 2300,
 PMIC_SPK_VOL_23_50_dB = 2350,
 PMIC_SPK_VOL_24_00_dB = 2400,
 PMIC_SPK_VOL_24_50_dB = 2450,
 PMIC_SPK_VOL_MAX = 9900,

 PMU_SPK_VOL_00_00_dB = 0,
 PMU_SPK_VOL_00_50_dB = 50,
 PMU_SPK_VOL_01_00_dB = 100,
 PMU_SPK_VOL_01_50_dB = 150,
 PMU_SPK_VOL_02_00_dB = 200,
 PMU_SPK_VOL_02_50_dB = 250,
 PMU_SPK_VOL_03_00_dB = 300,
 PMU_SPK_VOL_03_50_dB = 350,
 PMU_SPK_VOL_04_00_dB = 400,
 PMU_SPK_VOL_04_50_dB = 450,
 PMU_SPK_VOL_05_00_dB = 500,
 PMU_SPK_VOL_05_50_dB = 550,
 PMU_SPK_VOL_06_00_dB = 600,
 PMU_SPK_VOL_06_50_dB = 650,
 PMU_SPK_VOL_07_00_dB = 700,
 PMU_SPK_VOL_07_50_dB = 750,
 PMU_SPK_VOL_08_00_dB = 800,
 PMU_SPK_VOL_08_50_dB = 850,
 PMU_SPK_VOL_09_00_dB = 900,
 PMU_SPK_VOL_09_50_dB = 950,
 PMU_SPK_VOL_10_00_dB = 1000,
 PMU_SPK_VOL_10_50_dB = 1050,
 PMU_SPK_VOL_11_00_dB = 1100,
 PMU_SPK_VOL_11_50_dB = 1150,
 PMU_SPK_VOL_12_00_dB = 1200,
 PMU_SPK_VOL_12_50_dB = 1250,
 PMU_SPK_VOL_13_00_dB = 1300,
 PMU_SPK_VOL_13_50_dB = 1350,
 PMU_SPK_VOL_14_00_dB = 1400,
 PMU_SPK_VOL_14_50_dB = 1450,
 PMU_SPK_VOL_15_00_dB = 1500,
 PMU_SPK_VOL_15_50_dB = 1550,
 PMU_SPK_VOL_16_00_dB = 1600,
 PMU_SPK_VOL_16_50_dB = 1650,
 PMU_SPK_VOL_17_00_dB = 1700,
 PMU_SPK_VOL_17_50_dB = 1750,
 PMU_SPK_VOL_18_00_dB = 1800,
 PMU_SPK_VOL_18_50_dB = 1850,
 PMU_SPK_VOL_19_00_dB = 1900,
 PMU_SPK_VOL_19_50_dB = 1950,
 PMU_SPK_VOL_20_00_dB = 2000,
 PMU_SPK_VOL_20_50_dB = 2050,
 PMU_SPK_VOL_21_00_dB = 2100,
 PMU_SPK_VOL_21_50_dB = 2150,
 PMU_SPK_VOL_22_00_dB = 2200,
 PMU_SPK_VOL_22_50_dB = 2250,
 PMU_SPK_VOL_23_00_dB = 2300,
 PMU_SPK_VOL_23_50_dB = 2350,
 PMU_SPK_VOL_24_00_dB = 2400,
 PMU_SPK_VOL_24_50_dB = 2450,
 PMU_SPK_VOL_MAX = 9900
}PMU_SPK_VOL_ENUM;


typedef enum
{
 PMU_CHARGE_CURRENT_0_00_MA = 0,
 PMU_CHARGE_CURRENT_50_00_MA = 5000,
 PMU_CHARGE_CURRENT_62_50_MA = 6250,
 PMU_CHARGE_CURRENT_70_00_MA = 7000,
 PMU_CHARGE_CURRENT_75_00_MA = 7500,
 PMU_CHARGE_CURRENT_87_50_MA = 8750,
 PMU_CHARGE_CURRENT_100_00_MA = 10000,
 PMU_CHARGE_CURRENT_150_00_MA = 15000,
 PMU_CHARGE_CURRENT_200_00_MA = 20000,
 PMU_CHARGE_CURRENT_225_00_MA = 22500,
 PMU_CHARGE_CURRENT_250_00_MA = 25000,
 PMU_CHARGE_CURRENT_300_00_MA = 30000,
 PMU_CHARGE_CURRENT_350_00_MA = 35000,
 PMU_CHARGE_CURRENT_400_00_MA = 40000,
 PMU_CHARGE_CURRENT_425_00_MA = 42500,
 PMU_CHARGE_CURRENT_450_00_MA = 45000,
 PMU_CHARGE_CURRENT_500_00_MA = 50000,
 PMU_CHARGE_CURRENT_550_00_MA = 55000,
 PMU_CHARGE_CURRENT_600_00_MA = 60000,
 PMU_CHARGE_CURRENT_650_00_MA = 65000,
 PMU_CHARGE_CURRENT_700_00_MA = 70000,
 PMU_CHARGE_CURRENT_750_00_MA = 75000,
 PMU_CHARGE_CURRENT_800_00_MA = 80000,
 PMU_CHARGE_CURRENT_850_00_MA = 85000,
 PMU_CHARGE_CURRENT_900_00_MA = 90000,
 PMU_CHARGE_CURRENT_950_00_MA = 95000,
 PMU_CHARGE_CURRENT_1000_00_MA = 100000,
 PMU_CHARGE_CURRENT_1200_00_MA = 120000,
 PMU_CHARGE_CURRENT_1500_00_MA = 150000,
 PMU_CHARGE_CURRENT_1800_00_MA = 180000,
 PMU_CHARGE_CURRENT_2000_00_MA = 200000,
 PMU_CHARGE_CURRENT_MAX
}PMU_CHR_CURRENT_ENUM;



typedef enum
{
 PMU_VPA0,
 PMU_VPA1,
 PMU_VPA2,
 PMU_VPA3,
 PMU_VPA4,
 PMU_VPA5,
 PMU_VPA6,
 PMU_VPA7
}PMU_VPA_ENUM;


typedef enum
{
 ENABLE_WITH_SRCLKEN = 0,
 ENABLE_LDO_BUCK_EN_REGISTER = 1
}PMU_ON_SEL_ENUM;


typedef enum
{
    SW_CONTROL = 0,
    SRCLKEN_CONTROL = 1
}PMIC_ON_SEL_ENUM;


typedef enum
{
    SW_CONTROL_BY_REG = 0,
    HW_CONTROL = 1
}PMIC_ON_CTRL_ENUM;
# 910 "interface/driver/peripheral/dcl_pmu.h"
typedef enum
{
    SRCLKEN_IN0 = 0,
    SRCLKEN_IN1,
 SRCLKEN_IN0_OR_SRCLKEN_IN1,
 SRCLKEN_IN0_AND_SRCLKEN_IN1
}PMU_SRCLKEN_SEL_ENUM;
# 932 "interface/driver/peripheral/dcl_pmu.h"
typedef enum
{
    SRCLKEN_IN0_SEL = 0,
    SRCLKEN_IN1_SEL,
    SRCLKEN_IN0_OR_SRCLKEN_IN1_SEL,
    SRCLKEN_IN0_AND_SRCLKEN_IN1_SEL
}PMIC_SIGNAL_SEL_ENUM;
# 951 "interface/driver/peripheral/dcl_pmu.h"
typedef enum
{
 DEFAULT_LOCAL_SENSE= 0,
 REMOTE_SENSE = 1
}PMU_RS_ENUM;


typedef enum
{
 KPLED_PWM_MODE = 0,
 KPLED_REGISTER_CTRL_MODE = 1
}PMU_CTRL_KPLED_MODE_ENUM;


typedef enum
{
 LDO_EN_SEL_BY_CONTROLLER = 0,
 LDO_EN_SEL_BY_LDO_CON,
 LDO_EN_SEL_MAX = 0xFF
}PMU_CTRL_LDO_CTRL_MODE_ENUM;


typedef enum
{
 BUCK_MODE = 0,
 LDO_MODE
}PMU_CTRL_BUCK_LDO_CTRL_MODE_ENUM;


typedef enum
{
 AUTO_MODE = 0,
 FORCE_PWM_MODE
}PMU_CTRL_BUCK_LDO_CTRL_MODESET_ENUM;

typedef enum
{
 HW_ENABLE = 0,
 SW_ENABLE
}PMU_CTRL_STB_SIO_CTRL_MODE_ENUM;


typedef enum
{
 KPLED_SEL_1_SWITCH = 0,
 KPLED_SEL_2_SWITCH = 1,
 KPLED_SEL_3_SWITCH = 2,
 KPLED_SEL_4_SWITCH = 3,
 KPLED_SEL_5_SWITCH = 4,
 KPLED_SEL_6_SWITCH = 5,
 KPLED_SEL_7_SWITCH = 6,
 KPLED_SEL_8_SWITCH = 7
}PMU_CTRL_KPLED_SEL_ENUM;


typedef enum
{
 FLASHLED_PWM_MODE = 0,
 FLASHLED_REGISTER_CTRL_MODE = 1
}PMU_CTRL_FLASHLED_MODE_ENUM;


typedef enum
{
 FLASHLED_SEL_1_SWITCH = 0,
 FLASHLED_SEL_2_SWITCH = 1,
 FLASHLED_SEL_3_SWITCH = 2,
 FLASHLED_SEL_4_SWITCH = 3,
 FLASHLED_SEL_5_SWITCH = 4,
 FLASHLED_SEL_6_SWITCH = 5,
 FLASHLED_SEL_7_SWITCH = 6,
 FLASHLED_SEL_8_SWITCH = 7
}PMU_CTRL_FLASHLED_SEL_ENUM;


typedef enum
{
 PMU_CHR_WDT_TD_4SEC = 40,
 PMU_CHR_WDT_TD_8SEC = 80,
 PMU_CHR_WDT_TD_16SEC = 160,
 PMU_CHR_WDT_TD_32SEC = 320,
 PMU_CHR_WDT_TD_128SEC = 1280,
 PMU_CHR_WDT_TD_256SEC = 2560,
 PMU_CHR_WDT_TD_512SEC = 5120,
 PMU_CHR_WDT_TD_1024SEC = 10240,
 PMU_CHR_WDT_TD_3000SEC = 30000
}PMU_CHR_WDT_TD_ENUM;


typedef enum
{
 ISINK_PWM_MODE = 0,
 ISINK_REGISTER_CTRL_MODE = 1
}PMU_CTRL_ISINK_MODE_ENUM;


typedef enum
{
 ISINK_STEP_04_MA = 4,
 ISINK_STEP_05_MA = 5,
 ISINK_STEP_08_MA = 8,
 ISINK_STEP_10_MA = 10,
 ISINK_STEP_12_MA = 12,
 ISINK_STEP_15_MA = 15,
 ISINK_STEP_16_MA = 16,
 ISINK_STEP_20_MA = 20,
 ISINK_STEP_24_MA = 24
}PMU_CTRL_ISINK_STEP_ENUM;


typedef enum{
 SPK_CLASS_D_MODE = 0,
 SPK_CLASS_AB_MODE
}PMU_CTRL_SPK_MODE_ENUM;


typedef enum{
 SPK_SLEW_RATE_2_OVER_4 = 0,
 SPK_SLEW_RATE_1_OVER_4,
 SPK_SLEW_RATE_4_OVER_4,
 SPK_SLEW_RATE_3_OVER_4
}PMU_CTRL_SPK_SLEW_RATE_ENUM;


typedef enum{
 SPK_N = 0,
 SPK_P,
}PMU_CTRL_SPK_CALI_PATH_ENUM;


typedef enum{
 PMU_CTRL_STEP1,
 PMU_CTRL_STEP2,
 PMU_CTRL_STEP3,
 PMU_CTRL_STEP4
}PMU_CTRL_STEP_ENUM;


typedef enum
{
 PMIC_MT_6320 = 0x6320,
 PMIC_MT_6323 = 0x6323,
 PMIC_MT_6325 = 0x6325,
 PMIC_MT_6328 = 0x6328,
  PMIC_MT_6329 = 0x6329,
  PMIC_MT_6331 = 0x6331,
 PMIC_MT_6332 = 0x6332,
 PMIC_MT_6339 = 0x6339,
 PMIC_CHIP_MAX
}PMIC_CHIP_LIST_ENUM;

typedef enum
{
 PMIC_ECO_E1 = 0,
 PMIC_ECO_E2,
 PMIC_ECO_E3,
 PMIC_ECO_E4,
 PMIC_ECO_E5,
 PMIC_ECO_E6,
 PMIC_ECO_E7,
 PMIC_ECO_E8,
 PMIC_ECO_E9,
 PMIC_ECO_E10,
}PMU_CTRL_PMIC_ECO_VERSION_ENUM;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_EN;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_GET_EN_STATUS;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN mode;
}PMU_CTRL_LDO_BUCK_GET_QI_MODE;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_EN_FORCE;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_THER_SHDN_EN;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 PMU_VOLTAGE_ENUM voltage;
}PMU_CTRL_LDO_BUCK_SET_VOLTAGE;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 PMU_VOLTAGE_ENUM sleepVoltage;
}PMU_CTRL_LDO_BUCK_SET_SLEEP_VOLTAGE;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 PMU_VOLTAGE_ENUM voltage;
}PMU_CTRL_LDO_BUCK_SET_VOLTAGE_EN;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 PMU_RS_ENUM rs;
}PMU_CTRL_LDO_BUCK_SET_RS;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_UINT16 thresholdIdx;
}PMU_CTRL_LDO_BUCK_SET_BURST_THRESHOLD;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_UINT16 currentLimitIdx;
}PMU_CTRL_LDO_BUCK_SET_CURRENT_LIMIT;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_UINT16 biasCurrentCalibrationCode;
}PMU_CTRL_LDO_BUCK_SET_BIAS_CURRENT_CALIBRATION_CODE;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_UINT16 voltageCalibrationCode;
}PMU_CTRL_LDO_BUCK_SET_VOLTAGE_CALIBRATION_CODE;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_UINT16 delayTimeIdx;
}PMU_CTRL_LDO_BUCK_SET_STB_TD;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_UINT16 deglitchTimeIdx;
}PMU_CTRL_LDO_BUCK_SET_OC_TD;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_OCFB_EN;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_OC_AUTO_OFF;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 PMU_ON_SEL_ENUM onSel;
}PMU_CTRL_LDO_BUCK_SET_ON_SEL;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 PMU_SRCLKEN_SEL_ENUM SrclkenSel;
}PMU_CTRL_LDO_BUCK_SET_SRCLKEN_SEL;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 PMIC_SIGNAL_SEL_ENUM sel;
}PMU_CTRL_LDO_BUCK_SET_SRCLK_EN_SEL;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_STB_EN;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_NDIS_EN;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_VSIM_GPLDO_EN;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_VSIM2_GPLDO_EN;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_SIM2_GPIO_EN;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_CCI_SRCLKEN;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN status;
}PMU_CTRL_LDO_BUCK_GET_OC_STATUS;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN status;
}PMU_CTRL_LDO_BUCK_GET_QI_OC_STATUS;


typedef struct
{
    PMU_LDO_BUCK_LIST_ENUM mod;
    DCL_BOOLEAN oc_int_en;
}PMU_CTRL_LDO_BUCK_SET_OC_INT_EN;


typedef struct
{
    PMU_LDO_BUCK_LIST_ENUM mod;
}PMU_CTRL_LDO_BUCK_CLEAR_OC_FLAG;


typedef struct
{
    PMU_LDO_BUCK_LIST_ENUM mod;
    DCL_BOOLEAN oc_flag;
}PMU_CTRL_LDO_BUCK_GET_OC_FLAG;


typedef struct
{
    PMU_LDO_BUCK_LIST_ENUM mod;
    const DCL_UINT32 *pVals;
    DCL_UINT8 size;
}PMU_CTRL_LDO_BUCK_GET_VOLTAGE_LIST;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_SET_LP_MODE_SET;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 PMIC_ON_SEL_ENUM onSel;
}PMU_CTRL_LDO_BUCK_SET_LP_SEL;


typedef struct
{
    PMU_LDO_BUCK_LIST_ENUM mod;
    DCL_BOOLEAN enable;
}PMU_CTRL_LDO_BUCK_GET_LP_MODE;


typedef struct
{
    PMU_LDO_BUCK_LIST_ENUM mod;
    PMIC_ON_CTRL_ENUM mode;
}PMU_CTRL_LDO_BUCK_SET_ON_CTRL;


typedef struct
{
    PMU_LDO_BUCK_LIST_ENUM mod;
    PMU_CTRL_BUCK_LDO_CTRL_MODESET_ENUM mode;
}PMU_CTRL_LDO_BUCK_SET_MODESET;


typedef struct
{
    PMU_LDO_BUCK_LIST_ENUM mod;
    PMIC_ON_CTRL_ENUM mode;
}PMU_CTRL_LDO_BUCK_SET_EN_CTRL;


typedef struct
{
    PMU_LDO_BUCK_LIST_ENUM mod;
    PMIC_SIGNAL_SEL_ENUM sel;
}PMU_CTRL_LDO_BUCK_SET_EN_SEL;


typedef struct
{
    PMU_LDO_BUCK_LIST_ENUM mod;
    PMIC_SIGNAL_SEL_ENUM sel;
}PMU_CTRL_LDO_BUCK_SET_SRCLK_MODE_SEL;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
 PMU_VOLTAGE_CALIBRATION_ENUM voltage;
}PMU_CTRL_LDO_SET_CAL;


typedef struct
{
 PMU_VPA_LIST_ENUM vpa;
 DCL_BOOLEAN enable;
}PMU_CTRL_VPA_SET_VOSEL_MAP_EN;


typedef struct
{
 PMU_VPA_LIST_ENUM vpa;
 DCL_BOOLEAN enable;
}PMU_CTRL_VPA_SET_EN;


typedef struct
{
 PMU_VOLTAGE_ENUM voltage;
 PMU_VPA_ENUM vpaIdx;
 PMU_VPA_LIST_ENUM vpa;
}PMU_CTRL_VPA_SET_VOLTAGE;


typedef struct
{
 DCL_BOOLEAN byPASEL;
}PMU_CTRL_VPA_CTRL_SEL;


typedef struct
{
 const DCL_UINT32 *pVoltageList;
 DCL_UINT32 number;
}PMU_CTRL_VPA_GET_VOLTAGE_LIST;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_VPA_SET_BAT_LOW;


typedef struct
{
 PMU_VPA_LIST_ENUM vpa;
 DCL_BOOLEAN enable;
}PMU_CTRL_VPA_SET_FPWM;


typedef struct
{
        PMU_VPA_ENUM table_entry;
 PMU_VOLTAGE_ENUM voltage;
}PMU_CTRL_VPA_SET_VOLTAGE_SELECTION_TABLE;



typedef struct
{
        PMU_VPA_ENUM table_entry;
}PMU_CTRL_VPA_SET_MAP_SEL;


typedef struct
{
 DCL_UINT16 duty;
}PMU_CTRL_VIBR_SET_DIMMING_ON_DUTY;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_VRF18_SET_FPWM;


typedef struct
{
    PMIC_VRF18_LIST_ENUM vrf18Idx;
 DCL_BOOLEAN enable;
}PMU_CTRL_VRF18_SET_MODESET;


typedef struct
{
    PMIC_VRF18_LIST_ENUM vrf18Idx;
 PMU_CTRL_BUCK_LDO_CTRL_MODE_ENUM mode;
}PMU_CTRL_VRF18_SET_BUCK_LDO_MODE;


typedef struct
{
    DCL_UINT16 regval;
}PMU_CTRL_VRF1_SET_MODESET_CKPDN_SET;


typedef struct
{
    DCL_UINT16 regval;
}PMU_CTRL_VRF1_SET_MODESET_CKPDN_CLR;


typedef struct
{
    DCL_UINT16 regval;
}PMU_CTRL_VRF1_GET_MODESET_CKPDN;


typedef struct
{
    PMIC_VSIM_LIST_ENUM vsimIdx;
    DCL_UINT32 regval;
}PMU_CTRL_SIMLS_SET_SRST_CONF;


typedef struct
{
    PMIC_VSIM_LIST_ENUM vsimIdx;
    DCL_UINT32 regval;
}PMU_CTRL_SIMLS_SET_SCLK_CONF;


typedef struct
{
    DCL_UINT32 regval;
}PMU_CTRL_SIMLS_SET_TDSEL;


typedef struct
{
    DCL_UINT32 regval;
}PMU_CTRL_SIMAP_SET_TDSEL;


typedef struct
{
    DCL_UINT32 regval;
}PMU_CTRL_SIMLS_SET_RDSEL;


typedef struct
{
    DCL_UINT32 regval;
}PMU_CTRL_SIMAP_SET_RDSEL;


typedef struct
{
    PMIC_VSIM_LIST_ENUM vsimIdx;
    DCL_UINT32 regval;
}PMU_CTRL_OCTL_SET_SIM_AP_SRST;


typedef struct
{
    PMIC_VSIM_LIST_ENUM vsimIdx;
    DCL_UINT32 regval;
}PMU_CTRL_OCTL_SET_SIM_AP_SCLK;


typedef struct
{
    PMIC_VSIM_LIST_ENUM vsimIdx;
    DCL_UINT32 regval;
}PMU_CTRL_OCTL_SET_SIMLS_SRST;


typedef struct
{
    PMIC_VSIM_LIST_ENUM vsimIdx;
    DCL_UINT32 regval;
}PMU_CTRL_OCTL_SET_SIMLS_SCLK;


typedef struct
{
    PMIC_VSIM_LIST_ENUM vsimIdx;
    PMU_CTRL_STB_SIO_CTRL_MODE_ENUM mode;
}PMU_CTRL_SIM_SET_STB_SIO_MODE;


typedef struct
{
    PMIC_VSIM_LIST_ENUM vsimIdx;
}PMU_CTRL_SIMRST_SET_GPIO_SET;


typedef struct
{
    PMIC_VSIM_LIST_ENUM vsimIdx;
}PMU_CTRL_SIMRST_SET_GPIO_CLR;


typedef struct
{
 PMU_SPK_LIST_ENUM spk;
 DCL_BOOLEAN enable;
 PMU_CTRL_STEP_ENUM step;
}PMU_CTRL_SPK_SET_EN;


typedef struct
{
 PMU_SPK_LIST_ENUM spk;
 PMU_CTRL_SPK_MODE_ENUM mode;
}PMU_CTRL_SPK_SET_MODE;


typedef struct
{
 PMU_SPK_LIST_ENUM spk;
 DCL_UINT16 mode;
}PMU_CTRL_SPK_GET_MODE;


typedef struct
{
 PMU_SPK_LIST_ENUM spk;
 PMU_CTRL_SPK_MODE_ENUM mode;
}PMU_CTRL_SPK_SET_SLEW_RATE;


typedef struct
{
 PMU_SPK_LIST_ENUM spk;
 DCL_BOOLEAN enable;
}PMU_CTRL_SPK_SET_OC_AUTO_OFF;


typedef struct
{
 PMU_SPK_LIST_ENUM spk;
 DCL_UINT16 volValue;
}PMU_CTRL_SPK_SET_VOL_VALUE;


typedef struct
{
 PMU_SPK_LIST_ENUM spk;
 DCL_UINT16 volValue;
}PMU_CTRL_SPK_GET_VOL_VALUE;


typedef struct
{
 PMU_SPK_LIST_ENUM spk;
 PMU_SPK_VOL_ENUM dbm;
}PMU_CTRL_SPK_GET_VOL;


typedef struct
{
 PMU_SPK_LIST_ENUM spk;
 PMU_SPK_VOL_ENUM dbm;
}PMU_CTRL_SPK_SET_VOL;


typedef struct
{
 PMU_SPK_LIST_ENUM spk;
 DCL_BOOLEAN enable;
}PMU_CTRL_SPK_SET_CALIBR_EN;


typedef struct
{
 PMU_SPK_LIST_ENUM spk;
 PMU_CTRL_SPK_CALI_PATH_ENUM path;
}PMU_CTRL_SPK_SET_CALIBR_SEL;


typedef enum
{
 BL_VBOOST_VOLTAGE_CONTROLLER_MODE=0,
 BL_VBOOST_CURRENT_CONVERTER_MODE=1,
 BL_ISINK_MODE=2,
 BL_MODE_1=0,
 BL_MODE_2=1,
 BL_MODE_3=2,
 BL_MODE0=0,
 BL_MODE1=1,
 BL_MODE2=2,
 BL_MODE3=3,
 BL_MODE_NUM
}PMU_CTRL_BL_MODE_ENUM;


typedef struct
{
 PMU_CTRL_BL_MODE_ENUM blMode;
}PMU_CTRL_BL_SET_INIT;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_BL_SET_EN;


typedef struct
{
    DCL_UINT32 blSupportLevel;
}PMU_CTRL_BL_GET_SUPPORT_LEVEL;


typedef struct
{
    DCL_UINT32 blUsePwmQuery;
}PMU_CTRL_BL_GET_USE_PWM_QUERY;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_FLASHLED_SET_EN;


typedef struct
{
 PMU_CTRL_FLASHLED_MODE_ENUM mode;
}PMU_CTRL_FLASHLED_SET_MODE;


typedef struct
{
 PMU_CTRL_FLASHLED_SEL_ENUM sel;
}PMU_CTRL_FLASHLED_SET_SEL;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_KPLED_SET_EN;


typedef struct
{
 PMU_CTRL_KPLED_MODE_ENUM mode;
}PMU_CTRL_KPLED_SET_MODE;


typedef struct
{
 PMU_CTRL_KPLED_SEL_ENUM sel;
}PMU_CTRL_KPLED_SET_SEL;


typedef struct
{
 DCL_UINT16 div;
}PMU_CTRL_KPLED_SET_FREQUENCY_DIVISION;


typedef struct
{
 DCL_UINT16 duty;
}PMU_CTRL_KPLED_SET_DIMMING_ON_DUTY;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_ADC_MEASURE_EN;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_CSDAC_EN;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_CHR_EN;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_CHR_FORCE_EN;


typedef struct
{
 PMU_CHR_CURRENT_ENUM current;
}PMU_CTRL_CHR_GET_CHR_CURRENT;


typedef struct
{
 const DCL_UINT32 *pCurrentList;
 DCL_UINT32 number;
}PMU_CTRL_CHR_GET_CHR_CURRENT_LIST;


typedef struct
{
 PMU_CHR_CURRENT_ENUM current;
}PMU_CTRL_CHR_SET_CHR_CURRENT;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_GET_CHR_DET_STATUS;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_GET_CV_DETECTION_STATUS;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_CV_DETECTION_EN;


typedef struct
{
 PMU_VOLTAGE_ENUM voltage;
}PMU_CTRL_CHR_SET_CV_DETECTION_VOLTAGE;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_GET_IS_BATTERY_ON;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_GET_IS_CHR_VALID;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_WDT_INT_EN;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_WDT_EN;


typedef struct
{
 PMU_CHR_WDT_TD_ENUM secs;
}PMU_CTRL_CHR_SET_WDT_TIMER;


typedef struct
{
 PMU_VOLTAGE_ENUM voltage;
}PMU_CTRL_CHR_SET_HV_DETECTION_VOLTAGE;


typedef struct
{
 const DCL_UINT32 *pVoltageList;
 DCL_UINT32 number;
}PMU_CTRL_CHR_GET_HV_DETECTION_VOLTAGE_LIST;


typedef struct
{
 PMU_VOLTAGE_ENUM voltage;
}PMU_CTRL_CHR_SET_VBAT_OV_DETECTION_VOLTAGE;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_BAT_HT_EN;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_OTG_BVALID_EN;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_BC11_PULLUP_EN;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_CV_MODE;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_CSDAC_MODE;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_TRACKING_EN;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_HWCV_EN;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_CHR_SET_ULC_DET_EN;


typedef struct
{
 DCL_UINT16 debounceTime;
}PMU_CTRL_CHR_SET_LOW_ICH_DB;


typedef struct
{
 DCL_INT32 vbat;
}PMU_CTRL_CHR_SET_VBAT_CV_CALIBRATION;


typedef struct
{
 DCL_BOOLEAN vbat_cc_det;
}PMU_CTRL_CHR_GET_CC_DET;


typedef struct
{
 PMU_BOOST_LIST_ENUM boost;
 DCL_BOOLEAN enable;
}PMU_CTRL_BOOST_SET_EN;


typedef struct
{
 PMU_BOOST_LIST_ENUM boost;
 DCL_BOOLEAN currentLimit;
}PMU_CTRL_BOOST_SET_CURRENT_LIMIT;


typedef struct
{
 PMU_BOOST_LIST_ENUM boost;
 DCL_BOOLEAN clkCal;
}PMU_CTRL_BOOST_SET_CLK_CAL;


typedef struct
{
 PMU_BOOST_LIST_ENUM boost;
 DCL_BOOLEAN enable;
}PMU_CTRL_BOOST_SET_SYNC_EN;


typedef struct
{
 PMU_BOOST_LIST_ENUM boost;
 PMU_VOLTAGE_ENUM voltage;
}PMU_CTRL_BOOST_SET_VOLTAGE;


typedef struct
{
 PMU_BOOST_LIST_ENUM boost;
 DCL_UINT16 level;
}PMU_CTRL_BOOST_SET_LEVEL;


typedef struct
{
 PMU_ISINK_LIST_ENUM isink;
 DCL_BOOLEAN enable;
}PMU_CTRL_ISINK_SET_EN;


typedef struct
{
 PMU_ISINK_LIST_ENUM isink;
 PMU_CTRL_ISINK_MODE_ENUM mode;
}PMU_CTRL_ISINK_SET_MODE;


typedef struct
{
 PMU_ISINK_LIST_ENUM isink;
 PMU_CTRL_ISINK_STEP_ENUM step;
}PMU_CTRL_ISINK_SET_STEP;


typedef struct
{
 PMU_ISINK_LIST_ENUM isink;
 DCL_BOOLEAN forceOff;
}PMU_CTRL_ISINK_SET_FORCE_OFF;


typedef struct
{
 PMU_ISINK_LIST_ENUM isink;
 DCL_UINT16 duty;
}PMU_CTRL_ISINK_SET_DIMMING_ON_DUTY;


typedef struct
{
 PMU_ISINK_LIST_ENUM isink;
 DCL_UINT16 div;
}PMU_CTRL_ISINK_SET_FREQUENCY_DIVISION;


typedef struct
{
    DCL_BOOLEAN enable;

}PMU_CTRL_ADC_SET_RQST;


typedef struct
{
    DCL_BOOLEAN enable;

}PMU_CTRL_ADC_CLR_RQST;


typedef struct
{
    DCL_BOOLEAN status;
}PMU_CTRL_ADC_GET_RDY_MD;


typedef struct
{
    DCL_UINT32 data;
}PMU_CTRL_ADC_GET_OUT_MD;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_MISC_SET_BLED_EN;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_MISC_SET_RLED_EN;


typedef struct
{
 DCL_BOOLEAN enable;
}PMU_CTRL_MISC_SET_GLED_EN;


typedef struct
{
 DCL_UINT32 cid_value;
}PMU_CTRL_MISC_GET_CID;


typedef struct
{
 DCL_UINT32 eco_version;
}PMU_CTRL_MISC_GET_ECO_VERSION;



typedef struct
{
    PMIC_CHIP_LIST_ENUM chip_name;
 DCL_UINT32 version;
}PMU_CTRL_MISC_GET_HW_VERSION;


typedef struct
{
 DCL_UINT32 offset;
 DCL_UINT16 value;
}PMU_CTRL_MISC_SET_REGISTER_VALUE;


typedef struct
{
 DCL_UINT32 offset;
 DCL_UINT16 value;
}PMU_CTRL_MISC_GET_REGISTER_VALUE;


typedef struct
{
 PMU_LDO_BUCK_LIST_ENUM mod;
}PMU_CTRL_LDO_BUCK_CTRL;
# 366 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_pw.h" 1
# 130 "interface/driver/peripheral/dcl_pw.h"
typedef enum{
 PWRKEYPWRON = 0,
 CHRPWRON = 1,
 RTCPWRON = 2,
 CHRPWROFF = 3,
 WDTRESET = 4,
 ABNRESET = 5,
 USBPWRON = 6,
 USBPWRON_WDT = 7,
 PRECHRPWRON = 8,
 UNKNOWN_PWRON = 0xF9
}PW_CTRL_POWER_ON_REASON;

typedef enum{
  PWR_FACTOR_POWER_KEY = 0,
 PWR_FACTOR_CHARGER_IN,
  PWR_FACTOR_USB_IN,
  PWR_FACTOR_RTC_EXPIRE,
  PWR_FACTOR_WDT_RESET,
  PWR_FACTOR_NORMAL_RESET_FLG,
  PWR_FACTOR_CHRPWRON_FLG,
  PWR_FACTOR_USBMS_PWRON_FLG,
  PWR_FACTOR_RTCPWRON_FLG,
  PWR_FACTOR_PRECHRPWRON_FLG,
  PWR_FACTOR_SWITCH2IDLE_FLG,
  PWR_FACTOR_SWITCH2CHR_FLG,
  PWR_FACTOR_SWITCH2USB_FLG,
  PWR_FACTOR_MAX
}pwr_factor_enum;

typedef enum{
    PWR_FACTOR_BL_POWER_KEY = 0x1,
    PWR_FACTOR_BL_CABLE_IN = 0x2,
    PWR_FACTOR_BL_RTC_EXPIRE = 0x4,
    PWR_FACTOR_BL_NORMAL_RESET_FLG = 0x8,
    PWR_FACTOR_BL_CHRPWRON_FLG = 0x10,
    PWR_FACTOR_BL_USBMS_PWRON_FLG = 0x20,
    PWR_FACTOR_BL_RTCPWRON_FLG = 0x40,
    PWR_FACTOR_BL_FACTORY_FLG = 0x80,
    PWR_FACTOR_BL_MAX
}pw_factor_bl_enum;

typedef struct
{
 DCL_BOOLEAN val;
} PW_CTRL_IS_USB_BOOT;

typedef struct
{
 PW_CTRL_POWER_ON_REASON powerOnReason;
} PW_CTRL_SET_POWERON_REASON;

typedef struct
{
 PW_CTRL_POWER_ON_REASON powerOnReason;
} PW_CTRL_GET_POWERON_REASON;
# 369 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_chr_det.h" 1
# 122 "interface/driver/peripheral/dcl_chr_det.h"
typedef enum
{
   PW_AC_CHR=0,
   PW_USB_CHR,
   PW_AC_NON_STD_CHR,
   PW_USB_CHARGING_HOST_CHR,
   PW_NO_CHR
}CHR_DET_TYPE_ENUM;


typedef struct
{
 CHR_DET_TYPE_ENUM Chr_det_type;
}CHR_DET_CTRL_QUERY_IS_CHR_IN_BY_PW;


typedef struct
{
 CHR_DET_TYPE_ENUM Chr_det_type;
}CHR_DET_CTRL_QUERY_CHR_TYPE;

typedef struct
{
 void (*usb_det_hisr)(void);
}CHR_DET_CTRL_REGISTER_USB_HISR;
# 194 "interface/driver/peripheral/dcl_chr_det.h"
typedef enum
{
 CHR_DET_EINT_OWNER_USB = 0x01,
 CHR_DET_EINT_OWNER_BMT = 0x02,
 USB_DET_EINT_OWNER_FORCE_UNMASK = 0x80
}CHR_DET_EINT_OWNER;


typedef struct
{
 CHR_DET_TYPE_ENUM (*pw_is_charger_usb_det)(void);
 void (*pw_is_charger_usb_det_eint)(void);
 void (*usb_det_hisr)(void);
}CHR_USB_DET_MGR_T;
# 372 "interface/driver/peripheral/dcl.h" 2





# 1 "interface/driver/peripheral/dcl_sim_gpio.h" 1
# 74 "interface/driver/peripheral/dcl_sim_gpio.h"
typedef enum{
   MT6306_SIM_GPIO1 = 0,
   MT6306_SIM_GPIO2,
   MT6306_SIM_GPIO3,
   MT6306_SIM_GPIO4,
   MT6306_SIM_GPIO5,
   MT6306_SIM_GPIO6,
   MT6306_SIM_GPIO7,
   MT6306_SIM_GPIO8,
   MT6306_SIM_GPIO9,
   MT6306_SIM_GPIO10,
   MT6306_SIM_GPIO11,
   MT6306_SIM_GPIO12,
   MT6306_SIM_GPI13,
   MT6306_SIM_GPI14,
   MT6306_SIM_GPI15,
   MT6306_SIM_GPI16,
   MT6306_SIM_GPI17,
   MT6306_SIM_GPI18,
}DCL_SIMGPIO_PIN_DEF;
# 132 "interface/driver/peripheral/dcl_sim_gpio.h"
typedef struct
{
   DCL_UINT8 u1IOData;
} SIMGPIO_CTRL_READ_T;


typedef struct
{
   DCL_UINT8 u1IOData;
} SIMGPIO_CTRL_WRITE_T;


typedef struct
{
   DCL_UINT16 u2Dir;
} SIMGPIO_CTRL_SET_DIR_T;


typedef struct
{
   kal_bool on;
   kal_uint8 volt;
} SIMGPIO_CTRL_TRUN_ON_POWER;
# 378 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_f32k_clk.h" 1
# 120 "interface/driver/peripheral/dcl_f32k_clk.h"
typedef struct
{
    DCL_BOOLEAN f32k_is_xosc32;
}F32K_CLK_CTRL_F32K_IS_XOSC32_T;

typedef struct
{
    DCL_UINT16 eosc32_cali_val;
}F32K_CLK_CTRL_EOSC32_CALI_VAL_T;
# 381 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_idc.h" 1
# 178 "interface/driver/peripheral/dcl_idc.h"
typedef struct
{
 kal_uint32 u4Baud;
 kal_uint8 u1DataBits;
 kal_uint8 u1StopBits;
 kal_uint8 u1Parity;
} IDC_CTRL_DCB_CONFIG_T;



typedef struct
{
 kal_uint32 baudrate;
} IDC_CTRL_BAUDRATE_T;


typedef struct
{
 kal_uint8 rx_threshold;
} IDC_CTRL_SET_FIFO_TRIGGER_T;



typedef struct
{
 kal_bool start;
 kal_uint8 priority;
 kal_uint8 priority_bit_en;
 kal_uint8 pattern;
 kal_uint8 pattern_bit_en;
} IDC_CTRL_PM_CONFIG_T;


typedef struct
{
 kal_uint8 data[2];
 kal_uint16 offset;
} IDC_EVENT_T;

typedef struct
{
 kal_uint8 schedule_num;
 kal_uint8 num_event;
 IDC_EVENT_T schedule_event[20];
} IDC_CTRL_SCHEDULE_EVENT_T;


typedef struct
{
 kal_uint8 schedule_num;
 kal_uint32 base_time;
} IDC_CTRL_SCHEDULE_START_T;


typedef struct
{
 kal_uint8 schedule_num;
 kal_uint32 bitmap;
} IDC_CTRL_STOP_EVENT_T;


typedef struct
{
 UART_buffer dir;
} IDC_CTRL_PURGE_T;


typedef struct
{
 kal_uint32 schedule_status[2];
} IDC_CTRL_GET_SCHEDULE_STATUS_T;


typedef struct
{
 kal_bool send_out;
} IDC_CTRL_CHECK_EVENT_SEND_OUT_T;


typedef enum
{
 IDC_INTERNAL_PIN,
 IDC_EXTERNAL_PIN,
} IDC_PIN_MODE_T;

typedef struct
{
 IDC_PIN_MODE_T pin_mode;
} IDC_CTRL_PIN_CONFIG_T;
# 300 "interface/driver/peripheral/dcl_idc.h"
typedef struct
{
 kal_bool idc;
 kal_bool gpio;
 kal_bool uart;
} IDC_SUPPORT_T;
# 384 "interface/driver/peripheral/dcl.h" 2
# 397 "interface/driver/peripheral/dcl.h"
typedef DCL_INT32 DCL_STATUS;
typedef enum
{
   STATUS_OK = 0,
   STATUS_FAIL = -1,
   STATUS_INVALID_CMD = -2,
   STATUS_UNSUPPORTED = -3,
   STATUS_NOT_OPENED = -4,
   STATUS_INVALID_EVENT = -5,
   STATUS_INVALID_DCL_HANDLE = -6,
   STATUS_INVALID_CTRL_DATA = -7,
   STATUS_INVALID_CONFIGURATION = -8,
   STATUS_INVALID_ARGUMENT = -9,
   STATUS_ERROR_TIMEOUT = -10,
   STATUS_ERROR_CRCERROR = -11,
   STATUS_ERROR_READONLY = -12,
   STATUS_ERROR_WRONG_STATE = -13,
   STATUS_INVALID_DEVICE = -14,
   STATUS_ALREADY_OPENED = -15,
   STATUS_SET_VFIFO_FAIL = -16,
   STATUS_INVALID_OPERATION = -17,
   STATUS_DEVICE_NOT_EXIST = -18,


   STATUS_DEVICE_NOT_SUPPORT_DMA = -19,
   STATUS_DEVICE_IS_BUSY = -20,
   STATUS_ACKERR = -21,
   STATUS_HS_NACKERR = -22,

   STATUS_BUFFER_EMPTY = 1
} DCL_STATUS_T;




typedef DCL_UINT16 DCL_DEV;
typedef enum
{

   DCL_UART_GROUP_START = 0,
   uart_port1=0x00, uart_port2, uart_port3, uart_port_usb, uart_port_usb2, uart_port_usb3, uart_port_usb4, uart_port_usb5, uart_port_dhl_sp_expt, uart_port_dhl_ctrl_sp_expt, uart_port_dhl_sp, uart_port_dhl_ccci = uart_port_dhl_sp, uart_port_ccci_start = uart_port_dhl_ccci, uart_port_dhl_ctrl_sp, uart_port_tst_ccci = uart_port_dhl_ctrl_sp, uart_port_at_ccci, uart_port_gps_ccci, uart_port_sim_ccci, uart_port_dhl2_ccci, uart_port_ccci_end = uart_port_dhl2_ccci, start_of_virtual_port, end_of_virtual_port = (((((5 + 1) * ((2))) + 0 + 2 + 1 + 0 )) + start_of_virtual_port), uart_port_mini_log, uart_port_dual_talk, uart_port_modis, uart_max_port, uart_port_null = 99,


   DCL_GPIO_GROUP_START = 0x100,
   DCL_GPIO,
   DCL_GPO,
   DCL_GPIO_CLK,


   DCL_GPT_GROUP_START = 0x200,
   DCL_GPT_CB,
   DCL_GPT_CB2,
   DCL_GPT_BusyWait,
   DCL_GPT_FreeRUN3,
   DCL_GPT_FreeRUN4,
   DCL_GPT_DEBUG,
   DCL_XGPT,
   DCL_GPT_CB_MS,
   DCL_GPT_CRITICAL_CB_MS,
# 466 "interface/driver/peripheral/dcl.h"
   DCL_PWM_GROUP_END = 0x400,
   DCL_REST_GROUP_START = DCL_PWM_GROUP_END,

   DCL_BMT_GROUP_START = 0x500,
   DCL_BMT,


   DCL_PFC_GROUP_START = 0x600,
   DCL_PFC,


   DCL_RTC_GROUP_START = 0x700,
   DCL_RTC,


   DCL_ADC_GROUP_START = 0x800,
   DCL_ADC,


   DCL_PMU_GROUP_START = 0x900,
   DCL_PMU,


   DCL_PW_GROUP_START = 0xA00,
   DCL_PW,


   DCL_CHR_USB_DET_GROUP_START = 0xB00,
   DCL_CHR_USB_DET,






   DCL_KBD_GROUP_START = 0xD00,
   DCL_KBD,
# 520 "interface/driver/peripheral/dcl.h"
   DCL_WDT_GROUP_START = 0x1100,
   DCL_WDT,






   DCL_USB_GROUP_START = 0x1300,
   DCL_USB,


   DCL_SIM_GROUP_START = 0x1400,
   DCL_SIM,






   DCL_MS_GROUP_START = 0x1600,
   DCL_MS,


   DCL_SDIO_GROUP_START = 0x1700,
   DCL_SDIO,


   DCL_ONEW_GROUP_START = 0x1800,
   DCL_ONEW,


   DCL_HDQ_GROUP_START = 0x1900,
   DCL_HDQ,






   DCL_SIM_GPIO_GROUP_START = 0x1B00,
   DCL_SIM_GPIO,


   DCL_SIM_GPI_GROUP_START = 0x1C00,
   DCL_SIM_GPI,


   DCL_F32K_CLK_GROUP_START = 0x1D00,
   DCL_F32K_CLK,


   DCL_IDC_GROUP_START = 0x1E00,
   DCL_IDC

} DCL_DEV_T;




typedef DCL_UINT32 DCL_FLAGS;
typedef enum
{
   FLAGS_NONE = 0,
   FLAGS_END
} DCL_FLAGS_T;





typedef DCL_UINT32 DCL_OPTIONS;
typedef enum
{
   OPTIONS_NONE = 0,

   GPT_OPTIONS_START = OPTIONS_NONE,
  


   GPIO_OPTIONS_START = 0x100,
  


   ADC_OPTIONS_START = 0x200,
  


   WDT_OPTIONS_START = 0x300,
  


   BMT_OPTIONS_START = 0x400,
  


   PFC_OPTIONS_START = 0x500,
  


   RTC_OPTIONS_START = 0x600,
  
# 638 "interface/driver/peripheral/dcl.h"
   USB_DRV_OPTIONS_START = 0xA00,
  
# 654 "interface/driver/peripheral/dcl.h"
   PMU_OPTIONS_START = 0xE00,
  


   PW_OPTIONS_START = 0xF00,
  


   CHR_DET_OPTIONS_START = 0x1000,
  






   F32K_CLK_OPTIONS_START = 0x4000,
  


   IDC_OPTIONS_START = 0x5000,
  

   OPTIONS_MAX
} DCL_OPTIONS_T;




typedef DCL_INT32 DCL_HANDLE;







typedef DCL_UINT8 DCL_BUFF;
typedef DCL_UINT32 DCL_BUFF_LEN;




typedef union
{





  



  



  



  



  
# 734 "interface/driver/peripheral/dcl.h"
  
# 750 "interface/driver/peripheral/dcl.h"
  



  



  



   SIM_CONFIG_T rSimConfig;
# 774 "interface/driver/peripheral/dcl.h"
  



  

} DCL_CONFIGURE_T;





typedef DCL_UINT32 DCL_EVENT;
typedef enum
{
   EVENT_NULL = 0,


   GPT_EVENTS_START = EVENT_NULL,
   EVENT_HGPT_TIMEOUT = 0x1,



   GPIO_EVENTS_START = 0x100,
  



   BMT_EVENTS_START = 0x200,
  



   PFC_EVENTS_START = 0x300,
  



   RTC_EVENTS_START = 0x400,
   EVENT_RTC_ALARM = 0x00000001, EVENT_RTC_TC = 0x00000002,



   WDT_EVENTS_START = 0x500,
   EVENT_WDT_TIMEOUT = 0x00000001,



   ADC_EVENTS_START = 0x600,
  
# 839 "interface/driver/peripheral/dcl.h"
   KBDH_EVENTS_START = 0x900,
   DCL_EVENT_HKBD_STATUS_CHANGE = 0x01, DCL_EVENT_HKBD_EX_STATUS_CHANGE = 0X02, DCL_EVENT_HKBD_MAX = 0XFF,
# 849 "interface/driver/peripheral/dcl.h"
   USB_DRV_EVENTS_START = 0xB00,
  
# 869 "interface/driver/peripheral/dcl.h"
   PMU_EVENTS_START = 0xF00,
  



   PW_EVENTS_START = 0x1000,
  



   CHR_DET_EVENTS_START = 0x1100,
  
# 889 "interface/driver/peripheral/dcl.h"
   F32K_CLK_EVENTS_START = 0x1300,
  



   IDC_EVENTS_START = 0x1400,
  

   EVENT_END
} DCL_EVENT_T;




typedef void (*PFN_DCL_CALLBACK)(DCL_EVENT event);







typedef DCL_UINT32 DCL_CTRL_CMD;
typedef enum
{
   CMDS_START = 0,



   GPIO_CMDS_START = CMDS_START,
   GPIO_CMD_READ, GPIO_CMD_WRITE_LOW, GPIO_CMD_WRITE_HIGH, GPIO_CMD_SET_MODE_0, GPIO_CMD_SET_MODE_1, GPIO_CMD_SET_MODE_2, GPIO_CMD_SET_MODE_3, GPIO_CMD_SET_MODE_4, GPIO_CMD_SET_MODE_5, GPIO_CMD_SET_MODE_6, GPIO_CMD_SET_MODE_7, GPIO_CMD_SET_MODE_8, GPIO_CMD_SET_DIR_OUT, GPIO_CMD_SET_DIR_IN, GPIO_CMD_RETURN_MODE, GPIO_CMD_RETURN_DIR, GPIO_CMD_RETURN_OUT, GPIO_CMD_ENABLE_PULL, GPIO_CMD_DISABLE_PULL, GPIO_CMD_SET_PULL_HIGH, GPIO_CMD_SET_PULL_LOW, GPIO_CMD_SET_DINV, GPIO_CMD_SET_DEBUG, GPIO_CMD_SET_CLK_OUT, GPIO_CMD_SET_CLK_DIV, GPIO_CMD_SET_OWNERSHIP_TO_MD, GPIO_CMD_SET_OWNERSHIP_TO_AP, GPIO_CMD_SET_DRIVE, GPIO_CMD_RETURN_DRIVE, GPIO_CMD_RETURN_OWNERSHIP, GPO_CMD_RETURN_MODE, GPO_CMD_RETURN_OUT, GPO_CMD_WRITE_HIGH, GPO_CMD_WRITE_LOW, GPO_CMD_MODE_SET_0, GPO_CMD_MODE_SET_1, GPO_CMD_MODE_SET_2, GPO_CMD_MODE_SET_3, GPIO_CMD_SET_DIR_OUT_NO_IRQ_MASK, GPIO_CMD_SET_DIR_IN_NO_IRQ_MASK, GPIO_CMD_WRITE_HIGH_NO_IRQ_MASK, GPIO_CMD_WRITE_LOW_NO_IRQ_MASK, GPIO_CMD_READ_NO_IRQ_MASK, GPIO_CMD_WRITE_FOR_SPI, GPIO_CMD_GET_AP_PIN,



   UART_CMDS_START = 0x100,
   SIO_CMD_INIT = 0x00, SIO_CMD_OPEN, SIO_CMD_CLOSE, SIO_CMD_GET_BYTES, SIO_CMD_PUT_BYTES, SIO_CMD_GET_RX_AVAIL, SIO_CMD_GET_TX_AVAIL, SIO_CMD_PUT_ISR_BYTES, SIO_CMD_GET_ISR_TX_AVAIL, SIO_CMD_PURGE, SIO_CMD_SET_OWNER, SIO_CMD_SET_FLOW_CTRL, SIO_CMD_CONFIG_ESCAPE, SIO_CMD_SET_DCB_CONFIG, SIO_CMD_CTRL_DCD, SIO_CMD_CTRL_BREAK, SIO_CMD_CLR_RX_BUF, SIO_CMD_CLR_TX_BUF, SIO_CMD_SET_BAUDRATE, SIO_CMD_SEND_ISR_DATA, SIO_CMD_SEND_DATA, SIO_CMD_GET_OWNER_ID, SIO_CMD_SET_AUTOBAUD_DIV, SIO_CMD_REG_TX_CB, SIO_CMD_REG_RX_CB, SIO_CMD_GET_UART_BYTE, SIO_CMD_PUT_UART_BYTE, SIO_CMD_PUT_UART_BYTES, SIO_CMD_READ_DCB_CONFIG, SIO_CMD_CTRL_RI, SIO_CMD_GET_ESCAPE_INFO, SIO_CMD_CTRL_DTR, SIO_CMD_READ_HW_STATUS, SIO_CMD_GET_UART_BYTE_WITH_TIMEOUT, UART_CMD_UART_START = 0x100, UART_CMD_SET_FIFO_TRIGGER, UART_CMD_POWER_ON, UART_CMD_CHECK_TX_BUF_EMPTY, UART_CMD_CHECK_TX_SEND_OUT, UART_CMD_GET_TX_BUF_SIZE, UART_CMD_SLEEP_TX_ENABLE, UART_CMD_CTRL_SLEEP_MODE, UART_CMD_SWITCH_PORT, UART_CMD_BOOTUP_INIT, UART_CMD_BOOT_PUTBYTES, UART_CMD_LOOPBACK, UART_CMD_ASSERT_WAIT_SEND_OUT, UART_CMD_CTRL_USE_VFIFO, UART_CMD_GET_FLOW_CONTROL, UART_CMD_REG_DEF_CB, UART_CMD_BMT_PUT_BYTES, UART_CMD_RECHANDLER_VFIFO, UART_CMD_TRXHANDLER_VFIFO, UART_CMD_RECTIMEOUTHANDLE, UART_CMD_CTRL_TX_DMA, UART_CMD_GET_MAX_BAUDRATE, UART_CMD_UART_END, USB_CMD_UART_START = 0x200, USB_CMD_IS_CDCACM, USB_CMD_HIGH_SPEED_IF_ENABLE, USB_CMD_REG_TX_CB, USB_CMD_TX_DATA_STATUS, USB_CMD_SEND_DATA, USB_CMD_GET_DATA, USB_CMD_SEND_ISR_DATA, USB_CMD_CTRL_SEND_DATA, USB_CMD_CTRL_GET_DATA, USB_CMD_HALT, USB_CMD_FT_PORT, USB_CMD_ACM_RING_BUFF_THRESHOLD_EN, USB_CMD_USB2UART_TX_DMA_CBK, USB_CMD_BOOT_PUTBYTES, USB_CMD_IS_CDCACM_ACTIVE, USB_CMD_UART_END, TTY_CMD_UART_START = 0x300, TTY_CMD_GET_CHUNK_SIZE, TTY_CMD_ASSIGN_RX_IOR, TTY_CMD_NEED_TX_DONE_CB, TTY_CMD_GET_DRV_STATE, TTY_CMD_PUT_BYTES_IOR, TTY_CMD_PUT_BYTES_IOR_LIGHT, TTY_CMD_GET_MTU_SIZE, TTY_CMD_SET_INDICATION, TTY_CMD_UART_END, TTY_CMD_EXCEPTION_START = 0x400, TTY_CMD_EXCEPTION_RESET, TTY_CMD_EXCEPTION_HIF_INIT, TTY_CMD_EXCEPTION_CLEAR_CHANNEL, TTY_CMD_EXCEPTION_TX_GPD, TTY_CMD_EXCEPTION_TX_DONE_INFO, TTY_CMD_EXCEPTION_HIF_STATE, TTY_CMD_EXCEPTION_ASSIGN_RX_GPD, TTY_CMD_EXCEPTION_GET_RX_GPD, TTY_CMD_EXCEPTION_HIF_POLL, TTY_CMD_EXCEPTION_HIF_RESET_LINK, TTY_CMD_EXCEPTION_FLUSH_TX, TTY_CMD_EXCEPTION_FLUSH_RX, TTY_CMD_EXCEPTION_END,



   GPT_CMDS_START = 0x200,
   SGPT_CMD_START, SGPT_CMD_STOP, SGPT_CMD_BUSYWAIT, SGPT2_CMD_START, SGPT2_CMD_STOP, SGPT2_CMD_SET_COUNTVALUE, SGPT2_CMD_REGISTERCALLBACK, SGPT2_CMD_SET_CLK, FGPT_CMD_START, FGPT_CMD_STOP, FGPT_CMD_RETURN_COUNT,




   ADC_CMDS_START = 0x300,
   ADC_CMD_CREATE_OBJECT, ADC_CMD_MODIFY_PARAM, ADC_CMD_START_MEASURE, ADC_CMD_STOP_MEASURE, ADC_CMD_SET_TIMER_PAGE_ALIGN, ADC_CMD_REGISTER_MEASURE_CB, ADC_CMD_REGISTER_COMPLETE_CB, ADC_CMD_GET_CHANNEL, ADC_CMD_SCHE_ID_GET_HANDLE, ADC_CMD_TRANSFORM_INTO_VOLT, ADC_CMD_TRANSFORM_INTO_TEMP, ADC_CMD_TRANSFORM_INTO_CURR, ADC_CMD_GET_SCHEDULER_PARAMETER, ADC_CMD_SET_CALIBRATION_DATA, ADC_CMD_READ_CALIBRATION_DATA, ADC_CMD_READ_CALIBRATION_INFORM_IN_USBBOOT, ADC_CMD_SET_MULTI_CHANNEL_READ,

   HADC_CMDS_START = 0x400,
   ADC_CMD_IMM_MEASURE, ADC_CMD_SYNC_MEASURE, ADC_CMD_TDMA_SYNC_SETUP, ADC_CMD_POWER, ADC_CMD_GET_DATA_2_META, ADC_CMD_GET_DATA, ADC_CMD_GET_META_DATA, ADC_CMD_GET_MAX_PHYSICAL_CH, ADC_CMD_GET_IMM_DATA_ON_BOOTING, ADC_CMD_GET_TEMP, ADC_CMD_GET_PHYSICAL_CHANNEL,



   WDT_CMDS_START = 0x500,
   WDT_CMD_ENABLE , WDT_CMD_SET_EXT_POL, WDT_CMD_SET_EXT_RESET, WDT_CMD_SET_VALUE, WDT_CMD_RESTART, WDT_CMD_DRV_RESET, WDT_CMD_ABN_RESET, WDT_CMD_IRQ, WDT_CMD_GET_RSTINTERVAL, WDT_CMD_ENABLE_DEBUG,



   BMT_CMDS_START = 0x600,
   BMT_CMD_CALLSTATE, BMT_CMD_CHARGE, BMT_CMD_GET_CUSTOMIZED_PARA, BMT_CMD_SET_EXT_CHARGER, BMT_CMD_INITIALIZE, BMT_CMD_IS_BAT_ON, BMT_CMD_SENDMES2UEM, BMT_CMD_SET_CHR_STATUS, BMT_CMD_VBATINHISR, BMT_CMD_WDT_INIT,



   PFC_CMDS_START = 0x700,
   PFC_CMD_RESET, PFC_CMD_SET_CONFIG, PFC_CMD_ENCODE, PFC_CMD_DECODE, PFC_CMD_DEQUEUE, PFC_CMD_RELOAD_RX,



   RTC_CMDS_START = 0x800,
   RTC_CMD_BOOTLOADER_POWERON, RTC_CMD_CLEAR_PDN_BITS, RTC_CMD_CONFIG_AL_TC, RTC_CMD_DELAY, RTC_CMD_FT_POWEROFF, RTC_CMD_GET_ALARM_TIME, RTC_CMD_GET_TIME, RTC_CMD_GPIO_GET_INPUT, RTC_CMD_GPIO_SET_EXPORT_32K, RTC_CMD_GPIO_SET_EXPORT_COREDETB, RTC_CMD_GPIO_SET_INPUT_MODE, RTC_CMD_GPIO_SET_OUTPUT_MODE, RTC_CMD_HW_INIT, RTC_CMD_INIT, RTC_CMD_INIT_TC_AL_INTR, RTC_CMD_IS_CONFIG_VALID, RTC_CMD_IS_FIRST_ON, RTC_CMD_IS_MS_FIRSTPOWERON, RTC_CMD_IS_TIME_VALID, RTC_CMD_PWIC_CHECK_POWERON, RTC_CMD_PWIC_FIRST_POWERON_INIT_RTCTIME, RTC_CMD_PWIC_MASK_AL, RTC_CMD_PWIC_POWEROFF_RTC_INIT, RTC_CMD_PWIC_POWERON_RTC_INIT, RTC_CMD_READ_PDN_BITS, RTC_CMD_READ_SPAR, RTC_CMD_READ_XOSC_REG, RTC_CMD_RELOAD, RTC_CMD_SET_ALARM_TIME, RTC_CMD_SET_FIRST_POWERON, RTC_CMD_SET_PDN_BITS, RTC_CMD_SET_PWR_KEY, RTC_CMD_SET_TIME, RTC_CMD_SETBBPU, RTC_CMD_SETXOSC, RTC_CMD_START_CALI, RTC_CMD_WAIT_DEBOUNCE, RTC_CMD_WRITE_PDN_BITS, RTC_CMD_WRITE_SPAR, RTC_CMD_WRITE_TRIGGER, RTC_CMD_WRITE_TRIGGER_WAIT, RTC_CMD_WRITE_XOSC_REG, RTC_CMD_PROT_UNLOCK, RTC_CMD_REGISTER_MODULE_TO_SEND_RTCTIME, RTC_CMD_WRITE_OSC32CON_REG,
# 974 "interface/driver/peripheral/dcl.h"
   KBDH_CMDS_START = 0xB00,
   HKBD_CMD_GET_KEY_NUMBER, HKBD_CMD_GET_KEY_STA_MAP, HKBD_CMD_GET_KEY_STATUS, HKBD_CMD_GET_POWER_KEY_STATUS,


   KBD_CMDS_START = 0xC00,
   KBD_CMD_SET_LONG_PRESS_TIME, KBD_CMD_SET_REPEAT_PRESS_TIME, KBD_CMD_SET_DETECTION_MODE, KBD_CMD_GET_KEY_DATA, KBD_CMD_PEEK_KEY_DATA, KBD_CMD_GET_DETECTION_MODE, KBD_CMD_CTRL_KEY_SUPPORT, KBD_CMD_CTRL_KEY_MULTIPLE, KBD_CMD_GET_KEY_EVENT_CNT, KBD_CMD_PUT_KEY_DATA, KBD_CMD_FIND_TWO_STEP,
# 1002 "interface/driver/peripheral/dcl.h"
   SDIO_CMDS_START = 0x1100,
   SDIO_CTRL_CMD_REG_WR, SDIO_CTRL_CMD_REG_WR_ISR, SDIO_CTRL_CMD_DATA_WR, SDIO_CTRL_CMD_REG_RD, SDIO_CTRL_CMD_DATA_RD, SDIO_CTRL_CMD_CHECK_INTR, SDIO_CTRL_CMD_ENABLE_INTR, SDIO_CTRL_CMD_INIT, SDIO_CTRL_CMD_ABORT, SDIO_CTRL_CMD_SW_RST, SDIO_CTRL_CMD_QUERY_BLK_SIZE, SDIO_CTRL_CMD_SET_BLK_SIZE, SDIO_CTRL_CMD_GET_BLK_SIZE, SDIO_CTRL_CMD_ENABLE_IO, SDIO_CTRL_CMD_SET_BUS_WIDTH, SDIO_CTRL_CMD_GET_CCCR, SDIO_CTRL_CMD_GET_FBR, SDIO_CTRL_CMD_CMD52_READ, SDIO_CTRL_CMD_CMD52_WRITE, SDIO_CTRL_CMD_CMD52_WRITE_READ, SDIO_CTRL_CMD_CMD53_READ, SDIO_CTRL_CMD_CMD53_WRITE, SDIO_CTRL_CMD_MCUDMA_READ, SDIO_CTRL_CMD_MCUDMA_WRITE, SDIO_CTRL_CMD_CLKPADRED_READ, SDIO_CTRL_CMD_CLKPADRED_WRITE, SDIO_CTRL_CMD_FORCEMCU_READ, SDIO_CTRL_CMD_FORCEMCU_WRITE, SDIO_CTRL_CMD_GETCLK, SDIO_CTRL_CMD_SETCLK,



   USB_DRV_CMDS_START = 0x1300,
   USB_DRV_CMD_INIT_DRV_INFO = 0, USB_DRV_CMD_RESET_DRV_INFO, USB_DRV_CMD_REGISTER_DRV_INFO, USB_DRV_CMD_SET_UNMASK_IRQ, USB_DRV_CMD_GET_UNMASK_IRQ, USB_DRV_CMD_GET_EP_STALL_STATUS, USB_DRV_CMD_DRV_CREATE_ISR, USB_DRV_CMD_DRV_ACTIVATE_ISR, USB_DRV_CMD_DMA_DRV_CREATE_ISR, USB_DRV_CMD_DMA_DRV_ACTIVATE_ISR, USB_DRV_CMD_PDN_ENABLE, USB_DRV_CMD_DP_PULL_UP, USB_DRV_CMD_SET_DISCON_STATUS, USB_DRV_CMD_RESET_DRV, USB_DRV_CMD_INITIALIZE_DRV_PHASE_1, USB_DRV_CMD_INITIALIZE_DRV_PHASE_2, USB_DRV_CMD_RELEASE_DRV, USB_DRV_CMD_SET_ADDRESS, USB_DRV_CMD_GET_FRAME_COUNT, USB_DRV_CMD_TXEP_INIT, USB_DRV_CMD_RXEP_INIT, USB_DRV_CMD_TXEP_EN, USB_DRV_CMD_TXEP_DIS, USB_DRV_CMD_RXEP_EN, USB_DRV_CMD_RXEP_DIS, USB_DRV_CMD_CONFIG_TXEP_TYPE, USB_DRV_CMD_CONFIG_RXEP_TYPE, USB_DRV_CMD_TXEP_CLEAR_DATATOG, USB_DRV_CMD_RxEP_CLEAR_DATATOG, USB_DRV_CMD_TXEP_USAGE, USB_DRV_CMD_RXEP_USAGE, USB_DRV_CMD_TXEP_PK_SIZE, USB_DRV_CMD_RXEP_PK_SIZE, USB_DRV_CMD_EPFIFO_READ, USB_DRV_CMD_EPFIFO_WRITE, USB_DRV_CMD_CTRLEPSTALL, USB_DRV_CMD_GET_EP0_STATUS, USB_DRV_CMD_UPDATE_EP0_STATE, USB_DRV_CMD_GET_EP0_PKT_LEN, USB_DRV_CMD_TXEP_READY, USB_DRV_CMD_GET_RXEP_PKT_LEN, USB_DRV_CMD_RXEP_READY, USB_DRV_CMD_IS_TXEP_EMPTY, USB_DRV_CMD_IS_RXEP_EMPTY, USB_DRV_CMD_CLEAR_TXEP_FIFO, USB_DRV_CMD_CLEAR_RXEP_FIFO, USB_DRV_CMD_GET_DMA_CHANNEL, USB_DRV_CMD_STOP_DMA_CHANNEL, USB_DRV_CMD_FREE_DMA_CHANNEL, USB_DRV_CMD_DMA_SETUP, USB_DRV_CMD_GET_DMA_RUN_STATUS, USB_DRV_CMD_SET_DMA_RUN_STATUS, USB_DRV_CMD_ENABLE_DMA_TIMER, USB_DRV_CMD_CHECK_DMA_TIME_OUT, USB_DRV_CMD_GET_DMA_REAL_COUNT, USB_DRV_CMD_SET_DMA_LIMITER, USB_DRV_CMD_SWITCH_DMA_BURST_MODE, USB_DRV_CMD_REGISTER_DMA_CHANNEL, USB_DRV_CMD_SET_DMA_BURST_MODE, USB_DRV_CMD_USB_IS_HIGH_SPEED, USB_DRV_CMD_ENTER_TESTMODE, USB_DRV_CMD_RESET_FIFO, USB_DRV_CMD_IS_FIFO_Not_Empty, USB_DRV_CMD_IS_SUSPEND_POWER_STATUS, USB_DRV_CMD_POLLING_TX_DONE, USB_DRV_CMD_POLLING_RX_DATA, USB_DRV_CMD_CLR_RXEP_ISR, USB_DRV_CMD_GET_RXEP_ISR_STATUS, USB_DRV_CMD_GET_TX_ISR_STATUS, USB_DRV_CMD_PHY_ENABLE, USB_DRV_CMD_PHY_DISABLE, USB_DRV_CMD_USB_UART_SHARE, USB_DRV_CMD_USBDL_UPDATE_USB_DL_MODE, USB_DRV_CMD_USBDL_IS_USB_DL_MODE, USB_DRV_CMD_DEBUG_INFO, USB_DRV_CMD_DUMP, USB_DRV_CMD_GET_TOTAL_FIFO_SIZE, USB_DRV_CMD_GET_IP_VERSION, USB_DRV_CMD_CHECK_IC_DMA_LIMIT_CAPABILITY, USB_DRV_CMD_CHECK_IC_UART_SHARE_PAD_CAPABILITY, USB_DRV_CMD_USBDL_IS_USB_FAST_META_MODE, USB_DRV_CMD_SET_MENU_CONFIG, USB_DRV_CMD_GET_MENU_CONFIG, USB_CLASS_CMD_START = 0x1000, USB_VIDEO_CLASS_START = 0x1001, USB_Video_CMD_Set_Default_JPEG_Max_Size, USB_Video_CMD_Complete_Still_Buffer, USB_Video_CMD_Complete_Video_Buffer, USB_Video_CMD_Get_Still_Buffer, USB_Video_CMD_Get_Video_Buffer, USB_VIDEO_CLASS_END = 0x10FF, USB_IMAGE_CLASS_START = 0x1100, USB_IMAGE_MTP_CMD_GET_DESCRIPTION_STRING_1_PTR, USB_IMAGE_MTP_CMD_GET_DESCRIPTION_STRING_2_PTR, USB_IMAGE_CLASS_END = 0x11FF,
# 1027 "interface/driver/peripheral/dcl.h"
   SIM_CMDS_START = 0x1700,
   SIM_CTRL_CMD_BASE, SIM_CTRL_CMD_RST = 0, SIM_CTRL_CMD_CMD, SIM_CTRL_CMD_PWOFF, SIM_CTRL_CMD_GET_CARD_INFO, SIM_CTRL_CMD_SET_SPEED, SIM_CTRL_CMD_SET_PREFER_PROTOCOL, SIM_CTRL_CMD_SET_CLK_STOP_MODE, SIM_CTRL_CMD_TOUT_TEST, SIM_CTRL_CMD_GET_SPEED, SIM_CTRL_CMD_QUERY_9000_ON_SELECT, SIM_CTRL_CMD_SET_SLT_RLT, SIM_CTRL_CMD_MAX_VALUE, SIM_CTRL_CMD_DUMMY_END = SIM_CTRL_CMD_BASE + SIM_CTRL_CMD_MAX_VALUE,



   PMU_CMDS_START = 0x1800,
   LDO_BUCK_SET_CMDS_START = 0, LDO_BUCK_CTRL, LDO_BUCK_SET_EN, LDO_BUCK_GET_EN_STATUS, LDO_BUCK_GET_QI_MODE, LDO_BUCK_SET_EN_FORCE, LDO_BUCK_SET_VOLTAGE, LDO_BUCK_SET_VOLTAGE_EN, LDO_BUCK_SET_SLEEP_VOLTAGE, LDO_BUCK_SET_BURST_THRESHOLD = 500, LDO_BUCK_SET_CURRENT_LIMIT, LDO_BUCK_SET_VOLTAGE_CALIBRATION_CODE, LDO_BUCK_SET_BIAS_CURRENT_CALIBRATION_CODE, LDO_BUCK_SET_STB_EN, LDO_BUCK_SET_OC_AUTO_OFF, LDO_BUCK_SET_RS, LDO_BUCK_SET_ON_SEL, LDO_BUCK_SET_SRCLKEN_SEL, LDO_BUCK_SET_STB_TD, LDO_BUCK_SET_NDIS_EN, LDO_BUCK_SET_OC_TD, LDO_BUCK_SET_OCFB_EN, LDO_BUCK_SET_VSIM_GPLDO_EN, LDO_BUCK_SET_VSIM2_GPLDO_EN, LDO_BUCK_SET_SIM2_GPIO_EN, LDO_BUCK_SET_CCI_SRCLKEN, LDO_BUCK_GET_OC_STATUS, LDO_BUCK_GET_QI_OC_STATUS, LDO_BUCK_SET_OC_INT_EN, LDO_BUCK_CLEAR_OC_FLAG, LDO_BUCK_GET_OC_FLAG, LDO_BUCK_GET_VOLTAGE_LIST, LDO_BUCK_SET_THER_SHDN_EN, LDO_BUCK_SET_LP_MODE_SET, LDO_BUCK_GET_LP_MODE, LDO_BUCK_SET_LP_SEL, LDO_BUCK_SET_ON_CTRL, LDO_BUCK_SET_MODESET, LDO_BUCK_SET_EN_CTRL, LDO_BUCK_SET_SRCLK_MODE_SEL, LDO_BUCK_SET_SRCLK_EN_SEL, LDO_BUCK_SET_EN_SEL, LDO_SET_CAL, LDO_BUCK_SET_CMDS_END, VIBR_SET_DIMMING_ON_DUTY = 900, VPA_SET_VOLTAGE = 1000, VPA_SET_VOSEL_MAP_EN, VPA_SET_EN, VPA_CTRL_SEL, VPA_GET_VOLTAGE_LIST, VPA_SET_BAT_LOW, VPA_SET_FPWM, VPA_SET_VOLTAGE_SELECTION_TABLE, VPA_SET_MAP_SEL, VRF18_SET_FPWM, VRF18_SET_MODESET, VRF18_2_SET_FPWM, VRF18_SET_BUCK_LDO_MODE, VRF1_SET_MODESET_CKPDN_SET, VRF1_SET_MODESET_CKPDN_CLR, VRF1_GET_MODESET_CKPDN, SIMLS_SET_SRST_CONF, SIMLS_SET_SCLK_CONF, SIMLS_SET_TDSEL, SIMAP_SET_TDSEL, SIMLS_SET_RDSEL, SIMAP_SET_RDSEL, SIM_SET_STB_SIO_MODE, SIMRST_SET_GPIO_SET, SIMRST_SET_GPIO_CLR, OCTL_SET_SIM_AP_SRST, OCTL_SET_SIM_AP_SCLK, OCTL_SET_SIMLS_SRST, OCTL_SET_SIMLS_SCLK, SPK_SET_EN = 2000, SPK_SET_MODE, SPK_GET_MODE, SPK_SET_OC_AUTO_OFF, SPK_SET_VOL_VALUE, SPK_GET_VOL_VALUE, SPK_SET_VOL, SPK_GET_VOL, SPK_SET_SLEW_RATE, SPK_SET_CALIBR_EN, SPK_SET_CALIBR_SEL, KPLED_SET_EN = 3000, KPLED_SET_MODE, KPLED_SET_SEL, KPLED_SET_FREQUENCY_DIVISION, KPLED_SET_DIMMING_ON_DUTY, FLASHLED_SET_EN = 4000, FLASHLED_SET_MODE, FLASHLED_SET_SEL, BL_SET_INIT = 5000, BL_SET_EN, BL_GET_SUPPORT_LEVEL, BL_GET_USE_PWM_QUERY, BOOST_SET_EN = 6000, BOOST_SET_CURRENT_LIMIT, BOOST_SET_CLK_CAL, BOOST_SET_SYNC_EN, BOOST_SET_VOLTAGE, BOOST_SET_LEVEL, ISINK_SET_EN = 7000, ISINK_SET_MODE, ISINK_SET_STEP, ISINK_SET_FORCE_OFF, ISINK_SET_CHANNEL, ISINK_SET_DIMMING_ON_DUTY, ISINK_SET_FREQUENCY_DIVISION, CHR_SET_ADC_MEASURE_EN = 8000, CHR_SET_WDT_CLEAR, CHR_SET_WDT_TIMER, CHR_SET_WDT_INT_EN, CHR_SET_WDT_EN, CHR_SET_CHR_EN, CHR_SET_CHR_FORCE_EN, CHR_GET_CHR_DET_STATUS, CHR_GET_CHR_CURRENT, CHR_GET_CHR_CURRENT_LIST, CHR_SET_CHR_CURRENT, CHR_GET_CV_DETECTION_STATUS, CHR_SET_CV_DETECTION_EN, CHR_SET_CV_DETECTION_VOLTAGE, CHR_SET_CV_DETECTION_VOLTAGE_CALIBRATION, CHR_SET_CSDAC_EN, CHR_GET_IS_BATTERY_ON, CHR_GET_IS_CHR_VALID, CHR_SET_HV_DETECTION_VOLTAGE, CHR_GET_HV_DETECTION_VOLTAGE_LIST, CHR_SET_VBAT_OV_DETECTION_VOLTAGE, CHR_SET_BAT_HT_EN, CHR_SET_OTG_BVALID_EN, CHR_SET_CV_MODE, CHR_SET_CSDAC_MODE, CHR_SET_TRACKING_EN, CHR_SET_HWCV_EN, CHR_SET_ULC_DET_EN, CHR_SET_LOW_ICH_DB, CHR_SET_CHARGE_WITHOUT_BATTERY, CHR_SET_BC11_PULLUP_EN, CHR_SET_VBAT_CV_CALIBRATION, CHR_GET_CC_DET, ADC_SET_RQST, ADC_CLR_RQST, ADC_GET_RDY_MD, ADC_GET_OUT_MD, MISC_SET_RLED_EN = 9000, MISC_SET_GLED_EN, MISC_SET_BLED_EN, MISC_GET_CID, MISC_GET_ECO_VERSION, MISC_GET_HW_VERSION, MISC_SET_REGISTER_VALUE, MISC_GET_REGISTER_VALUE, PMU_MOD_CMD_MAX,



   PW_CMDS_START = 0x1900,
   PW_CMD_POWERON, PW_CMD_POWEROFF, PW_CMD_SET_POWERON_REASON, PW_CMD_GET_POWERON_REASON, PW_CMD_SET_SWITCH_TO_IDLE, PW_CMD_CLEAR_SWITCH_TO_IDLE, PW_CMD_POWER_INIT, PW_CMD_UPDATE_FLAGS, PW_CMD_NFB_POWERON, PW_CMD_IS_USB_BOOT,



   CHR_DET_CMDS_START = 0x1A00,
   CHR_DET_CMD_QUERY_IS_CHR_IN_BY_PW=0, CHR_DET_CMD_QUERY_CHR_TYPE, CHR_DET_CMD_REGISTER_CHR_USB, CHR_DET_CMD_UNMASK_EINT, CHR_DET_CMD_REGISTER_CHR_USB_EINT, CHR_DET_CMD_REGISTER_USB_HISR,
# 1052 "interface/driver/peripheral/dcl.h"
    SIMGPIO_CMDS_START = 0x1C00,
 SIMGPIO_CMD_READ, SIMGPIO_CMD_WRITE, SIMGPIO_CMD_SET_DIR, SIMGPIO_CMD_TRUN_ON_VCC, SIMGPI_CMD_READ,



   F32K_CLK_CMDS_START = 0x1D00,
   F32K_CLK_CMD_QUERY_IS_XOSC32K, F32K_CLK_CMD_EOSC32_TRIMMING, F32K_CLK_CMD_HW_INIT,



   IDC_CMDS_START = 0x1E00,
   IDC_CMD_SET_DCB_CONFIG, IDC_CMD_GET_DCB_CONFIG, IDC_CMD_SET_BAUDRATE, IDC_CMD_GET_MAX_BAUDRATE, IDC_CMD_SET_FIFO_TRIGGER, IDC_CMD_SET_PM_CONFIG, IDC_CMD_GET_PM_CONFIG, IDC_CMD_SEND_EVENT, IDC_CMD_SCHEDULE_EVENT, IDC_CMD_SCHEDULE_START, IDC_CMD_STOP_EVENT, IDC_CMD_PURGE, IDC_CMD_GET_SCHEDULE_STATUS, IDC_CMD_CHECK_EVENT_SEND_OUT, IDC_CMD_SET_PIN_CONFIG, IDC_CMD_GET_PIN_CONFIG,

   CMD_END
} DCL_CTRL_CMD_T;




typedef union
{


   SGPT_CTRL_START_T rSGPTStart; FGPT_CTRL_RETURN_COUNT_T u2RetCount; GPT_BUSYWAIT_COUNT uBusyWaitcount; SGPT2_CTRL_RESET_DATA_T rHGPTReset; SGPT2_CALLBACK_FUNC_T gpt2_callback; SGPT2_CTRL_CLK_T gpt2_clk;



   UART_CTRL_INIT_T rUARTCtrlInit; UART_CTRL_OPEN_T rUARTCtrlOPEN; UART_CTRL_CLOSE_T rUARTCtrlCLOSE; UART_CTRL_GET_BYTES_T rUARTCtrlGETBYTES; UART_CTRL_PUT_BYTES_T rUARTCtrlPUTBYTES; UART_CTRL_RX_AVAIL_T rUARTCtrlRXAVAIL; UART_CTRL_TX_AVAIL_T rUARTCtrlTXAVAIL; UART_CTRL_PURGE_T rUARTCtrlPURGE; UART_CTRL_OWNER_T rUARTCtrlOWNER; UART_CTRL_FLOW_CTRL_T rUARTCtrlFLOWCTRL; UART_CTRL_CONFIG_ESP_T rUARTCtrlCONFIGESP; UART_CTRL_DCB_T rUARTCtrlDCB; UART_CTRL_DCD_T rUARTCtrlDCD; UART_CTRL_BREAK_T rUARTCtrlBREAK; UART_CTRL_CLR_BUFFER_T rUARTCtrlCLRBUFFER; UART_CTRL_BAUDRATE_T rUARTCtrlBAUDRATE; UART_CTRL_SEND_DATA_T rUARTCtrlSENDDATA; UART_CTRL_AUTO_BAUDDIV_T rUARTCtrlAUTOBAUDDIV; UART_CTRL_REG_TX_CB_T rUARTCtrlREGTXCB; UART_CTRL_REG_RX_CB_T rUARTCtrlREGRXCB; UART_CTRL_GET_UART_BYTE_T rUARTCtrlGETUARTBYTE; UART_CTRL_GET_UART_BYTE_WITH_TIMEOUT_T rUARTCtrlGETUARTBYTEWithTimeOut; UART_CTRL_PUT_UART_BYTE_T rUARTCtrlPUTUARTBYTE; UART_CTRL_PUT_UART_BYTES_T rUARTCtrlPUTUARTBYTES; UART_CTRL_RI_T rUARTCtrlRI; UART_CTRL_DTR_T rUARTCtrlDTR; UART_CTRL_RHS_T rUARTCtrlRHS; UART_CTRL_SFT_T rUARTCtrlSFT; UART_CTRL_POWERON_T rUARTCtrlPoweron; UART_CTRL_CHECK_TBE_T rUARTCtrlCheckBUFEMP; UART_CTRL_CHECK_TSO_T rUARTCtrlCheckTXSendOut; UART_CTRL_GET_TBS_T rUARTCtrlGetTxBufSize; UART_CTRL_SLEEP_ON_TX_ENABLE_T rUARTCtrlSleepOnTxEnable; UART_CTRL_SLEEP_ENABLE_T rUARTCtrlSleepEnable; UART_CTRL_BOOT_PUTBYTES_T rUARTCtrlBootPutBytes; UART_CTRL_USE_VFIFO_T rUARTCtrlUseVFifo; UART_CTRL_REG_DEF_CB_T rUARTCtrlRegDefCB; UART_CTRL_GET_MAXBAUDRATE_T rUARTCtrlGetMaxBaudrate; UART_CTRL_GET_FC_T rUARTCtrlGetFC; UART_CTRL_NEED_TX_DONE_CB_T rUARTCtrlNeedTxDoneCb; UART_CTRL_GET_DRV_STATE_T rUARTCtrlGetDrvState; UART_CTRL_ASSIGN_RX_IOR_T rUARTCtrlAssignRxIor; UART_CTRL_PUT_BYTES_IOR_T rUARTCtrlPUTBYTESIOR; UART_CTRL_GET_CHUNK_SIZE_T rUARTCtrlGETCHUNKSIZE; UART_CTRL_GET_MTU_SIZE_T rUARTCtrlGETMTUSIZE; UART_CTRL_SET_INDICATION_T rUARTCtrlSETINDICATION; TTY_CTRL_EXCP_TX_GPD_T rTTYCtrlExcpTxGPD; TTY_CTRL_EXCP_TX_DONE_INFO_T rTTYCtrlExcpTxDoneInfo; TTY_CTRL_EXCP_HIF_STATE_T rTTYCtrlExcpHifState; TTY_CTRL_EXCP_ASSIGN_RX_GPD_T rTTYCtrlExcpAssignRxGPD; TTY_CTRL_EXCP_GET_RX_GPD_T rTTYCtrlExcpGetRxGPD; TTY_CTRL_EXCP_FLUSH_TX_T rTTYCtrlExcpFlushTx; TTY_CTRL_EXCP_FLUSH_RX_T rTTYCtrlExcpFlushRx; TTY_CTRL_EXCP_HIF_POLL_T rTTYCtrlExcpHifPoll;



   GPIO_CTRL_READ_T rRead; GPIO_CTRL_RETURN_MODE_T rReturnMode; GPIO_CTRL_RETURN_DIR_T rReturnDir; GPIO_CTRL_RETURN_OUT_T rReturnOut; GPIO_CTRL_RETURN_AP_T rReturnAp; GPIO_CTRL_SET_DINV_T rSetDinv; GPIO_CTRL_SET_DEBUG_T rSetDebug; GPIO_CTRL_SET_CLK_OUT_T rSetClkOut; GPIO_CTRL_SET_CLK_DIV_T rSetClkDiv; GPIO_CTRL_WRITE_FOR_SPI_T rWriteSpi; GPIO_CTRL_SET_DRIVE_T rSetDrive; GPIO_CTRL_RETURN_DRIVE_T rReturnDrive; GPIO_CTRL_RETURN_OWNERSHIP_T rReturnOwnership; GPO_CTRL_RETURN_MODE_T oReturnMode; GPO_CTRL_RETURN_OUT_T oReturnOut;



   ADC_CTRL_CREATE_OBJECT_T rADCCreateObj; ADC_CTRL_MODIFY_PARAM_T rADCModifyParam; ADC_CTRL_IMM_MEASURE_T rADCImmMeasure; ADC_CTRL_SYNC_MEASURE_T rADCSyncMeasure; ADC_CTRL_TDMA_SYNC_SETUP_T rADCTDMASyncSetup; ADC_CTRL_POWER_T rADCPower; ADC_CTRL_TIMER_ALIGN_T rADCTimerAlign; ADC_CTRL_REGISTER_MEASURE_CB_T rADCRegisterMeasureCB; ADC_CTRL_REGISTER_COMPLETE_CB_T rADCRegisterCompleteCB; ADC_CTRL_GET_PHYSICAL_CHANNEL_T rADCGetPhyChannel; DCL_CTRL_SCHE_ID_GET_HANDLE_T rADCScheIdGetHandle; ADC_CTRL_TRANSFORM_INTO_VOLT_T rADCTransformVolt; ADC_CTRL_TRANSFORM_INTO_TEMP_T rADCTransformTemp; ADC_CTRL_TRANSFORM_INTO_CURR_T rADCTransformCurr; ADC_CTRL_GET_DATA_2_META_T rADCGetData2Meta; ADC_CTRL_GET_DATA_T rADCGetData; ADC_CTRL_GET_META_DATA_T rADCGetMetaData; ADC_CTRL_GET_SCHEDULER_PARAMETER_T rGetSchedulerPara; ADC_CTRL_GET_MAX_PHYSICAL_CH_T rADCGetMaxPhyCh; ADC_CTRL_SET_CALIBRATION_DATA_T rSetCalibrationData; ADC_CTRL_READ_CALIBRATION_DATA_T rReadCalibrationData; ADC_CTRL_GET_IMM_DATA_ON_BOOTING_T rGetImmDataOnBooting; ADC_CTRL_GET_TEMP_T rGetTempData; DCL_MULTI_CHANNEL_PARA_T rMultiChannelPara;



   WDT_CTRL_ENABLE_T rWDTEnable; WDT_CTRL_SET_EXT_POL_T rWDTSetExtPol; WDT_CTRL_SET_EXT_RESET_T rWDTSetExtReset; WDT_CTRL_SET_VALUE_T rWDTSetValue; WDT_CTRL_IRQ_T rWDTIRQ; WDT_CTRL_DEBUG_T rWDTDebug; WDT_CTRL_GET_RSTINTERVAL_T rRstValue;



   BMT_CTRL_CALLSTATE_T rCallState; BMT_CTRL_CHARGE_T rChargeControl; BMT_CTRL_GET_CUSTOMIZED_PARA_T rGetCustomizedPara; BMT_CTRL_SET_EXT_CHARGER_T rSetExtChr; BMT_CTRL_IS_BAT_ON_T rIsBatOn; BMT_CTRL_SENDMES2UEM_T rSendMes2Uem; BMT_CTRL_SET_CHR_STATUS_T rSetChrStatus;



   PFC_CTRL_RESET_T r_pfc_ctrl_reset; PFC_CTRL_SET_CONFIG_T r_pfc_ctrl_set_config; PFC_CTRL_ENCODE_T r_pfc_ctrl_encode; PFC_CTRL_DECODE_T r_pfc_ctrl_decode; PFC_CTRL_DEQUEUE_T r_pfc_ctrl_dequeue; PFC_CTRL_RELOAD_RX_T r_pfc_ctrl_reload_rx;



   RTC_CTRL_BOOTLOADER_POWERON_T rBootloaderPowerOn; RTC_CTRL_CONFIG_AL_TC_T rConfigALTC; RTC_CTRL_CONFIG_PDN_BIT_T rConfigPDNBit; RTC_CTRL_FT_POWEROFF_T rFTPowerOff; RTC_CTRL_GET_ALARM_TIME_T rGetAlarmTime; RTC_CTRL_GET_TIME_T rGetTime; RTC_CTRL_GPIO_TIME_T rGPIO; RTC_CTRL_INIT_T rInit; RTC_CTRL_IS_CONFIG_VALID_T rIsConfigValid; RTC_CTRL_IS_FIRST_ON_T rIsFirstOn; RTC_CTRL_IS_MS_FIRSTPOWERON_T rIsMSFirstPowerOn; RTC_CTRL_IS_TIME_VALID_T rIsTimeValid; RTC_CTRL_PWIC_CHECK_POWERON_T rPwicCheckPowerOn; RTC_CTRL_PWIC_FIRST_POWERON_INIT_RTCTIME_T rPwicFirstPowerOnInitRTCTime; RTC_CTRL_CONFIG_SPAR_T rConfigSPARReg; RTC_CTRL_READ_XOSC_REG_T rReadXOSCReg; RTC_CTRL_SET_ALARM_TIME_T rSetAlarmTime; RTC_CTRL_SET_FIRST_POWERON_T rSetFirstPowerOn; RTC_CTRL_SET_TIME_T rSetTime; RTC_CTRL_SETBBPU_T rSetBBPU; RTC_CTRL_WRITE_XOSC_REG_T rWriteXOSCRef; RTC_CTRL_REGISTER_MODULE_ILM_INFO_T rRegisterModILMInfo; RTC_CTRL_WRITE_OSC32CON_REG_T rWriteOSC32CONReg;
# 1117 "interface/driver/peripheral/dcl.h"
  SKBD_CTRL_TIME_T rKBDCtrTime; SKBD_CTRL_KEYSUPPORT_T rKBDCtrlKeySupport; SKBD_CTRL_MULTIKEY_T rKBDCtrlMultiple; SKBD_CTRL_PEEKDATA_T rKBDCtrPeekData; SKBD_CTRL_KEYDATA_T rKBDCtrGetData; SKBD_CTRL_MODE_T rKBDCtrMode; SKBD_CTRL_KEY_CNT_T rKBDCtrkeyCnt; SKBD_CTRL_PUTKEY_T rKBDCtrPutKey; SKBD_CTRL_FIND_TWO_STEP_T rKBDCtrlFindTwoStepKey;


   HKBD_CTRL_KNUM_T rKBDCtrlKNUM; HKBD_CTRL_STA_MAP_T rKBDCtrlStaMap; HKBD_CTRL_KEY_STA_T rKBDCtrlKeySta; HKBD_CTRL_POWKEY_T rKBDCtrlPowerKeySta;
# 1139 "interface/driver/peripheral/dcl.h"
   SDIO_CTRL_REG_RW_T rSDIORegRw; SDIO_CTRL_DAT_RW_T rSDIODatRw; DCL_SDIO_function_id_enum rSDIOFunction; SDIO_CTRL_SET_BLK_SIZE_T rSDIOSetBlkSize; SDIO_CTRL_CHECK_INTR_T rSDIOCheckIntr; SDIO_CTRL_ENABLE_T rSDIOEnable; DCL_SD_BITWIDTH rSDIOBusWidth; SDIO_CTRL_GET_INFO_T rSDIOGetInfo; SDIO_CTRL_CMD52_T rSDIOCMD52; SDIO_CTRL_CMD53_T rSDIOCMD53; SDIO_CTRL_CMD_REG_T rSDIOCMDREG;



   USB_DRV_CTRL_EP_COMMON_FUNC_T rUSB_Common_Struct; USB_DRV_CTRL_REGISTER_DRV_INFO_T rDrv_Info; USB_DRV_CTRL_EP_CTRL_FUNC_1_T rEP_Ctrl_Func_1; USB_DRV_CTRL_USB_SET_ADDR_T rUSB_Set_Addr; USB_DRV_CTRL_USB_EP_INIT_T rUSB_Ep_Init; USB_DRV_CTRL_EP_ENABLE_T rEP_Enable; USB_DRV_CTRL_EP_DISABLE_T rEP_Disable; USB_DRV_CTRL_EP_CONFIG_TYPE_T rEP_Config_Type; USB_DRV_CTRL_EP_STATE_T rEP_Get_State; USB_DRV_CTRL_EP_CTRL_FUNC_2_T rEP_Ctrl_Func_2; USB_DRV_CTRL_EP_CTRL_FUNC_3_T rEP_Ctrl_Func_3; USB_DRV_CTRL_EP_CTRL_FUNC_4_T rEP_Ctrl_Func_4; USB_DRV_CTRL_EP_CTRL_FUNC_6_T rEP_Ctrl_Func_6; USB_DRV_CTRL_EP_FIFO_RW_T rEP_Fifo_Rw; USB_DRV_CTRL_EP_STALL_T rEP_Stall; USB_DRV_CTRL_GET_EP_STATUS_T rEP_Status; USB_DRV_CTRL_UPDATE_EPSTATE_T rEP_State; USB_DRV_CTRL_DMA_FUNC_T rDMA_Func; USB_DRV_CTRL_DMA_TIMER_FUNC_T rDMA_Timer_Func; USB_DRV_CTRL_DMA_CTRL_FUNC_1_T rDMA_Ctrl_Func_1; USB_DRV_CTRL_DMA_CTRL_FUNC_2_T rDMA_Ctrl_Func_2; USB_DRV_CTRL_DMA_SETUP_FUNC_T rDMA_Setup_Func; USB_DRV_CTRL_DMA_STATUS_FUNC_T rDMA_Status_Func; USB_DRV_CTRL_USB_TEST_MODE_FUNC_T rTest_Mode_Func; USB_DRV_CTRL_PHY_FUNC_T rPhy_Ctrl_Func; USB_DRV_CTRL_COM_TYPE_QUERY_T rComport_Ctrl_Func; USB_DRV_CTRL_COM_HIGH_SPEED_IF rComport_Ctrl_Fun2; USB_DRV_CTRL_COM_SEND_DATA rComport_Ctrl_Fun3; USB_DRV_CTRL_COM_GET_DATA rComport_Ctrl_Fun4; USB_DRV_CTRL_COM_RESPONSE rComport_Ctrl_Fun5; USB_DRV_CTRL_COM_SEND_ISR_DATA rComport_Ctrl_Fun6; USB_DRV_CTRL_COM_RB_THRESHOLD_EN rComport_Ctrl_Fun7; USB_DRV_CTRL_COM_FT_PORT rComport_Ctrl_Fun8; USB_DRV_CTRL_COM_INFO rComport_Ctrl_Fun10; USB_VIDEO_CTRL_FUNC1_T rVideo_Ctrl_Fun1; USB_VIDEO_CTRL_FUNC2_T rVideo_Ctrl_Fun2; USB_VIDEO_CTRL_FUNC3_T rVideo_Ctrl_Fun3; USB_IMAGE_CTRL_FUNC1_T rImage_Ctrl_Fun1; USB_DRV_CTRL_SET rComport_Ctrl_Fun9; USB_DRV_CTRL_COM_PUSH_DATA rComport_Ctrl_Fun11;
# 1159 "interface/driver/peripheral/dcl.h"
   SIM_CTRL_RST_T rSIMRst; SIM_CTRL_CMD_T rSIMCmd; SIM_CTRL_GET_CARD_INFO_T rSIMGetCardInfo; SIM_CTRL_SET_MAX_SPEED_T rSIMSetMaxSpeed; SIM_CTRL_SET_PREFER_PROTOCOL_T rSIMSetPreferProtocol; SIM_CTRL_SET_CLK_STOP_MODE_T rSIMSetClkStopMode; SIM_CTRL_TOUT_TEST_T rSIMToutTest; SIM_CTRL_GET_SPEED_T rSIMGetSpeed; SIM_CTRL_QUERY_9000_T rSIMQuery9000; SIM_CTRL_SET_SLT_RLT_T rSIMSetSltRlt;



   PMU_CTRL_LDO_BUCK_CTRL rPMULdoBuckCtrl; PMU_CTRL_LDO_BUCK_SET_EN rPMULdoBuckSetEn; PMU_CTRL_LDO_BUCK_GET_EN_STATUS rPMULdoBuckGetEnStatus; PMU_CTRL_LDO_BUCK_GET_QI_MODE rPMULdoBuckGetQiMode; PMU_CTRL_LDO_BUCK_SET_EN_FORCE rPMULdoBuckSetEnForce; PMU_CTRL_LDO_BUCK_SET_VOLTAGE rPMULdoBuckSetVoltage; PMU_CTRL_LDO_BUCK_SET_VOLTAGE_EN rPMULdoBuckSetVoltageEn; PMU_CTRL_LDO_BUCK_SET_SLEEP_VOLTAGE rPMULdoBuckSetSleepVoltage; PMU_CTRL_LDO_BUCK_SET_BURST_THRESHOLD rPMULdoBuckSetBurstThreshold; PMU_CTRL_LDO_BUCK_SET_CURRENT_LIMIT rPMULdoBuckSetCurrentLimit; PMU_CTRL_LDO_BUCK_SET_VOLTAGE_CALIBRATION_CODE rPMULdoBuckSetVoltageCalibrationCode; PMU_CTRL_LDO_BUCK_SET_BIAS_CURRENT_CALIBRATION_CODE rPMULdoBuckSetBiasCurrentCalibrationCode; PMU_CTRL_LDO_BUCK_SET_STB_EN rPMULdoBuckSetStbEn; PMU_CTRL_LDO_BUCK_SET_OC_AUTO_OFF rPMULdoBuckSetOcAutoOff; PMU_CTRL_LDO_BUCK_SET_RS rPMULdoBuckSetRs; PMU_CTRL_LDO_BUCK_SET_ON_SEL rPMULdoBuckSetOnSel; PMU_CTRL_LDO_BUCK_SET_SRCLKEN_SEL rPMULdoBuckSetSrclkenSel; PMU_CTRL_LDO_BUCK_SET_STB_TD rPMULdoBuckSetStbTd; PMU_CTRL_LDO_BUCK_SET_NDIS_EN rPMULdoBuckSetNdisEn; PMU_CTRL_LDO_BUCK_SET_OC_TD rPMULdoBuckSetOcTd; PMU_CTRL_LDO_BUCK_SET_OCFB_EN rPMULdoBuckSetOcfbEn; PMU_CTRL_LDO_BUCK_SET_VSIM_GPLDO_EN rPMULdoBuckSetVsimGpldoEn; PMU_CTRL_LDO_BUCK_SET_VSIM2_GPLDO_EN rPMULdoBuckSetVsim2GpldoEn; PMU_CTRL_LDO_BUCK_SET_SIM2_GPIO_EN rPMULdoBuckSetSim2GpioEn; PMU_CTRL_LDO_BUCK_SET_CCI_SRCLKEN rPMULdoBuckSetCciSrclken; PMU_CTRL_LDO_BUCK_GET_OC_STATUS rPMULdoBuckGetOcStatus; PMU_CTRL_LDO_BUCK_GET_QI_OC_STATUS rPMULdoBuckGetQiOcStatus; PMU_CTRL_LDO_BUCK_SET_OC_INT_EN rPMULdoBuckSetOcIntEn; PMU_CTRL_LDO_BUCK_CLEAR_OC_FLAG rPMULdoBuckClearOcFlag; PMU_CTRL_LDO_BUCK_GET_OC_FLAG rPMULdoBuckGetOcFlag; PMU_CTRL_LDO_BUCK_GET_VOLTAGE_LIST rPMULdoBuckGetVoltageList; PMU_CTRL_LDO_BUCK_SET_THER_SHDN_EN rPMULdoBuckSetTherShdnEn; PMU_CTRL_LDO_BUCK_SET_LP_MODE_SET rPMULdoBuckSetLpModeSet; PMU_CTRL_LDO_BUCK_GET_LP_MODE rPMULdoBuckGetLpMode; PMU_CTRL_LDO_BUCK_SET_LP_SEL rPMULdoBuckSetLpSel; PMU_CTRL_LDO_BUCK_SET_ON_CTRL rPMULdoBuckSetOnCtrl; PMU_CTRL_LDO_BUCK_SET_MODESET rPMULdoBuckSetModeset; PMU_CTRL_LDO_BUCK_SET_EN_CTRL rPMULdoBuckSetEnCtrl; PMU_CTRL_LDO_BUCK_SET_EN_SEL rPMULdoBuckSetEnSel; PMU_CTRL_LDO_BUCK_SET_SRCLK_MODE_SEL rPMULdoBuckSetSrclkModeSel; PMU_CTRL_LDO_BUCK_SET_SRCLK_EN_SEL rPMULdoBuckSetSrclkEnSel; PMU_CTRL_LDO_SET_CAL rPMULdoSetCal; PMU_CTRL_VPA_SET_VOSEL_MAP_EN rPMUVpaSetVoselMapEn; PMU_CTRL_VPA_SET_EN rPMUVpaSetEn; PMU_CTRL_VPA_SET_VOLTAGE rPMUVpaSetVoltage; PMU_CTRL_VPA_CTRL_SEL rPMUVpaCtrlSel; PMU_CTRL_VPA_GET_VOLTAGE_LIST rPMUVpaGetVoltageList; PMU_CTRL_VPA_SET_BAT_LOW rPMUVpaSetBatLow; PMU_CTRL_VPA_SET_FPWM rPMUVpaSetFpwm; PMU_CTRL_VPA_SET_VOLTAGE_SELECTION_TABLE rPMUVpaSetVoltageSelectionTable; PMU_CTRL_VPA_SET_MAP_SEL rPMUVpaSetMapSel; PMU_CTRL_VIBR_SET_DIMMING_ON_DUTY rPMUVibrSetDimmingOnDuty; PMU_CTRL_VRF18_SET_FPWM rPMUVrf18SetFpwm; PMU_CTRL_VRF18_SET_MODESET rPMUVrf18SetModeset; PMU_CTRL_VRF18_SET_BUCK_LDO_MODE rPMUVrf18SetBuckLdoMode; PMU_CTRL_VRF1_SET_MODESET_CKPDN_SET rPMUVrf1SetModesetCkpdnSet; PMU_CTRL_VRF1_SET_MODESET_CKPDN_CLR rPMUVrf1SetModesetCkpdnClr; PMU_CTRL_VRF1_GET_MODESET_CKPDN rPMUVrf1GetModesetCkpdn; PMU_CTRL_SIMLS_SET_SRST_CONF rPMUSimlsSetSrstConf; PMU_CTRL_SIMLS_SET_SCLK_CONF rPMUSimlsSetSclkConf; PMU_CTRL_SIMLS_SET_TDSEL rPMUSimlsSetTdsel; PMU_CTRL_SIMAP_SET_TDSEL rPMUSimapSetTdsel; PMU_CTRL_SIMLS_SET_RDSEL rPMUSimlsSetRdsel; PMU_CTRL_SIMAP_SET_RDSEL rPMUSimapSetRdsel; PMU_CTRL_SIM_SET_STB_SIO_MODE rPMUSimSetStbSioMode; PMU_CTRL_SIMRST_SET_GPIO_SET rPMUSimrstSetGpioSet; PMU_CTRL_SIMRST_SET_GPIO_CLR rPMUSimrstSetGpioClr; PMU_CTRL_OCTL_SET_SIM_AP_SRST rPMUOctlSetSimApSrst; PMU_CTRL_OCTL_SET_SIM_AP_SCLK rPMUOctlSetSimApSclk; PMU_CTRL_OCTL_SET_SIMLS_SRST rPMUOctlSetSimlsSrst; PMU_CTRL_OCTL_SET_SIMLS_SCLK rPMUOctlSetSimlsSclk; PMU_CTRL_SPK_SET_EN rPMUSpkSetEn; PMU_CTRL_SPK_SET_MODE rPMUSpkSetMode; PMU_CTRL_SPK_GET_MODE rPMUSpkGetMode; PMU_CTRL_SPK_SET_OC_AUTO_OFF rPMUSpkSetOcAutoOff; PMU_CTRL_SPK_SET_VOL_VALUE rPMUSpkSetVolValue; PMU_CTRL_SPK_GET_VOL_VALUE rPMUSpkGetVolValue; PMU_CTRL_SPK_SET_VOL rPMUSpkSetVol; PMU_CTRL_SPK_GET_VOL rPMUSpkGetVol; PMU_CTRL_SPK_SET_SLEW_RATE rPMUSpkSetSlewRate; PMU_CTRL_SPK_SET_CALIBR_EN rPMUSpkSetCalibrEn; PMU_CTRL_SPK_SET_CALIBR_SEL rPMUSpkSetCalibrSel; PMU_CTRL_FLASHLED_SET_EN rPMUFlashledSetEn; PMU_CTRL_FLASHLED_SET_MODE rPMUFlashledSetMode; PMU_CTRL_FLASHLED_SET_SEL rPMUFlashledSetSel; PMU_CTRL_KPLED_SET_EN rPMUKpledSetEn; PMU_CTRL_KPLED_SET_MODE rPMUKpledSetMode; PMU_CTRL_KPLED_SET_SEL rPMUKpledSetSel; PMU_CTRL_KPLED_SET_FREQUENCY_DIVISION rPMUKpledSetFrequencyDivision; PMU_CTRL_KPLED_SET_DIMMING_ON_DUTY rPMUKpledSetDimmingOnDuty; PMU_CTRL_CHR_SET_ADC_MEASURE_EN rPMUChrSetAdcMeasureEn; PMU_CTRL_CHR_SET_WDT_TIMER rPMUChrSetWdtTimer; PMU_CTRL_CHR_SET_WDT_INT_EN rPMUChrSetWdtIntEn; PMU_CTRL_CHR_SET_WDT_EN rPMUChrSetWdtEn; PMU_CTRL_CHR_SET_CHR_EN rPMUChrSetChrEn; PMU_CTRL_CHR_SET_CHR_FORCE_EN rPMUChrSetChrForceEn; PMU_CTRL_CHR_GET_CHR_DET_STATUS rPMUChrGetChrDetStatus; PMU_CTRL_CHR_GET_CHR_CURRENT rPMUChrGetChrCurrent; PMU_CTRL_CHR_GET_CHR_CURRENT_LIST rPMUChrGetChrCurrentList; PMU_CTRL_CHR_SET_CHR_CURRENT rPMUChrSetChrCurrent; PMU_CTRL_CHR_GET_CV_DETECTION_STATUS rPMUChrGetCvDetectionStatus; PMU_CTRL_CHR_SET_CV_DETECTION_EN rPMUChrSetCvDetectionEn; PMU_CTRL_CHR_SET_CV_DETECTION_VOLTAGE rPMUChrSetCvDetectionVoltage; PMU_CTRL_CHR_SET_CSDAC_EN rPMUChrSetCsdacEn; PMU_CTRL_CHR_GET_IS_BATTERY_ON rPMUChrGetIsBatteryOn; PMU_CTRL_CHR_GET_IS_CHR_VALID rPMUChrGetIsChrValid; PMU_CTRL_CHR_SET_HV_DETECTION_VOLTAGE rPMUChrSetHvDetectionVoltage; PMU_CTRL_CHR_GET_HV_DETECTION_VOLTAGE_LIST rPMUChrGetHvDetectionVoltageList; PMU_CTRL_CHR_SET_VBAT_OV_DETECTION_VOLTAGE rPMUChrSetVbatOvDetectionVoltage; PMU_CTRL_CHR_SET_BAT_HT_EN rPMUChrSetBatHtEn; PMU_CTRL_CHR_SET_OTG_BVALID_EN rPMUChrSetOtgBvalidEn; PMU_CTRL_CHR_SET_CV_MODE rPMUChrSetCvMode; PMU_CTRL_CHR_SET_CSDAC_MODE rPMUChrSetCsdacMode; PMU_CTRL_CHR_SET_TRACKING_EN rPMUChrSetTrackingEn; PMU_CTRL_CHR_SET_HWCV_EN rPMUChrSetHwcvEn; PMU_CTRL_CHR_SET_ULC_DET_EN rPMUChrSetUlcDetEn; PMU_CTRL_CHR_SET_BC11_PULLUP_EN rPMUChrSetBc11PullupEn; PMU_CTRL_CHR_SET_LOW_ICH_DB rPMUChrSetLowIchDb; PMU_CTRL_CHR_SET_VBAT_CV_CALIBRATION rPMUChrSetVbatCvCalibration; PMU_CTRL_CHR_GET_CC_DET rPMUChrGetCcDet; PMU_CTRL_BL_SET_EN rPMUBlSetEn; PMU_CTRL_BL_SET_INIT rPMUBlSetInit; PMU_CTRL_BL_GET_SUPPORT_LEVEL rPMUBlGetSupportLevel; PMU_CTRL_BL_GET_USE_PWM_QUERY rPMUBlGetUsePwmQuery; PMU_CTRL_BOOST_SET_EN rPMUBoostSetEn; PMU_CTRL_BOOST_SET_CURRENT_LIMIT rPMUBoostSetCurrentLimit; PMU_CTRL_BOOST_SET_CLK_CAL rPMUBoostSetClkCal; PMU_CTRL_BOOST_SET_SYNC_EN rPMUBoostSetSyncEn; PMU_CTRL_BOOST_SET_VOLTAGE rPMUBoostSetVoltage; PMU_CTRL_BOOST_SET_LEVEL rPMUBoostSetLevel; PMU_CTRL_ISINK_SET_EN rPMUIsinkSetEn; PMU_CTRL_ISINK_SET_MODE rPMUIsinkSetMode; PMU_CTRL_ISINK_SET_STEP rPMUIsinkSetStep; PMU_CTRL_ISINK_SET_FORCE_OFF rPMUIsinkSetForceOff; PMU_CTRL_ISINK_SET_DIMMING_ON_DUTY rPMUIsinkSetDimmingOnDuty; PMU_CTRL_ISINK_SET_FREQUENCY_DIVISION rPMUIsinkSetFrequencyDivision; PMU_CTRL_ADC_SET_RQST rPMUAdcSetRqst; PMU_CTRL_ADC_CLR_RQST rPMUAdcClrRqst; PMU_CTRL_ADC_GET_RDY_MD rPMUAdcGetRdyMd; PMU_CTRL_ADC_GET_OUT_MD rPMUAdcGetOutMd; PMU_CTRL_MISC_SET_RLED_EN rPMUMiscSetRledEn; PMU_CTRL_MISC_SET_GLED_EN rPMUMiscSetGledEn; PMU_CTRL_MISC_SET_BLED_EN rPMUMiscSetBledEn; PMU_CTRL_MISC_GET_CID rPMUMiscGetCid; PMU_CTRL_MISC_GET_ECO_VERSION rPMUMiscGetEcoVersion; PMU_CTRL_MISC_GET_HW_VERSION rPMUMiscGetHwVersion; PMU_CTRL_MISC_SET_REGISTER_VALUE rPMUMiscSetRegisterValue; PMU_CTRL_MISC_GET_REGISTER_VALUE rPMUMiscGetRegisterValue;



   PW_CTRL_SET_POWERON_REASON rPWSetPowerOnReason; PW_CTRL_GET_POWERON_REASON rPWGetPowerOnReason; PW_CTRL_IS_USB_BOOT rPWIsUsbBoot;



   CHR_DET_CTRL_QUERY_IS_CHR_IN_BY_PW rChrDetQueryIsChrInByPW; CHR_DET_CTRL_QUERY_CHR_TYPE rChrDetQueryChrType; CHR_DET_CTRL_REGISTER_USB_HISR rChrDetUSBHISR;







   SIMGPIO_CTRL_READ_T rSGRead; SIMGPIO_CTRL_WRITE_T rSGWrite; SIMGPIO_CTRL_SET_DIR_T rSGSetDir; SIMGPIO_CTRL_TRUN_ON_POWER rSGTurnOnPower; SIMGPIO_CTRL_READ_T rSGIRead;



   F32K_CLK_CTRL_F32K_IS_XOSC32_T rF32kIsXOSC32; F32K_CLK_CTRL_EOSC32_CALI_VAL_T rEosc32CaliVal;



   IDC_CTRL_DCB_CONFIG_T r_idc_ctrl_dcb_config; IDC_CTRL_BAUDRATE_T r_idc_ctrl_baudrate; IDC_CTRL_SET_FIFO_TRIGGER_T r_idc_ctrl_set_fifo_trigger; IDC_CTRL_PM_CONFIG_T r_idc_ctrl_pm_config; IDC_CTRL_SCHEDULE_EVENT_T r_idc_ctrl_schedule_event; IDC_CTRL_SCHEDULE_START_T r_idc_ctrl_schedule_start; IDC_CTRL_STOP_EVENT_T r_idc_ctrl_stop_event; IDC_CTRL_PURGE_T r_idc_ctrl_purge; IDC_CTRL_GET_SCHEDULE_STATUS_T r_idc_ctrl_get_schedule_status; IDC_CTRL_CHECK_EVENT_SEND_OUT_T r_idc_ctrl_check_event_send_out; IDC_CTRL_PIN_CONFIG_T r_idc_ctrl_pin_config;

} DCL_CTRL_DATA_T;







# 1 "interface/driver/peripheral/dcl_gpt.h" 1
# 280 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclSGPT_Initialize(void);
# 299 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_HANDLE DclSGPT_Open(DCL_DEV dev, DCL_FLAGS flags);
# 315 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclSGPT_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 331 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclSGPT_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 347 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclSGPT_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 363 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclSGPT_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 397 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclSGPT_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 414 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclSGPT_Close(DCL_HANDLE *handle);
# 430 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclFGPT_Initialize(void);
# 450 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_HANDLE DclFGPT_Open(DCL_DEV dev, DCL_FLAGS flags);
# 466 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclFGPT_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 482 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclFGPT_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 498 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclFGPT_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 514 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclFGPT_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 541 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclFGPT_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 559 "interface/driver/peripheral/dcl_gpt.h"
extern DCL_STATUS DclFGPT_Close(DCL_HANDLE handle);
# 1198 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_gpio.h" 1
# 627 "interface/driver/peripheral/dcl_gpio.h"
extern DCL_STATUS DclGPIO_Initialize(void);
# 644 "interface/driver/peripheral/dcl_gpio.h"
extern DCL_HANDLE DclGPIO_Open(DCL_DEV dev, DCL_FLAGS flags);
# 660 "interface/driver/peripheral/dcl_gpio.h"
extern DCL_STATUS DclGPIO_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 676 "interface/driver/peripheral/dcl_gpio.h"
extern DCL_STATUS DclGPIO_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 692 "interface/driver/peripheral/dcl_gpio.h"
extern DCL_STATUS DclGPIO_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 708 "interface/driver/peripheral/dcl_gpio.h"
extern DCL_STATUS DclGPIO_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 809 "interface/driver/peripheral/dcl_gpio.h"
extern DCL_STATUS DclGPIO_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 825 "interface/driver/peripheral/dcl_gpio.h"
extern DCL_STATUS DclGPIO_Close(DCL_HANDLE handle);
# 1201 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_uart.h" 1
# 1229 "interface/driver/peripheral/dcl_uart.h"
typedef DCL_STATUS(*SeriPort_HANLDER_CB)(DCL_DEV dev, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
typedef struct
{
 SIO_TYPE_T DevType;
 SeriPort_HANLDER_CB SeriportHandlerCb;
}Seriport_HANDLER_T;




typedef enum _tty_flag {



   TTY_FLAG_NEW_TX = (1 << 0),



   TTY_FLAG_NEW_RX = (1 << 1),
} tty_flag_e;

typedef DCL_STATUS(*tty_txdone_cb)(DCL_HANDLE handle, module_type source_id, tty_io_request_t *tx_ior);
typedef DCL_STATUS(*tty_rx_cb)(DCL_HANDLE handle, module_type source_id, tty_io_request_t *rx_ior);
typedef DCL_STATUS(*tty_drv_state_change_cb)(DCL_HANDLE handle, tty_drv_state_e state);
# 1271 "interface/driver/peripheral/dcl_uart.h"
extern DCL_HANDLE DclSerialPort_Open(DCL_DEV dev, DCL_FLAGS flags);
# 1283 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 1295 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 1305 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_Close(DCL_HANDLE handle);
# 1315 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_Initialize(void);
# 1331 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_UpModuleInit(DCL_HANDLE handle, module_type module_id, int flag);
# 1346 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_UpModuleReinit(DCL_HANDLE handle, module_type module_id, int flag);
# 1357 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_UpModuleDeinit(DCL_HANDLE handle);
# 1372 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_UpModuleRegisterCb(DCL_HANDLE handle, tty_rx_cb rx_cb, tty_txdone_cb tx_done_cb, tty_drv_state_change_cb drv_state_change_cb);
# 1383 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_UpModuleTransmit(DCL_HANDLE handle, tty_io_request_t *ior);
# 1395 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_UpModuleTransmitLight(DCL_HANDLE handle, tty_io_request_t *ior);
# 1406 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_UpModuleAssignRxIor(DCL_HANDLE handle, tty_io_request_t *rx_ior);
# 1420 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_DrvRegisterCb(DCL_HANDLE handle, Seriport_HANDLER_T* seriport_handler);
# 1431 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_DrvDeRegisterCb(DCL_HANDLE handle);
# 1441 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_DrvAttach(DCL_HANDLE handle);
# 1451 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_DrvDetach(DCL_HANDLE handle);
# 1463 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_DrvRx(DCL_HANDLE handle, module_type source_id, void *rx_ior);
# 1476 "interface/driver/peripheral/dcl_uart.h"
extern DCL_STATUS DclSerialPort_DrvTxDone(DCL_HANDLE handle, module_type source_id, void *tx_ior);
# 1204 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_wdt.h" 1
# 226 "interface/driver/peripheral/dcl_wdt.h"
extern DCL_STATUS DclWDT_Initialize(void);
# 243 "interface/driver/peripheral/dcl_wdt.h"
extern DCL_HANDLE DclWDT_Open(DCL_DEV dev, DCL_FLAGS flags);
# 258 "interface/driver/peripheral/dcl_wdt.h"
extern DCL_STATUS DclWDT_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 273 "interface/driver/peripheral/dcl_wdt.h"
extern DCL_STATUS DclWDT_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 288 "interface/driver/peripheral/dcl_wdt.h"
extern DCL_STATUS DclWDT_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 309 "interface/driver/peripheral/dcl_wdt.h"
extern DCL_STATUS DclWDT_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 344 "interface/driver/peripheral/dcl_wdt.h"
extern DCL_STATUS DclWDT_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 359 "interface/driver/peripheral/dcl_wdt.h"
extern DCL_STATUS DclWDT_Close(DCL_HANDLE handle);
# 1207 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_adc.h" 1
# 436 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclSADC_Initialize(void);
# 453 "interface/driver/peripheral/dcl_adc.h"
extern DCL_HANDLE DclSADC_Open(DCL_DEV dev, DCL_FLAGS flags);
# 468 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclSADC_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 483 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclSADC_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 498 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclSADC_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 513 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclSADC_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 540 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclSADC_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 555 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclSADC_Close(DCL_HANDLE handle);
# 571 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclHADC_Initialize(void);
# 588 "interface/driver/peripheral/dcl_adc.h"
extern DCL_HANDLE DclHADC_Open(DCL_DEV dev, DCL_FLAGS flags);
# 603 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclHADC_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 618 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclHADC_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 633 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclHADC_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 648 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclHADC_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 675 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclHADC_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 690 "interface/driver/peripheral/dcl_adc.h"
extern DCL_STATUS DclHADC_Close(DCL_HANDLE handle);
# 1210 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_bmt.h" 1
# 317 "interface/driver/peripheral/dcl_bmt.h"
extern DCL_STATUS DclBMT_Initialize(void);
# 337 "interface/driver/peripheral/dcl_bmt.h"
extern DCL_HANDLE DclBMT_Open(DCL_DEV dev, DCL_FLAGS flags);
# 352 "interface/driver/peripheral/dcl_bmt.h"
extern DCL_STATUS DclBMT_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 367 "interface/driver/peripheral/dcl_bmt.h"
extern DCL_STATUS DclBMT_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 382 "interface/driver/peripheral/dcl_bmt.h"
extern DCL_STATUS DclBMT_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 397 "interface/driver/peripheral/dcl_bmt.h"
extern DCL_STATUS DclBMT_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 438 "interface/driver/peripheral/dcl_bmt.h"
extern DCL_STATUS DclBMT_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 456 "interface/driver/peripheral/dcl_bmt.h"
extern DCL_STATUS DclBMT_Close(DCL_HANDLE handle);
# 1213 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_pfc.h" 1
# 257 "interface/driver/peripheral/dcl_pfc.h"
extern DCL_STATUS DclPFC_Initialize(void);
# 277 "interface/driver/peripheral/dcl_pfc.h"
extern DCL_HANDLE DclPFC_Open(DCL_DEV dev, DCL_FLAGS flags);
# 292 "interface/driver/peripheral/dcl_pfc.h"
extern DCL_STATUS DclPFC_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 307 "interface/driver/peripheral/dcl_pfc.h"
extern DCL_STATUS DclPFC_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 322 "interface/driver/peripheral/dcl_pfc.h"
extern DCL_STATUS DclPFC_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 342 "interface/driver/peripheral/dcl_pfc.h"
extern DCL_STATUS DclPFC_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 371 "interface/driver/peripheral/dcl_pfc.h"
extern DCL_STATUS DclPFC_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 389 "interface/driver/peripheral/dcl_pfc.h"
extern DCL_STATUS DclPFC_Close(DCL_HANDLE handle);
# 1216 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_rtc.h" 1
# 673 "interface/driver/peripheral/dcl_rtc.h"
extern DCL_STATUS DclRTC_Initialize(void);
# 693 "interface/driver/peripheral/dcl_rtc.h"
extern DCL_HANDLE DclRTC_Open(DCL_DEV dev, DCL_FLAGS flags);
# 708 "interface/driver/peripheral/dcl_rtc.h"
extern DCL_STATUS DclRTC_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 723 "interface/driver/peripheral/dcl_rtc.h"
extern DCL_STATUS DclRTC_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 738 "interface/driver/peripheral/dcl_rtc.h"
extern DCL_STATUS DclRTC_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 763 "interface/driver/peripheral/dcl_rtc.h"
extern DCL_STATUS DclRTC_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 870 "interface/driver/peripheral/dcl_rtc.h"
extern DCL_STATUS DclRTC_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 888 "interface/driver/peripheral/dcl_rtc.h"
extern DCL_STATUS DclRTC_Close(DCL_HANDLE handle);
# 1219 "interface/driver/peripheral/dcl.h" 2
# 1230 "interface/driver/peripheral/dcl.h"
# 1 "interface/driver/peripheral/DclH_kbd.h" 1
# 167 "interface/driver/peripheral/DclH_kbd.h"
typedef void (*KBDH_EVENT_FUNC)(DCL_EVENT event, void* param) ;
# 183 "interface/driver/peripheral/DclH_kbd.h"
extern DCL_STATUS DclHKBD_Initialize(void);
# 206 "interface/driver/peripheral/DclH_kbd.h"
extern DCL_HANDLE DclHKBD_Open(DCL_DEV dev, DCL_FLAGS flags);
# 236 "interface/driver/peripheral/DclH_kbd.h"
extern DCL_STATUS DclHKBD_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 253 "interface/driver/peripheral/DclH_kbd.h"
extern DCL_STATUS DclHKBD_Close(DCL_HANDLE handle);
# 280 "interface/driver/peripheral/DclH_kbd.h"
extern DCL_STATUS DclHKBD_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, KBDH_EVENT_FUNC callback);
# 1231 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/DclS_kbd.h" 1
# 237 "interface/driver/peripheral/DclS_kbd.h"
extern DCL_STATUS DclSKBD_Initialize(void);
# 260 "interface/driver/peripheral/DclS_kbd.h"
extern DCL_HANDLE DclSKBD_Open(DCL_DEV dev, DCL_FLAGS flags);
# 276 "interface/driver/peripheral/DclS_kbd.h"
extern DCL_STATUS DclSKBD_Close(DCL_HANDLE handle);
# 304 "interface/driver/peripheral/DclS_kbd.h"
extern DCL_STATUS DclSKBD_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 324 "interface/driver/peripheral/DclS_kbd.h"
extern DCL_STATUS DclSKBD_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event,PFN_DCL_CALLBACK callback);
# 1234 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_sts.h" 1
# 498 "interface/driver/peripheral/dcl_sts.h"
extern DCL_STATUS DclSTS_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 549 "interface/driver/peripheral/dcl_sts.h"
extern DCL_STATUS DclSTS_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 569 "interface/driver/peripheral/dcl_sts.h"
extern DCL_STATUS DclSTS_Initialize(void);
# 591 "interface/driver/peripheral/dcl_sts.h"
extern DCL_HANDLE DclSTS_Open(DCL_DEV dev, DCL_FLAGS flags);
# 614 "interface/driver/peripheral/dcl_sts.h"
extern DCL_STATUS DclSTS_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 640 "interface/driver/peripheral/dcl_sts.h"
extern DCL_STATUS DclSTS_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 661 "interface/driver/peripheral/dcl_sts.h"
extern DCL_STATUS DclSTS_Close(DCL_HANDLE handle);
# 1237 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_msdc.h" 1
# 676 "interface/driver/peripheral/dcl_msdc.h"
extern DCL_STATUS DclSD_Initialize(void);
extern DCL_HANDLE DclSD_Open(DCL_DEV dev, DCL_FLAGS flags);
extern DCL_STATUS DclSD_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
extern DCL_STATUS DclSD_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
extern DCL_STATUS DclSD_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
extern DCL_STATUS DclSD_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
extern DCL_STATUS DclSD_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
extern DCL_STATUS DclSD_Close(DCL_HANDLE handle);
# 1240 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h" 1
# 1053 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
typedef DCL_STATUS (*DCL_USB_CTRL_API)(DCL_CTRL_DATA_T *data);
typedef void(*DCL_USB_CLASS_API)(DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 1071 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
extern DCL_STATUS DclUSB_DRV_Initialize(void);
# 1088 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
extern DCL_HANDLE DclUSB_DRV_Open(DCL_DEV dev, DCL_FLAGS flags);
# 1103 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
extern DCL_STATUS DclUSB_DRV_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 1118 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
extern DCL_STATUS DclUSB_DRV_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 1133 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
extern DCL_STATUS DclUSB_DRV_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 1148 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
extern DCL_STATUS DclUSB_DRV_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, DCL_UINT8 index,void *class_handler);
# 1175 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
extern DCL_STATUS DclUSB_DRV_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 1190 "interface/driver/connectivity/usb_driver/dcl_usb_drv.h"
extern DCL_STATUS DclUSB_DRV_Close(DCL_HANDLE handle);
# 1243 "interface/driver/peripheral/dcl.h" 2
# 1254 "interface/driver/peripheral/dcl.h"
# 1 "interface/driver/peripheral/dcl_sim.h" 1
# 422 "interface/driver/peripheral/dcl_sim.h"
DCL_HANDLE DclSIM_Open(DCL_DEV dev, DCL_FLAGS flags);
# 441 "interface/driver/peripheral/dcl_sim.h"
DCL_STATUS DclSIM_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 478 "interface/driver/peripheral/dcl_sim.h"
DCL_STATUS DclSIM_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 496 "interface/driver/peripheral/dcl_sim.h"
DCL_STATUS DclSIM_Close(DCL_HANDLE handle);
DCL_STATUS DclSIM_Initialize(void);
# 1255 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_pmu.h" 1
# 2750 "interface/driver/peripheral/dcl_pmu.h"
typedef DCL_STATUS (*PMU_CONTROL_HANDLER)(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 2766 "interface/driver/peripheral/dcl_pmu.h"
extern DCL_STATUS DclPMU_Initialize(void);
# 2783 "interface/driver/peripheral/dcl_pmu.h"
extern DCL_HANDLE DclPMU_Open(DCL_DEV dev, DCL_FLAGS flags);
# 2798 "interface/driver/peripheral/dcl_pmu.h"
extern DCL_STATUS DclPMU_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 2813 "interface/driver/peripheral/dcl_pmu.h"
extern DCL_STATUS DclPMU_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 2828 "interface/driver/peripheral/dcl_pmu.h"
extern DCL_STATUS DclPMU_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 2843 "interface/driver/peripheral/dcl_pmu.h"
extern DCL_STATUS DclPMU_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 2999 "interface/driver/peripheral/dcl_pmu.h"
extern DCL_STATUS DclPMU_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 3014 "interface/driver/peripheral/dcl_pmu.h"
extern DCL_STATUS DclPMU_Close(DCL_HANDLE handle);
# 1258 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_pw.h" 1
# 278 "interface/driver/peripheral/dcl_pw.h"
extern DCL_STATUS DclPW_Initialize(void);
# 295 "interface/driver/peripheral/dcl_pw.h"
extern DCL_HANDLE DclPW_Open(DCL_DEV dev, DCL_FLAGS flags);
# 310 "interface/driver/peripheral/dcl_pw.h"
extern DCL_STATUS DclPW_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 325 "interface/driver/peripheral/dcl_pw.h"
extern DCL_STATUS DclPW_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 340 "interface/driver/peripheral/dcl_pw.h"
extern DCL_STATUS DclPW_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 355 "interface/driver/peripheral/dcl_pw.h"
extern DCL_STATUS DclPW_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 402 "interface/driver/peripheral/dcl_pw.h"
extern DCL_STATUS DclPW_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 417 "interface/driver/peripheral/dcl_pw.h"
extern DCL_STATUS DclPW_Close(DCL_HANDLE handle);
# 1261 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_chr_det.h" 1
# 236 "interface/driver/peripheral/dcl_chr_det.h"
extern DCL_STATUS Dcl_Chr_Det_Initialize(void);
# 253 "interface/driver/peripheral/dcl_chr_det.h"
extern DCL_HANDLE Dcl_Chr_Det_Open(DCL_DEV dev, DCL_FLAGS flags);
# 268 "interface/driver/peripheral/dcl_chr_det.h"
extern DCL_STATUS Dcl_Chr_Det_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 283 "interface/driver/peripheral/dcl_chr_det.h"
extern DCL_STATUS Dcl_Chr_Det_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN buf_len, DCL_OPTIONS options);
# 298 "interface/driver/peripheral/dcl_chr_det.h"
extern DCL_STATUS Dcl_Chr_Det_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 313 "interface/driver/peripheral/dcl_chr_det.h"
extern DCL_STATUS Dcl_Chr_Det_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 360 "interface/driver/peripheral/dcl_chr_det.h"
extern DCL_STATUS Dcl_Chr_Det_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 375 "interface/driver/peripheral/dcl_chr_det.h"
extern DCL_STATUS Dcl_Chr_Det_Close(DCL_HANDLE handle);
# 1264 "interface/driver/peripheral/dcl.h" 2





# 1 "interface/driver/peripheral/dcl_sim_gpio.h" 1
# 170 "interface/driver/peripheral/dcl_sim_gpio.h"
DCL_STATUS DclSIMGPIO_Initialize(void);
DCL_HANDLE DclSIMGPIO_Open(DCL_DEV dev, DCL_FLAGS flags);
DCL_STATUS DclSIMGPIO_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
DCL_STATUS DclSIMGPIO_Close(DCL_HANDLE handle);
# 1270 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_f32k_clk.h" 1
# 184 "interface/driver/peripheral/dcl_f32k_clk.h"
extern DCL_STATUS DclF32K_Initialize(void);
# 204 "interface/driver/peripheral/dcl_f32k_clk.h"
extern DCL_HANDLE DclF32K_Open(DCL_DEV dev, DCL_FLAGS flags);
# 229 "interface/driver/peripheral/dcl_f32k_clk.h"
extern DCL_STATUS DclF32K_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 247 "interface/driver/peripheral/dcl_f32k_clk.h"
extern DCL_STATUS DclF32K_Close(DCL_HANDLE handle);
# 1273 "interface/driver/peripheral/dcl.h" 2


# 1 "interface/driver/peripheral/dcl_idc.h" 1
# 334 "interface/driver/peripheral/dcl_idc.h"
extern DCL_STATUS DclIDC_GetSupport(IDC_SUPPORT_T *support);
# 350 "interface/driver/peripheral/dcl_idc.h"
extern DCL_STATUS DclIDC_Initialize(void);
# 372 "interface/driver/peripheral/dcl_idc.h"
extern DCL_HANDLE DclIDC_Open(DCL_DEV dev, kal_uint32 flags);
# 389 "interface/driver/peripheral/dcl_idc.h"
extern DCL_STATUS DclIDC_ReadData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 406 "interface/driver/peripheral/dcl_idc.h"
extern DCL_STATUS DclIDC_WriteData(DCL_HANDLE handle, DCL_BUFF *buff, DCL_BUFF_LEN *buf_len, DCL_OPTIONS options);
# 423 "interface/driver/peripheral/dcl_idc.h"
extern DCL_STATUS DclIDC_Configure(DCL_HANDLE handle, DCL_CONFIGURE_T *configure);
# 440 "interface/driver/peripheral/dcl_idc.h"
extern DCL_STATUS DclIDC_RegisterCallback(DCL_HANDLE handle, DCL_EVENT event, PFN_DCL_CALLBACK callback);
# 492 "interface/driver/peripheral/dcl_idc.h"
extern DCL_STATUS DclIDC_Control(DCL_HANDLE handle, DCL_CTRL_CMD cmd, DCL_CTRL_DATA_T *data);
# 512 "interface/driver/peripheral/dcl_idc.h"
extern DCL_STATUS DclIDC_conn_txrx_count(kal_bool is_start);
# 531 "interface/driver/peripheral/dcl_idc.h"
extern DCL_STATUS DclIDC_Close(DCL_HANDLE handle);
# 1276 "interface/driver/peripheral/dcl.h" 2
# 73 "interface/modem/l1/fdd/external/ul1cal.h" 2

# 1 "interface/modem/mml1/mml1_rf_global.h" 1
# 300 "interface/modem/mml1/mml1_rf_global.h"
# 1 "interface/modem/mml1/mml1_mipi_public.h" 1
# 71 "interface/modem/mml1/mml1_mipi_public.h"
typedef kal_uint8 USID_T;
typedef kal_uint8 PRODUCT_ID_T;
typedef kal_uint16 MANUFACTORY_ID_T;
typedef kal_uint8 MIPI_PORT_T;
# 109 "interface/modem/mml1/mml1_mipi_public.h"
typedef struct
{
   kal_uint16 mipi_addr;
   kal_uint32 mipi_data;
}MML1_MIPI_ADDR_DATA_T;

typedef struct
{
   kal_uint16 mipi_elm_type;
   kal_uint16 mipi_port_sel;
   kal_uint16 mipi_data_seq;
   kal_uint16 mipi_usid;
   MML1_MIPI_ADDR_DATA_T mipi_addr_data;
   kal_uint32 mipi_wait_time;
}MML1_MIPI_INITIAL_CW_T;

typedef struct
{
   kal_uint16 usid_procedure;
   MIPI_PORT_T mipi_port_sel;
   USID_T current_usid;
   PRODUCT_ID_T product_id;
   MANUFACTORY_ID_T manufactory_id;
   USID_T new_usid;
}MML1_MIPI_USID_CHANGE_T;
# 301 "interface/modem/mml1/mml1_rf_global.h" 2
# 351 "interface/modem/mml1/mml1_rf_global.h"
typedef struct
{
   kal_uint16 CBW;


   kal_int16 txga_slope_result[(3)][((6) - 1)];


   kal_int16 txga_comp_filter_tap[(12)][(7)];
   kal_uint16 data_valid;


   kal_int16 txga_tone_pwr[(3)][(6)];
   kal_uint16 txga_cal_freq[(3)][(6)];
   kal_uint16 rsv;
}RFC_TXGA_COMP_T;

typedef struct
{
 kal_int16 rxiq_gain_mismatch_comp[(6)];
 kal_int16 rxiq_phase_mismatch_comp[(6)];
 kal_int16 rxiq_filter_coef[(6)][(7)];
}RFC_RXIQ_COMP_T;

typedef struct
{
 kal_int16 txiq_gain_mismatch_comp;
 kal_int16 txiq_phase_mismatch_comp;
 kal_int16 txiq_real_dc_comp;
 kal_int16 txiq_image_dc_comp;
}RFC_TXIQ_COMP_T;

typedef struct
{
   kal_uint32 poc_data_status;


   kal_uint32 band_idx_to_band_num_table[(14)];


   RFC_RXIQ_COMP_T rx1iq_comp[(14)];
   RFC_RXIQ_COMP_T rx2iq_comp[(14)];


   kal_int16 rx1iq_re_dc[(14)][(4)][(6)];
   kal_int16 rx1iq_im_dc[(14)][(4)][(6)];
   kal_int16 rx2iq_re_dc[(14)][(4)][(6)];
   kal_int16 rx2iq_im_dc[(14)][(4)][(6)];


   kal_int16 detiq_gain_mismatch_comp[(14)][(16)];
   kal_int16 detiq_phase_mismatch_comp[(14)][(16)];
   kal_int16 detiq_real_dc_comp[(14)][(16)];
   kal_int16 detiq_image_dc_comp[(14)][(16)];


   kal_int16 det_gain_table[(14)][(16)];


   kal_int16 tx_rcf_csel[2];


   RFC_TXIQ_COMP_T txiq_gain_phase_dc_comp[(14)][(30)];


   kal_int16 tx_gain_table[(14)][(30)];


   RFC_TXGA_COMP_T tx_ga_comp[(14)];




   kal_uint32 det_coarse_dcoc[2];




   kal_uint32 det_fe_gain_table[(14)];


   kal_int32 txiq_gain_mismatch_comp[(14)];
   kal_int32 txiq_phase_mismatch_comp[(14)];

}RFC_DATABASE_T;

typedef enum
{
   MML1_RF_2G = 0x0001,
   MML1_RF_3G_FDD = 0x0002,
   MML1_RF_3G_TDD = 0x0004,
   MML1_RF_LTE = 0x0008,
   MML1_RF_MMRF = 0x0010,
}MML1_RF_RAT_T;

typedef enum
{
   MML1_RF_MT6169 = 0x0001,
   MML1_RF_MT6166 = 0x0002,
   MML1_RF_MT6165 = 0x0003,
   MML1_RF_MAX = 0xFFFE,
}MML1_RF_CHIP_T;

typedef enum
{
   MML1_RF_RFIC1 = 0x0001,
   MML1_RF_RFIC2 = 0x0002,
}MML1_RF_RFIC_INFO_T;

typedef enum
{
   MML1_RF_MD1 = 0x0001,
   MML1_RF_MD2 = 0x0002,
   MML1_RF_MD3 = 0x0003,
}MML1_RF_MD_T;
# 508 "interface/modem/mml1/mml1_rf_global.h"
typedef kal_uint16 (*Mml1CustomFunction)(void *usrDataPtr);


typedef enum
{
   MML1_CUSTOM_NULL_ACTION = (0),
   MML1_CUSTOM_BASE_PROC_ACTION = (0),
   MML1_CUSTOM_GPIO_DETECTION = (1),
   MML1_CUSTOM_ADC_DETECTION = (2),
   MML1_CUSTOM_BARCODE_DETECTION = (3),



   MML1_CUSTOM_MAX_PROC_ACTIONS
} Mml1CustomActionId;
# 548 "interface/modem/mml1/mml1_rf_global.h"
typedef struct
{
   kal_int32 gpio_get_pin_rpc_status;
   kal_int16 gpio_return_pin_num[(3)];
   kal_uint32 gpio_pin_value[(3)];
   kal_uint32 gpio_combined_pin_value;
}Mml1RfDrdiGpioResult;


typedef struct
{


   kal_char gpioPinNameString[(34)];


   kal_uint32 gpioPinNum;



   kal_uint32 gpioReadPinValue;
} Mml1RfDrdiGpioGetPinValueInfo;


typedef struct
{

   kal_uint16 adcMeasCountOrder;
   kal_uint32 adcMaxVolt;
   kal_uint16 adcBit;

   kal_int32 adc_get_ch_num_rpc_status;
   DCL_STATUS adc_dcl_handle_status;
   kal_uint32 adc_get_ch_num;
   kal_uint32 adc_dac_read_result;
   kal_uint32 adc_volt_translate_result;
}Mml1RfDrdiAdcResult;


typedef struct
{

   kal_uint8 barcode_read_digit_num;
   kal_uint8 barcode_digit_value_2;
   kal_uint8 barcode_digit_value_3;
   kal_uint8 barcode_num_in_calc;
   kal_char *barcode_digits;


   kal_bool barcode_lid_read_status;
   kal_uint8 barcode_digit_read_result;
   kal_uint8 barcode_asm_digit_no;
}Mml1RfDrdiBarcodeResult;
# 611 "interface/modem/mml1/mml1_rf_global.h"
typedef struct
{
   kal_uint8 mml1_custom_debug_enable;
   kal_uint8 mml1_custom_gpio_set_nums;
   kal_uint8 mml1_custom_adc_set_nums;
   kal_uint8 mml1_custom_nvram_barcode_set_nums;
   kal_uint8 mml1_custom_gpio_nums_in_calc;
   kal_uint8 mml1_custom_ADC_nums_in_calc;
   kal_uint8 mml1_custom_barcode_nums_in_calc;
   kal_uint8 mml1_custom_first_index;
   kal_uint8 mml1_custom_second_index;
   kal_uint8 mml1_custom_third_index;
   kal_uint8 mml1_custom_first_index_base;
   kal_uint8 mml1_custom_gpio_num_of_detect_pins_in_use;
   kal_uint8 mml1_custom_adc_level_total;
   kal_uint8 mml1_custom_barcode_read_digit_num;
   kal_uint8 mml1_custom_barcode_digit_value_1;
   kal_uint8 mml1_custom_barcode_digit_value_2;
   kal_uint8 mml1_custom_barcode_digit_value_3;
   kal_uint8 mml1_custom_adc_calibrate_enable;
   kal_uint8 mml1_custom_adc_bits;
   kal_uint16 mml1_custom_adc_meas_count_2_order;
   kal_uint16 mml1_custom_total_set_nums;
   kal_uint32 mml1_custom_adc_max_input_voltage;
}Mml1RfDrdiCustomParam;


typedef struct
{
   kal_uint16 combined_config_index;
   kal_uint8 first_config_index_base;
   kal_uint8 second_config_index_base;
   kal_uint8 third_config_index_base;

   kal_int32 gpio_get_pin_rpc_status;
   kal_uint32 gpio_return_pin_num[(3)];
   kal_uint32 gpio_pin_value[(3)];
   kal_uint32 gpio_combined_pin_value;
   kal_int32 adc_get_ch_num_rpc_status;
   DCL_STATUS adc_dcl_handle_status;
   DCL_STATUS adc_cal_dcl_handle_status;
   kal_uint32 adc_get_ch_num;
   kal_uint32 adc_dac_read_result;
   kal_uint32 adc_volt_translate_result;
   kal_uint8 adc_volt_level;
   kal_bool barcode_lid_read_status;
   kal_uint8 barcode_digit_read_result;



}Mml1RfDidiDynamicInitDebug;


typedef struct
{



   kal_uint16 mml1_custom_CombinedConfigIdx;


   kal_uint16 mml1_custom_GGE_ReMapIdx;
   kal_uint16 mml1_custom_UMTS_ReMapIdx;
   kal_uint16 mml1_custom_TDS_ReMapIdx;
   kal_uint16 mml1_custom_LTE_ReMapIdx;
   kal_uint16 mml1_custom_MMRF_ReMapIdx;




   kal_uint16 mml1_custom_FirstIdxBase;
   kal_uint16 mml1_custom_SecondIdxBase;
   kal_uint16 mml1_custom_ThirdIdxBase;


   Mml1RfDidiDynamicInitDebug mml1_dyn_init_dbg_info;



   Mml1RfDrdiCustomParam mml1_custom_param;
} Mml1RfDrdiDynamicInitParam;




# 695 "interface/modem/mml1/mml1_rf_global.h"
#pragma pack(push, 1)
# 695 "interface/modem/mml1/mml1_rf_global.h"


typedef struct
{
# 710 "interface/modem/mml1/mml1_rf_global.h"
   kal_uint8 reqMask;


   kal_uint8 gpioValidPinMask;



   kal_uint8 gpioPinName[(3)][(34)];


   kal_uint32 gpioPinNum[(3)];


   kal_uint8 adcChName[(33)];


   kal_uint32 adcChNum;
   kal_uint32 adcChMeasCount;
}Mml1RfDrdiIpcRpcGpioAdcInput;


# 730 "interface/modem/mml1/mml1_rf_global.h"
#pragma pack(pop)
# 730 "interface/modem/mml1/mml1_rf_global.h"






# 735 "interface/modem/mml1/mml1_rf_global.h"
#pragma pack(push, 1)
# 735 "interface/modem/mml1/mml1_rf_global.h"


typedef struct
{


   kal_uint32 gpioPinNum[(3)];


   kal_uint32 gpioPinValue[(3)];


   kal_uint32 adcChNum;


   kal_uint32 adcChMeasSum;



}Mml1RfDrdiIpcRpcGpioAdcOutput;


# 756 "interface/modem/mml1/mml1_rf_global.h"
#pragma pack(pop)
# 756 "interface/modem/mml1/mml1_rf_global.h"



typedef struct
{
   MML1_MIPI_INITIAL_CW_T *initTable_p;
   MML1_MIPI_USID_CHANGE_T *changeUsidTable_p;
}Mml1CustomDynamicInitMipiData;




extern kal_uint16 MML1_DRDI_STATUS;
extern kal_uint16 MML1_DRDI_REMAP_ENABLE;
extern const Mml1CustomFunction mml1CustomActionTable[MML1_CUSTOM_MAX_PROC_ACTIONS];
extern kal_uint32 mml1_custom_adc_volt_to_lvl[][2];
extern kal_char mml1_custom_barcode_digits[];
extern kal_uint16 mml1_custom_total_set_nums;
extern kal_uint16 mml1_custom_mmrf_real_set_nums;
extern kal_uint16 mml1_tas_for_c2k_2gcs_prefer_en;
# 785 "interface/modem/mml1/mml1_rf_global.h"
extern kal_uint32 MML1_CLK_EN_TABLE[4];





void MML1_RF_POWER_ON(kal_uint32 is_wake_up, MML1_RF_RAT_T rat_type);
void MML1_RF_POWER_OFF(MML1_RF_RAT_T rat_type);
void MML1_RF_NOTIFY_CALIBRATION_DONE(RFC_DATABASE_T* pRfcDataBase);

void MML1_RF_NOTIFY_POC_DONE(MML1_RF_RAT_T rat_type);
kal_uint32 MML1_RF_QUERY_POC_PENDING_LIST(MML1_RF_RAT_T rat_type);
kal_uint32 MML1_RF_QUERY_CHIP_VERSION(void);


void MML1_RF_SetCrystalCap(kal_uint8 capid);
void MML1_RF_SetDCXOFreqLPM(kal_uint32 lpm_div);



void MML1_RF_UpdateDCXOCapID(MML1_RF_RAT_T rat_type,kal_uint32 capid);


kal_bool MML1_RF_Init_Done_Check(void);


kal_uint32 MML1_RF_Query_PowerOnCW_Num(void);
kal_uint32 MML1_RF_Query_PowerOffCW_Num(void);
void MML1_RF_Set_PowerOnCW_Table(kal_uint32 *PowerOnTable);
void MML1_RF_Set_PowerOffCW_Table(kal_uint32 *PowerOffTable);


kal_uint32 MML1_RF_MEASURE_TEMPER_DAC(void);


void MML1_RF_VRF18_ModeSet(kal_bool isHWMode);
void MML1_RF_VRF18_SrcSel(kal_uint32 srcIdx);
void MML1_RF_VRF18_Enable(kal_bool vrf18_en);
void MML1_RF_VRF18_FPWM_STATUS(kal_uint32 *bitmap);
void MML1_RF_VRF18_FPWMSwitch(kal_bool isFPWM);
void MML1_RF_VRF18_FPWMSwitched_ByRAT(MML1_RF_RAT_T rat_type, kal_bool isFPWM);
void MML1_RF_VRF18_LPM_ModeSet(kal_bool isLPMHWMode);
void MML1_RF_VRF18_LPM_SrcSel(kal_uint32 srcIdx);
void MML1_RF_VRF18_LPM_Enable(kal_bool vrf18_lpm_en);
void MML1_RF_VPA_VOSEL_CWGen( kal_uint8 dc2dc_lvl, kal_uint32 *dc2dc_cw );
void MML1_RF_VPA_VOSEL(kal_uint32 volt);
void MML1_RF_VPA_FPWMSwitch(kal_bool isFPWM);
void MML1_RF_VPA_Enable(MML1_RF_RAT_T rat_type, kal_bool vpa_en);
void MML1_RF_VMIPI_ModeSet(kal_bool isHWMode);
void MML1_RF_VMIPI_SrcSel(kal_uint32 srcIdx);
void MML1_RF_VMIPI_Enable(kal_bool vmipi_en);


kal_uint32 MML1_RF_GetMultiRatRfSharingBitmap( MML1_RF_CHIP_T mml1_rfid );


void MML1_MIPI_POWER_ON(MML1_RF_RAT_T rat_type);
void MML1_MIPI_POWER_OFF(MML1_RF_RAT_T rat_type);
kal_uint32 MML1_MIPI_Gen_Data(kal_uint32 *pData, kal_uint16 mipi_data_seq, MML1_RF_RAT_T rat_type);
kal_uint16 mml1_add_parity_bit(kal_uint16 data);
void MML1_MIPI_IMM_READ(kal_uint32 usid, kal_uint32 addr, kal_uint32 *mipi_data, kal_uint32 port);


void MML1_RF_DRDI_GetConfig_GPIO_MD(Mml1RfDrdiGpioResult *gpioResult);
void MML1_RF_DRDI_GetConfig_GPIO_CCCI(Mml1RfDrdiGpioResult *gpioResult, kal_uint8 numOfDetectPins);
void MML1_RF_DRDI_GetConfig_ADC_MD(Mml1RfDrdiAdcResult *adcResult);
void MML1_RF_DRDI_GetConfig_ADC_CCCI(Mml1RfDrdiAdcResult *adcResult);
void MML1_RF_DRDI_GetConfig_BARCODE(Mml1RfDrdiBarcodeResult *barcodeResult);
kal_uint16 MML1_RF_DRDI_CUSTOM_DynamicInitByGPIO(void *data);
kal_uint16 MML1_RF_DRDI_CUSTOM_DynamicInitByADC(void *data);
kal_uint16 MML1_RF_DRDI_CUSTOM_DynamicInitByBarcode(void *data);



kal_bool MML1_RF_DRDI_CUSTOM_IsDynamicInitEnable(void);
Mml1RfDrdiDynamicInitParam* MML1_RF_DRDI_Dynamic_GetParamAddr(MML1_RF_RAT_T rat_type);


void MML1_RF_ENTER_FLIGHTMODE_ENTRYPOINT(void);
void MML1_RF_LEAVE_FLIGHTMODE_ENTRYPOINT(void);


void MML1_RF_EL1_DBG_ENTRY(void);
void MML1_RF_DUMP_BSILOGGER( MML1_RF_RAT_T rat_type );
void MML1_RF_DUMP_RFCW( MML1_RF_RAT_T rat_type );
void MML1_RF_SPI_REG_CHECK(void);


kal_uint16 MML1_RF_Get_RFIC_Info(MML1_RF_RAT_T mode);
kal_uint32 MML1_RF_Get_RAT_Info(void);


void MML1_RF_Register_TxPowerOffsetInfo_CallbackFunction( MML1_RF_RAT_T rat_type );
# 75 "interface/modem/l1/fdd/external/ul1cal.h" 2




typedef struct
{
   kal_uint16 tempdacData[8];
}ul1cal_tempdacData_T;

typedef struct
{
   U_sTEMPAGCOFFSET pathlossData[8];
}ul1cal_pathlossData_T;

typedef struct
{
   U_sRAMPDATA txdacData;
}ul1cal_txdacData_T;


typedef struct
{
   U_sPAOCTLVLSETTING txPaOctLevData;
}ul1cal_txPaOctLevData_T;

typedef struct
{
   U_sPARACHTMCOMPDATA txPrachTmCompData;
}ul1cal_txPrachTmCompData_T;
# 112 "interface/modem/l1/fdd/external/ul1cal.h"
typedef struct
{
   U_sAFCDACDATA afcDacData;
}ul1cal_afcDacData_T;

typedef struct
{
   U_sAFCCAPDATA afcCapData;
}ul1cal_afcCapData_T;



typedef struct
{
   U_sUl1dRfCustomInputData umtsRfCustomInput;
}ul1cal_umtsRfCustomInput_T;




typedef struct
{
   U_sAGCOFFSETRXD pathlossData;
}ul1cal_pathlossRxdData_T;

typedef struct
{
   U_sPADRIFTSETTING txPaDriftCompData;
}ul1cal_txPaDriftCompData_T;




typedef UL1_UMTS_MIPI_TPC_T ul1mipi_tpcData_T;
# 154 "interface/modem/l1/fdd/external/ul1cal.h"
typedef struct
{
   UL1_MIPI_DATA_SUBBAND_TABLE_T mipiTxData[18];
}ul1mipi_txData_T;

typedef struct
{
   UL1_MIPI_DATA_TABLE_T mipiAsmIsoData[1];
}ul1mipi_asmIsoData_T;

typedef struct
{
   UL1_MIPI_EVENT_TABLE_T mipiTxEvent[16];
}ul1mipi_txEvent_T;

typedef struct
{
   UL1_MIPI_DATA_SUBBAND_TABLE_T mipiRxData[28];
}ul1mipi_rxData_T;

typedef struct
{
   UL1_MIPI_EVENT_TABLE_T mipiRxEvent[24];
}ul1mipi_rxEvent_T;

typedef struct
{
   UL1_MIPI_DATA_TABLE_T mipiInitData[30];
}ul1mipi_initCwData_T;

typedef struct
{
   UL1_MIPI_DATA_TABLE_T mipiSleepData[20];
}ul1mipi_sleepCwData_T;
# 259 "interface/modem/l1/fdd/external/ul1cal.h"
typedef void (*Ul1CustomFunction)(void *usrDataPtr);
# 268 "interface/modem/l1/fdd/external/ul1cal.h"
typedef struct
{

   kal_uint32 bandToModify;


   kal_uint8 lnaPortNum;


   kal_uint8 txOutputSel;



   kal_uint8 lnaPortNum2;


} Ul1CustomDynamicInitLnaPortTxPath;
# 293 "interface/modem/l1/fdd/external/ul1cal.h"
typedef struct
{

   kal_uint32 bandToModify;




   kal_uint32 asmLogics[(15)];







} Ul1CustomDynamicInitUmtsBpiData;
# 318 "interface/modem/l1/fdd/external/ul1cal.h"
typedef struct
{

   U_sRAMPDATA *TxRampData[(5)];

} Ul1CustomDynamicInitUmtsTxRampData;
# 332 "interface/modem/l1/fdd/external/ul1cal.h"
typedef struct
{

   U_sPAOCTLVLSETTING *TxPaOctLvl[(5)];

} Ul1CustomDynamicInitUmtsTxPaOctLvlData;
# 346 "interface/modem/l1/fdd/external/ul1cal.h"
typedef struct
{

   U_sTEMPAGCOFFSET *RxPathLoss[(5)];

} Ul1CustomDynamicInitUmtsRxPathLossData;
# 360 "interface/modem/l1/fdd/external/ul1cal.h"
typedef struct
{

   U_sPARACHTMCOMPDATA *TxPrachTmComp[(5)];

} Ul1CustomDynamicInitUmtsTxPrachTmCompData;
# 374 "interface/modem/l1/fdd/external/ul1cal.h"
typedef struct
{

   kal_uint16 *UTempDac;

} Ul1CustomDynamicInitUmtsTempDac;
# 388 "interface/modem/l1/fdd/external/ul1cal.h"
typedef struct
{

   U_sAFCDACDATA *UAfcDac;

} Ul1CustomDynamicInitUmtsAfcDac;
# 402 "interface/modem/l1/fdd/external/ul1cal.h"
typedef struct
{

   U_sAFCCAPDATA *UAfcCap;

} Ul1CustomDynamicInitUmtsAfcCap;


typedef struct
{
   MIPI_Setting mipiSetting;
   UL1_MIPI_DATA_TABLE_T *initTable_p;
   UL1_MIPI_DATA_TABLE_T *sleepTable_p;
   UL1_MIPI_EVENT_TABLE_T **rxEventTable_p;
   UL1_MIPI_DATA_SUBBAND_TABLE_T **rxDataTable_p;
   UL1_MIPI_EVENT_TABLE_T **txEventTable_p;
   UL1_MIPI_DATA_SUBBAND_TABLE_T **txDataTable_p;
   UL1_UMTS_MIPI_TPC_T **tpcTable_p;
   UL1_MIPI_DATA_TABLE_T **asmIsoTable_p;






}Ul1CustomDynamicInitMipiData;







typedef enum
{
   UL1CUSTOM_NULL_ACTION_ID = (0),
   UL1CUSTOM_BASE_PROC_ACTION_ID = UL1CUSTOM_NULL_ACTION_ID,
   UL1CUSTOM_GPIO_DETECTION = (1),
   UL1CUSTOM_ADC_DETECTION = (2),
   UL1CUSTOM_NVRAM_BARCODE_DETECTION = (3),
   UL1CUSTOM_MAX_PROC_ACTIONS

} Ul1CustomActionId;







typedef struct
{

   U_sUl1dRfBpiData umtsPdata;


   U_sUl1dRfBandIndicator umtsBandIndicator;


   U_sUl1dRfRxLnaPortSel umtsRxLnaPortSel;


   U_sUl1dRfTxPathSel umtsTxPathSel;



   U_sUl1dRxdPathSetting umtsRxdPathSetting;


   kal_uint32 umtsPADriftCompensation;



} Ul1CustomDynamicInitResultRFParams;







typedef struct
{
   kal_uint16 combined_config_index;
   kal_uint8 first_config_index_base;
   kal_uint8 second_config_index_base;
   kal_uint8 third_config_index_base;
   kal_int32 gpio_get_pin_rpc_status;
   kal_uint32 gpio_return_pin_num[(3)];
   kal_uint32 gpio_pin_value[(3)];
   kal_uint32 gpio_combined_pin_value;
   kal_int32 adc_get_ch_num_rpc_status;
   DCL_STATUS adc_dcl_handle_status;
   DCL_STATUS adc_cal_dcl_handle_status;
   kal_uint32 adc_get_ch_num;
   kal_uint32 adc_dac_read_result;
   kal_uint32 adc_volt_translate_result;
   kal_uint8 adc_volt_level;
   kal_bool barcode_lid_read_status;
   kal_uint8 barcode_digit_read_result;
   kal_bool umts_tempdac_lid_write_status;
   kal_bool umts_txrampdata_lid_write_status;
   kal_bool umts_txpaoctlvl_lid_write_status;
   kal_bool umts_rxpathloss_lid_write_status;
   kal_bool umts_txprachtmcomp_lid_write_status;
   kal_bool umts_rf_params_lid_write_status;
   Ul1CustomDynamicInitResultRFParams custom_dynamic_init_result_params;

} Ul1CustomDynamicInitDebug;
# 995 "interface/service/nvram/nvram_data_items.h" 2
# 1017 "interface/service/nvram/nvram_data_items.h"
# 1 "interface/modem/lte/el1_rf_public.h" 1
# 39 "interface/modem/lte/el1_rf_public.h"
# 1 "interface/modem/lte/el1_rf_cid.h" 1
# 40 "interface/modem/lte/el1_rf_public.h" 2

# 1 "custom/modem/el1_rf/MT6735_LTE_MT6169_CUSTOM/lte_custom_mipi.h" 1
# 61 "custom/modem/el1_rf/MT6735_LTE_MT6169_CUSTOM/lte_custom_mipi.h"
# 1 "custom/modem/mml1_rf/MT6735_MMRF_CUSTOM/mml1_custom_mipi.h" 1
# 34 "custom/modem/mml1_rf/MT6735_MMRF_CUSTOM/mml1_custom_mipi.h"
# 1 "interface/modem/mml1/mml1_mipi_public.h" 1
# 35 "custom/modem/mml1_rf/MT6735_MMRF_CUSTOM/mml1_custom_mipi.h" 2
# 1 "custom/modem/mml1_rf/MT6735_MMRF_CUSTOM/mml1_custom_drdi.h" 1
# 445 "custom/modem/mml1_rf/MT6735_MMRF_CUSTOM/mml1_custom_drdi.h"
void MML1_CUSTOM_GPIO_NON_SMART_PHONE_PIN_ACCESS(kal_int16 *gpio_pin);
void MML1_CUSTOM_ADC_PIN_ACCESS(kal_uint16 *adc_channel_num);
void MML1_CUSTOM_ADC_PARAM(kal_uint16 *adcMeasCountOrder, kal_uint32 *adcMaxVolt, kal_uint16 *adcBit);
void MML1_CUSTOM_GET_CUSTOM_PARAM(Mml1RfDrdiCustomParam *drdiCustomParam);
# 458 "custom/modem/mml1_rf/MT6735_MMRF_CUSTOM/mml1_custom_drdi.h"
extern Mml1CustomDynamicInitMipiData *mml1_mipiData_array_ptr[((1) * (1) * (1))];
extern Mml1CustomDynamicInitMipiData mml1CustomMipiData[((1) * (1) * (1))];






extern kal_uint16 MML1_DRDI_GGE_ReMapTable[((1) * (1) * (1))];
extern kal_uint16 MML1_DRDI_UMTS_ReMapTable[((1) * (1) * (1))];
extern kal_uint16 MML1_DRDI_TDS_ReMapTable[((1) * (1) * (1))];
extern kal_uint16 MML1_DRDI_LTE_ReMapTable[((1) * (1) * (1))];
extern kal_uint16 MML1_DRDI_MMRF_ReMapTable[((1) * (1) * (1))];
# 36 "custom/modem/mml1_rf/MT6735_MMRF_CUSTOM/mml1_custom_mipi.h" 2
# 68 "custom/modem/mml1_rf/MT6735_MMRF_CUSTOM/mml1_custom_mipi.h"
extern MML1_MIPI_INITIAL_CW_T MML1_MIPI_INITIAL_CW[10];
extern MML1_MIPI_USID_CHANGE_T MML1_MIPI_USID_CHANGE_TABLE[10];





extern MML1_MIPI_INITIAL_CW_T MML1_MIPI_INITIAL_CW_set0[10];
extern MML1_MIPI_INITIAL_CW_T MML1_MIPI_INITIAL_CW_set1[10];
extern MML1_MIPI_USID_CHANGE_T MML1_MIPI_USID_CHANGE_TABLE_set0[10];
extern MML1_MIPI_USID_CHANGE_T MML1_MIPI_USID_CHANGE_TABLE_set1[10];
# 62 "custom/modem/el1_rf/MT6735_LTE_MT6169_CUSTOM/lte_custom_mipi.h" 2
# 232 "custom/modem/el1_rf/MT6735_LTE_MT6169_CUSTOM/lte_custom_mipi.h"
typedef struct
{
   kal_uint16 mipi_data_st;
   kal_uint16 mipi_data_sp;
} LTE_MIPI_DATA_STSP;

typedef struct
{
   kal_uint16 mipi_elm_type;
   LTE_MIPI_DATA_STSP mipi_data_stsp;
   kal_uint16 mipi_evt_type;
   kal_uint32 mipi_evt_offset;
}LTE_MIPI_EVENT_TABLE_T;

typedef struct
{
   kal_uint16 mipi_subband_freq;
   kal_uint16 mipi_addr;
   kal_uint32 mipi_data;
}LTE_MIPI_DATA_EXPAND_TABLE_T;

typedef struct
{
   kal_uint16 mipi_addr;
   kal_uint32 mipi_data;
}LTE_MIPI_adda_DATA_EXPAND_TABLE_T;

typedef struct
{
   kal_uint16 mipi_elm_type;
   kal_uint16 mipi_port_sel;
   kal_uint16 mipi_data_seq;
   kal_uint16 mipi_usid;
   LTE_MIPI_DATA_EXPAND_TABLE_T mipi_subband_data[5];
}LTE_MIPI_DATA_SUBBAND_TABLE_T;

typedef struct
{
   kal_uint16 mipi_elm_type;
   kal_uint16 mipi_port_sel;
   kal_uint16 mipi_data_seq;
   kal_uint32 mipi_usid;
   kal_uint32 mipi_addr;
   kal_uint32 mipi_data;
}LTE_MIPI_DATA_TABLE_T;

typedef struct
{
   kal_uint16 mipi_elm_type;
   kal_uint16 mipi_port_sel;
   kal_uint16 mipi_data_seq;
   kal_uint16 mipi_usid;
   LTE_MIPI_adda_DATA_EXPAND_TABLE_T mipi_ad_data;
   kal_uint32 mipi_wait_time;
}LTE_MIPI_IMM_DATA_TABLE_T;

typedef struct
{
   LTE_MIPI_adda_DATA_EXPAND_TABLE_T mipi_tpc_sec_data[5];
}LTE_MIPI_TPC_SECTION_DATA_T;

typedef struct
{
   kal_uint16 mipi_subband_freq;
   kal_uint16 mipi_usid;
   LTE_MIPI_TPC_SECTION_DATA_T mipi_tpc_section_table[(8+1)];
}LTE_MIPI_TPC_SECTION_TABLE_T;
# 42 "interface/modem/lte/el1_rf_public.h" 2
# 1 "interface/modem/lte/el1_meta_if.h" 1
# 157 "interface/modem/lte/el1_meta_if.h"
# 1 "interface/middleware/meta/ft_msg_common.h" 1
# 118 "interface/middleware/meta/ft_msg_common.h"
typedef enum
{

  FT_RF_TEST_REQ_ID = 0 ,
  FT_RF_TEST_CNF_ID ,

  FT_REG_READ_ID ,
  FT_REG_READ_CNF_ID ,
  FT_REG_WRITE_ID ,
  FT_REG_WRITE_CNF_ID ,
  FT_ADC_GETMEADATA_ID ,
  FT_ADC_GETMEADATA_CNF_ID ,

  FT_IS_ALIVE_REQ_ID ,
  FT_IS_ALIVE_CNF_ID ,

  FT_POWER_OFF_REQ_ID ,

  FT_RESERVED04_ID ,

  FT_CHECK_META_VER_REQ_ID ,
  FT_CHECK_META_VER_CNF_ID ,

  FT_UTILITY_COMMAND_REQ_ID ,
  FT_UTILITY_COMMAND_CNF_ID ,

  FT_NVRAM_GET_DISK_INFO_REQ_ID ,
  FT_NVRAM_GET_DISK_INFO_CNF_ID ,
  FT_NVRAM_RESET_REQ_ID ,
  FT_NVRAM_RESET_CNF_ID ,
  FT_NVRAM_LOCK_CNF_ID ,
  FT_NVRAM_LOCK_REQ_ID ,
  FT_NVRAM_READ_REQ_ID ,
  FT_NVRAM_READ_CNF_ID ,
  FT_NVRAM_WRITE_REQ_ID ,
  FT_NVRAM_WRITE_CNF_ID ,

  FT_FAT_OPERATION_ID = 26 ,

  FT_L4AUD_REQ_ID = 41 ,
  FT_L4AUD_CNF_ID ,

  FT_VER_INFO_REQ_ID = 51 ,
  FT_VER_INFO_CNF_ID ,

  FT_CCT_REQ_ID = 53 ,
  FT_CCT_CNF_ID ,

  FT_WIFI_WNDRV_SET_REQ_ID = 55 ,
  FT_WIFI_WNDRV_SET_CNF_ID ,
  FT_WIFI_WNDRV_QUERY_REQ_ID = 57 ,
  FT_WIFI_WNDRV_QUERY_CNF_ID ,
  FT_WIFI_REQ_ID = 59 ,
  FT_WIFI_CNF_ID ,
  FT_BT_REQ_ID = 61 ,
  FT_BT_CNF_ID ,
  FT_PMIC_REG_READ_ID = 63 ,
  FT_PMIC_REG_READ_CNF_ID ,
  FT_PMIC_REG_WRITE_ID = 65 ,
  FT_PMIC_REG_WRITE_CNF_ID ,
  FT_URF_TEST_REQ_ID = 67 ,
  FT_URF_TEST_CNF_ID ,
  FT_FM_REQ_ID = 69 ,
  FT_FM_CNF_ID = 70 ,
  FT_TDMB_REQ_ID = 71 ,
  FT_TDMB_CNF_ID = 72 ,
  FT_MISC_CMD_REQ_ID = 73 ,
  FT_MISC_CMD_CNF_ID = 74 ,
  FT_CMMB_REQ_ID = 75 ,
  FT_CMMB_CNF_ID = 76 ,
  FT_CUSTOM_REQ_ID = 77 ,
  FT_CUSTOM_CNF_ID = 78 ,
  FT_MISC_EX_CMD_REQ_ID = 79 ,
  FT_MISC_EX_CMD_CNF_ID = 80 ,
  FT_AUX_REQ_ID = 81 ,
  FT_AUX_CNF_ID = 82 ,
  FT_MATV_CMD_REQ_ID = 83 ,
  FT_MATV_CMD_CNF_ID = 84 ,

  FT_L4AUD_REQ_EX_ID = 85 ,
  FT_L4AUD_CNF_EX_ID = 86 ,

  FT_NFC_CMD_REQ_ID = 87,
  FT_NFC_CMD_CNF_ID = 88,

  FT_ERF_TEST_REQ_ID = 91,
  FT_ERF_TEST_CNF_ID = 92,
  FT_PHY_TOOL_REQ_ID = 93,
  FT_PHY_TOOL_CNF_ID = 94,


  FT_DISPATCH_REPORT_ID ,
  FT_MSG_LAST_ID = FT_DISPATCH_REPORT_ID
}FT_MESSAGE_ID;


typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   kal_uint16 token;
   kal_uint16 ft_msg_id;
}FT_H;
# 228 "interface/middleware/meta/ft_msg_common.h"
void _FT_ALLOC_MSG(ilm_struct* ptr_ilm, kal_uint16 size, kal_bool IsFtMsg);
void _FT_SendFtMsgByToken(module_type src_mod, module_type dest_mod, sap_type sap, msg_type msg, ilm_struct *ilm_ptr, kal_uint16 token);
void _FT_SendFtMsgToPcByToken(ilm_struct *ilm_ptr, kal_uint16 token);
kal_uint16 FT_GetGolbalToken(void);
# 158 "interface/modem/lte/el1_meta_if.h" 2
# 175 "interface/modem/lte/el1_meta_if.h"
typedef enum
{
 ERF_TEST_CMD_START_PUSCH_TX = 0,
 ERF_TEST_CMD_START_PUCCH_TX = 1,
 ERF_TEST_CMD_START_PRACH_TX = 2,
 ERF_TEST_CMD_START_SRS_TX = 3,
 ERF_TEST_CMD_START_MIX_RX = 4,
 ERF_TEST_CMD_GET_MIX_RX_RPT = 5,
 ERF_TEST_CMD_RESET_COUNTER = 6,
 ERF_TEST_CMD_STOP_TEST_MODE = 7,
 ERF_TEST_CMD_SET_TX_TPC_SETTING = 8,
 ERF_TEST_CMD_GET_TX_TPC_SETTING = 9,
 ERF_TEST_CMD_GET_RF_CAPABILITY = 10,
 ERF_TEST_CMD_START_AFC_SINGLE_TONE_TX = 11,
 ERF_TEST_CMD_SET_AFC_SETTING = 12,
 ERF_TEST_CMD_GET_AFC_SETTING = 13,
 ERF_TEST_CMD_START_TPC_SINGLE_TONE_TX = 14,
 ERF_TEST_CMD_SET_TPC_PA_GAIN = 15,
 ERF_TEST_CMD_GET_POWER_DETECTOR_VALUE = 16,
 ERF_TEST_CMD_START_RSSI = 17,
 ERF_TEST_CMD_GET_RSSI_SETTING = 18,
 ERF_TEST_CMD_SET_RSSI_SETTING = 19,
 ERF_TEST_CMD_START_FHC = 20,
 ERF_TEST_CMD_CHECK_IF_FUNC_EXIST = 21,
 ERF_TEST_CMD_GET_RF_TEMP = 22,
 ERF_TEST_CMD_GET_TADC_SETTING = 23,
 ERF_TEST_CMD_SET_TADC_SETTING = 24,
 ERF_TEST_CMD_START_NSFT_LIST = 25,
 ERF_TEST_CMD_START_CONT_RX = 26,
 ERF_TEST_CMD_SET_RF_MIPI_CODEWORD = 27,
 ERF_TEST_CMD_GET_RF_MIPI_CODEWORD = 28,
 ERF_TEST_CMD_GET_TEMPERATURE_INFO = 29,
 ERF_TEST_CMD_SET_ET_MODE = 30,
 ERF_TEST_CMD_SET_PATH_FLAG = 31,
 ERF_TEST_CMD_START_ETCAL = 32,
 ERF_TEST_CMD_GET_ETCAL_SETTING = 33,
 ERF_TEST_CMD_SET_ETCAL_SETTING = 34,
 ERF_TEST_CMD_SET_TOOL_USAGE_TO_L1 = 35,
 ERF_TEST_CMD_QUERY_NVRAM_LID = 36,
 ERF_TEST_CMD_GET_GPS_CO_CLOCK_DATA = 37,
 ERF_TEST_CMD_SET_GPS_CO_CLOCK_DATA = 38,

 ERF_TEST_CMD_FORCE_TAS = 55,
 ERF_TEST_CMD_END,
 ERF_TEST_CMD_MAX = 0x7FFFFFFF
}ERfTestCmdType;

typedef enum
{
 ERF_TEST_RFID_NULL = 0,
 ERF_TEST_RFID_MT6169 = 1,
 ERF_TEST_RFID_END = 0xFFFF

}ERfTestRfId;

typedef enum
{
 ERF_TEST_PARAMS_TEMP_DAC_SRC_NULL = 0,
 ERF_TEST_PARAMS_TEMP_DAC_SRC_AUXADC = 1,
 ERF_TEST_PARAMS_TEMP_DAC_SRC_BSI = 2,
 ERF_TEST_PARAMS_TEMP_DAC_SRC_END = 0xFFFF

}ERfTestParamsTempDacSrc;

typedef enum
{
 ERF_TEST_AFC_TYPE_NULL = 0,
 ERF_TEST_AFC_TYPE_TCVCXO = 1,
 ERF_TEST_AFC_TYPE_VCXO = 2,
 ERF_TEST_AFC_TYPE_END = 0xFFFF

}ERfTestAfcType;

typedef enum
{
   ERF_TEST_TEMP_RANGE_M10_65 = 0,
   ERF_TEST_TEMP_RANGE_M10_90 = 1,
   ERF_TEST_TEMP_RANGE_INVALID,
}ERfTestTempRangeVersion;

typedef struct
{
 kal_uint8 band;
 kal_uint8 duplexMode;
 kal_uint8 tddConfig;
 kal_uint8 tddSfConfig;
 kal_uint16 ulFrequency;
 kal_uint16 cellId;
 kal_int16 afcdac;
 kal_uint8 ulBandwidth;
 kal_uint8 vrbStart;
 kal_uint8 vrbLength;
 kal_uint8 mcsMode;
 kal_uint8 txPwrMode;
 kal_int16 txPowerValue;
 kal_uint8 networkSelection;
 kal_uint8 txCloseLoopDisbl;
 kal_uint8 amprEnbl;
 kal_int16 bbBackoff;
 kal_uint8 rfGain;
 kal_uint8 paMode;
 kal_uint8 paVcc;
 kal_uint8 vm0;
 kal_uint8 vm1;
 kal_uint8 enableCsr;
 kal_uint16 dlFrequency;
}ERfTestCmdPuschTx;

typedef struct
{
 kal_uint8 band;
 kal_uint8 duplexMode;
 kal_uint8 tddConfig;
 kal_uint8 tddSfConfig;
 kal_uint16 ulFrequency;
 kal_uint16 cellId;
 kal_int16 afcdac;
 kal_uint8 ulBandwidth;
 kal_uint8 format;
 kal_int16 txPowerValue;
 kal_uint8 networkSelection;
 kal_uint8 txCloseLoopDisbl;
 kal_uint8 amprEnbl;
}ERfTestCmdPucchTx;

typedef struct
{
 kal_uint8 band;
 kal_uint16 ulFrequency;
 kal_uint16 cellId;
 kal_int16 afcdac;
 kal_uint8 configIndex;
 kal_int16 txPowerValue;
 kal_uint8 networkSelection;
 kal_uint8 txCloseLoopDisbl;
 kal_uint8 amprEnbl;
}ERfTestCmdPrachTx;

typedef struct
{
 kal_uint8 band;
 kal_uint8 duplexMode;
 kal_uint16 ulFrequency;
 kal_uint16 cellId;
 kal_int16 afcdac;
 kal_uint8 tddCsSrsBwCfg;
 kal_int16 txPowerValue;
 kal_uint8 networkSelection;
 kal_uint8 txCloseLoopDisbl;
 kal_uint8 amprEnbl;
}ERfTestCmdSrsTx;

typedef struct
{
 kal_uint8 mode;


 kal_uint8 measCnt;
 kal_uint8 measBandwidth;
 kal_int16 afcdac;
 kal_uint16 dlFrequency;
 kal_uint8 band;
 kal_uint8 duplexMode;
 kal_uint8 tddConfig;
 kal_uint8 tddSfConfig;
 kal_uint8 bandwidth;
 kal_uint8 rxPath0Enbl;
 kal_uint8 rxPath1Enbl;


 kal_uint16 ulFrequency;
 kal_int16 txPowerValue;


 kal_uint8 vrbStart;
 kal_uint8 vrbLength;
 kal_uint8 mcsMode;

}ERfTestCmdMixRx;

typedef struct
{
 kal_uint8 measRptCnt;
 kal_int16 rssiPath0[10];
 kal_int16 rssiPath1[10];
 kal_int16 rsrpPath0[10];
 kal_int16 rsrpPath1[10];
 kal_int16 rsrqPath0[10];
 kal_int16 rsrqPath1[10];

 kal_uint32 crcOK_cnt;
 kal_uint32 crcNG_cnt;
}ERfTestCmdGetMixRxRpt;

typedef struct
{

 kal_uint8 paControlLevel;
 kal_uint8 calRoomTempIdx;
 kal_int16 hysteresisStart0;
 kal_int16 hysteresisEnd0;
 kal_int16 hysteresisStart1;
 kal_int16 hysteresisEnd1;
 kal_uint8 paMode[8];
 kal_int16 pRf[8];
 kal_uint16 paGain[8];
 kal_uint8 dc2dcLevel[8];
 kal_uint16 vBiasDac[8];
 kal_uint8 vm0[8];
 kal_uint8 vm1[8];

 kal_uint16 ulFrequency[21];
 kal_int16 paGainHigh[8][21];
 kal_int16 paGainMiddle[8][21];
 kal_int16 paGainLow[8][21];
 kal_int16 couplerLossHigh;
 kal_int16 couplerLossMiddle;
 kal_int16 couplerLossLow;
 kal_int16 powerDetectorHigh[8][21];
 kal_int16 powerDetectorMiddle[8][21];
 kal_int16 powerDetectorLow[8][21];
}ERfTestCmdGetSetTpcSetting;


typedef struct
{

   kal_uint32 supportBandMap[2];
   kal_uint32 supportMipiBandMap[2];
   kal_uint32 supportCoexistenceBandMap[2];
   kal_uint32 supportDpdBandMap[2];
   kal_uint32 supportCim3BandMap[2];
   kal_uint32 supportHRMBandMap[2];

}ErfCapabilityItemSet;


typedef struct
{
 kal_uint32 is_capable : 1;
 kal_uint32 is_mandatory: 1;
 kal_uint32 parameter :30;

}ErfCalibrationItem;


typedef struct
{

   ErfCalibrationItem tadc_cal;
   ErfCalibrationItem multi_rat_tadc_bitmap;
   ErfCalibrationItem multi_rat_afc_bitmap;
   ErfCalibrationItem pd_temp_comp;
   ErfCalibrationItem mipi_pa_level_and_cw_num;
   ErfCalibrationItem temperature_info;
   ErfCalibrationItem et_module_support;
   ErfCalibrationItem tool_usage_setting_support;
   ErfCalibrationItem thermal_sensor_type;
   ErfCalibrationItem cap_id_calibration;
   ErfCalibrationItem enable_csr;
   ErfCalibrationItem gps_co_tms_support;
   ErfCalibrationItem lte_ca_support;
   ErfCalibrationItem lte_ca_ena;
   ErfCalibrationItem lte_dpd_support;
   ErfCalibrationItem lte_cim3_support;
   ErfCalibrationItem lte_Coexistence_support;
   ErfCalibrationItem lte_HRM_support;
   ErfCalibrationItem fhc_sw_time;
   ErfCalibrationItem nsft_extension;
   ErfCalibrationItem lte_tas_support;

}ErfCalibrationItemSet;


typedef struct
{

 kal_uint32 rfId;
 kal_uint32 capability_item_offset;
 kal_uint32 calibration_item_offset;
 ErfCapabilityItemSet capabilityItems;
 ErfCalibrationItemSet calibrationItems;

}ERfTestResultRfCapability;

typedef struct
{
 kal_uint8 duplexMode;
 kal_uint8 band;
 kal_uint16 ulFrequency;
 kal_uint8 capid;
 kal_int16 afcdac;
 kal_uint8 afcDataType ;
 kal_int16 txPowerValue;
}ERfTestCmdAfcSingleToneTx;

typedef struct
{
 kal_uint8 capid;
 kal_uint16 afcdac;
 kal_int32 slopeInv;
}ERfFreqAdjustTable;

typedef struct
{
 kal_uint8 duplexMode;
 kal_uint8 band;
 kal_uint16 ulFrequency;
 kal_uint8 bandwidth;
 kal_int16 ulFrequencyOffset;
 kal_int16 afcdac;
 kal_uint8 afcDataType ;
 kal_int16 txPowerValue;
 kal_uint8 txCloseLoopDisbl;
 kal_uint8 paMode;
}ERfTestCmdTpcSingleToneTx;

typedef struct
{
 kal_uint8 band;
 kal_int16 txPaGain[8];
}ERfTestCmdSetTpcPaGain;

typedef struct
{
 kal_uint8 duplexMode;
 kal_uint8 band;
 kal_uint8 num_freq;
 kal_uint16 dl_freq[36];
 kal_uint8 temperatureIndex;
 kal_int16 gain1;
 kal_int16 gain2;
}ERfTestCmdRSSI;

typedef struct
{
 kal_uint8 duplexMode;
 kal_uint8 band;
 kal_uint16 dl_freq;
 kal_uint8 bandwidth;
 kal_uint16 gain1;
 kal_uint16 gain2;
} ERfTestCmdContRx;

typedef struct
{
 kal_uint8 num_freq;
 kal_int16 dl_freq[36];
 kal_int16 rssi[36];
 kal_uint8 lna_mode[36];
 kal_int16 rssi_rxd[36];
 kal_uint8 lna_mode_rxd[36];
}ERfTestResultRSSI;

typedef struct
{
 kal_int16 lna_mode[6];
}ERfRSSIGainOffsetTable;

typedef struct
{
 ERfRSSIGainOffsetTable gain_of_dl_freq[15];
}ERfRSSITempOffsetTable;

typedef struct
{
 kal_uint16 dlMainFrequency[15];
 kal_uint16 dlDiversityFrequency[15];
 ERfRSSITempOffsetTable pathlossMainData[8];
 ERfRSSITempOffsetTable pathlossDiversityData[8];
}ERfRSSIBandGainTable;

typedef struct
{

    kal_uint32 result;
    kal_uint32 query_op_code;
}ERfCheckIfFuncExist;

typedef struct
{
    kal_uint16 data[8];
} ERfTadcSetting;

typedef struct
{
    kal_uint16 measure_count;
} ERfTestCmdGetRfTemp;

typedef struct
{
    kal_uint16 rf_band_idx;
    kal_uint16 power_level_num;
    kal_uint16 code_word_num;
}ERfTestCmdSetMIPICodeWord;

typedef struct
{
    kal_uint8 mipi_rf_band;
}ERfTestCmdGetMIPICodeWord;

typedef struct
{
    kal_uint16 CmdType;
    kal_uint8 BandIndex;
}ERfNVRAMInfoReq;

typedef struct
{
    kal_uint8 status;
    kal_uint8 lid_count;
}ERfNVRAMInfoCnf;

typedef struct
{
    kal_uint16 LID;
    kal_uint16 RID;
}ERfGetNVRAMInfo;

typedef struct
{
    kal_uint8 band;
    kal_uint8 bandwidth;
    kal_int16 txPower;
    kal_uint16 ulFrequency;
}ERfEtTxSetting;

typedef struct
{
    kal_uint8 output_vpa_voltage;
}ERfFdModeSetting;

typedef struct
{
    kal_uint16 mode;
    kal_int16 outer_gain;
    kal_int16 input_offset_voltage;
    kal_int16 main_sw_output_voltage;
    kal_int16 aux_sw_output_voltage;
}ERfSpModeSetting;

typedef struct
{
    kal_uint16 et_mode;
    ERfEtTxSetting tx_setting;
    ERfFdModeSetting fd_mode_setting;
    ERfSpModeSetting sp_mode_setting;
}ERfTestCmdEtModeSetting;

typedef struct
{

   kal_uint16 VinVpaLut[8][33];
   kal_int16 VinPmLut [8][33];
   kal_int16 VinAmLut [8][33];

   kal_int16 PathDelay[8][6];



   kal_int16 Pout_max[8];
   kal_int16 Pout_gain_offset[8];
   kal_uint16 GainComp_0p5_dB;
   kal_uint16 GainComp_0p5_dB_delta;
   kal_int16 PathDelayOffsetByTemp [8][6];
   kal_int16 GrpDlyOfstBySubband [8][6];
   kal_uint16 VpaTargetStep2;
   kal_uint16 SmpValStep2Sec1;
   kal_int16 PaGainAdjustStep1;
   kal_uint32 PowThrdStep2;
}ERfTestCmdEtCalResult;

typedef struct
{
   kal_uint16 rf_band_idx;
}ERfTestCmdEtCalSetting;

typedef struct
{
   kal_int32 C0;
   kal_int32 C1;
   kal_int32 initU;
   kal_int32 lastU;
}ERfGpsCoClockData;

typedef struct
{
   kal_uint8 tas_idx;


}ERfTestCmdTasCfg;

typedef union
{
 ERfTestCmdPuschTx puschTxParam;
 ERfTestCmdPucchTx pucchTxParam;
 ERfTestCmdPrachTx prachTxParam;
 ERfTestCmdSrsTx srsTxParam;
 ERfTestCmdMixRx mixRxParam;
 kal_uint8 tpcSettingBandIndex;
 ERfTestCmdRSSI rssiRxParam;
 ERfTestCmdContRx contRxParam;
 ERfTestCmdAfcSingleToneTx afcSingleToneTxParam;
 ERfTestCmdTpcSingleToneTx tpcSingleToneTxParam;
 ERfTestCmdSetTpcPaGain tpcPaGainSetting;
 kal_uint8 rxRSSITableBandIndex;
 ERfTestCmdType query_op_code;
 ERfTestCmdGetRfTemp getRfTemp;
 ERfTestCmdSetMIPICodeWord setMipiCodeWord;
 ERfTestCmdGetMIPICodeWord getMipiCodeWord;
 ERfNVRAMInfoReq nvramInfoReq;
 ERfTestCmdEtModeSetting EtModeSetting;
 ERfTestCmdEtCalSetting etCalSetting;
 ERfGpsCoClockData gpsCoClockData;
 kal_uint16 toolUsage;
 ERfTestCmdTasCfg tasParam;
}ERfTestCmdParam;

typedef struct
{
    kal_bool ok;
    kal_uint32 sum;
} ERfTestResultRfTemperature;

typedef struct
{
    kal_uint32 result;
    kal_uint8 l1cStatus;
} ERfTestCmdGeneralResult;

typedef struct
{
    kal_uint8 status;
    kal_uint16 power_level_num;
    kal_uint16 code_word_num;
}ERfTestResultGetMIPICodeWord;

typedef struct
{
    kal_int16 status;
    kal_int16 tadc_dac;
    kal_int16 temperature;
    kal_int16 temp_idx;
}ERfTestResultRfTemperatureInfo;

typedef enum
{
    ERF_GTI_STATUS_SUCCESS = 0,
    ERF_GTI_STATUS_INTERPO_FAIL = 1,
    ERF_GTI_STATUS_TEMP_OVERFLOW = 2,
    ERF_GTI_STATUS_TEMP_UNDERFLOW = 3
}ERfTestGetTempInfoStatus;

typedef union
{
 kal_uint32 result;
 ERfTestCmdGeneralResult generalResult;
 ERfTestCmdGetMixRxRpt mixRxRpt;
 ERfTestResultRfTemperature rfTemperature;
 ERfTestResultRfTemperatureInfo rfTemperatureInfo;
 kal_int16 txPowerDetectorValue;
 ERfCheckIfFuncExist CheckIfFuncExist;
 ERfTestResultGetMIPICodeWord getMipiCodeWord;
 ERfNVRAMInfoCnf nvramInfoCnf;
 ERfGpsCoClockData gpsCoClockData;
}ERfTestResultParam;

typedef struct
{
   FT_H header;
   kal_uint32 type;
   ERfTestCmdParam param;
}FT_ERF_TEST_REQ;

typedef struct
{
   FT_H header;
   kal_uint32 type;
   ERfTestResultParam param;
}FT_ERF_TEST_CNF;

typedef struct
{
 kal_uint16 dl_freq;
 kal_int16 rssi[27];
 kal_int16 rssi_rxd[27];
 kal_uint8 lna_mode[27];
 kal_uint8 lna_mode_rxd[27];
 kal_uint8 pwr_step_num;
}FHC_Rx_Freq_Rpt;

typedef struct
{
 kal_uint16 ul_freq;
 kal_int16 txPowerDetectorValue[27];
 kal_uint8 pwr_step_num;
}FHC_Tx_Freq_Rpt;

typedef struct
{
 kal_uint8 band_index;
 kal_uint8 tx_freq_num;
 kal_uint8 rx_freq_num;
 FHC_Tx_Freq_Rpt tx_freq_rpt[22];
 FHC_Rx_Freq_Rpt rx_freq_rpt[22];
}FHC_TRx_Band_Rpt;

typedef struct
{
 kal_uint8 band_num;
 FHC_TRx_Band_Rpt band_rpt[10];
}FHC_Rx_Rpt;

typedef struct
{
 kal_uint16 ul_freq;
 kal_uint8 ul_bw;
 kal_uint8 pwr_step_num;
 kal_int16 pwr_step_value[27];
 kal_int16 pwr_step_pa_gain [27];
 kal_uint8 pwr_step_pa_gain_tbl_indx [27];
 kal_uint8 pwr_step_pa_mode [27];
}FHC_Tx_Freq_Param;

typedef struct
{
 kal_uint16 dl_freq;
 kal_uint8 temperature_indx;
 kal_uint8 pwr_step_num;
 kal_int16 gain1[27];
 kal_int16 gain2[27];
}FHC_Rx_Freq_Param;

typedef struct
{
 kal_uint8 band_index;
 kal_uint8 freq_num;
 FHC_Tx_Freq_Param freq_param[22];
}FHC_Tx_Band_Param;

typedef struct
{
 kal_uint8 band_index;
 kal_uint8 freq_num;
 FHC_Rx_Freq_Param freq_param[22];
}FHC_Rx_Band_Param;

typedef struct
{
 kal_uint8 tx_to_rx_time;
 kal_uint8 band_num;
 FHC_Rx_Band_Param band_param[10];
}FHC_Rx_Cfg;

typedef struct
{
 kal_uint8 tx_step_width;
 kal_uint8 band_num;
 FHC_Tx_Band_Param band_param[10];
 kal_int16 freq_offst;
 kal_int16 afc_dac;
 kal_uint8 afc_data_type;
 kal_uint8 close_loop_disable;
}FHC_Tx_Cfg;

typedef struct
{
    kal_uint8 phy_cell_id;
    kal_uint8 fdd_band_start_index;
    kal_uint8 fdd_band_end_index;
    kal_uint8 tdd_band_start_index;
    kal_uint8 tdd_band_end_index;
    kal_uint8 fdd_to_tdd_switch_time;
    kal_uint8 tdd_to_fdd_switch_time;
    kal_uint8 tdd_tx_rx_switch_time;
    kal_uint8 freq_switch_time;
    kal_uint8 band_switch_time;
    FHC_Tx_Cfg txCmd;
    FHC_Rx_Cfg rxCmd;
}FHC_Cmd;

typedef struct
{
 kal_uint8 pwr_step_num;
 kal_int16 pwr_step_tx_power[8];
 kal_uint8 pwr_step_VRB_strt [8];
 kal_uint8 pwr_step_VRB_len [8];
} NSFT_List_Tx_Specify_Pwr_Param;

typedef struct
{
 kal_int16 start_power;
 kal_int16 pwr_step_value;
 kal_uint8 pwr_step_num;

 kal_uint8 pwr_step_VRB_strt_p1;
 kal_uint8 pwr_step_VRB_len_p1;
 kal_uint8 pwr_step_VRB_strt_p2;
 kal_uint8 pwr_step_VRB_len_p2;

 kal_uint8 step_for_change_tx_VRB;

} NSFT_List_Tx_Specify_Step_Param;

typedef struct
{
 kal_uint16 ul_freq;
 kal_uint8 ul_bw;
 kal_uint8 pwr_step_MCS_mode;
 kal_bool cmd_type;
 union
 {
   NSFT_List_Tx_Specify_Pwr_Param specify_tx_pwr_cmd;
   NSFT_List_Tx_Specify_Step_Param specify_pwr_step_cmd;
 }nsft_list_pwr_step_cmd;
} NSFT_List_Tx_Freq_Param;

typedef struct
{
 kal_uint8 band_index;
 kal_uint8 freq_num;
 kal_uint16 dl_sync_freq;
 NSFT_List_Tx_Freq_Param freq_param[13];
} NSFT_List_Tx_Band_Param;

typedef struct
{
 kal_uint8 fdd_tx_step_width;
 kal_uint8 tdd_tx_step_width;
 kal_uint8 band_num;
 NSFT_List_Tx_Band_Param band_param[10];
 kal_int16 freq_offst;
 kal_int16 afc_dac;
 kal_uint8 afc_data_type;
 kal_uint8 close_loop_disable;
}NSFT_List_Tx_Cfg;

typedef struct NSFT_List_Cmd
{
 kal_uint8 phy_cell_id;
 kal_uint8 fdd_band_start_index;
 kal_uint8 fdd_band_end_index;
 kal_uint8 tdd_band_start_index;
 kal_uint8 tdd_band_end_index;
 kal_uint8 fdd_to_tdd_switch_time;
 kal_uint8 fdd_freq_switch_time;
 kal_uint8 tdd_freq_switch_time;
 kal_uint8 fdd_band_switch_time;
 kal_uint8 tdd_band_switch_time;
 kal_uint16 fdd_dl_sync_time;
 kal_uint16 tdd_dl_sync_time;
 NSFT_List_Tx_Cfg txCmd;
}NSFT_List_Cmd;
# 43 "interface/modem/lte/el1_rf_public.h" 2





# 1 "interface/modem/lte/el1_rf_public_mt6169.h" 1
# 49 "interface/modem/lte/el1_rf_public.h" 2
# 287 "interface/modem/lte/el1_rf_public.h"
typedef enum
{
   LTE_BandNone = 0,
   LTE_Band1 = 1,
   LTE_Band2 = 2,
   LTE_Band3 = 3,
   LTE_Band4 = 4,
   LTE_Band5 = 5,
   LTE_Band6 = 6,
   LTE_Band7 = 7,
   LTE_Band8 = 8,
   LTE_Band9 = 9,
   LTE_Band10 = 10,
   LTE_Band11 = 11,
   LTE_Band12 = 12,
   LTE_Band13 = 13,
   LTE_Band14 = 14,
   LTE_Band15 = 15,
   LTE_Band16 = 16,
   LTE_Band17 = 17,
   LTE_Band18 = 18,
   LTE_Band19 = 19,
   LTE_Band20 = 20,
   LTE_Band21 = 21,
   LTE_Band22 = 22,
   LTE_Band23 = 23,
   LTE_Band24 = 24,
   LTE_Band25 = 25,
   LTE_Band26 = 26,
   LTE_Band27 = 27,
   LTE_Band28 = 28,
   LTE_Band29 = 29,
   LTE_Band30 = 30,
   LTE_Band31 = 31,
   LTE_Band32 = 32,
   LTE_Band33 = 33,
   LTE_Band34 = 34,
   LTE_Band35 = 35,
   LTE_Band36 = 36,
   LTE_Band37 = 37,
   LTE_Band38 = 38,
   LTE_Band39 = 39,
   LTE_Band40 = 40,
   LTE_Band41 = 41,
   LTE_Bandcount,
   LTE_BandMax = 0xFFFE
} LTE_Band;

typedef enum
{
   VPA_SOURCE_INVALID_T = 0,
   VPA_SOURCE_VBAT_T = 1,
   VPA_SOURCE_PMIC_T = 2,
   VPA_SOURCE_ETM_APT_T = 3,
   VPA_SOURCE_ETM_ET_T = 4
} LTE_VPA_SOURCE_CONFIGUATION_TYPE;

typedef struct
{
 kal_int16 start;
 kal_int16 end;
} LTE_sHYSTERESISDATA;


typedef struct
{
   kal_uint8 pa_mode;
   kal_int16 prf;
   kal_uint8 dc2dc_lvl;
   kal_uint8 vm1;
   kal_uint8 vm2;
   kal_uint16 vbias_dac;
   kal_uint16 pa_gain;
} LTE_sPMULEVHANDLE;

typedef struct
{
   kal_int16 coupler_loss;
   kal_uint16 subband_max_earfcn[21];
   kal_int16 pa_compensate_value[21][8];
   kal_int16 pd_compensate_value[21][8];
} LTE_sTXPOWERDATA;

typedef struct
{
   LTE_Band band_ind;
   kal_uint8 cal_room_temp_idx;
   LTE_sHYSTERESISDATA tx_hysteresis[2];
   LTE_sTXPOWERDATA pa_mode[3];
} LTE_sRAMPDATA;


typedef struct
{
   LTE_Band band_ind;
   kal_uint8 octlev_num_section;
   kal_int16 max_pwr;
   LTE_sPMULEVHANDLE pmu_level_handle[8];
} LTE_sPAOCTLVLSETTING;

typedef struct
{
 kal_int16 lna_mode[6];

} LTE_RSSIGainOffsetTable;

typedef struct
{
 LTE_RSSIGainOffsetTable gain_of_dl_freq[15];
} LTE_RSSITempOffsetTable;

typedef struct
{
 LTE_Band bandIndex;
 kal_uint16 dlMainFrequency[15];
 kal_uint16 dlDiversityFrequency[15];
 LTE_RSSITempOffsetTable pathlossMainData[8];
 LTE_RSSITempOffsetTable pathlossDiversityData[8];
}LTE_RSSIBandGainTable ;

typedef struct
{
 kal_uint8 capid;
 kal_uint16 afcdac;
 kal_int32 slopeInv;
}LTE_FreqAdjustTable;

typedef struct
{
 kal_uint16 dc2dc_setting[2];
 kal_uint16 vm10;
 kal_uint16 vbias_dac;

}TxUPC_PA_Config;

typedef struct
{
   kal_int32 pa_gain_temp_comp[8][21][3];
   kal_int32 pa_gain_temp_comp_slope[8][21 - 1][3];
   kal_int32 cpl_gain_temp_comp[8][21][3];
   kal_int32 cpl_gain_temp_comp_slope[8][21 - 1][3];

}TxUPC_TEMPERATURE_Comp;

typedef struct
{
   kal_uint32 pa_gain_temp_comp_tbl_addr;
   kal_uint32 pa_gain_temp_comp_slope_tbl_addr;
   kal_uint32 cpl_gain_temp_comp_tbl_addr;
   kal_uint32 cpl_gain_temp_comp_slope_tbl_addr;

}TxUPC_TEMPERATURE_CompTbl_Addr;






typedef struct
{
   kal_uint16 subband_count;
   kal_int16 fpa_carr;

   kal_uint16 pa_gain_common[8];
   kal_int16 cpl_gain_common[3];
   kal_int16 subband_freq[21];
   kal_int16 pa_gain_value[8][21];
   kal_int16 pa_gain_slope[8][21 - 1];
   kal_int16 cpl_gain_value[3][21];
   kal_int16 cpl_gain_slope[3][21 - 1];

   kal_uint16 octlev_num_section;
   kal_int16 mg_to_hg_max_th;
   kal_int16 hg_to_mg_min_th;
   kal_int16 lg_to_mg_max_th;
   kal_int16 mg_to_lg_min_th;
   kal_int16 pa_vcc_thr_prf[8];
   kal_uint16 pa_vcc_idx_th_lb[3];
   kal_uint16 pa_vcc_idx_th_hb[3];

   TxUPC_PA_Config pa_ctrl_config[8];

   TxUPC_TEMPERATURE_CompTbl_Addr temp_comp_tbl_addr;

   kal_int16 pout_max[8];
} TxUPC_SW_Config;

typedef struct
{
 kal_uint16 dl_freq_path0[15];
 kal_uint16 dl_freq_path1[15];
 kal_int16 lna_mode_path0[8][15][6];
 kal_int16 lna_mode_path1[8][15][6];

}LNA_SW_Config;

typedef struct
{
    kal_uint16 capid;
    kal_uint16 afcdac;
    kal_int32 slopeInv;
    kal_uint16 fixedAfc;
 kal_int16 c0Tsx;
    kal_int16 c1Tsx;
    kal_int16 c2Tsx;
    kal_int16 c3Tsx;
}FreqAdj_SW_Config;


typedef struct
{
    kal_uint32 c0;
    kal_uint32 c1;
    kal_uint32 c2;
    kal_uint32 c3;
}FreqAdj_CO_TMS_Config;

typedef struct
{
    float float_c0;
    float float_c1;
    float float_c2;
    float float_c3;
}FreqAdj_CO_TMS_Config_FLOAT;



typedef struct
{
    kal_uint16 freq;
}RfcRxIQParam;

typedef struct
{
    kal_uint16 freq;
}RfcRxDCOCParam;

typedef struct
{
    kal_uint16 freq;
}RfcDetIQDCDNLParam;

typedef struct
{
    kal_uint16 freq;
}RfcTxIQDCDNLParam;

typedef struct
{
    kal_uint16 freq;
}RfcTxGaParam;

typedef struct
{
    RfcRxIQParam rx_iq_param[(14)][2];
    RfcRxDCOCParam rx_dcoc_param[(14)][2];
    RfcDetIQDCDNLParam det_iqdcdnl_param[(14)][2];
    RfcTxIQDCDNLParam tx_iqdcdnl_param[(14)][2];
    RfcTxGaParam tx_ga_param[(14)][2];
    kal_int32 other_rat_param[1024];
}RfcParam;

typedef struct
{
    kal_uint16 PocDataStatusDaddrl;
    kal_uint16 PocDataStatusDaddrh;
    kal_uint16 DetCdcocDaddrl;
    kal_uint16 DetCdcocDaddrh;
    kal_uint16 Rx1IqCompDaddrl;
    kal_uint16 Rx1IqCompDaddrh;
    kal_uint16 Rx2IqCompDaddrl;
    kal_uint16 Rx2IqCompDaddrh;
    kal_uint16 Rx1IqReDcocDaddrl;
    kal_uint16 Rx1IqReDcocDaddrh;
    kal_uint16 Rx1IqImDcocDaddrl;
    kal_uint16 Rx1IqImDcocDaddrh;
    kal_uint16 Rx2IqReDcocDaddrl;
    kal_uint16 Rx2IqReDcocDaddrh;
    kal_uint16 Rx2IqImDcocDaddrl;
    kal_uint16 Rx2IqImDcocDaddrh;
    kal_uint16 DetIqGainCompDaddrl;
    kal_uint16 DetIqGainCompDaddrh;
    kal_uint16 DetIqPhaseCompDaddrl;
    kal_uint16 DetIqPhaseCompDaddrh;
    kal_uint16 DetIqReDcCompDaddrl;
    kal_uint16 DetIqReDcCompDaddrh;
    kal_uint16 DetIqImDcCompDaddrl;
    kal_uint16 DetIqImDcCompDaddrh;
    kal_uint16 DetFeGainDaddrl;
    kal_uint16 DetFeGainDaddrh;
    kal_uint16 DetDnlDaddrl;
    kal_uint16 DetDnlDaddrh;
    kal_uint16 TxIqGainPhaseDcCompDaddrl;
    kal_uint16 TxIqGainPhaseDcCompDaddrh;
    kal_uint16 TxDnlDaddrl;
    kal_uint16 TxDnlDaddrh;
    kal_uint16 TxRcfCselDaddrl;
    kal_uint16 TxRcfCselDaddrh;
    kal_uint16 TxGaCompDaddrl;
    kal_uint16 TxGaCompDaddrh;
    kal_uint16 TxIqGainCompDaddrl;
    kal_uint16 TxIqGainCompDaddrh;
    kal_uint16 TxIqPhaseCompDaddrl;
    kal_uint16 TxIqPhaseCompDaddrh;
}RfcResultAddrInd;

typedef struct
{
   kal_uint16 DramAddrl;
   kal_uint16 DramAddrh;
}RfcDramAddrInd;

typedef struct
{
   kal_uint32 rxdcoc[(32)];
}LTE_DCOC_BYLNA_T;

typedef struct
{
   LTE_DCOC_BYLNA_T rxLna[(7)];
}LTE_DCOC_BYBW_T;

typedef struct
{
   LTE_DCOC_BYBW_T rxBw[(6)];
}LTE_DCOC_BYPATH_T;

typedef struct
{
   LTE_DCOC_BYPATH_T rxPath[(2)];
}RXDCOC_TABLE_T;
# 636 "interface/modem/lte/el1_rf_public.h"
typedef struct
{
   kal_uint16 VinVpaLut[(8)][(33)];
   kal_int16 VinPmLut [(8)][(33)];
   kal_int16 VinAmLut [(8)][(33)];
} LTE_RfcEtVinLutPerBand_T;

typedef struct
{

   kal_int16 PathDelay [(14)][(8)][(6)];



   kal_int16 Pout_max [(14)][(8)];
   kal_int16 Pout_gain_offset [(14)][(8)];
   kal_uint16 GainComp_0p5_dB [(14)];
   kal_uint16 GainComp_0p5_dB_delta [(14)];
   kal_int16 PathDelayOffsetByTemp [(14)][8][(6)];
   kal_int16 GrpDlyOfstBySubband [(14)][(8)][(6)];
   kal_uint16 VpaTargetStep2 [(14)];
   kal_uint16 SmpValStep2Sec1;
   kal_int16 PaGainAdjustStep1 [(14)];
   kal_uint32 PowThrdStep2 [(14)];
} LTE_RfcEtCompParam_T;

typedef struct
{
   kal_uint16 LTE_ET_SUBFREQ_GROUP_PER_BAND [(8)];
   kal_int16 LTE_ET_SUBBAND_RB_OFFSET [(8)];
   kal_uint16 LTE_ET_RF_GEAR [(8)];
   kal_uint16 LTE_ET_BB_BACKOFF [(8)];
   kal_uint16 Dmin32;
   kal_uint16 Grid_step;
   kal_uint16 Vreset;

   kal_uint16 VpaScaleStep2 [(8)];




   kal_uint16 SmpValStep2Sec1;
   kal_int16 PaGainAdjustStep1;
   kal_uint16 EL2_MemAddr_L;
   kal_uint16 EL2_MemAddr_H;
}Type_EtCalInfoThroughDRMA;


typedef struct
{
   kal_uint16 VinVpaLut[(33)];
   kal_int16 VinPmLut [(33)];
   kal_int16 VinAmLut [(33)];
   kal_int16 PathDelay[(6)];
   kal_int16 Pout_max;
   kal_int16 Pout_gain_offset;
} LTE_RfcEtCalResultPerSubBand_T;



typedef struct
{
      kal_uint16 VinVpaLut [(8)][(33)];
      kal_int16 VinPmLut [(8)][(33)];
      kal_int16 VinAmLut [(8)][(33)];
      kal_int16 PathDelay [(8)][(6)];
      kal_int16 Pout_max [(8)];
      kal_int16 Pout_gain_offset[(8)];
} LTE_RfCEtCalResultPerBand_T;


typedef struct
{
   kal_uint16 CurrTempDac;
   kal_uint16 CurrTempSec;
   kal_uint16 CurrentTxBandIndex;

   kal_uint16 CurrentTxSubbandIndex;

}LTE_RfcEtCalTempCompStatus_T;

typedef struct
{
   kal_uint32 band_support_num;
   kal_uint16 band_mapping[14];
   kal_uint16 band_hml_define_rx0[14];
   kal_uint16 band_hml_define_rx1[14];
}RFC_RXBAND_PATH_MAP_T;

typedef struct
{
   kal_uint16 LteTempDac[8];
} LTE_TemperatureDac_T;

typedef struct
{
   LTE_Band bandIdx;
   kal_uint16 mpr_QPSK1;
   kal_uint16 mpr_16QAM0;
   kal_uint16 mpr_16QAM1;
   kal_uint16 delta_Tc0;
   kal_uint16 delta_Tc1;
} LTE_MPRAdjust_T;

typedef struct
{
   kal_uint16 ampr_ns03_3;
   kal_uint16 ampr_ns03_5;
   kal_uint16 ampr_ns03_10;
   kal_uint16 ampr_ns03_15;
   kal_uint16 ampr_ns03_20;
} LTE_AMPR_NS03_T;

typedef struct
{
   kal_uint16 ampr_ns04_5;
   kal_uint16 ampr_ns04_10_A;
   kal_uint16 ampr_ns04_10_B;
   kal_uint16 ampr_ns04_10_C;
   kal_uint16 ampr_ns04_15_A;
   kal_uint16 ampr_ns04_15_B;
   kal_uint16 ampr_ns04_15_C;
   kal_uint16 ampr_ns04_20_A;
   kal_uint16 ampr_ns04_20_B;
   kal_uint16 ampr_ns04_20_C;
} LTE_AMPR_NS04_T;

typedef struct
{
   kal_uint16 ampr_ns05_10_15_20;
} LTE_AMPR_NS05_T;

typedef struct
{
   kal_uint16 ampr_ns07_10_A0;
   kal_uint16 ampr_ns07_10_A1;
   kal_uint16 ampr_ns07_10_B0;
   kal_uint16 ampr_ns07_10_B1;
   kal_uint16 ampr_ns07_10_C;
} LTE_AMPR_NS07_T;

typedef struct
{
   kal_uint16 ampr_ns08_10_15;
} LTE_AMPR_NS08_T;

typedef struct
{
   kal_uint16 ampr_ns09_10_15_0;
   kal_uint16 ampr_ns09_10_15_1;
} LTE_AMPR_NS09_T;

typedef struct
{
   kal_uint16 ampr_ns10_15_A;
   kal_uint16 ampr_ns10_20_A;
} LTE_AMPR_NS10_T;

typedef struct
{
   kal_uint16 ampr_ns11_3_A;
   kal_uint16 ampr_ns11_3_B;
   kal_uint16 ampr_ns11_5_A;
   kal_uint16 ampr_ns11_5_B0;
   kal_uint16 ampr_ns11_5_C;
   kal_uint16 ampr_ns11_10_A;
   kal_uint16 ampr_ns11_15_A0;
   kal_uint16 ampr_ns11_15_A1_0;
   kal_uint16 ampr_ns11_15_A1_1;
   kal_uint16 ampr_ns11_15_A2_1;
   kal_uint16 ampr_ns11_15_A3;
   kal_uint16 ampr_ns11_15_B0;
   kal_uint16 ampr_ns11_15_B1_0;
   kal_uint16 ampr_ns11_15_B2;
   kal_uint16 ampr_ns11_15_B3;
   kal_uint16 ampr_ns11_20_A0;
   kal_uint16 ampr_ns11_20_A1_0;
   kal_uint16 ampr_ns11_20_A1_1;
   kal_uint16 ampr_ns11_20_A2_1;
   kal_uint16 ampr_ns11_20_A3;
} LTE_AMPR_NS11_T;

typedef struct
{
   kal_uint16 ampr_ns12_1_A0;
   kal_uint16 ampr_ns12_1_A1;
   kal_uint16 ampr_ns12_1_B;
   kal_uint16 ampr_ns12_3_A0;
   kal_uint16 ampr_ns12_3_A1;
   kal_uint16 ampr_ns12_3_B;
   kal_uint16 ampr_ns12_5_A0;
   kal_uint16 ampr_ns12_5_A1;
   kal_uint16 ampr_ns12_5_B;
   kal_uint16 ampr_ns13_5_A0;
   kal_uint16 ampr_ns13_5_A1;
   kal_uint16 ampr_ns14_10_A0;
   kal_uint16 ampr_ns14_10_A1;
   kal_uint16 ampr_ns14_15_A0;
   kal_uint16 ampr_ns14_15_A1;
} LTE_AMPR_NS12_13_14_T;

typedef struct
{
   kal_uint16 ampr_ns15_H0_1_C;
   kal_uint16 ampr_ns15_H0_3_A;
   kal_uint16 ampr_ns15_H0_3_B;
   kal_uint16 ampr_ns15_H0_3_C;
   kal_uint16 ampr_ns15_H0_5_A;
   kal_uint16 ampr_ns15_H0_5_B;
   kal_uint16 ampr_ns15_H0_5_C;
   kal_uint16 ampr_ns15_H0_10_A;
   kal_uint16 ampr_ns15_H0_10_B;
   kal_uint16 ampr_ns15_H0_10_C;
   kal_uint16 ampr_ns15_H0_15_A;
   kal_uint16 ampr_ns15_H0_15_B;
   kal_uint16 ampr_ns15_H0_15_C;
   kal_uint16 ampr_ns15_H1_5_C;
   kal_uint16 ampr_ns15_H1_10_A;
   kal_uint16 ampr_ns15_H1_10_B;
   kal_uint16 ampr_ns15_H1_10_C;
   kal_uint16 ampr_ns15_H1_15_A;
   kal_uint16 ampr_ns15_H1_15_B;
   kal_uint16 ampr_ns15_H1_15_C;
} LTE_AMPR_NS15_T;

typedef struct
{
   kal_uint16 ampr_ns16_L0_3_A;
   kal_uint16 ampr_ns16_L0_3_B;
   kal_uint16 ampr_ns16_L0_5_A;
   kal_uint16 ampr_ns16_L0_5_B;
   kal_uint16 ampr_ns16_L0_5_C;
   kal_uint16 ampr_ns16_L0_5_D;
   kal_uint16 ampr_ns16_L0_10_A;
   kal_uint16 ampr_ns16_L0_10_B0;
   kal_uint16 ampr_ns16_L0_10_B1;
   kal_uint16 ampr_ns16_L0_10_D;
   kal_uint16 ampr_ns16_L0_10_E;
   kal_uint16 ampr_ns16_L1_5_A;
   kal_uint16 ampr_ns16_L1_5_B;
   kal_uint16 ampr_ns16_L1_5_C;
   kal_uint16 ampr_ns16_L1_10_A0;
   kal_uint16 ampr_ns16_L1_10_A1;
   kal_uint16 ampr_ns16_L1_10_C;
   kal_uint16 ampr_ns16_L1_10_D;
   kal_uint16 ampr_ns16_L1_10_E;
   kal_uint16 ampr_ns16_L2_10_A;
   kal_uint16 ampr_ns16_L2_10_B;
   kal_uint16 ampr_ns16_L2_10_C;
   kal_uint16 ampr_ns16_L2_10_D;
} LTE_AMPR_NS16_T;

typedef struct
{
   kal_uint16 ampr_ns18_5;
   kal_uint16 ampr_ns18_10_15_20;
} LTE_AMPR_NS18_T;

typedef struct
{
   kal_uint16 ampr_ns19_10_B;
   kal_uint16 ampr_ns19_15_A0;
   kal_uint16 ampr_ns19_15_A1;
   kal_uint16 ampr_ns19_15_B;
   kal_uint16 ampr_ns19_20_A0;
   kal_uint16 ampr_ns19_20_A1;
   kal_uint16 ampr_ns19_20_B;
} LTE_AMPR_NS19_T;

typedef struct
{
   kal_uint16 ampr_ns20_5_A;
   kal_uint16 ampr_ns20_5_B0_0;
   kal_uint16 ampr_ns20_5_B0_1;
   kal_uint16 ampr_ns20_5_B1;
   kal_uint16 ampr_ns20_10_A0;
   kal_uint16 ampr_ns20_10_A1_0;
   kal_uint16 ampr_ns20_10_A1_1;
   kal_uint16 ampr_ns20_10_A2;
   kal_uint16 ampr_ns20_10_B0;
   kal_uint16 ampr_ns20_10_B1;
   kal_uint16 ampr_ns20_15_A0_0;
   kal_uint16 ampr_ns20_15_A0_1;
   kal_uint16 ampr_ns20_15_A1_0;
   kal_uint16 ampr_ns20_15_A1_1;
   kal_uint16 ampr_ns20_15_A2;
   kal_uint16 ampr_ns20_15_A3;
   kal_uint16 ampr_ns20_20_A0;
   kal_uint16 ampr_ns20_20_A1_0;
   kal_uint16 ampr_ns20_20_A1_1;
   kal_uint16 ampr_ns20_20_A2;
   kal_uint16 ampr_ns20_20_A3;
   kal_uint16 ampr_ns20_20_A4;
   kal_uint16 ampr_ns20_20_A5;
} LTE_AMPR_NS20_T;

typedef struct
{
   kal_uint16 ampr_ns21_10_A0;
   kal_uint16 ampr_ns21_10_A1;
   kal_uint16 ampr_ns21_10_B0;
   kal_uint16 ampr_ns21_10_B1;
} LTE_AMPR_NS21_T;

typedef union
{
   kal_uint16 ampr_raw[24];
   LTE_AMPR_NS03_T ampr_ns03;
   LTE_AMPR_NS04_T ampr_ns04;
   LTE_AMPR_NS05_T ampr_ns05;
   LTE_AMPR_NS07_T ampr_ns07;
   LTE_AMPR_NS08_T ampr_ns08;
   LTE_AMPR_NS09_T ampr_ns09;
   LTE_AMPR_NS10_T ampr_ns10;
   LTE_AMPR_NS11_T ampr_ns11;
   LTE_AMPR_NS12_13_14_T ampr_ns12_13_14;
   LTE_AMPR_NS15_T ampr_ns15;
   LTE_AMPR_NS16_T ampr_ns16;
   LTE_AMPR_NS18_T ampr_ns18;
   LTE_AMPR_NS19_T ampr_ns19;
   LTE_AMPR_NS20_T ampr_ns20;
   LTE_AMPR_NS21_T ampr_ns21;
} LTE_AMPR_ALL_T;

typedef struct
{
   LTE_Band bandIdx;
   kal_uint16 amprIdx;
   LTE_AMPR_ALL_T amprData;
} LTE_AMPRAdjust_T;

typedef struct
{
   kal_uint16 data_h;
   kal_uint16 data_L;
}PDATA_SET_T;

typedef struct
{
   PDATA_SET_T pr0;
   PDATA_SET_T pr1;
   PDATA_SET_T pr2;
   PDATA_SET_T pr3;
   PDATA_SET_T pr3b;
   PDATA_SET_T pr3c;
}ERF_RX_PDATA_T;

typedef struct
{
   PDATA_SET_T pt0;
   PDATA_SET_T pt1;
   PDATA_SET_T pt2;
   PDATA_SET_T pt3;
}ERF_TX_PDATA_T;

typedef struct
{
   kal_int16 fpr0;
   kal_int16 fpr1;
   kal_int16 fpr2;
   kal_int16 tpr0;
   kal_int16 tpr1;
   kal_int16 tpr2;
}ERF_RXON_BPIOFFSET_T;

typedef struct
{
   kal_int16 fpt0;
   kal_int16 fpt1;
   kal_int16 fpt2;
   kal_int16 fpr3b;
   kal_int16 tpt0;
   kal_int16 tpt1;
   kal_int16 tpt2;
   kal_int16 tpr3b;
}ERF_TXON_BPIOFFSET_T;

typedef struct
{
   kal_int16 fpr3;
   kal_int16 tpr3;
   kal_int16 fpr3c;
   kal_int16 tpr3c;
}ERF_RXOFF_BPIOFFSET_T;

typedef struct
{
   kal_int16 fpt3;
   kal_int16 tpt3;
}ERF_TXOFF_BPIOFFSET_T;

typedef struct
{
   PDATA_SET_T pr0;
   PDATA_SET_T pr1;
   PDATA_SET_T pr2;
   PDATA_SET_T pr3;
   PDATA_SET_T pr3b;
   PDATA_SET_T pr3c;
   PDATA_SET_T pt0;
   PDATA_SET_T pt1;
   PDATA_SET_T pt2;
   PDATA_SET_T pt3;
   kal_uint16 rxio;
   kal_uint16 txio;
}ERF_SPLIT_RFDATA_T;

typedef struct
{
   LTE_Band bandIdx;
   ERF_RX_PDATA_T RxPdata;
}ERF_RX_PDATABASE_T;

typedef struct
{
   LTE_Band bandIdx;
   ERF_TX_PDATA_T TxPdata;
}ERF_TX_PDATABASE_T;

typedef struct
{
   kal_uint16 Band;
   kal_uint16 SplitNum;
   kal_uint16 SplitBandEndDL[3];
   kal_uint16 SplitBandEndUL[3];
   kal_int16 PowerCompensation;
   kal_int16 CouplerCompensation;
}ERF_SPLIT_BAND_IND_T;

typedef struct
{
   LTE_Band bandIdx;
   ERF_SPLIT_RFDATA_T SplitRFdata;
}ERF_SPLIT_RFDATABASE_T;

typedef struct
{
   kal_uint16 TASEna;
   kal_uint16 TASWithTestSimEna;
   kal_uint16 TASMask_H;
   kal_uint16 TASMask_L;
   kal_uint16 TASInitAnt;
   kal_uint16 ForceAntEna;
   kal_uint16 ForceAntIndex;
   LTE_Band TASBand[(14)];
}ERF_TAS_BAND_IND_T;

typedef struct
{
   PDATA_SET_T pdata_tas;
}ERF_TAS_RFDATA_T;

typedef struct
{
   ERF_TAS_BAND_IND_T TASBandInd;
   ERF_TAS_RFDATA_T TASRfDatabase[((14)*7)];
}EL1_TAS_PARAMETER;

typedef struct
{
   kal_int16 ENB_SM;
   kal_int16 N_MS_j_hys;
   kal_int16 N_MS_SM_fadeout;
   kal_int16 PHI_bound;
   kal_int16 PHI_01_default;
   kal_int16 PHI_10_default;
   kal_int16 ENB_DB;
   kal_int16 DELTA_DB_fail_step_RSRP;
   kal_int16 DELTA_DB_fail_step_TXP;
   kal_int16 N_MS_DB_relax;
   kal_int16 DELTA_DB_TO_step;
   kal_int16 DELTA_DB_bound_RSRP;
   kal_int16 DELTA_DB_bound_TXP;


   kal_int16 RSRP_diff_thd;
   kal_int16 RSRP_diff_thd_TXP;
   kal_int16 RSRP_diff_thd_CB;
   kal_int16 RSRP_thd_connect_EN;
   kal_int16 RSRP_cb_drop_thd;
   kal_int16 TXP_cb_inc_thd;
   kal_int16 nMS_cb;
   kal_int16 HTP_level;
   kal_int16 HTP_ratio_thd;
   kal_int16 TXP_inc_thd_sb;
   kal_int16 nMS_sb;
}EL1_TAS_OTHER;

typedef struct
{
   LTE_Band bandIdx;
   kal_uint8 rxio;
   kal_uint8 rxdio;
   kal_uint8 txio;
}ERF_IOBASE_T;


typedef struct
{
   kal_uint8 rf_rx_path0_en;
   kal_uint8 rf_rx_path1_en;
}ERf_RX_PATH_CONFIG_T;


typedef struct
{
   kal_uint32 pa_data[(8+1)][5];
}ERfTestCmdMipiPaData;
# 1172 "interface/modem/lte/el1_rf_public.h"
typedef struct
{
   kal_uint16 temperature_CW_low;
   kal_uint16 temperature_CW_high;
} ERF_TEMPERATURE_SENSOR_CW_DATA_T;

typedef enum
{

  ERF_ETCAL_MODE_NORMAL_META = 0,
  ERF_ETCAL_MODE_NORMAL_CAL = 1,
  ERF_ETCAL_MODE_ET_CAL = 2
} ERF_ETCAL_MODE_T;




extern LTE_sRAMPDATA LTE_BandNone_RampData;
extern LTE_sRAMPDATA LTE_Band1_RampData;
extern LTE_sRAMPDATA LTE_Band2_RampData;
extern LTE_sRAMPDATA LTE_Band3_RampData;
extern LTE_sRAMPDATA LTE_Band4_RampData;
extern LTE_sRAMPDATA LTE_Band5_RampData;
extern LTE_sRAMPDATA LTE_Band6_RampData;
extern LTE_sRAMPDATA LTE_Band7_RampData;
extern LTE_sRAMPDATA LTE_Band8_RampData;
extern LTE_sRAMPDATA LTE_Band9_RampData;
extern LTE_sRAMPDATA LTE_Band11_RampData;
extern LTE_sRAMPDATA LTE_Band12_RampData;
extern LTE_sRAMPDATA LTE_Band13_RampData;
extern LTE_sRAMPDATA LTE_Band14_RampData;
extern LTE_sRAMPDATA LTE_Band17_RampData;
extern LTE_sRAMPDATA LTE_Band18_RampData;
extern LTE_sRAMPDATA LTE_Band19_RampData;
extern LTE_sRAMPDATA LTE_Band20_RampData;
extern LTE_sRAMPDATA LTE_Band21_RampData;
extern LTE_sRAMPDATA LTE_Band25_RampData;
extern LTE_sRAMPDATA LTE_Band26_RampData;
extern LTE_sRAMPDATA LTE_Band27_RampData;
extern LTE_sRAMPDATA LTE_Band28_RampData;
extern LTE_sRAMPDATA LTE_Band34_RampData;
extern LTE_sRAMPDATA LTE_Band38_RampData;
extern LTE_sRAMPDATA LTE_Band39_RampData;
extern LTE_sRAMPDATA LTE_Band40_RampData;
extern LTE_sRAMPDATA LTE_Band41_RampData;

extern LTE_sPAOCTLVLSETTING LTE_BandNone_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band1_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band2_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band3_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band4_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band5_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band6_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band7_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band8_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band9_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band11_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band12_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band13_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band14_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band17_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band18_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band19_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band20_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band21_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band25_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band26_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band27_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band28_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band34_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band38_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band39_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band40_PaOctLevData;
extern LTE_sPAOCTLVLSETTING LTE_Band41_PaOctLevData;

extern LTE_RSSIBandGainTable LTE_BandNone_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band1_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band2_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band3_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band4_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band5_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band6_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band7_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band8_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band9_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band11_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band12_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band13_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band14_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band17_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band18_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band19_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band20_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band21_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band25_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band26_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band27_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band28_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band34_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band38_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band39_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band40_RSSIGainTbl;
extern LTE_RSSIBandGainTable LTE_Band41_RSSIGainTbl;

extern LTE_FreqAdjustTable FreqAdjustTbl;
extern FreqAdj_CO_TMS_Config_FLOAT FreqAdj_CO_TMS_ConfigTbl;

extern LTE_Band lteBandIndArray[];
extern LTE_sPAOCTLVLSETTING* LTE_PaOctLevTable[];
extern LTE_sRAMPDATA* LTE_RampData[];
extern LTE_RSSIBandGainTable* LTE_RSSIGainTbl[];
extern LTE_FreqAdjustTable* LTE_FreqAdjustTbl[];
extern FreqAdj_CO_TMS_Config* LTE_FreqAdjGPScotmsTbl[];

extern LTE_TemperatureDac_T* LTE_TEMP_DAC;

extern kal_uint8 num_pa_mode;
extern kal_uint8 num_hysteresis;


extern LTE_RfcEtVinLutPerBand_T* LTE_EtVinLutTbl[(14 +1)];


extern LTE_RfcEtVinLutPerBand_T LTE_BandNone_EtVinLutData;
extern LTE_RfcEtCompParam_T LTE_EtCompParam;
extern LTE_RfcEtCalResultPerSubBand_T LTE_EtCalResultPerSubBand;

extern LTE_RfCEtCalResultPerBand_T LTE_EtCalResultPerBand;

extern LTE_RfcEtCalTempCompStatus_T g_EtCalTempCompStatus;

extern LTE_Band lteBandIndArray[(14 +1)];

extern LTE_Band lteBandIndArraySVLTE[(14 +1)];

extern ERF_RX_PDATABASE_T ERF_RX_PDATABASE[14];
extern ERF_TX_PDATABASE_T ERF_TX_PDATABASE[14];
extern ERF_RXON_BPIOFFSET_T ERF_RXON_BPIOFFSET;
extern ERF_TXON_BPIOFFSET_T ERF_TXON_BPIOFFSET;
extern ERF_RXOFF_BPIOFFSET_T ERF_RXOFF_BPIOFFSET;
extern ERF_TXOFF_BPIOFFSET_T ERF_TXOFF_BPIOFFSET;
extern ERF_IOBASE_T ERF_RF_IOBASE[14];
extern LTE_MPRAdjust_T LTE_MPRAdjustTbl[14];
extern LTE_AMPRAdjust_T LTE_AMPRAdjustTbl[14];
extern kal_uint16 TPC_Compen_Err_UboundTbl[(45)];
extern ERF_SPLIT_RFDATABASE_T ERF_SPLIT_RFDATABASE[(5*(3 +1 -1))];
extern const LTE_MPRAdjust_T LTE_MPRAdjustTbl_All[];
extern const LTE_AMPRAdjust_T LTE_AMPRAdjustTbl_All[];


extern kal_uint16 LTE_MIPI_BYPASS_FEATURE_ENABLE;
extern LTE_Band LTE_MIPI_BYPASS_BandIndArray[(5)];
extern kal_int16 LTE_MIPI_BYPASS_PowerCompArray[(5)];
extern kal_int16 LTE_MIPI_BYPASS_CouplerCompArray[(5)];
extern LTE_MIPI_EVENT_TABLE_T* LTE_MIPI_BYPASS_TX_EVENT_TABLE[];
extern LTE_MIPI_EVENT_TABLE_T* LTE_MIPI_BYPASS_TPC_EVENT_TABLE[];
extern LTE_MIPI_TPC_SECTION_TABLE_T* LTE_MIPI_BYPASS_PA_TPC_SECTION_DATA[];


extern kal_uint16 LTE_MIPI_ENABLE;
extern LTE_MIPI_EVENT_TABLE_T* LTE_MIPI_RX_EVENT_TABLE[];
extern LTE_MIPI_EVENT_TABLE_T* LTE_MIPI_TX_EVENT_TABLE[];
extern LTE_MIPI_EVENT_TABLE_T* LTE_MIPI_TPC_EVENT_TABLE[];
extern LTE_MIPI_TPC_SECTION_TABLE_T* LTE_MIPI_PA_TPC_SECTION_DATA[];
extern LTE_MIPI_DATA_SUBBAND_TABLE_T* LTE_MIPI_RX_DATA_TABLE[];
extern LTE_MIPI_DATA_SUBBAND_TABLE_T* LTE_MIPI_TX_DATA_TABLE[];
extern LTE_MIPI_DATA_SUBBAND_TABLE_T* LTE_MIPI_BYPASS_TX_DATA_TABLE[];

extern kal_uint32 LTE_MIPI_RX_EVENT_SIZE_TABLE[];
extern kal_uint32 LTE_MIPI_TX_EVENT_SIZE_TABLE[];
extern kal_uint32 LTE_MIPI_TPC_EVENT_SIZE_TABLE[];
extern kal_uint32 LTE_MIPI_PA_TPC_SECTION_DATA_SIZE[];
extern kal_uint32 LTE_MIPI_RX_DATA_SIZE_TABLE[];
extern kal_uint32 LTE_MIPI_TX_DATA_SIZE_TABLE[];
extern kal_uint32 LTE_MIPI_BYPASS_TX_DATA_SIZE_TABLE[];
extern kal_uint32 LTE_MIPI_BYPASS_TX_EVENT_SIZE_TABLE[];
extern kal_uint32 LTE_MIPI_BYPASS_TPC_EVENT_SIZE_TABLE[];
extern kal_uint32 LTE_MIPI_BYPASS_PA_TPC_SECTION_DATA_SIZE[];


extern kal_uint16 LTE_DRDI_STATUS;


extern ERf_RX_PATH_CONFIG_T LTE_RF_RX_PATH_CONFIG_DEFAULT;


extern EL1_TAS_PARAMETER EL1_TAS_PARAMETER_TABLE;
extern EL1_TAS_OTHER EL1_TAS_OTHER_TABLE;


extern kal_uint16 LTE_ET_ENABLE;
extern kal_uint16 LTE_ETM_chip_type;
extern kal_uint8 LTE_ET_MIPI_USID;
extern kal_uint8 ET_OUTER_LOOP_GAIN[ 14 ];
extern kal_uint16 ET_VPA_OFFSET_VOLTAGE[ 14 ];
extern kal_uint16 ET_MINIMUM_OUTPUT_VOLTAGE[ 14 ];
extern kal_uint16 ET_MAXIMUM_OUTPUT_VOLTAGE[ 14 ];
extern ERF_TEMPERATURE_SENSOR_CW_DATA_T erf_temperature_CW_data;
extern ERF_ETCAL_MODE_T EPHY_META_CAL_STATUS;


extern LTE_VPA_SOURCE_CONFIGUATION_TYPE LTE_VpaSourceConfig[14];
# 1382 "interface/modem/lte/el1_rf_public.h"
extern kal_uint16 LTE_BB_BACKOFF_DECREASE_FEATURE_ENABLE;

extern kal_uint16 BB_BACKOFF_DECREASE_Tbl[(45)];

void ephy_chk_pwron_cal_data();

void EPHY_ET_MetaDebug(kal_uint32 bsidata);
void ephy_et_cal_init(kal_int32* src_addr);
kal_uint16 ephy_rf_et_get_feature_enable_flag( void );

kal_uint8 ephy_rf_et_get_outer_loop_gain_value( kal_uint32 band_index );
kal_int32 ephy_rf_et_get_outer_loop_gain_ana_value( kal_uint32 band_index );

kal_uint16 ephy_rf_et_get_vpa_offset_voltage_value( kal_uint32 band_index );
kal_uint32 ephy_rf_et_get_vpa_offset_voltage_ana_value( kal_uint32 band_index );
kal_uint8 ephy_rf_et_get_vpa_offset_voltage_register_value( kal_uint32 band_index );

kal_uint16 ephy_rf_et_get_calibration_minimum_output_voltage_value( kal_uint32 band_index );
kal_uint16 ephy_rf_et_get_calibration_SW1_output_voltage_value( kal_uint32 band_index );
kal_uint8 ephy_rf_et_generate_reg5_value( kal_uint16 SW1_output_voltage, kal_uint8 SW1_integrator_disable_flag );
kal_uint8 ephy_rf_et_get_reg5_value_by_band( kal_uint32 band_index );

kal_uint16 ephy_rf_et_get_calibration_maximum_output_voltage_value( kal_uint32 band_index );
kal_uint16 ephy_rf_et_get_calibration_SW2_output_voltage_value( kal_uint32 band_index );
kal_uint8 ephy_rf_et_generate_reg4_value( kal_uint16 SW2_output_voltage, kal_uint8 SW2_auto_bypass_enable_flag );
kal_uint8 ephy_rf_et_get_reg4_value_by_band( kal_uint32 band_index );
kal_uint8 ephy_rf_et_get_SW2_auto_bypass_flag( void );
kal_uint16 ephy_rf_et_get_if_ETM_is_used( kal_uint32 band_index );

LTE_Band ephy_rf_get_lteBandIndArray_value( kal_uint32 band_index );
kal_uint16 ephy_rf_get_if_this_band_is_supported_query_by_band_index( kal_uint32 band_index );
void ephy_rf_et_changeTPCdataToAPTmode( void );
void ephy_cmd_et_force_fd_mode_set_init_state( void );
# 1018 "interface/service/nvram/nvram_data_items.h" 2
# 1 "interface/modem/lte/el1_drdi.h" 1
# 143 "interface/modem/lte/el1_drdi.h"
# 1 "interface/modem/lte/el1_rf_public.h" 1
# 144 "interface/modem/lte/el1_drdi.h" 2
# 234 "interface/modem/lte/el1_drdi.h"
typedef struct
{

   LTE_Band bandToModify;


   kal_uint32 asmLogics[(6)];

} El1CustomDynamicInitLteBpiData;

typedef struct
{

   kal_int16 BPI_Timing[(12)];

} El1CustomDynamicInitLteBpiTiming;
# 259 "interface/modem/lte/el1_drdi.h"
typedef struct
{

   LTE_Band bandToModify;


   kal_uint8 lnaPortNum;


   kal_uint8 lnaPortNum2;


   kal_uint8 txOutputSel;

} El1CustomDynamicInitLteRxLnaPortTxPath;
# 282 "interface/modem/lte/el1_drdi.h"
typedef struct
{

   LTE_Band bandToModify;


   kal_uint16 SplitNum;


   kal_uint16 SplitBandEndDL[3];


   kal_uint16 SplitBandEndUL[3];


   kal_int16 PowerCompensation;


   kal_int16 CouplerCompensation;
} El1CustomDynamicInitLteSplitBandInd;
# 310 "interface/modem/lte/el1_drdi.h"
typedef struct
{

   LTE_Band bandToModify;


   kal_uint32 asmLogics[(6)];


   kal_uint8 lnaPortNum;


   kal_uint8 lnaPortNum2;


   kal_uint8 txOutputSel;

} El1CustomDynamicInitLteSplitRfData;
# 336 "interface/modem/lte/el1_drdi.h"
typedef struct
{

   LTE_Band bandToModify;


   kal_int16 PowerCompensation;


   kal_int16 CouplerCompensation;

} El1CustomDynamicInitLteMipiBypassInfo;
# 356 "interface/modem/lte/el1_drdi.h"
typedef struct
{

   ERF_TAS_BAND_IND_T TASBandInd;


   kal_uint32 TASRfDatabase[((14)*7)];

} El1CustomDynamicInitLteTASParameter;
# 373 "interface/modem/lte/el1_drdi.h"
typedef struct
{

   LTE_sRAMPDATA *TxRampData[(14)];

} El1CustomDynamicInitLteTxRampData;
# 387 "interface/modem/lte/el1_drdi.h"
typedef struct
{

   LTE_sPAOCTLVLSETTING *TxPaOctLvl[(14)];

} El1CustomDynamicInitLteTxPaOctLvlData;
# 401 "interface/modem/lte/el1_drdi.h"
typedef struct
{

   LTE_RSSIBandGainTable *RxPathLoss[(14)];

} El1CustomDynamicInitLteRxPathLossData;
# 416 "interface/modem/lte/el1_drdi.h"
typedef struct
{

   LTE_TemperatureDac_T *TempDac;

} El1CustomDynamicInitLteTempDac;
# 446 "interface/modem/lte/el1_drdi.h"
typedef void (*El1CustomFunction)(void *usrDataPtr);







typedef enum
{
   EL1_CUSTOM_NULL_ACTION = (0),
   EL1_CUSTOM_BASE_PROC_ACTION = (0),
   EL1_CUSTOM_GPIO_DETECTION = (1),
   EL1_CUSTOM_ADC_DETECTION = (2),
   EL1_CUSTOM_BARCODE_DETECTION = (3),
   EL1_CUSTOM_MAX_PROC_ACTIONS
} El1CustomActionId;
# 471 "interface/modem/lte/el1_drdi.h"
typedef struct
{

   LTE_Band lteBandInd[(14 +1)];


   ERF_RX_PDATABASE_T lteRxPdata[14];
   ERF_TX_PDATABASE_T lteTxPdata[14];


   ERF_IOBASE_T lteIoBase[14];





} El1CustomDynamicInitResultRFParams;
# 496 "interface/modem/lte/el1_drdi.h"
typedef struct
{
   kal_uint16 combined_config_index;
   kal_uint8 first_config_index_base;
   kal_uint8 second_config_index_base;
   kal_uint8 third_config_index_base;

   kal_int32 gpio_get_pin_rpc_status;
   kal_uint32 gpio_return_pin_num[(3)];
   kal_uint32 gpio_pin_value[(3)];
   kal_uint32 gpio_combined_pin_value;
   kal_int32 adc_get_ch_num_rpc_status;
   DCL_STATUS adc_dcl_handle_status;
   DCL_STATUS adc_cal_dcl_handle_status;
   kal_uint32 adc_get_ch_num;
   kal_uint32 adc_dac_read_result;
   kal_uint32 adc_volt_translate_result;
   kal_uint8 adc_volt_level;
   kal_bool barcode_lid_read_status;
   kal_uint8 barcode_digit_read_result;

   kal_bool lte_rf_band_support_lid_write_status;
   kal_bool lte_rf_bpi_rx_data_lid_write_status;
   kal_bool lte_rf_bpi_tx_data_lid_write_status;
   kal_bool lte_rf_io_base_lid_write_status;
   kal_bool lte_txrampdata_lid_write_status;
   kal_bool lte_txpaoctlvl_lid_write_status;
   kal_bool lte_rxpathloss_lid_write_status;
   kal_bool lte_tempdac_lid_write_status;
   kal_bool lte_mipienable_lid_write_status;

   kal_bool lte_mipi_bypass_enable_lid_write_status;
   kal_bool lte_mpradjtbl_lid_write_status;
   kal_bool lte_ampradjtbl_lid_write_status;

   El1CustomDynamicInitResultRFParams custom_dynamic_init_result_params;

   kal_uint8 custom_debug_enable;
   kal_uint16 custom_total_set_nums;
} El1CustomDynamicInitDebug;






typedef enum
{
   LTE_DRDI_MIPI_DISABLE = 0,
   LTE_DRDI_MIPI_ENABLE = 1
}EL1_DRDI_MIPI_SETTING_T;


typedef enum
{
   LTE_DRDI_MIPI_BYPASS_DISABLE = 0,
   LTE_DRDI_MIPI_BYPASS_ENABLE = 1
}EL1_DRDI_MIPI_BYPASS_SETTING_T;


typedef struct
{
   EL1_DRDI_MIPI_SETTING_T LteMipiEnable;
   LTE_MIPI_EVENT_TABLE_T **RxEventTable;
   LTE_MIPI_DATA_SUBBAND_TABLE_T **RxDataTable;
   LTE_MIPI_EVENT_TABLE_T **TxEventTable;
   LTE_MIPI_DATA_SUBBAND_TABLE_T **TxDataTable;
   LTE_MIPI_EVENT_TABLE_T **TpcEventTable;
   LTE_MIPI_DATA_TABLE_T **TpcDataTable;
   LTE_MIPI_TPC_SECTION_TABLE_T **PaTpcSecData;
   LTE_MIPI_IMM_DATA_TABLE_T *InitialCW;
   LTE_MIPI_IMM_DATA_TABLE_T *SleepCW;
   LTE_MIPI_IMM_DATA_TABLE_T *AsmIsolateCW;
   kal_uint32 *RxEventSize;
   kal_uint32 *RxDataSize;
   kal_uint32 *TxEventSize;
   kal_uint32 *TxDataSize;
   kal_uint32 *TpcEventSize;
   kal_uint32 *PaTpcSecSize;
} El1CustomDynamicInitLteMipiEventData;


typedef struct
{
   EL1_DRDI_MIPI_BYPASS_SETTING_T LteMipiBypassEnable;
   LTE_MIPI_EVENT_TABLE_T **BypassTxEventTable;
   LTE_MIPI_DATA_SUBBAND_TABLE_T **BypassTxDataTable;
   LTE_MIPI_EVENT_TABLE_T **BypassTpcEventTable;
   LTE_MIPI_DATA_TABLE_T **BypassTpcDataTable;
   LTE_MIPI_TPC_SECTION_TABLE_T **BypassPaTpcSecData;
   kal_uint32 *BypassTxEventSize;
   kal_uint32 *BypassTxDataSize;
   kal_uint32 *BypassTpcEventSize;
   kal_uint32 *BypassPaTpcSecSize;
} El1CustomDynamicInitLteMipiBypassEventData;
# 1019 "interface/service/nvram/nvram_data_items.h" 2





# 1 "driver/drv_def/drv_features_adc.h" 1
# 1025 "interface/service/nvram/nvram_data_items.h" 2
# 1 "driver/drv_def/drv_features_rtc.h" 1
# 1026 "interface/service/nvram/nvram_data_items.h" 2
# 1 "driver/drv_def/drv_features_sim.h" 1
# 1027 "interface/service/nvram/nvram_data_items.h" 2





# 1 "interface/sap/svc/sysservice_msgid.h" 1
# 38 "interface/sap/svc/sysservice_msgid.h"
# 1 "interface/sap/module_msg_range.h" 1



# 1 "interface/sap/cross_core/global_msg_range.h" 1





typedef enum {

    MSG_ID_GLOBAL_BEGIN = 0, MSG_ID_GLOBAL_NIL_CHECK_TAIL = MSG_ID_GLOBAL_BEGIN,
    MSG_ID_GLOBAL_MD1_BEGIN, MSG_ID_GLOBAL_MD1_TAIL = MSG_ID_GLOBAL_MD1_BEGIN + 99,
    MSG_ID_GLOBAL_MD2_BEGIN, MSG_ID_GLOBAL_MD2_TAIL = MSG_ID_GLOBAL_MD2_BEGIN + 99,
    MSG_ID_GLOBAL_MD3_BEGIN, MSG_ID_GLOBAL_MD3_TAIL = MSG_ID_GLOBAL_MD3_BEGIN + 99,
    MSG_ID_GLOBAL_TAIL,

} GLOBAL_MSG_ID_CODE_BEGIN;

typedef unsigned int msg_global_id_boundary_check1[302 - MSG_ID_GLOBAL_TAIL];
# 5 "interface/sap/module_msg_range.h" 2

typedef enum {
    MSG_ID_XXX_CODE_BASE = (500+302),

    MSG_ID_SYSDEBUG_CODE_BEGIN, MSG_ID_SYSDEBUG_CODE_TAIL = MSG_ID_SYSDEBUG_CODE_BEGIN + 100,

    MSG_ID_CC_CODE_BEGIN, MSG_ID_CC_CODE_TAIL = MSG_ID_CC_CODE_BEGIN + 100,

    MSG_ID_CISS_CODE_BEGIN, MSG_ID_CISS_CODE_TAIL = MSG_ID_CISS_CODE_BEGIN + 150,

 MSG_ID_MM_CODE_BEGIN, MSG_ID_MM_CODE_TAIL = MSG_ID_MM_CODE_BEGIN + 200,

    MSG_ID_SMS_CODE_BEGIN, MSG_ID_SMS_CODE_TAIL = MSG_ID_SMS_CODE_BEGIN + 100,

    MSG_ID_SIM_PUBLIC_CODE_BEGIN, MSG_ID_SIM_PUBLIC_CODE_TAIL = MSG_ID_SIM_PUBLIC_CODE_BEGIN + 50,

    MSG_ID_SIM_PS_CODE_BEGIN, MSG_ID_SIM_PS_CODE_TAIL = MSG_ID_SIM_PS_CODE_BEGIN + 200,

    MSG_ID_L4_PUBLIC_CODE_BEGIN, MSG_ID_L4_PUBLIC_CODE_TAIL = MSG_ID_L4_PUBLIC_CODE_BEGIN + 100,

    MSG_ID_L4C_CODE_BEGIN, MSG_ID_L4C_CODE_TAIL = MSG_ID_L4C_CODE_BEGIN + 600,

    MSG_ID_RAT_TCM_CODE_BEGIN, MSG_ID_RAT_TCM_CODE_TAIL = MSG_ID_RAT_TCM_CODE_BEGIN + 200,

    MSG_ID_TCM_CODE_BEGIN, MSG_ID_TCM_CODE_TAIL = MSG_ID_TCM_CODE_BEGIN + 200,

    MSG_ID_CSM_CODE_BEGIN, MSG_ID_CSM_CODE_TAIL = MSG_ID_CSM_CODE_BEGIN + 120,

    MSG_ID_SMSAL_CODE_BEGIN, MSG_ID_SMSAL_CODE_TAIL = MSG_ID_SMSAL_CODE_BEGIN + 150,

    MSG_ID_SMU_CODE_BEGIN, MSG_ID_SMU_CODE_TAIL = MSG_ID_SMU_CODE_BEGIN + 100,

    MSG_ID_UEM_CODE_BEGIN, MSG_ID_UEM_CODE_TAIL = MSG_ID_UEM_CODE_BEGIN + 150,

    MSG_ID_RAC_CODE_BEGIN, MSG_ID_RAC_CODE_TAIL = MSG_ID_RAC_CODE_BEGIN + 200,

    MSG_ID_USAT_CODE_BEGIN, MSG_ID_USAT_CODE_TAIL = MSG_ID_USAT_CODE_BEGIN + 100,

    MSG_ID_PHB_CODE_BEGIN, MSG_ID_PHB_CODE_TAIL = MSG_ID_PHB_CODE_BEGIN + 150,

    MSG_ID_PS_CODE_BEGIN, MSG_ID_PS_CODE_TAIL = MSG_ID_PS_CODE_BEGIN + 150,

    MSG_ID_MBCI_CODE_BEGIN, MSG_ID_MBCI_CODE_TAIL = MSG_ID_MBCI_CODE_BEGIN + 20,

    MSG_ID_ATCI_CODE_BEGIN, MSG_ID_ATCI_CODE_TAIL = MSG_ID_ATCI_CODE_BEGIN + 150,

    MSG_ID_ENG_CODE_BEGIN, MSG_ID_ENG_CODE_TAIL = MSG_ID_ENG_CODE_BEGIN + 150,

    MSG_ID_PSDM_CODE_BEGIN, MSG_ID_PSDM_CODE_TAIL = MSG_ID_PSDM_CODE_BEGIN + 30,

    MSG_ID_VMMI_CODE_BEGIN, MSG_ID_VMMI_CODE_TAIL = MSG_ID_VMMI_CODE_BEGIN + 100,

    MSG_ID_RLC_CODE_BEGIN, MSG_ID_RLC_CODE_TAIL = MSG_ID_RLC_CODE_BEGIN + 100,

    MSG_ID_RLC_TDD_CODE_BEGIN, MSG_ID_RLC_TDD_CODE_TAIL = MSG_ID_RLC_TDD_CODE_BEGIN + 100,

    MSG_ID_RRM_COMMON_CODE_BEGIN, MSG_ID_RRM_COMMON_CODE_TAIL = MSG_ID_RRM_COMMON_CODE_BEGIN + 100,

    MSG_ID_RRM_COMMON_TDD_CODE_BEGIN, MSG_ID_RRM_COMMON_TDD_CODE_TAIL = MSG_ID_RRM_COMMON_TDD_CODE_BEGIN + 100,

    MSG_ID_RCS_CODE_BEGIN, MSG_ID_RCS_CODE_TAIL = MSG_ID_RCS_CODE_BEGIN + 100,

    MSG_ID_RCS_TDD_CODE_BEGIN, MSG_ID_RCS_TDD_CODE_TAIL = MSG_ID_RCS_TDD_CODE_BEGIN + 100,

    MSG_ID_RMPC_CODE_BEGIN, MSG_ID_RMPC_CODE_TAIL = MSG_ID_RMPC_CODE_BEGIN + 100,

    MSG_ID_RMPC_TDD_CODE_BEGIN, MSG_ID_RMPC_TDD_CODE_TAIL = MSG_ID_RMPC_TDD_CODE_BEGIN + 100,

    MSG_ID_RRM_MPAL_MM_CODE_BEGIN, MSG_ID_RRM_MPAL_MM_CODE_TAIL = MSG_ID_RRM_MPAL_MM_CODE_BEGIN + 100,

    MSG_ID_RRM_MPAL_MM_TDD_CODE_BEGIN, MSG_ID_RRM_MPAL_MM_TDD_CODE_TAIL = MSG_ID_RRM_MPAL_MM_TDD_CODE_BEGIN + 100,

    MSG_ID_MAC_CODE_BEGIN, MSG_ID_MAC_CODE_TAIL = MSG_ID_MAC_CODE_BEGIN + 100,

    MSG_ID_MAC_TDD_CODE_BEGIN, MSG_ID_MAC_TDD_CODE_TAIL = MSG_ID_MAC_TDD_CODE_BEGIN + 100,

    MSG_ID_LAPDM_CODE_BEGIN, MSG_ID_LAPDM_CODE_TAIL = MSG_ID_LAPDM_CODE_BEGIN + 100,

    MSG_ID_LAPDM_TDD_CODE_BEGIN, MSG_ID_LAPDM_TDD_CODE_TAIL = MSG_ID_LAPDM_TDD_CODE_BEGIN + 100,

    MSG_ID_REASM_CODE_BEGIN, MSG_ID_REASM_CODE_TAIL = MSG_ID_REASM_CODE_BEGIN + 100,

    MSG_ID_REASM_TDD_CODE_BEGIN, MSG_ID_REASM_TDD_CODE_TAIL = MSG_ID_REASM_TDD_CODE_BEGIN + 100,

    MSG_ID_MPAL_CODE_BEGIN, MSG_ID_MPAL_CODE_TAIL = MSG_ID_MPAL_CODE_BEGIN + 100,

    MSG_ID_MPAL_TDD_CODE_BEGIN, MSG_ID_MPAL_TDD_CODE_TAIL = MSG_ID_MPAL_TDD_CODE_BEGIN + 100,

    MSG_ID_LLC_CODE_BEGIN, MSG_ID_LLC_CODE_TAIL = MSG_ID_LLC_CODE_BEGIN + 100,

    MSG_ID_P2P_CODE_BEGIN, MSG_ID_P2P_CODE_TAIL = MSG_ID_P2P_CODE_BEGIN + 100,

    MSG_ID_SND_CODE_BEGIN, MSG_ID_SND_CODE_TAIL = MSG_ID_SND_CODE_BEGIN + 100,

    MSG_ID_SM_CODE_BEGIN, MSG_ID_SM_CODE_TAIL = MSG_ID_SM_CODE_BEGIN + 100,

    MSG_ID_TDT_CODE_BEGIN, MSG_ID_TDT_CODE_TAIL = MSG_ID_TDT_CODE_BEGIN + 100,

    MSG_ID_T30_CODE_BEGIN, MSG_ID_T30_CODE_TAIL = MSG_ID_T30_CODE_BEGIN + 50,

    MSG_ID_FA_CODE_BEGIN, MSG_ID_FA_CODE_TAIL = MSG_ID_FA_CODE_BEGIN + 50,

    MSG_ID_L2R_CODE_BEGIN, MSG_ID_L2R_CODE_TAIL = MSG_ID_L2R_CODE_BEGIN + 100,

    MSG_ID_RLP_CODE_BEGIN, MSG_ID_RLP_CODE_TAIL = MSG_ID_RLP_CODE_BEGIN + 100,

    MSG_ID_PS_PUBLIC_VT_MSG_CODE_BEGIN, MSG_ID_PS_PUBLIC_VT_MSG_CODE_TAIL = MSG_ID_PS_PUBLIC_VT_MSG_CODE_BEGIN + 30,

    MSG_ID_VT_CODE_BEGIN, MSG_ID_VT_CODE_TAIL = MSG_ID_VT_CODE_BEGIN + 70,

    MSG_ID_NVRAM_CODE_BEGIN, MSG_ID_NVRAM_CODE_TAIL = MSG_ID_NVRAM_CODE_BEGIN + 100,

    MSG_ID_L1_CODE_BEGIN, MSG_ID_L1_CODE_TAIL = MSG_ID_L1_CODE_BEGIN + 300,

    MSG_ID_HAL_L1_CODE_BEGIN, MSG_ID_HAL_L1_CODE_TAIL = MSG_ID_HAL_L1_CODE_BEGIN + 40,

    MSG_ID_L1HISR_CODE_BEGIN, MSG_ID_L1HISR_CODE_TAIL = MSG_ID_L1HISR_CODE_BEGIN + 40,

    MSG_ID_FT_CODE_BEGIN, MSG_ID_FT_CODE_TAIL = MSG_ID_FT_CODE_BEGIN + 100,

    MSG_ID_TST_CODE_BEGIN, MSG_ID_TST_CODE_TAIL = MSG_ID_TST_CODE_BEGIN + 1200,

    MSG_ID_AUDIO_MSG_CODE_BEGIN, MSG_ID_AUDIO_MSG_CODE_TAIL = MSG_ID_AUDIO_MSG_CODE_BEGIN + 100,

    MSG_ID_RATCM_CODE_BEGIN, MSG_ID_RATCM_CODE_TAIL = MSG_ID_RATCM_CODE_BEGIN + 300,

    MSG_ID_RATDM_CODE_BEGIN, MSG_ID_RATDM_CODE_TAIL = MSG_ID_RATDM_CODE_BEGIN + 100,

    MSG_ID_ADR_CODE_BEGIN, MSG_ID_ADR_CODE_TAIL = MSG_ID_ADR_CODE_BEGIN + 20,

    MSG_ID_CSCE_CODE_BEGIN, MSG_ID_CSCE_CODE_TAIL = MSG_ID_CSCE_CODE_BEGIN + 100,

    MSG_ID_CSE_CODE_BEGIN, MSG_ID_CSE_CODE_TAIL = MSG_ID_CSE_CODE_BEGIN + 100,

    MSG_ID_MEME_CODE_BEGIN, MSG_ID_MEME_CODE_TAIL = MSG_ID_MEME_CODE_BEGIN + 100,

    MSG_ID_RRCE_CODE_BEGIN, MSG_ID_RRCE_CODE_TAIL = MSG_ID_RRCE_CODE_BEGIN + 100,

    MSG_ID_SIBE_CODE_BEGIN, MSG_ID_SIBE_CODE_TAIL = MSG_ID_SIBE_CODE_BEGIN + 100,

    MSG_ID_SLCE_CODE_BEGIN, MSG_ID_SLCE_CODE_TAIL = MSG_ID_SLCE_CODE_BEGIN + 200,

    MSG_ID_DBME_CODE_BEGIN, MSG_ID_DBME_CODE_TAIL = MSG_ID_DBME_CODE_BEGIN + 20,

 MSG_ID_USIME_CODE_BEGIN, MSG_ID_USIME_CODE_TAIL = MSG_ID_USIME_CODE_BEGIN + 100,

    MSG_ID_URR_CODE_BEGIN, MSG_ID_URR_CODE_TAIL = MSG_ID_URR_CODE_BEGIN + 50,

    MSG_ID_ADR_TDD_CODE_BEGIN, MSG_ID_ADR_TDD_CODE_TAIL = MSG_ID_ADR_TDD_CODE_BEGIN + 20,

    MSG_ID_CSCE_TDD_CODE_BEGIN, MSG_ID_CSCE_TDD_CODE_TAIL = MSG_ID_CSCE_TDD_CODE_BEGIN + 100,

    MSG_ID_CSE_TDD_CODE_BEGIN, MSG_ID_CSE_TDD_CODE_TAIL = MSG_ID_CSE_TDD_CODE_BEGIN + 100,

    MSG_ID_MEME_TDD_CODE_BEGIN, MSG_ID_MEME_TDD_CODE_TAIL = MSG_ID_MEME_TDD_CODE_BEGIN + 100,

 MSG_ID_RRCE_TDD_CODE_BEGIN, MSG_ID_RRCE_TDD_CODE_TAIL = MSG_ID_RRCE_TDD_CODE_BEGIN + 100,

    MSG_ID_SIBE_TDD_CODE_BEGIN, MSG_ID_SIBE_TDD_CODE_TAIL = MSG_ID_SIBE_TDD_CODE_BEGIN + 100,

 MSG_ID_SLCE_TDD_CODE_BEGIN, MSG_ID_SLCE_TDD_CODE_TAIL = MSG_ID_SLCE_TDD_CODE_BEGIN + 200,

    MSG_ID_DBME_TDD_CODE_BEGIN, MSG_ID_DBME_TDD_CODE_TAIL = MSG_ID_DBME_TDD_CODE_BEGIN + 20,

    MSG_ID_USIME_TDD_CODE_BEGIN, MSG_ID_USIME_TDD_CODE_TAIL = MSG_ID_USIME_TDD_CODE_BEGIN + 100,

    MSG_ID_URR_TDD_CODE_BEGIN, MSG_ID_URR_TDD_CODE_TAIL = MSG_ID_URR_TDD_CODE_BEGIN + 50,

    MSG_ID_UMAC_CODE_BEGIN, MSG_ID_UMAC_CODE_TAIL = MSG_ID_UMAC_CODE_BEGIN + 100,

    MSG_ID_URLC_CODE_BEGIN, MSG_ID_URLC_CODE_TAIL = MSG_ID_URLC_CODE_BEGIN + 150,

 MSG_ID_SEQ_CODE_BEGIN, MSG_ID_SEQ_CODE_TAIL = MSG_ID_SEQ_CODE_BEGIN + 100,

    MSG_ID_URLC_TDD_CODE_BEGIN, MSG_ID_URLC_TDD_CODE_TAIL = MSG_ID_URLC_TDD_CODE_BEGIN + 150,

    MSG_ID_UL2_CODE_BEGIN, MSG_ID_UL2_CODE_TAIL = MSG_ID_UL2_CODE_BEGIN + 100,

    MSG_ID_BMC_CODE_BEGIN, MSG_ID_BMC_CODE_TAIL = MSG_ID_BMC_CODE_BEGIN + 100,

    MSG_ID_CSR_CODE_BEGIN, MSG_ID_CSR_CODE_TAIL = MSG_ID_CSR_CODE_BEGIN + 100,

    MSG_ID_DRLC_CODE_BEGIN, MSG_ID_DRLC_CODE_TAIL = MSG_ID_DRLC_CODE_BEGIN + 100,

    MSG_ID_PDCP_TDD_CODE_BEGIN, MSG_ID_PDCP_TDD_CODE_TAIL = MSG_ID_PDCP_TDD_CODE_BEGIN + 100,

    MSG_ID_PDCP_CODE_BEGIN, MSG_ID_PDCP_CODE_TAIL = MSG_ID_PDCP_CODE_BEGIN + 100,

    MSG_ID_RABM_TDD_CODE_BEGIN, MSG_ID_RABM_TDD_CODE_TAIL = MSG_ID_RABM_TDD_CODE_BEGIN + 100,

    MSG_ID_RABM_CODE_BEGIN, MSG_ID_RABM_CODE_TAIL = MSG_ID_RABM_CODE_BEGIN + 100,

 MSG_ID_BMC_TDD_CODE_BEGIN, MSG_ID_BMC_TDD_CODE_TAIL = MSG_ID_BMC_TDD_CODE_BEGIN + 100,

 MSG_ID_CSR_TDD_CODE_BEGIN, MSG_ID_CSR_TDD_CODE_TAIL = MSG_ID_CSR_TDD_CODE_BEGIN + 100,

 MSG_ID_DRLC_TDD_CODE_BEGIN, MSG_ID_DRLC_TDD_CODE_TAIL = MSG_ID_DRLC_TDD_CODE_BEGIN + 100,

    MSG_ID_UL2D_TDD_CODE_BEGIN, MSG_ID_UL2D_TDD_CODE_TAIL = MSG_ID_UL2D_TDD_CODE_BEGIN + 100,

    MSG_ID_UL2D_CODE_BEGIN, MSG_ID_UL2D_CODE_TAIL = MSG_ID_UL2D_CODE_BEGIN + 100,

    MSG_ID_DM_CSCE_CODE_BEGIN, MSG_ID_DM_CSCE_CODE_TAIL = MSG_ID_DM_CSCE_CODE_BEGIN + 100,

    MSG_ID_UAS_GAS_CODE_BEGIN, MSG_ID_UAS_GAS_CODE_TAIL = MSG_ID_UAS_GAS_CODE_BEGIN + 100,

    MSG_ID_EAS_GAS_CODE_BEGIN, MSG_ID_EAS_GAS_CODE_TAIL = MSG_ID_EAS_GAS_CODE_BEGIN + 100,

    MSG_ID_DM_MEME_CODE_BEGIN, MSG_ID_DM_MEME_CODE_TAIL = MSG_ID_DM_MEME_CODE_BEGIN + 100,

    MSG_ID_DM_RRCE_CODE_BEGIN, MSG_ID_DM_RRCE_CODE_TAIL = MSG_ID_DM_RRCE_CODE_BEGIN + 100,

    MSG_ID_DM_RRCE_TDD_CODE_BEGIN, MSG_ID_DM_RRCE_TDD_CODE_TAIL = MSG_ID_DM_RRCE_TDD_CODE_BEGIN + 100,

    MSG_ID_GEMINI_UAS_CODE_BEGIN, MSG_ID_GEMINI_UAS_CODE_TAIL = MSG_ID_GEMINI_UAS_CODE_BEGIN + 100,

    MSG_ID_GEMINI_GAS_CODE_BEGIN, MSG_ID_GEMINI_GAS_CODE_TAIL = MSG_ID_GEMINI_GAS_CODE_BEGIN + 100,

    MSG_ID_UL1_MSG_CODE_BEGIN, MSG_ID_UL1_MSG_CODE_TAIL = MSG_ID_UL1_MSG_CODE_BEGIN + 300,

    MSG_ID_UL1DATA_MSG_CODE_BEGIN, MSG_ID_UL1DATA_MSG_CODE_TAIL = MSG_ID_UL1DATA_MSG_CODE_BEGIN + 20,

    MSG_ID_UL1HISR_MSG_CODE_BEGIN, MSG_ID_UL1HISR_MSG_CODE_TAIL = MSG_ID_UL1HISR_MSG_CODE_BEGIN + 5,

    MSG_ID_UL1C_MSG_CODE_BEGIN, MSG_ID_UL1C_MSG_CODE_TAIL = MSG_ID_UL1C_MSG_CODE_BEGIN + 20,

    MSG_ID_LL1_MSG_CODE_BEGIN, MSG_ID_LL1_MSG_CODE_TAIL = MSG_ID_LL1_MSG_CODE_BEGIN + 150,

    MSG_ID_UL1TST_MSG_CODE_BEGIN, MSG_ID_UL1TST_MSG_CODE_TAIL = MSG_ID_UL1TST_MSG_CODE_BEGIN + 50,

    MSG_ID_UAGPS_CP_CODE_BEGIN, MSG_ID_UAGPS_CP_CODE_TAIL = MSG_ID_UAGPS_CP_CODE_BEGIN + 30,

    MSG_ID_GPS_MSG_CODE_BEGIN, MSG_ID_GPS_MSG_CODE_TAIL = MSG_ID_GPS_MSG_CODE_BEGIN + 50,

    MSG_ID_TL1_MSG_CODE_BEGIN, MSG_ID_TL1_MSG_CODE_TAIL = MSG_ID_TL1_MSG_CODE_BEGIN + 200,

    MSG_ID_TL1DATA_AST_MSG_CODE_BEGIN, MSG_ID_TL1DATA_AST_MSG_CODE_TAIL = MSG_ID_TL1DATA_AST_MSG_CODE_BEGIN + 200,

    MSG_ID_TL1HISR_AST_MSG_CODE_BEGIN, MSG_ID_TL1HISR_AST_MSG_CODE_TAIL = MSG_ID_TL1HISR_AST_MSG_CODE_BEGIN + 50,

    MSG_ID_TL1FTA_AST_MSG_CODE_BEGIN, MSG_ID_TL1FTA_AST_MSG_CODE_TAIL = MSG_ID_TL1FTA_AST_MSG_CODE_BEGIN + 50,

    MSG_ID_RSVAS_CODE_BEGIN, MSG_ID_RSVAS_CODE_TAIL = MSG_ID_RSVAS_CODE_BEGIN + 100,

    MSG_ID_RSVAK_CODE_BEGIN, MSG_ID_RSVAK_CODE_TAIL = MSG_ID_RSVAK_CODE_BEGIN + 50,

    MSG_ID_RSVAU_CODE_BEGIN, MSG_ID_RSVAU_CODE_TAIL = MSG_ID_RSVAU_CODE_BEGIN + 50,

    MSG_ID_RSVAG_CODE_BEGIN, MSG_ID_RSVAG_CODE_TAIL = MSG_ID_RSVAG_CODE_BEGIN + 50,

    MSG_ID_RSVAE_CODE_BEGIN, MSG_ID_RSVAE_CODE_TAIL = MSG_ID_RSVAE_CODE_BEGIN + 50,

    MSG_ID_NDIS_MSG_CODE_BEGIN, MSG_ID_NDIS_MSG_CODE_TAIL = MSG_ID_NDIS_MSG_CODE_BEGIN + 20,

    MSG_ID_UPS_PUBLIC_CODE_BEGIN, MSG_ID_UPS_PUBLIC_CODE_TAIL = MSG_ID_UPS_PUBLIC_CODE_BEGIN + 20,

    MSG_ID_UPS_MSG_CODE_BEGIN, MSG_ID_UPS_MSG_CODE_TAIL = MSG_ID_UPS_MSG_CODE_BEGIN + 100,

    MSG_ID_PS_PUBLIC_SUPL_MSG_CODE_BEGIN, MSG_ID_PS_PUBLIC_SUPL_MSG_CODE_TAIL = MSG_ID_PS_PUBLIC_SUPL_MSG_CODE_BEGIN + 30,

    MSG_ID_SUPL_MSG_CODE_BEGIN, MSG_ID_SUPL_MSG_CODE_TAIL = MSG_ID_SUPL_MSG_CODE_BEGIN + 20,

    MSG_ID_CMUX_CODE_BEGIN, MSG_ID_CMUX_CODE_TAIL = MSG_ID_CMUX_CODE_BEGIN + 100,

    MSG_ID_PPP_CODE_BEGIN, MSG_ID_PPP_CODE_TAIL = MSG_ID_PPP_CODE_BEGIN + 100,

    MSG_ID_EXT_MODEM_CODE_BEGIN, MSG_ID_EXT_MODEM_CODE_TAIL = MSG_ID_EXT_MODEM_CODE_BEGIN + 50,

    MSG_ID_WMT_MSG_CODE_BEGIN, MSG_ID_WMT_MSG_CODE_TAIL = MSG_ID_WMT_MSG_CODE_BEGIN + 100,

    MSG_ID_EM_CODE_BEGIN, MSG_ID_EM_CODE_TAIL = MSG_ID_EM_CODE_BEGIN + 300,

    MSG_ID_HOSTAP_MSG_CODE_BEGIN, MSG_ID_HOSTAP_MSG_CODE_TAIL = MSG_ID_HOSTAP_MSG_CODE_BEGIN + 100,

    MSG_ID_FS_CODE_BEGIN, MSG_ID_FS_CODE_TAIL = MSG_ID_FS_CODE_BEGIN + 60,

    MSG_ID_MED_CODE_BEGIN, MSG_ID_MED_CODE_TAIL = MSG_ID_MED_CODE_BEGIN + 100,

    MSG_ID_DPS_CODE_BEGIN, MSG_ID_DPS_CODE_TAIL = MSG_ID_DPS_CODE_BEGIN + 150,

    MSG_ID_UDPS_CODE_BEGIN, MSG_ID_UDPS_CODE_TAIL = MSG_ID_UDPS_CODE_BEGIN + 1000,

    MSG_ID_DRIVER_CODE_BEGIN, MSG_ID_DRIVER_CODE_TAIL = MSG_ID_DRIVER_CODE_BEGIN + 1000,

    MSG_ID_MEUT_MSG_CODE_BEGIN, MSG_ID_MEUT_MSG_CODE_TAIL = MSG_ID_MEUT_MSG_CODE_BEGIN + 500,

 MSG_ID_L1_EXT_CODE_BEGIN,MSG_ID_L1_EXT_CODE_TAIL = MSG_ID_L1_EXT_CODE_BEGIN + 30,

 MSG_ID_HAPLUS_MSG_CODE_BEGIN,MSG_ID_HAPLUS_MSG_CODE_TAIL = MSG_ID_HAPLUS_MSG_CODE_BEGIN + 200,

 MSG_ID_MRS_CODE_BEGIN,MSG_ID_MRS_CODE_TAIL = MSG_ID_MRS_CODE_BEGIN + 30,


    MSG_ID_EL1_CODE_BEGIN, MSG_ID_EL1_CODE_TAIL = MSG_ID_EL1_CODE_BEGIN + 200,

    MSG_ID_L1EDPS_CODE_BEGIN, MSG_ID_L1EDPS_CODE_TAIL = MSG_ID_L1EDPS_CODE_BEGIN + 1000,

    MSG_ID_EDYN_CODE_BEGIN, MSG_ID_EDYN_CODE_TAIL = MSG_ID_EDYN_CODE_BEGIN + 10,

    MSG_ID_MLL1_MSG_CODE_BEGIN, MSG_ID_MLL1_MSG_CODE_TAIL = MSG_ID_MLL1_MSG_CODE_BEGIN + 200,

    MSG_ID_EL2_CODE_BEGIN, MSG_ID_EL2_CODE_TAIL = MSG_ID_EL2_CODE_BEGIN + 100,

    MSG_ID_ERRC_CODE_BEGIN, MSG_ID_ERRC_CODE_TAIL = MSG_ID_ERRC_CODE_BEGIN + 500,




    MSG_ID_CLDMACORE_CODE_BEGIN, MSG_ID_CLDMACORE_CODE_END = MSG_ID_CLDMACORE_CODE_BEGIN + 5,

    MSG_ID_CCIFCORE_CODE_BEGIN, MSG_ID_CCIFCORE_CODE_END = MSG_ID_CCIFCORE_CODE_BEGIN + 5,

    MSG_ID_TFTLIB_CODE_BEGIN, MSG_ID_TFTLIB_CODE_TAIL = MSG_ID_TFTLIB_CODE_BEGIN + 100,

    MSG_ID_NWSEL_CODE_BEGIN, MSG_ID_NWSEL_CODE_TAIL = MSG_ID_NWSEL_CODE_BEGIN + 150,

    MSG_ID_EMM_CODE_BEGIN, MSG_ID_EMM_CODE_TAIL = MSG_ID_EMM_CODE_BEGIN + 700,

    MSG_ID_EVAL_CODE_BEGIN, MSG_ID_EVAL_CODE_TAIL = MSG_ID_EVAL_CODE_BEGIN + 200,

    MSG_ID_ETC_CODE_BEGIN, MSG_ID_ETC_CODE_TAIL = MSG_ID_ETC_CODE_BEGIN + 150,

    MSG_ID_ESM_CODE_BEGIN, MSG_ID_ESM_CODE_TAIL = MSG_ID_ESM_CODE_BEGIN + 100,

    MSG_ID_HIF_MW_CODE_BEGIN, MSG_ID_HIF_MW_CODE_TAIL = MSG_ID_HIF_MW_CODE_BEGIN + 1500,

    MSG_ID_HIF_SVC_CODE_BEGIN, MSG_ID_HIF_SVC_CODE_TAIL = MSG_ID_HIF_SVC_CODE_BEGIN + 1000,

    MSG_ID_UPCM_CODE_BEGIN , MSG_ID_UPCM_CODE_TAIL = MSG_ID_UPCM_CODE_BEGIN+20,

    MSG_ID_PROXY_CODE_BEGIN, MSG_ID_PROXY_CODE_TAIL = MSG_ID_PROXY_CODE_BEGIN + 20,

    MSG_ID_LTECSR_CODE_BEGIN, MSG_ID_LTECSR_CODE_TAIL = MSG_ID_LTECSR_CODE_BEGIN + 50,

    MSG_ID_IMC_CODE_BEGIN, MSG_ID_IMC_CODE_TAIL = MSG_ID_IMC_CODE_BEGIN + 1000,

    MSG_ID_SDM_CODE_BEGIN, MSG_ID_SDM_CODE_TAIL = MSG_ID_SDM_CODE_BEGIN + 500,

    MSG_ID_VDM_CODE_BEGIN, MSG_ID_VDM_CODE_TAIL = MSG_ID_VDM_CODE_BEGIN + 1000,

    MSG_ID_IMCSMS_CODE_BEGIN, MSG_ID_IMCSMS_CODE_TAIL = MSG_ID_IMCSMS_CODE_BEGIN + 20,

    MSG_ID_IMSP_CODE_BEGIN, MSG_ID_IMSP_CODE_TAIL = MSG_ID_IMSP_CODE_BEGIN + 500,

    MSG_ID_AS_LOG_CODE_BEGIN, MSG_ID_AS_LOG_CODE_TAIL = MSG_ID_AS_LOG_CODE_BEGIN + 100,

    MSG_ID_LBS_CODE_BEGIN , MSG_ID_LBS_CODE_TAIL = MSG_ID_LBS_CODE_BEGIN + 20,

    MSG_ID_LPP_CODE_BEGIN, MSG_ID_LPP_CODE_TAIL = MSG_ID_LPP_CODE_BEGIN + 100,

    MSG_ID_GMSS_CODE_BEGIN, MSG_ID_GMSS_CODE_TAIL = MSG_ID_GMSS_CODE_BEGIN + 150,


    MSG_ID_CCCI_MSG_CODE_BEGIN = 0xFF00, MSG_ID_CCCI_MSG_CODE_TAIL = MSG_ID_CCCI_MSG_CODE_BEGIN + 254 - 64,

    MSG_ID_CODE_END,
    END_OF_MSG_ID_BEGIN = MSG_ID_CODE_END,
    END_OF_MSG_ID_TAIL = MSG_ID_CODE_END,
} MSG_ID_CODE_BEGIN;
# 372 "interface/sap/module_msg_range.h"
typedef enum __cgen_msg_type_id_END_OF_MSG_ID_BEGIN{MSG_TAG_END_OF_MSG_ID_BEGIN = END_OF_MSG_ID_BEGIN,
    MSG_ID_END = END_OF_MSG_ID_BEGIN,
MSG_ID_CGEN_PARSE_LAST_ID=END_OF_MSG_ID_TAIL }_cgen_msg_type_id_END_OF_MSG_ID_TAIL;
# 39 "interface/sap/svc/sysservice_msgid.h" 2
# 1 "interface/sap/cross_core/global_msgid.h" 1
# 38 "interface/sap/cross_core/global_msgid.h"
# 1 "interface/sap/cross_core/global_msg_range.h" 1
# 39 "interface/sap/cross_core/global_msgid.h" 2

typedef enum __cgen_msg_type_id_MSG_ID_GLOBAL_BEGIN{MSG_TAG_MSG_ID_GLOBAL_BEGIN = MSG_ID_GLOBAL_BEGIN,

    MSG_ID_INVALID_TYPE = MSG_ID_GLOBAL_BEGIN,
    MSG_ID_UIM_SIM_INVALID_TYPE = MSG_ID_GLOBAL_BEGIN,
MSG_ID_CGEN_PARSE_LAST_ID=MSG_ID_GLOBAL_NIL_CHECK_TAIL }_cgen_msg_type_id_MSG_ID_GLOBAL_NIL_CHECK_TAIL;

typedef enum __cgen_msg_type_id_MSG_ID_GLOBAL_MD1_BEGIN{MSG_TAG_MSG_ID_GLOBAL_MD1_BEGIN = MSG_ID_GLOBAL_MD1_BEGIN,

# 1 "interface/sap/cross_core/md1_msgid.h" 1
# 70 "interface/sap/cross_core/md1_msgid.h"
 MSG_ID_UIM_SIM_APDU_ACCESS_REQ,
 MSG_ID_UIM_SIM_APDU_ACCESS_CNF,
 MSG_ID_UIM_SIM_ERROR_IND,
 MSG_ID_UIM_SIM_STATUS_IND,
 MSG_ID_UIM_SIM_RESET_IND,
 MSG_ID_UIM_SIM_SECURITY_CHANGE_IND,
 MSG_ID_UIM_SIM_AUTHENTICATE_REQ,
 MSG_ID_UIM_SIM_AUTHENTICATE_CNF,
 MSG_ID_UIM_SAT_TERMINAL_RSP_REQ,
 MSG_ID_UIM_SAT_TERMINAL_RSP_CNF,
 MSG_ID_UIM_SAT_ENVELOPE_REQ,
 MSG_ID_UIM_SAT_ENVELOPE_CNF,
 MSG_ID_UIM_SAT_FILE_CHANGE_RES,
 MSG_ID_UIM_SAT_PROACTIVE_CMD_IND,
 MSG_ID_UIM_SIM_READ_REQ,
 MSG_ID_UIM_SIM_READ_CNF,

 MSG_ID_BT_UIM_SIM_RESET_REQ,
 MSG_ID_BT_UIM_SIM_RESET_CNF,
 MSG_ID_BT_UIM_SIM_POWER_OFF_REQ,
 MSG_ID_BT_UIM_SIM_POWER_OFF_CNF,
 MSG_ID_BT_UIM_SIM_POWER_ON_REQ,
 MSG_ID_BT_UIM_SIM_POWER_ON_CNF,
 MSG_ID_UIM_PRL_READ_FINISH_IND,
# 49 "interface/sap/cross_core/global_msgid.h" 2
    MSG_TAG_MSG_ID_GLOBAL_MD1_TAIL,
MSG_ID_CGEN_PARSE_LAST_ID=MSG_ID_GLOBAL_MD1_TAIL }_cgen_msg_type_id_MSG_ID_GLOBAL_MD1_TAIL;

typedef enum __cgen_msg_type_id_MSG_ID_GLOBAL_MD2_BEGIN{MSG_TAG_MSG_ID_GLOBAL_MD2_BEGIN = MSG_ID_GLOBAL_MD2_BEGIN,

# 1 "interface/sap/cross_core/md2_msgid.h" 1
# 55 "interface/sap/cross_core/global_msgid.h" 2
    MSG_TAG_MSG_ID_GLOBAL_MD2_TAIL,
MSG_ID_CGEN_PARSE_LAST_ID=MSG_ID_GLOBAL_MD2_TAIL }_cgen_msg_type_id_MSG_ID_GLOBAL_MD2_TAIL;

typedef enum __cgen_msg_type_id_MSG_ID_GLOBAL_MD3_BEGIN{MSG_TAG_MSG_ID_GLOBAL_MD3_BEGIN = MSG_ID_GLOBAL_MD3_BEGIN,

# 1 "interface/sap/cross_core/md3_msgid.h" 1
# 71 "interface/sap/cross_core/md3_msgid.h"
    MSG_ID_C2K_LTE_RAT_CHANGE_REQ ,
    MSG_ID_C2K_LTE_RAT_CHANGE_CNF ,


    MSG_ID_GMSS_CSS_MCC_SEARCH_REQ ,
    MSG_ID_GMSS_CSS_MCC_SEARCH_CNF ,
    MSG_ID_GMSS_CSS_SYS_ACQUIRE_REQ ,
    MSG_ID_GMSS_CSS_SYS_ACQUIRE_CNF ,
    MSG_ID_GMSS_CSS_CS_REG_REQ ,
    MSG_ID_GMSS_CSS_CS_REG_CNF ,
    MSG_ID_GMSS_CSS_PS_REG_REQ ,
    MSG_ID_GMSS_CSS_PS_REG_CNF ,
    MSG_ID_GMSS_CSS_DEACTIVATE_REQ ,
    MSG_ID_GMSS_CSS_DEACTIVATE_CNF ,
    MSG_ID_GMSS_CSS_RAT_CHANGE_REQ ,
    MSG_ID_GMSS_CSS_READY_IND ,
    MSG_ID_GMSS_CSS_NOT_READY_IND ,
    MSG_ID_GMSS_CSS_SYS_LOST_IND ,
    MSG_ID_GMSS_CSS_SYS_RECOVERY_IND ,
    MSG_ID_GMSS_CSS_1X_CONN_STATUS_IND ,
    MSG_ID_GMSS_CSS_MMSS_FILE_UPDATE_IND ,
    MSG_ID_GMSS_CSS_PS_CHANGE_IND ,
    MSG_ID_GMSS_CSS_PS_CONN_STATUS_IND ,
    MSG_ID_GMSS_CSS_MCC_CHANGE_IND ,
    MSG_ID_GMSS_CSS_PS_DEREG_REQ ,
    MSG_ID_GMSS_CSS_ACTIVE_SIM_INFO_REQ ,


    MSG_ID_LTE_C2K_RAT_CHANGE_REQ ,
    MSG_ID_LTE_C2K_RAT_CHANGE_CNF ,


    MSG_ID_VAL_RAC_RAT_CHANGE_START_REQ ,
    MSG_ID_VAL_RAC_RAT_CHANGE_FINISH_REQ ,
    MSG_ID_MD3_DEBUG_TRACE_IND,


    MSG_ID_CLC_EAS_EARFCN_LIST_UPDATE_REQ ,

    MSG_ID_C2K_EL1_TXPWR_BACKOFF_INFO_IND,
 MSG_ID_RRM_VAL_GSM_RF_STATUS_REQ,


    MSG_ID_EAS_CSS_SYS_SNIFFER_REQ ,
    MSG_ID_EAS_CSS_SYS_SNIFFER_CNF ,

    MSG_ID_URR_VAL_UAS_TX_STATUS_REQ ,


    MSG_ID_ERRC_VAL_EAS_TX_STATUS_REQ ,
# 61 "interface/sap/cross_core/global_msgid.h" 2
    MSG_TAG_MSG_ID_GLOBAL_MD3_TAIL,
MSG_ID_CGEN_PARSE_LAST_ID=MSG_ID_GLOBAL_MD3_TAIL }_cgen_msg_type_id_MSG_ID_GLOBAL_MD3_TAIL;
# 40 "interface/sap/svc/sysservice_msgid.h" 2



typedef enum __cgen_msg_type_id_MSG_ID_SYSDEBUG_CODE_BEGIN{MSG_TAG_MSG_ID_SYSDEBUG_CODE_BEGIN = MSG_ID_SYSDEBUG_CODE_BEGIN,
MSG_ID_TIMER_EXPIRY = MSG_ID_SYSDEBUG_CODE_BEGIN,





MSG_ID_STACK_SIM_TIMER_START,
MSG_ID_STACK_SIM_TIMER_STOP,
MSG_ID_STACK_SIM_TIMER_EXPIRY,
MSG_ID_MDDBG_REQ,
MSG_ID_MDDBG_RESPONSE,
MSG_ID_MDDBG_API_UT,
MSG_ID_CGEN_PARSE_LAST_ID=MSG_ID_SYSDEBUG_CODE_TAIL }_cgen_msg_type_id_MSG_ID_SYSDEBUG_CODE_TAIL;
# 1033 "interface/service/nvram/nvram_data_items.h" 2


# 1 "interface/service/hif/hmu_conf_data.h" 1
# 51 "interface/service/hif/hmu_conf_data.h"
typedef enum
{
 HMU_USB_DEV_MIN = 0,
 HMU_USB_DEV_ACM, hmu_usb_dev_cdcacm = HMU_USB_DEV_ACM,
 HMU_USB_DEV_ECM, hmu_usb_dev_ecm = HMU_USB_DEV_ECM,
 HMU_USB_DEV_MBIM, hmu_usb_dev_mbim = HMU_USB_DEV_MBIM,
 HMU_USB_DEV_CDROM, hmu_usb_dev_cdrom = HMU_USB_DEV_CDROM,
 HMU_USB_DEV_DISK, hmu_usb_dev_disk = HMU_USB_DEV_DISK,
 HMU_USB_DEV_RNDIS, hmu_usb_dev_rndis = HMU_USB_DEV_RNDIS,



 HMU_USB_DEV_MAX,

 HMU_MOBILE_DEV_MIN = 20,
 HMU_MOBILE_DEV_COM ,
 HMU_MOBILE_DEV_ETH ,
 HMU_MOBILE_DEV_IP ,
 HMU_MOBILE_DEV_IPC,
 HMU_MOBILE_DEV_MB ,
 HMU_MOBILE_DEV_MAX ,

 HMU_EXT_DEV_MIN = 40 ,
 HMU_EXT_DEV_UART ,
 HMU_EXT_DEV_MAX ,

 HMU_DEV_NONE = 0x7fffffff,
}hmuEmuDeviceType_enum;




typedef enum
{

 HMU_HIFCORE_MIN = 0,
 HMU_HIFCORE_USB ,
 HMU_HIFCORE_SDIO ,
 HMU_HIFCORE_CCIF ,
    HMU_HIFCORE_CAIF ,
    HMU_HIFCORE_CLDMA ,
    HMU_HIFCORE_CCCI ,
 HMU_HIFCORE_MAX ,

 HMU_HIFCORE_TYPE_NONE = 0x7fffffff,
}hmuHifCoreType_enum;
# 121 "interface/service/hif/hmu_conf_data.h"
typedef struct HMU_EMUDEV_INFO_STRUCT
{

 hmuEmuDeviceType_enum dev_type;

 kal_uint32 dev_mapping;

 union {
  void *reserve ;
  struct HMU_EMUDEV_INFO_STRUCT *next ;
 } u ;

 kal_uint32 ext_devinfo_len;

 kal_char ext_devinfo[64];
}hmu_emudev_info;





typedef struct HMU_CONF_STRUCT_STRUCT
{

 kal_uint32 dev_num;

 kal_uint32 ext_hifinfo_len;

 kal_char ext_hifinfo[512];

 hmu_emudev_info dev_info[10];
}hmu_conf_struct;





typedef struct HMU_HD_CONF_STRUCT_STRUCT
{
 kal_uint32 dev_num;
 kal_uint32 ext_hifinfo_len;
 kal_char ext_hifinfo[512];
 hmu_emudev_info dev_info[3];
}hmu_hd_conf_struct;
# 173 "interface/service/hif/hmu_conf_data.h"
typedef kal_bool (*uldrv_except_init)(kal_uint32 dev_mapping, kal_uint32 ext_devinfo_len, kal_char *ext_devinfo);







typedef struct _HMU_ULDRV_EXCEPT_INITFUNC_STRUCT {
 kal_uint32 port_id;
 uldrv_except_init except_init_func;
} hmu_uldrv_except_initfunc ;

typedef kal_int32 (*ul_drv_init)(kal_uint32 dev_mapping, kal_uint32 ext_devinfo_len, kal_char * ext_devinfo) ;





typedef struct _HMU_ULDRV_INITFUNC_STRUCT {
 hmuEmuDeviceType_enum dev_type;
 ul_drv_init init_func;
} hmu_uldrv_initfunc ;

typedef kal_int32 (*hif_core_init)(kal_uint32 dev_num, hmu_emudev_info *emudev_info, kal_uint32 ext_hifinfo_len, kal_char * ext_hifinfo) ;





typedef struct _HMU_HIFCORE_INITFUNC_STRUCT {
 hmuHifCoreType_enum hifcore_type;
 hif_core_init init_func;
} hmu_hifcore_initfunc ;





typedef struct _HMU_TICK_INTERVAL_STRUCT
{
    kal_uint32 hif_event;
    kal_uint32 hif_event_tick_count;
    kal_uint32 hif_current_tick;
} hmu_tick_interval;
# 1036 "interface/service/nvram/nvram_data_items.h" 2



# 1 "interface/middleware/hif/nmu.h" 1
# 77 "interface/middleware/hif/nmu.h"
typedef enum _nmu_entry_e {
    NMU_MTU_SIZE,

    NMU_UL_SPEED,
    NMU_DL_SPEED,

    NMU_ETH0_UP, NMU_ETH0_HOST_MAC, NMU_ETH0_GATEWAY_MAC, NMU_ETH0_TX_PKT_CNT, NMU_ETH0_RX_PKT_CNT, NMU_ETH0_TX_BYTE_CNT, NMU_ETH0_RX_BYTE_CNT, NMU_ETH0_TX_DROP_PKT_CNT, NMU_ETH0_RX_DROP_PKT_CNT,
    NMU_ETH1_UP, NMU_ETH1_HOST_MAC, NMU_ETH1_GATEWAY_MAC, NMU_ETH1_TX_PKT_CNT, NMU_ETH1_RX_PKT_CNT, NMU_ETH1_TX_BYTE_CNT, NMU_ETH1_RX_BYTE_CNT, NMU_ETH1_TX_DROP_PKT_CNT, NMU_ETH1_RX_DROP_PKT_CNT,
    NMU_ETH2_UP, NMU_ETH2_HOST_MAC, NMU_ETH2_GATEWAY_MAC, NMU_ETH2_TX_PKT_CNT, NMU_ETH2_RX_PKT_CNT, NMU_ETH2_TX_BYTE_CNT, NMU_ETH2_RX_BYTE_CNT, NMU_ETH2_TX_DROP_PKT_CNT, NMU_ETH2_RX_DROP_PKT_CNT,
    NMU_ETH3_UP, NMU_ETH3_HOST_MAC, NMU_ETH3_GATEWAY_MAC, NMU_ETH3_TX_PKT_CNT, NMU_ETH3_RX_PKT_CNT, NMU_ETH3_TX_BYTE_CNT, NMU_ETH3_RX_BYTE_CNT, NMU_ETH3_TX_DROP_PKT_CNT, NMU_ETH3_RX_DROP_PKT_CNT,
    NMU_ETH4_UP, NMU_ETH4_HOST_MAC, NMU_ETH4_GATEWAY_MAC, NMU_ETH4_TX_PKT_CNT, NMU_ETH4_RX_PKT_CNT, NMU_ETH4_TX_BYTE_CNT, NMU_ETH4_RX_BYTE_CNT, NMU_ETH4_TX_DROP_PKT_CNT, NMU_ETH4_RX_DROP_PKT_CNT,
    NMU_ETH5_UP, NMU_ETH5_HOST_MAC, NMU_ETH5_GATEWAY_MAC, NMU_ETH5_TX_PKT_CNT, NMU_ETH5_RX_PKT_CNT, NMU_ETH5_TX_BYTE_CNT, NMU_ETH5_RX_BYTE_CNT, NMU_ETH5_TX_DROP_PKT_CNT, NMU_ETH5_RX_DROP_PKT_CNT,
    NMU_ETH6_UP, NMU_ETH6_HOST_MAC, NMU_ETH6_GATEWAY_MAC, NMU_ETH6_TX_PKT_CNT, NMU_ETH6_RX_PKT_CNT, NMU_ETH6_TX_BYTE_CNT, NMU_ETH6_RX_BYTE_CNT, NMU_ETH6_TX_DROP_PKT_CNT, NMU_ETH6_RX_DROP_PKT_CNT,
    NMU_ETH7_UP, NMU_ETH7_HOST_MAC, NMU_ETH7_GATEWAY_MAC, NMU_ETH7_TX_PKT_CNT, NMU_ETH7_RX_PKT_CNT, NMU_ETH7_TX_BYTE_CNT, NMU_ETH7_RX_BYTE_CNT, NMU_ETH7_TX_DROP_PKT_CNT, NMU_ETH7_RX_DROP_PKT_CNT,
    NMU_ETH8_UP, NMU_ETH8_HOST_MAC, NMU_ETH8_GATEWAY_MAC, NMU_ETH8_TX_PKT_CNT, NMU_ETH8_RX_PKT_CNT, NMU_ETH8_TX_BYTE_CNT, NMU_ETH8_RX_BYTE_CNT, NMU_ETH8_TX_DROP_PKT_CNT, NMU_ETH8_RX_DROP_PKT_CNT,
    NMU_ETH9_UP, NMU_ETH9_HOST_MAC, NMU_ETH9_GATEWAY_MAC, NMU_ETH9_TX_PKT_CNT, NMU_ETH9_RX_PKT_CNT, NMU_ETH9_TX_BYTE_CNT, NMU_ETH9_RX_BYTE_CNT, NMU_ETH9_TX_DROP_PKT_CNT, NMU_ETH9_RX_DROP_PKT_CNT,
    NMU_ETH10_UP, NMU_ETH10_HOST_MAC, NMU_ETH10_GATEWAY_MAC, NMU_ETH10_TX_PKT_CNT, NMU_ETH10_RX_PKT_CNT, NMU_ETH10_TX_BYTE_CNT, NMU_ETH10_RX_BYTE_CNT, NMU_ETH10_TX_DROP_PKT_CNT, NMU_ETH10_RX_DROP_PKT_CNT,
    NMU_ETH11_UP, NMU_ETH11_HOST_MAC, NMU_ETH11_GATEWAY_MAC, NMU_ETH11_TX_PKT_CNT, NMU_ETH11_RX_PKT_CNT, NMU_ETH11_TX_BYTE_CNT, NMU_ETH11_RX_BYTE_CNT, NMU_ETH11_TX_DROP_PKT_CNT, NMU_ETH11_RX_DROP_PKT_CNT,
    NMU_ETH12_UP, NMU_ETH12_HOST_MAC, NMU_ETH12_GATEWAY_MAC, NMU_ETH12_TX_PKT_CNT, NMU_ETH12_RX_PKT_CNT, NMU_ETH12_TX_BYTE_CNT, NMU_ETH12_RX_BYTE_CNT, NMU_ETH12_TX_DROP_PKT_CNT, NMU_ETH12_RX_DROP_PKT_CNT,
    NMU_ETH13_UP, NMU_ETH13_HOST_MAC, NMU_ETH13_GATEWAY_MAC, NMU_ETH13_TX_PKT_CNT, NMU_ETH13_RX_PKT_CNT, NMU_ETH13_TX_BYTE_CNT, NMU_ETH13_RX_BYTE_CNT, NMU_ETH13_TX_DROP_PKT_CNT, NMU_ETH13_RX_DROP_PKT_CNT,
    NMU_ETH14_UP, NMU_ETH14_HOST_MAC, NMU_ETH14_GATEWAY_MAC, NMU_ETH14_TX_PKT_CNT, NMU_ETH14_RX_PKT_CNT, NMU_ETH14_TX_BYTE_CNT, NMU_ETH14_RX_BYTE_CNT, NMU_ETH14_TX_DROP_PKT_CNT, NMU_ETH14_RX_DROP_PKT_CNT,
    NMU_ETH15_UP, NMU_ETH15_HOST_MAC, NMU_ETH15_GATEWAY_MAC, NMU_ETH15_TX_PKT_CNT, NMU_ETH15_RX_PKT_CNT, NMU_ETH15_TX_BYTE_CNT, NMU_ETH15_RX_BYTE_CNT, NMU_ETH15_TX_DROP_PKT_CNT, NMU_ETH15_RX_DROP_PKT_CNT,

    NMU_IP0_UP, NMU_IP0_ADDR, NMU_IP0_MASK, NMU_IP0_GATEWAY, NMU_IP0_MTU_SIZE, NMU_IP0_DNS_NUM, NMU_IP0_DNS1, NMU_IP0_DNS2, NMU_IP0_IP6_UP, NMU_IP0_IP6_PREFIX, NMU_IP0_IP6_PREFIX_LEN, NMU_IP0_IP6_IID, NMU_IP0_IP6_IID_LEN, NMU_IP0_IP6_MTU_SIZE, NMU_IP0_IP6_DNS_NUM, NMU_IP0_IP6_DNS1, NMU_IP0_IP6_DNS2,
    NMU_IP1_UP, NMU_IP1_ADDR, NMU_IP1_MASK, NMU_IP1_GATEWAY, NMU_IP1_MTU_SIZE, NMU_IP1_DNS_NUM, NMU_IP1_DNS1, NMU_IP1_DNS2, NMU_IP1_IP6_UP, NMU_IP1_IP6_PREFIX, NMU_IP1_IP6_PREFIX_LEN, NMU_IP1_IP6_IID, NMU_IP1_IP6_IID_LEN, NMU_IP1_IP6_MTU_SIZE, NMU_IP1_IP6_DNS_NUM, NMU_IP1_IP6_DNS1, NMU_IP1_IP6_DNS2,
    NMU_IP2_UP, NMU_IP2_ADDR, NMU_IP2_MASK, NMU_IP2_GATEWAY, NMU_IP2_MTU_SIZE, NMU_IP2_DNS_NUM, NMU_IP2_DNS1, NMU_IP2_DNS2, NMU_IP2_IP6_UP, NMU_IP2_IP6_PREFIX, NMU_IP2_IP6_PREFIX_LEN, NMU_IP2_IP6_IID, NMU_IP2_IP6_IID_LEN, NMU_IP2_IP6_MTU_SIZE, NMU_IP2_IP6_DNS_NUM, NMU_IP2_IP6_DNS1, NMU_IP2_IP6_DNS2,
    NMU_IP3_UP, NMU_IP3_ADDR, NMU_IP3_MASK, NMU_IP3_GATEWAY, NMU_IP3_MTU_SIZE, NMU_IP3_DNS_NUM, NMU_IP3_DNS1, NMU_IP3_DNS2, NMU_IP3_IP6_UP, NMU_IP3_IP6_PREFIX, NMU_IP3_IP6_PREFIX_LEN, NMU_IP3_IP6_IID, NMU_IP3_IP6_IID_LEN, NMU_IP3_IP6_MTU_SIZE, NMU_IP3_IP6_DNS_NUM, NMU_IP3_IP6_DNS1, NMU_IP3_IP6_DNS2,
    NMU_IP4_UP, NMU_IP4_ADDR, NMU_IP4_MASK, NMU_IP4_GATEWAY, NMU_IP4_MTU_SIZE, NMU_IP4_DNS_NUM, NMU_IP4_DNS1, NMU_IP4_DNS2, NMU_IP4_IP6_UP, NMU_IP4_IP6_PREFIX, NMU_IP4_IP6_PREFIX_LEN, NMU_IP4_IP6_IID, NMU_IP4_IP6_IID_LEN, NMU_IP4_IP6_MTU_SIZE, NMU_IP4_IP6_DNS_NUM, NMU_IP4_IP6_DNS1, NMU_IP4_IP6_DNS2,
    NMU_IP5_UP, NMU_IP5_ADDR, NMU_IP5_MASK, NMU_IP5_GATEWAY, NMU_IP5_MTU_SIZE, NMU_IP5_DNS_NUM, NMU_IP5_DNS1, NMU_IP5_DNS2, NMU_IP5_IP6_UP, NMU_IP5_IP6_PREFIX, NMU_IP5_IP6_PREFIX_LEN, NMU_IP5_IP6_IID, NMU_IP5_IP6_IID_LEN, NMU_IP5_IP6_MTU_SIZE, NMU_IP5_IP6_DNS_NUM, NMU_IP5_IP6_DNS1, NMU_IP5_IP6_DNS2,
    NMU_IP6_UP, NMU_IP6_ADDR, NMU_IP6_MASK, NMU_IP6_GATEWAY, NMU_IP6_MTU_SIZE, NMU_IP6_DNS_NUM, NMU_IP6_DNS1, NMU_IP6_DNS2, NMU_IP6_IP6_UP, NMU_IP6_IP6_PREFIX, NMU_IP6_IP6_PREFIX_LEN, NMU_IP6_IP6_IID, NMU_IP6_IP6_IID_LEN, NMU_IP6_IP6_MTU_SIZE, NMU_IP6_IP6_DNS_NUM, NMU_IP6_IP6_DNS1, NMU_IP6_IP6_DNS2,
    NMU_IP7_UP, NMU_IP7_ADDR, NMU_IP7_MASK, NMU_IP7_GATEWAY, NMU_IP7_MTU_SIZE, NMU_IP7_DNS_NUM, NMU_IP7_DNS1, NMU_IP7_DNS2, NMU_IP7_IP6_UP, NMU_IP7_IP6_PREFIX, NMU_IP7_IP6_PREFIX_LEN, NMU_IP7_IP6_IID, NMU_IP7_IP6_IID_LEN, NMU_IP7_IP6_MTU_SIZE, NMU_IP7_IP6_DNS_NUM, NMU_IP7_IP6_DNS1, NMU_IP7_IP6_DNS2,
    NMU_IP8_UP, NMU_IP8_ADDR, NMU_IP8_MASK, NMU_IP8_GATEWAY, NMU_IP8_MTU_SIZE, NMU_IP8_DNS_NUM, NMU_IP8_DNS1, NMU_IP8_DNS2, NMU_IP8_IP6_UP, NMU_IP8_IP6_PREFIX, NMU_IP8_IP6_PREFIX_LEN, NMU_IP8_IP6_IID, NMU_IP8_IP6_IID_LEN, NMU_IP8_IP6_MTU_SIZE, NMU_IP8_IP6_DNS_NUM, NMU_IP8_IP6_DNS1, NMU_IP8_IP6_DNS2,
    NMU_IP9_UP, NMU_IP9_ADDR, NMU_IP9_MASK, NMU_IP9_GATEWAY, NMU_IP9_MTU_SIZE, NMU_IP9_DNS_NUM, NMU_IP9_DNS1, NMU_IP9_DNS2, NMU_IP9_IP6_UP, NMU_IP9_IP6_PREFIX, NMU_IP9_IP6_PREFIX_LEN, NMU_IP9_IP6_IID, NMU_IP9_IP6_IID_LEN, NMU_IP9_IP6_MTU_SIZE, NMU_IP9_IP6_DNS_NUM, NMU_IP9_IP6_DNS1, NMU_IP9_IP6_DNS2,
    NMU_IP10_UP, NMU_IP10_ADDR, NMU_IP10_MASK, NMU_IP10_GATEWAY, NMU_IP10_MTU_SIZE, NMU_IP10_DNS_NUM, NMU_IP10_DNS1, NMU_IP10_DNS2, NMU_IP10_IP6_UP, NMU_IP10_IP6_PREFIX, NMU_IP10_IP6_PREFIX_LEN, NMU_IP10_IP6_IID, NMU_IP10_IP6_IID_LEN, NMU_IP10_IP6_MTU_SIZE, NMU_IP10_IP6_DNS_NUM, NMU_IP10_IP6_DNS1, NMU_IP10_IP6_DNS2,
    NMU_IP11_UP, NMU_IP11_ADDR, NMU_IP11_MASK, NMU_IP11_GATEWAY, NMU_IP11_MTU_SIZE, NMU_IP11_DNS_NUM, NMU_IP11_DNS1, NMU_IP11_DNS2, NMU_IP11_IP6_UP, NMU_IP11_IP6_PREFIX, NMU_IP11_IP6_PREFIX_LEN, NMU_IP11_IP6_IID, NMU_IP11_IP6_IID_LEN, NMU_IP11_IP6_MTU_SIZE, NMU_IP11_IP6_DNS_NUM, NMU_IP11_IP6_DNS1, NMU_IP11_IP6_DNS2,
    NMU_IP12_UP, NMU_IP12_ADDR, NMU_IP12_MASK, NMU_IP12_GATEWAY, NMU_IP12_MTU_SIZE, NMU_IP12_DNS_NUM, NMU_IP12_DNS1, NMU_IP12_DNS2, NMU_IP12_IP6_UP, NMU_IP12_IP6_PREFIX, NMU_IP12_IP6_PREFIX_LEN, NMU_IP12_IP6_IID, NMU_IP12_IP6_IID_LEN, NMU_IP12_IP6_MTU_SIZE, NMU_IP12_IP6_DNS_NUM, NMU_IP12_IP6_DNS1, NMU_IP12_IP6_DNS2,
    NMU_IP13_UP, NMU_IP13_ADDR, NMU_IP13_MASK, NMU_IP13_GATEWAY, NMU_IP13_MTU_SIZE, NMU_IP13_DNS_NUM, NMU_IP13_DNS1, NMU_IP13_DNS2, NMU_IP13_IP6_UP, NMU_IP13_IP6_PREFIX, NMU_IP13_IP6_PREFIX_LEN, NMU_IP13_IP6_IID, NMU_IP13_IP6_IID_LEN, NMU_IP13_IP6_MTU_SIZE, NMU_IP13_IP6_DNS_NUM, NMU_IP13_IP6_DNS1, NMU_IP13_IP6_DNS2,
    NMU_IP14_UP, NMU_IP14_ADDR, NMU_IP14_MASK, NMU_IP14_GATEWAY, NMU_IP14_MTU_SIZE, NMU_IP14_DNS_NUM, NMU_IP14_DNS1, NMU_IP14_DNS2, NMU_IP14_IP6_UP, NMU_IP14_IP6_PREFIX, NMU_IP14_IP6_PREFIX_LEN, NMU_IP14_IP6_IID, NMU_IP14_IP6_IID_LEN, NMU_IP14_IP6_MTU_SIZE, NMU_IP14_IP6_DNS_NUM, NMU_IP14_IP6_DNS1, NMU_IP14_IP6_DNS2,
    NMU_IP15_UP, NMU_IP15_ADDR, NMU_IP15_MASK, NMU_IP15_GATEWAY, NMU_IP15_MTU_SIZE, NMU_IP15_DNS_NUM, NMU_IP15_DNS1, NMU_IP15_DNS2, NMU_IP15_IP6_UP, NMU_IP15_IP6_PREFIX, NMU_IP15_IP6_PREFIX_LEN, NMU_IP15_IP6_IID, NMU_IP15_IP6_IID_LEN, NMU_IP15_IP6_MTU_SIZE, NMU_IP15_IP6_DNS_NUM, NMU_IP15_IP6_DNS1, NMU_IP15_IP6_DNS2,


    NMU_MAX_ENTRY,
} nmu_entry_e;

typedef kal_uint8 nmu_eth_addr_t[6];
typedef kal_uint32 nmu_in_addr_t;
typedef kal_uint32 nmu_in6_addr_t[4];
typedef kal_uint8 nmu_status_t;
typedef kal_uint32 nmu_stat_t;





typedef struct _nmu_nvram_table {
    kal_uint32 make_compiler_happy;
    nmu_eth_addr_t eth0_host_mac;

} nmu_nvram_table_t;




void nmu_init(void);
# 151 "interface/middleware/hif/nmu.h"
kal_bool nmu_set_property(nmu_entry_e entry, kal_uint32 len, void* data);
# 162 "interface/middleware/hif/nmu.h"
kal_bool nmu_get_property(nmu_entry_e entry, kal_uint32 len, void* data);
# 1040 "interface/service/nvram/nvram_data_items.h" 2

# 1 "interface/modem/general/ps_public_enum.h" 1
# 1042 "interface/service/nvram/nvram_data_items.h" 2
# 1089 "interface/service/nvram/nvram_data_items.h"
    typedef enum
    {

        NVRAM_EF_SYS_LID,

        NVRAM_EF_BRANCH_VERNO_LID,

        NVRAM_EF_FLAVOR_VERNO_LID,

        NVRAM_EF_CUSTPACK_VERNO_LID,

        NVRAM_EF_SECUPACK_VERNO_LID,

        NVRAM_EF_NVRAM_CONFIG_LID,

        NVRAM_EF_START,
        NVRAM_EF_SYS_EXCEPTION_LID_DUMMY = NVRAM_EF_START,
        NVRAM_EF_SYS_STATISTICS_LID,

        NVRAM_EF_IMPT_COUNTER_LID,
# 1117 "interface/service/nvram/nvram_data_items.h"
        NVRAM_EF_L1_START = 15,
        NVRAM_EF_L1_AGCPATHLOSS_LID = NVRAM_EF_L1_START,
        NVRAM_EF_L1_RAMPTABLE_GSM850_LID,
        NVRAM_EF_L1_RAMPTABLE_GSM900_LID,
        NVRAM_EF_L1_RAMPTABLE_DCS1800_LID,
        NVRAM_EF_L1_RAMPTABLE_PCS1900_LID,
        NVRAM_EF_L1_EPSK_START,
        NVRAM_EF_L1_EPSK_RAMPTABLE_GSM850_LID = NVRAM_EF_L1_EPSK_START,
        NVRAM_EF_L1_EPSK_RAMPTABLE_GSM900_LID,
        NVRAM_EF_L1_EPSK_RAMPTABLE_DCS1800_LID,
        NVRAM_EF_L1_EPSK_RAMPTABLE_PCS1900_LID,
        NVRAM_EF_L1_EPSK_INTERSLOT_RAMP_GSM850_LID,
        NVRAM_EF_L1_EPSK_INTERSLOT_RAMP_GSM900_LID,
        NVRAM_EF_L1_EPSK_INTERSLOT_RAMP_DCS1800_LID,
        NVRAM_EF_L1_EPSK_INTERSLOT_RAMP_PCS1900_LID,
        NVRAM_EF_L1_EPSK_END = NVRAM_EF_L1_EPSK_INTERSLOT_RAMP_PCS1900_LID,
        NVRAM_EF_L1_AFCDATA_LID,
        NVRAM_EF_L1_TXIQ_LID,
        NVRAM_EF_L1_RFSPECIALCOEF_LID,
        NVRAM_EF_L1_INTERSLOT_RAMP_GSM850_LID,
        NVRAM_EF_L1_INTERSLOT_RAMP_GSM900_LID,
        NVRAM_EF_L1_INTERSLOT_RAMP_DCS1800_LID,
        NVRAM_EF_L1_INTERSLOT_RAMP_PCS1900_LID,
        NVRAM_EF_L1_CRYSTAL_AFCDATA_LID,
        NVRAM_EF_L1_CRYSTAL_CAPDATA_LID,

        NVRAM_EF_L1_GMSK_TX_POWER_ROLLBACK_TABLE_LID,
        NVRAM_EF_L1_EPSK_TX_POWER_ROLLBACK_TABLE_LID,

        NVRAM_EF_L1_GMSK_TXPC_LID,
        NVRAM_EF_L1_EPSK_TXPC_LID,

        NVRAM_EF_L1_LNAPATHLOSS_LID,

        NVRAM_EF_L1_TEMPERATURE_ADC_LID,

        NVRAM_EF_L1_CLOAD_FREQ_OFFSET_LID,
        NVRAM_EF_L1_GAINRF_LID,

        NVRAM_EF_L1_2G_RF_PARAMETER_EXT_LID,
        NVRAM_EF_L1_GMSK_TX_POWER_OFFSET_GSM850_LID,
        NVRAM_EF_L1_GMSK_TX_POWER_OFFSET_GSM900_LID,
        NVRAM_EF_L1_GMSK_TX_POWER_OFFSET_DCS_LID,
        NVRAM_EF_L1_GMSK_TX_POWER_OFFSET_PCS_LID,
        NVRAM_EF_L1_EPSK_TX_POWER_OFFSET_GSM850_LID,
        NVRAM_EF_L1_EPSK_TX_POWER_OFFSET_GSM900_LID,
        NVRAM_EF_L1_EPSK_TX_POWER_OFFSET_DCS_LID,
        NVRAM_EF_L1_EPSK_TX_POWER_OFFSET_PCS_LID,
        NVRAM_EF_L1_TAS_CUSTOM_PARAMES_LID,
        NVRAM_EF_L1_TAS_CUSTOM_PDATA_LID,
        NVRAM_EF_L1_TAS_LIB_PARAMES_LID,
        NVRAM_EF_L1_END = NVRAM_EF_L1_TAS_LIB_PARAMES_LID,
        NVRAM_EF_UL1_START = 45,
# 1209 "interface/service/nvram/nvram_data_items.h"
        NVRAM_EF_UL1_END,


        NVRAM_EF_WNDRV_START = 67,
        NVRAM_EF_WNDRV_MAC_ADDRESS_LID = NVRAM_EF_WNDRV_START,
        NVRAM_EF_WNDRV_TX_POWER_2400M_LID,
        NVRAM_EF_WNDRV_TX_POWER_5000M_LID,
        NVRAM_EF_WNDRV_DAC_DC_OFFSET_LID,
        NVRAM_EF_WNDRV_TX_ALC_POWER_LID,
        NVRAM_EF_WNDRV_EXT_SETTING_TRIMVAL_THERMOVAL_LID,
        NVRAM_EF_WNDRV_ALC_SLOPE_LID,
        NVRAM_EF_WNDRV_END = NVRAM_EF_WNDRV_ALC_SLOPE_LID,


        NVRAM_EF_BTRADIO_RFMD3500_LID = 74,
        NVRAM_EF_BTRADIO_MT6601_LID,
        NVRAM_EF_BTRADIO_MT6611_LID,





        NVRAM_EF_BTRADIO_MTK_BT_CHIP_LID = 79,


        NVRAM_EF_AST_TL1_START = 85,
        NVRAM_EF_AST_TL1_TEMP_DAC_LID = NVRAM_EF_AST_TL1_START,
        NVRAM_EF_AST_TL1_AFC_DATA_LID,
        NVRAM_EF_AST_TL1_PATHLOSS_BAND33_35_37_39_LID,
        NVRAM_EF_AST_TL1_PATHLOSS_BAND34_LID,
        NVRAM_EF_AST_TL1_PATHLOSS_BAND36_LID,
        NVRAM_EF_AST_TL1_PATHLOSS_BAND38_LID,
        NVRAM_EF_AST_TL1_PATHLOSS_BAND40_LID,
        NVRAM_EF_AST_TL1_TXDAC_BAND33_35_37_39_LID,
        NVRAM_EF_AST_TL1_TXDAC_BAND34_LID,
        NVRAM_EF_AST_TL1_TXDAC_BAND36_LID,
        NVRAM_EF_AST_TL1_TXDAC_BAND38_LID,
        NVRAM_EF_AST_TL1_TXDAC_BAND40_LID,
        NVRAM_EF_AST_TL1_ABB_CAL_LID,
        NVRAM_EF_AST_TL1_TXCLPC_BAND33_35_37_39_LID,
        NVRAM_EF_AST_TL1_TXCLPC_BAND34_LID,
        NVRAM_EF_AST_TL1_TXCLPC_BAND36_LID,
        NVRAM_EF_AST_TL1_TXCLPC_BAND38_LID,
        NVRAM_EF_AST_TL1_TXCLPC_BAND40_LID,
        NVRAM_EF_AST_CUSTOM_DYNAMIC_INIT_LID,
        NVRAM_EF_AST_CUSTOM_DYNAMIC_INIT_DEBUG_LID,
        NVRAM_EF_AST_TL1_RF_PARAM_LID,
        NVRAM_EF_AST_TL1_RFFE_PARAM_LID,
        NVRAM_EF_AST_TL1_END = NVRAM_EF_AST_TL1_RFFE_PARAM_LID,

        NVRAM_EF_BARCODE_NUM_LID,
        NVRAM_EF_CAL_FLAG_LID,
        NVRAM_EF_CAL_DATA_CHECK_LID,
        NVRAM_EF_RF_CAL_ENV_LID,
        NVRAM_EF_RF_CAL_LOSS_SETTING_LID,
        NVRAM_EF_RF_TEST_POWER_RESULT_LID,
# 1293 "interface/service/nvram/nvram_data_items.h"
        NVRAM_EF_L1_2G_RF_PARAMETER_LID,

        NVRAM_EF_WNDRV_TPCFF_LID,


        NVRAM_EF_AST_TL1_CAP_DATA_LID,


        NVRAM_EF_L1_MIPI_CTRL_TABLE_GSM850_LID,
        NVRAM_EF_L1_MIPI_CTRL_TABLE_GSM900_LID,
        NVRAM_EF_L1_MIPI_CTRL_TABLE_DCS1800_LID,
        NVRAM_EF_L1_MIPI_CTRL_TABLE_PCS1900_LID,
        NVRAM_EF_L1_CUSTOM_DRDI_STATUS_DEBUGINFO_LID,

      NVRAM_EF_CALIBRATION_END = 120,






        NVRAM_EF_AS_BAND_SETTING_LID,
        NVRAM_EF_BAND_INFO_LID,
        NVRAM_EF_TST_FILTER_LID,
        NVRAM_EF_PORT_SETTING_LID,
        NVRAM_EF_PS_L2COPRO_FILTER_SETTINGS_LID,
        NVRAM_EF_CLASSMARK_RACAP_LID,
        NVRAM_EF_SIM_ASSERT_LID,
        NVRAM_EF_RTC_DATA_LID,
        NVRAM_EF_NET_PAR_LID,
        NVRAM_EF_UMTS_PLMN_LID,
        NVRAM_EF_UMTS_IMSI_LID,
        NVRAM_EF_UMTS_START_HFN_LID,
        NVRAM_EF_UMTS_USIME_RRC_DYNAMIC_CAP_LID,
        NVRAM_EF_L1_3G_CAL_DATA_LID,
        NVRAM_EF_FLC_STATISTICS_LID,
        NVRAM_EF_ECOMPASS_DATA_LID,
        NVRAM_EF_BAND_BLOCK_LID,
        NVRAM_EF_UMTS_FREQUENCY_REPOSITORY_LID,
        NVRAM_EF_PREV_VISITED_CELL_INFO_LID,
        NVRAM_EF_UE_CSG_LIST_LID,
        NVRAM_EF_UMTS_FINGERPRINT_INFO_LID,
        NVRAM_EF_UMTS_BAND_PRIORITY_LID,


        NVRAM_EF_CUST_HW_LEVEL_TBL_LID,
        NVRAM_EF_UEM_MANUFACTURE_DATA_LID,
        NVRAM_EF_UEM_RMI_DATA_LID,



        NVRAM_EF_GPS_SETTING_DATA_LID,
        NVRAM_EF_MNL_SETTING_DATA_LID,


        NVRAM_EF_BWCS_SETTING_DATA_LID,







        NVRAM_EF_L4_START,
        NVRAM_EF_TCM_CID_0_PROFILE_LID,
        NVRAM_EF_TCM_PDP_PROFILE_LID,
        NVRAM_EF_CFU_FLAG_LID,
        NVRAM_EF_MM_LOCIGPRS_LID,
        NVRAM_EF_CTM_DEFAULT_SETTINGS_LID,
        NVRAM_EF_ALS_LINE_ID_LID,
        NVRAM_EF_MSCAP_LID,
        NVRAM_EF_ATCMD_ON_OFF_CHECK_LID,
        NVRAM_EF_SMSAL_SMS_LID,
        NVRAM_EF_SMSAL_MAILBOX_ADDR_LID,
        NVRAM_EF_SMSAL_COMMON_PARAM_LID,
        NVRAM_EF_SMSAL_SMSP_LID,
        NVRAM_EF_SMSAL_MWIS_LID,
        NVRAM_EF_CB_DEFAULT_CH_LID,
        NVRAM_EF_CB_CH_INFO_LID,
        NVRAM_EF_IMEI_IMEISV_LID,
        NVRAM_EF_SML_LID,
        NVRAM_EF_SIM_LOCK_LID,
        NVRAM_EF_MS_SECURITY_LID,

        NVRAM_EF_PHB_LID,

        NVRAM_EF_PHB_LN_ENTRY_LID,
        NVRAM_EF_PHB_LN_TYPE_SEQ_LID,
        NVRAM_EF_PS_CONFORMANCE_TESTMODE_LID,
        NVRAM_EF_ETWS_SETTING_LID,
        NVRAM_EF_MOBILE_BROADBAND_PROVISION_CONTEXT_LID,
        NVRAM_EF_MSQ_LIST_LID,
        NVRAM_EF_CSM_ESSP_LID,
        NVRAM_EF_L4_END,






     NVRAM_EF_IMS_PROFILE_LID,
     NVRAM_EF_LTECSR_PROFILE_LID,
     NVRAM_EF_VDM_ADS_PROFILE_LID,
# 1404 "interface/service/nvram/nvram_data_items.h"
        NVRAM_EF_SYS_CACHE_OCTET_LID,

        NVRAM_EF_DRM_SETTING_LID,
        NVRAM_EF_DRM_STIME_LID,
        NVRAM_EF_DRM_CERPATH_LID,

        NVRAM_EF_RAC_PREFERENCE_LID,

        NVRAM_EF_MM_IMSI_LOCI_GLOCI_LID,
        NVRAM_EF_NWSEL_DATA_LID,
        NVRAM_EF_GAS_CSG_FINGERPRINT_LID,
        NVRAM_EF_UMTS_URR_CONFIGURATION_LID,

     NVRAM_EF_MINI_LOG_01_LID,
     NVRAM_EF_MINI_LOG_02_LID,
     NVRAM_EF_MINI_LOG_03_LID,
     NVRAM_EF_MINI_LOG_04_LID,
     NVRAM_EF_MINI_LOG_05_LID,
        NVRAM_EF_UL1_CUSTOM_DYNAMIC_INIT_DEBUG_LID,
        NVRAM_EF_TST_CONFIG_LID,


  NVRAM_EF_EL1_PWRONCAL_LID,

  NVRAM_EF_EL1_DSPLOGFILTER_LID,

  NVRAM_EF_EL1_FREQADJTBL_LID,

        NVRAM_EF_EL1_RSSIGAINTBL_START,
        NVRAM_EF_EL1_RSSIGAINTBL_1STBAND_LID = NVRAM_EF_EL1_RSSIGAINTBL_START,
        NVRAM_EF_EL1_RSSIGAINTBL_2NDBAND_LID,
        NVRAM_EF_EL1_RSSIGAINTBL_3RDBAND_LID,
        NVRAM_EF_EL1_RSSIGAINTBL_4THBAND_LID,
        NVRAM_EF_EL1_RSSIGAINTBL_5THBAND_LID,
        NVRAM_EF_EL1_RSSIGAINTBL_6THBAND_LID,
        NVRAM_EF_EL1_RSSIGAINTBL_7THBAND_LID,
        NVRAM_EF_EL1_RSSIGAINTBL_8THBAND_LID,
        NVRAM_EF_EL1_RSSIGAINTBL_9THBAND_LID,
        NVRAM_EF_EL1_RSSIGAINTBL_10THBAND_LID,
        NVRAM_EF_EL1_RSSIGAINTBL_11THBAND_LID,
        NVRAM_EF_EL1_RSSIGAINTBL_12THBAND_LID,
        NVRAM_EF_EL1_RSSIGAINTBL_13THBAND_LID,
        NVRAM_EF_EL1_RSSIGAINTBL_14THBAND_LID,
        NVRAM_EF_EL1_RSSIGAINTBL_END = NVRAM_EF_EL1_RSSIGAINTBL_14THBAND_LID,

  NVRAM_EF_EL1_CTRL_REG_RW_LID,

        NVRAM_EF_EL1_TXDAC_START,
        NVRAM_EF_EL1_TXDAC_1STBAND_LID = NVRAM_EF_EL1_TXDAC_START,
        NVRAM_EF_EL1_TXDAC_2NDBAND_LID,
        NVRAM_EF_EL1_TXDAC_3RDBAND_LID,
        NVRAM_EF_EL1_TXDAC_4THBAND_LID,
        NVRAM_EF_EL1_TXDAC_5THBAND_LID,
        NVRAM_EF_EL1_TXDAC_6THBAND_LID,
        NVRAM_EF_EL1_TXDAC_7THBAND_LID,
        NVRAM_EF_EL1_TXDAC_8THBAND_LID,
        NVRAM_EF_EL1_TXDAC_9THBAND_LID,
        NVRAM_EF_EL1_TXDAC_10THBAND_LID,
        NVRAM_EF_EL1_TXDAC_11THBAND_LID,
        NVRAM_EF_EL1_TXDAC_12THBAND_LID,
        NVRAM_EF_EL1_TXDAC_13THBAND_LID,
        NVRAM_EF_EL1_TXDAC_14THBAND_LID,
        NVRAM_EF_EL1_TXDAC_END = NVRAM_EF_EL1_TXDAC_14THBAND_LID,

        NVRAM_EF_EL1_TXPAOCTLEV_START,
        NVRAM_EF_EL1_TXPAOCTLEV_1STBAND_LID = NVRAM_EF_EL1_TXPAOCTLEV_START,
        NVRAM_EF_EL1_TXPAOCTLEV_2NDBAND_LID,
        NVRAM_EF_EL1_TXPAOCTLEV_3RDBAND_LID,
        NVRAM_EF_EL1_TXPAOCTLEV_4THBAND_LID,
        NVRAM_EF_EL1_TXPAOCTLEV_5THBAND_LID,
        NVRAM_EF_EL1_TXPAOCTLEV_6THBAND_LID,
        NVRAM_EF_EL1_TXPAOCTLEV_7THBAND_LID,
        NVRAM_EF_EL1_TXPAOCTLEV_8THBAND_LID,
        NVRAM_EF_EL1_TXPAOCTLEV_9THBAND_LID,
        NVRAM_EF_EL1_TXPAOCTLEV_10THBAND_LID,
        NVRAM_EF_EL1_TXPAOCTLEV_11THBAND_LID,
        NVRAM_EF_EL1_TXPAOCTLEV_12THBAND_LID,
        NVRAM_EF_EL1_TXPAOCTLEV_13THBAND_LID,
        NVRAM_EF_EL1_TXPAOCTLEV_14THBAND_LID,
        NVRAM_EF_EL1_TXPAOCTLEV_END = NVRAM_EF_EL1_TXPAOCTLEV_14THBAND_LID,

        NVRAM_EF_EL1_ETVINLUTDATA_START,
        NVRAM_EF_EL1_ETVINLUTDATA_1STBAND_LID = NVRAM_EF_EL1_ETVINLUTDATA_START,
        NVRAM_EF_EL1_ETVINLUTDATA_2NDBAND_LID,
        NVRAM_EF_EL1_ETVINLUTDATA_3RDBAND_LID,
        NVRAM_EF_EL1_ETVINLUTDATA_4THBAND_LID,
        NVRAM_EF_EL1_ETVINLUTDATA_5THBAND_LID,
        NVRAM_EF_EL1_ETVINLUTDATA_6THBAND_LID,
        NVRAM_EF_EL1_ETVINLUTDATA_7THBAND_LID,
        NVRAM_EF_EL1_ETVINLUTDATA_8THBAND_LID,
        NVRAM_EF_EL1_ETVINLUTDATA_9THBAND_LID,
        NVRAM_EF_EL1_ETVINLUTDATA_10THBAND_LID,
        NVRAM_EF_EL1_ETVINLUTDATA_11THBAND_LID,
        NVRAM_EF_EL1_ETVINLUTDATA_12THBAND_LID,
        NVRAM_EF_EL1_ETVINLUTDATA_13THBAND_LID,
        NVRAM_EF_EL1_ETVINLUTDATA_14THBAND_LID,
        NVRAM_EF_EL1_ETVINLUTDATA_END = NVRAM_EF_EL1_ETVINLUTDATA_14THBAND_LID,

        NVRAM_EF_EL1_ETCOMPPARAM_LID,
        NVRAM_EF_EL1_TEMPERATUREDAC_LID,
        NVRAM_EF_EL1_MPRADJTBL_LID,
        NVRAM_EF_EL1_AMPRADJTBL_LID,


        NVRAM_EF_EPSLOCI_EPSNSC_TIN_LID,
        NVRAM_EF_LTE_PREFERENCE_LID,


        NVRAM_EF_ERRC_STORED_CARRIER_LID,
        NVRAM_EF_ERRC_PERFORMANCE_PARA_LID,
        NVRAM_EF_ERRC_FINGER_PRINT_LID,
        NVRAM_EF_ERRC_LEARNED_MCC_LID,
        NVRAM_EF_ERRC_STORED_CELL_LID,
        NVRAM_EF_ERRC_AFR_SETTING_LID,
        NVRAM_EF_LTE_CAP_LID,
        NVRAM_EF_UE_EUTRA_CAP_CSFB_LID,
        NVRAM_EF_UE_EUTRA_CAP_MMDC_LID,

        NVRAM_EF_EL1_BAND_INDICATOR_LID,
        NVRAM_EF_EL1_RX_PDATABASE_LID,
        NVRAM_EF_EL1_TX_PDATABASE_LID,
        NVRAM_EF_EL1_RF_IO_LID,


        NVRAM_EF_EL1_CUSTOM_DYNAMIC_INIT_LID,
        NVRAM_EF_EL1_CUSTOM_DYNAMIC_INIT_DEBUG_LID,


        NVRAM_EF_EL1_RF_RX_PATH_CONFIG_LID,


        NVRAM_EF_EL1_MIPI_FEATURE_LID,

        NVRAM_EF_EL1_RXON_BPIOFFSET_LID,
        NVRAM_EF_EL1_TXON_BPIOFFSET_LID,
        NVRAM_EF_EL1_RXOFF_BPIOFFSET_LID,
        NVRAM_EF_EL1_TXOFF_BPIOFFSET_LID,

        NVRAM_EF_EL1_MIPI_RX_EVENT_START,
        NVRAM_EF_EL1_MIPI_RX_EVENT_1STBAND_LID = NVRAM_EF_EL1_MIPI_RX_EVENT_START,
        NVRAM_EF_EL1_MIPI_RX_EVENT_2NDBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_EVENT_3RDBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_EVENT_4THBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_EVENT_5THBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_EVENT_6THBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_EVENT_7THBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_EVENT_8THBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_EVENT_9THBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_EVENT_10THBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_EVENT_11THBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_EVENT_12THBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_EVENT_13THBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_EVENT_14THBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_EVENT_END = NVRAM_EF_EL1_MIPI_RX_EVENT_14THBAND_LID,

        NVRAM_EF_EL1_MIPI_TX_EVENT_START,
        NVRAM_EF_EL1_MIPI_TX_EVENT_1STBAND_LID = NVRAM_EF_EL1_MIPI_TX_EVENT_START,
        NVRAM_EF_EL1_MIPI_TX_EVENT_2NDBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_EVENT_3RDBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_EVENT_4THBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_EVENT_5THBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_EVENT_6THBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_EVENT_7THBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_EVENT_8THBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_EVENT_9THBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_EVENT_10THBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_EVENT_11THBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_EVENT_12THBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_EVENT_13THBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_EVENT_14THBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_EVENT_END = NVRAM_EF_EL1_MIPI_TX_EVENT_14THBAND_LID,

        NVRAM_EF_EL1_MIPI_TPC_EVENT_START,
        NVRAM_EF_EL1_MIPI_TPC_EVENT_1STBAND_LID = NVRAM_EF_EL1_MIPI_TPC_EVENT_START,
        NVRAM_EF_EL1_MIPI_TPC_EVENT_2NDBAND_LID,
        NVRAM_EF_EL1_MIPI_TPC_EVENT_3RDBAND_LID,
        NVRAM_EF_EL1_MIPI_TPC_EVENT_4THBAND_LID,
        NVRAM_EF_EL1_MIPI_TPC_EVENT_5THBAND_LID,
        NVRAM_EF_EL1_MIPI_TPC_EVENT_6THBAND_LID,
        NVRAM_EF_EL1_MIPI_TPC_EVENT_7THBAND_LID,
        NVRAM_EF_EL1_MIPI_TPC_EVENT_8THBAND_LID,
        NVRAM_EF_EL1_MIPI_TPC_EVENT_9THBAND_LID,
        NVRAM_EF_EL1_MIPI_TPC_EVENT_10THBAND_LID,
        NVRAM_EF_EL1_MIPI_TPC_EVENT_11THBAND_LID,
        NVRAM_EF_EL1_MIPI_TPC_EVENT_12THBAND_LID,
        NVRAM_EF_EL1_MIPI_TPC_EVENT_13THBAND_LID,
        NVRAM_EF_EL1_MIPI_TPC_EVENT_14THBAND_LID,
        NVRAM_EF_EL1_MIPI_TPC_EVENT_END = NVRAM_EF_EL1_MIPI_TPC_EVENT_14THBAND_LID,

        NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_START,
        NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_1STBAND_LID = NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_START,
        NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_2NDBAND_LID,
        NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_3RDBAND_LID,
        NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_4THBAND_LID,
        NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_5THBAND_LID,
        NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_6THBAND_LID,
        NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_7THBAND_LID,
        NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_8THBAND_LID,
        NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_9THBAND_LID,
        NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_10THBAND_LID,
        NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_11THBAND_LID,
        NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_12THBAND_LID,
        NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_13THBAND_LID,
        NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_14THBAND_LID,
        NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_END = NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_14THBAND_LID,

        NVRAM_EF_EL1_MIPI_RX_DATA_START,
        NVRAM_EF_EL1_MIPI_RX_DATA_1STBAND_LID = NVRAM_EF_EL1_MIPI_RX_DATA_START,
        NVRAM_EF_EL1_MIPI_RX_DATA_2NDBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_DATA_3RDBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_DATA_4THBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_DATA_5THBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_DATA_6THBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_DATA_7THBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_DATA_8THBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_DATA_9THBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_DATA_10THBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_DATA_11THBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_DATA_12THBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_DATA_13THBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_DATA_14THBAND_LID,
        NVRAM_EF_EL1_MIPI_RX_DATA_END = NVRAM_EF_EL1_MIPI_RX_DATA_14THBAND_LID,

        NVRAM_EF_EL1_MIPI_TX_DATA_START,
        NVRAM_EF_EL1_MIPI_TX_DATA_1STBAND_LID = NVRAM_EF_EL1_MIPI_TX_DATA_START,
        NVRAM_EF_EL1_MIPI_TX_DATA_2NDBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_DATA_3RDBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_DATA_4THBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_DATA_5THBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_DATA_6THBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_DATA_7THBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_DATA_8THBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_DATA_9THBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_DATA_10THBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_DATA_11THBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_DATA_12THBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_DATA_13THBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_DATA_14THBAND_LID,
        NVRAM_EF_EL1_MIPI_TX_DATA_END = NVRAM_EF_EL1_MIPI_TX_DATA_14THBAND_LID,

        NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_START,
        NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_1STBAND_LID = NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_START,
        NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_2NDBAND_LID,
        NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_3RDBAND_LID,
        NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_4THBAND_LID,
        NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_5THBAND_LID,
        NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_END = NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_5THBAND_LID,


        NVRAM_EF_EL1_MIPI_BYPASS_FEATURE_LID,

        NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_START,
        NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_1STBAND_LID = NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_START,
        NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_2NDBAND_LID,
        NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_3RDBAND_LID,
        NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_4THBAND_LID,
        NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_5THBAND_LID,
        NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_END = NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_5THBAND_LID,

        NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_START,
        NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_1STBAND_LID = NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_START,
        NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_2NDBAND_LID,
        NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_3RDBAND_LID,
        NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_4THBAND_LID,
        NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_5THBAND_LID,
        NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_END = NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_5THBAND_LID,

        NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_START,
        NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_1STBAND_LID = NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_START,
        NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_2NDBAND_LID,
        NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_3RDBAND_LID,
        NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_4THBAND_LID,
        NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_5THBAND_LID,
        NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_END = NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_5THBAND_LID,


        NVRAM_EF_EL1_4G_TPO_PARAMETER_LID,
        NVRAM_EF_EL1_TX_POWER_OFFSET_START,
        NVRAM_EF_EL1_TX_POWER_OFFSET_1STBAND_LID = NVRAM_EF_EL1_TX_POWER_OFFSET_START,
        NVRAM_EF_EL1_TX_POWER_OFFSET_2NDBAND_LID,
        NVRAM_EF_EL1_TX_POWER_OFFSET_3RDBAND_LID,
        NVRAM_EF_EL1_TX_POWER_OFFSET_4THBAND_LID,
        NVRAM_EF_EL1_TX_POWER_OFFSET_5THBAND_LID,
        NVRAM_EF_EL1_TX_POWER_OFFSET_6THBAND_LID,
        NVRAM_EF_EL1_TX_POWER_OFFSET_7THBAND_LID,
        NVRAM_EF_EL1_TX_POWER_OFFSET_8THBAND_LID,
        NVRAM_EF_EL1_TX_POWER_OFFSET_9THBAND_LID,
        NVRAM_EF_EL1_TX_POWER_OFFSET_10THBAND_LID,
        NVRAM_EF_EL1_TX_POWER_OFFSET_11THBAND_LID,
        NVRAM_EF_EL1_TX_POWER_OFFSET_12THBAND_LID,
        NVRAM_EF_EL1_TX_POWER_OFFSET_13THBAND_LID,
        NVRAM_EF_EL1_TX_POWER_OFFSET_14THBAND_LID,
        NVRAM_EF_EL1_TX_POWER_OFFSET_END = NVRAM_EF_EL1_TX_POWER_OFFSET_14THBAND_LID,


        NVRAM_EF_EL1_TAS_PARAMETER_LID,
        NVRAM_EF_EL1_TAS_OTHER_LID,


        NVRAM_EF_EL1_GPS_CO_TMS_DATA_LID,


        NVRAM_EF_EL1_SVLTE_BAND_INDICATOR_LID,




        NVRAM_EF_MML1_CUSTOM_DYNAMIC_INIT_LID,

        NVRAM_EF_MML1_MIPI_INITIAL_CW_LID,
        NVRAM_EF_MML1_MIPI_USID_CHANGE_LID,


        NVRAM_EF_HMU_CONFIG_LID,
        NVRAM_EF_HMU_HD_CONFIG_LID,


        NVRAM_EF_NMU_CONFIG_LID,
# 1770 "interface/service/nvram/nvram_data_items.h"
        NVRAM_EF_SYSSEL_SETTING_LID,
        NVRAM_EF_REGIONAL_PHONE_MODE_LID,
  NVRAM_EF_DHL_FILTER_LID,
        NVRAM_EF_SBP_MODEM_CONFIG_LID,
        NVRAM_EF_SBP_MODEM_DATA_CONFIG_LID,



        NVRAM_EF_NVRAM_MSP_TEST_LID,


        NVRAM_EF_UMTS_DMCR_SETTING_LID,


        NVRAM_EF_UMTS_SIB_SKIP_SETTING_LID,



        NVRAM_EF_GAS_WORKING_BAND_INFO_LID,


        NVRAM_EF_NVRAM_UNIT_TEST_LID,


        NVRAM_EF_2G_BA_INFO_LID,


        NVRAM_EF_LAST_LID_CORE
    } nvram_lid_core_enum;


typedef unsigned int nvram_lid_core_enum_check[256*3 -(NVRAM_EF_LAST_LID_CORE - NVRAM_EF_SYS_LID + 1)];
# 3048 "interface/service/nvram/nvram_data_items.h"
extern const kal_uint32 NVRAM_EF_CUST_HW_LEVEL_TBL_DEFAULT[440];
# 3283 "interface/service/nvram/nvram_data_items.h"
typedef struct
{
    kal_uint32 sbp_mode;
    kal_uint8 modem_sbp_config[(SBP_MAX_MD_FEATURE/8)+1];
} nvram_ef_sbp_modem_config_struct;
# 3296 "interface/service/nvram/nvram_data_items.h"
typedef struct
{
    kal_uint32 sbp_mode;
    kal_uint8 modem_sbp_data_config[SBP_DATA_MAX_MD_FEATURE];
} nvram_ef_sbp_modem_data_config_struct;
# 3318 "interface/service/nvram/nvram_data_items.h"
typedef enum
{
    NVRAM_SYS_CACHE_BEGIN = 1,
    NVRAM_SYS_FLIGHTMODE_STATE,
    NVRAM_SYS_DSP_PATCH,
    NVRAM_SYS_SIM_PLUS_SETTING,
    NVRAM_SYS_FIXED_GAIN_MECH_FOR_HELIOS2,
    NVRAM_SYS_FACTORY_FLAG,
    NVRAM_SYS_LAST_FAT_STATUS,
    NVRAM_SYS_INFO,
    NVRAM_SYS_PHB_COMPARE_DIGIT,
    NVRAM_SYS_SVN,
    NVRAM_SYS_USB_BOOT_MODE,
    NVRAM_SYS_USB_TETHERING_MODE,
    NVRAM_SYS_AUTO_TEST,
    NVRAM_SYS_MINI_LOG_IDX,
    NVRAM_SYS_SWLA,
    NVRAM_SYS_CACHE_MAX
} nvram_sys_cache_enum;





typedef struct
{
    kal_uint8 arg1;
    kal_uint8 rat_mode;
    kal_uint8 preferred_rat;
    kal_uint8 preference;
    kal_uint8 roaming_setting;
    kal_uint8 mm_ivt;
    kal_uint8 utran_vdp;
    kal_uint8 reported_rat;
} nvram_ef_rac_preference_struct;
# 3392 "interface/service/nvram/nvram_data_items.h"
typedef struct
{
    kal_uint8 gps_time_valid_flag;
    kal_int32 gps_diff_wn;
    double gps_diff_tow;
    kal_uint8 gps_clock_drift_valid_flag;
    double gps_clock_drift;
    kal_int32 gps_clock_drift_age;
    kal_int32 gps_clock_drift_wn;
    double gps_clock_drift_tow;
}nvram_ef_gps_setting_data_struct;
# 153 "./service/dhl/database/msglog_db/custom_parse_db.c" 2
# 1 "service/sst/include/ex_item.h" 1
# 187 "service/sst/include/ex_item.h"
# 1 "interface/driver/sys_drv/intrCtrl.h" 1
# 577 "interface/driver/sys_drv/intrCtrl.h"
# 1 "driver/devdrv/cirq_v2/inc/intrCtrl_MT6735.h" 1
# 70 "driver/devdrv/cirq_v2/inc/intrCtrl_MT6735.h"
# 1 "driver/devdrv/cirq_v2/inc/irqid.h" 1
# 17 "driver/devdrv/cirq_v2/inc/irqid.h"
# 1 "driver/devdrv/cirq_v2/inc/irqid_MT6735.h" 1
# 18 "driver/devdrv/cirq_v2/inc/irqid.h" 2
# 71 "driver/devdrv/cirq_v2/inc/intrCtrl_MT6735.h" 2
# 1 "driver/drv_def/drv_features_gpt.h" 1
# 72 "driver/devdrv/cirq_v2/inc/intrCtrl_MT6735.h" 2
# 1 "driver/devdrv/cirq_v2/inc/drv_mdcirq.h" 1
# 68 "driver/devdrv/cirq_v2/inc/drv_mdcirq.h"
# 1 "interface/driver/sys_drv/isrentry.h" 1
# 132 "interface/driver/sys_drv/isrentry.h"
enum { WKUP_TM_NAME_MAX = 8, WKUP_LOG_BUF_MAX = 100 };

typedef struct
{
   kal_uint32 vector;
   void (*lisr_handler) (kal_uint32);
   kal_char *description;
} irqlisr_entry;

typedef struct errorMenuType
{
   kal_uint32 irqMask;
   kal_uint32 irqStatus;
   kal_uint32 irqStatus2;
   kal_uint32 fiqSelect;
   kal_uint32 fiqControl;
   kal_uint32 irqReturnAddr;
   kal_uint32 fiqReturnAddr;
} IntErrType;

typedef struct wkup_intr_log_struct
{
   kal_uint32 irq;
} wkup_intr_log_t;

typedef struct wkup_intr_timer_struct
{
   kal_char *timer_name;
} wkup_timer_log_t;






void IRQ_LISR_Init(void);
void IRQ_Default_LISR(void);
void nIRQ_Registration(kal_bool edge, void(reg_hisr)(void), kal_bool auto_unmask);
kal_bool nIRQ_Init(void);
kal_bool nFIQ_Init(void (hisr_callback)(void), kal_bool enable, kal_bool auto_unmask, kal_bool sensitivity);
extern kal_int32 get_wkup_intr_log_buf(wkup_intr_log_t **buf, kal_uint32 *indx, kal_uint32 *max);
extern kal_int32 get_wkup_timer_log_buf(wkup_timer_log_t **buf, kal_uint32 *indx, kal_uint32 *max);
extern kal_int32 enable_wkup_log(void);
# 69 "driver/devdrv/cirq_v2/inc/drv_mdcirq.h" 2
# 1 "driver/devdrv/cirq_v2/inc/drv_mdcirq_reg.h" 1
# 70 "driver/devdrv/cirq_v2/inc/drv_mdcirq.h" 2
# 172 "driver/devdrv/cirq_v2/inc/drv_mdcirq.h"
typedef void (*lisr_entry)(void);
# 73 "driver/devdrv/cirq_v2/inc/intrCtrl_MT6735.h" 2
# 1 "interface/service/config/hisr_config.h" 1
# 110 "interface/service/config/hisr_config.h"
typedef enum{
    KAL_INTID_NIL = 0,
    KAL_INTID_1, KAL_INTID_2, KAL_INTID_3, KAL_INTID_4, KAL_INTID_5,
    KAL_INTID_6, KAL_INTID_7, KAL_INTID_8, KAL_INTID_9, KAL_INTID_10,
    KAL_INTID_11, KAL_INTID_12, KAL_INTID_13, KAL_INTID_14, KAL_INTID_15,
    KAL_INTID_16, KAL_INTID_17, KAL_INTID_18, KAL_INTID_19, KAL_INTID_20,
    KAL_INTID_21, KAL_INTID_22, KAL_INTID_23, KAL_INTID_24, KAL_INTID_25,
    KAL_INTID_26, KAL_INTID_27, KAL_INTID_28, KAL_INTID_29, KAL_INTID_30,
    KAL_INTID_31, KAL_INTID_32, KAL_INTID_33, KAL_INTID_34, KAL_INTID_35,
    KAL_INTID_36, KAL_INTID_37, KAL_INTID_38, KAL_INTID_39, KAL_INTID_40,
    KAL_INTID_41, KAL_INTID_42, KAL_INTID_43, KAL_INTID_44, KAL_INTID_45,
    KAL_INTID_46, KAL_INTID_47, KAL_INTID_48, KAL_INTID_49, KAL_INTID_50,
    KAL_INTID_51, KAL_INTID_52, KAL_INTID_53, KAL_INTID_54, KAL_INTID_55,
    KAL_INTID_56, KAL_INTID_57, KAL_INTID_58, KAL_INTID_59, KAL_INTID_60,
    KAL_INTID_61, KAL_INTID_62, KAL_INTID_63, KAL_INTID_64, KAL_INTID_65,
    KAL_INTID_66, KAL_INTID_67, KAL_INTID_68, KAL_INTID_69, KAL_INTID_70,
    KAL_INTID_71, KAL_INTID_72, KAL_INTID_73, KAL_INTID_74, KAL_INTID_75,
    KAL_INTID_76, KAL_INTID_77, KAL_INTID_78, KAL_INTID_79, KAL_INTID_80,
    KAL_INTID_81, KAL_INTID_82, KAL_INTID_83, KAL_INTID_84, KAL_INTID_85,
    KAL_INTID_86, KAL_INTID_87, KAL_INTID_88, KAL_INTID_89, KAL_INTID_90,
    KAL_INTID_91, KAL_INTID_92, KAL_INTID_93, KAL_INTID_94, KAL_INTID_95,
    KAL_INTID_96, KAL_INTID_97, KAL_INTID_98, KAL_INTID_99, KAL_INTID_100,
    KAL_INTID_101, KAL_INTID_102, KAL_INTID_103, KAL_INTID_104, KAL_INTID_105,
    KAL_INTID_106, KAL_INTID_107, KAL_INTID_108, KAL_INTID_109, KAL_INTID_110,
    KAL_INTID_111, KAL_INTID_112, KAL_INTID_113, KAL_INTID_114, KAL_INTID_115,
    KAL_INTID_116, KAL_INTID_117, KAL_INTID_118, KAL_INTID_119, KAL_INTID_120,
    KAL_INTID_121, KAL_INTID_122, KAL_INTID_123, KAL_INTID_124, KAL_INTID_125,
    KAL_INTID_126, KAL_INTID_127, KAL_INTID_128,
    KAL_INTID_MAX,
}KAL_INTID_TYPE;

typedef unsigned int kal_intid_max_num_check1[(KAL_INTID_MAX-1) - (128)];
typedef unsigned int kal_intid_max_num_check2[(128) - (KAL_INTID_MAX-1)];







typedef enum {
   HISR_NIL = 0,
# 1 "interface/service/config/hisr_config_internal.h" 1
# 686 "interface/service/config/hisr_config_internal.h"
TRCPRCHISR=(HISR_ID_SS_CODE_BEGIN + 1),








TIMER_HISR=(HISR_ID_SS_CODE_BEGIN + 3),
# 707 "interface/service/config/hisr_config_internal.h"



BC_HISR=(HISR_ID_SS_CODE_BEGIN + 4),




L1DMA_HISR=(HISR_ID_SS_CODE_BEGIN + 5),












# 740 "interface/service/config/hisr_config_internal.h"
UMTS_HISR=(HISR_ID_MODEM_CODE_BEGIN + 2),






UL1D_REAL_HISR=(HISR_ID_MODEM_CODE_BEGIN + 3),






UL2HISR=(HISR_ID_MODEM_CODE_BEGIN + 4),







UL2SEQ_HISR=(HISR_ID_MODEM_CODE_BEGIN + 5),









UL2BCP_HISR=(HISR_ID_MODEM_CODE_BEGIN + 6),

















LTE_DSP_TIMER_HISR=(HISR_ID_MODEM_CODE_BEGIN + 9),




ERT_HISR=(HISR_ID_MODEM_CODE_BEGIN + 10),







# 817 "interface/service/config/hisr_config_internal.h"
DRVHISR=(HISR_ID_DRV_CODE_BEGIN + 1),




















L1AUDIO_HISR=(HISR_ID_DRV_CODE_BEGIN + 2),



# 851 "interface/service/config/hisr_config_internal.h"








HIF_CLDMA_HISR=(HISR_ID_DRV_CODE_BEGIN + 6),


# 878 "interface/service/config/hisr_config_internal.h"
HIF_CCIFRX_HISR=(HISR_ID_DRV_CODE_BEGIN + 9),








# 919 "interface/service/config/hisr_config_internal.h"
GPT_DEBUG_HISR=(HISR_ID_DRV_CODE_BEGIN + 20),






LISR2HISR_WTIMER=(HISR_ID_LISR2HISR_CODE_BEGIN + 1),




LISR2HISR_RTR_SLT=(HISR_ID_LISR2HISR_CODE_BEGIN + 2),




LISR2HISR_AI=(HISR_ID_LISR2HISR_CODE_BEGIN + 3),




LISR2HISR_PI=(HISR_ID_LISR2HISR_CODE_BEGIN + 4),





LISR2HISR_LTE2MD_PEER_WAKEUP=(HISR_ID_LISR2HISR_CODE_BEGIN + 5),






LISR2HISR_DSP_IRQ_EVENT=(HISR_ID_LISR2HISR_CODE_BEGIN + 6),






LISR2HISR_DSP_TIMER=(HISR_ID_LISR2HISR_CODE_BEGIN + 7),





L2_LTE_COPRO_HISR=(HISR_ID_LISR2HISR_CODE_BEGIN + 8),




L2_LMAC_RAR_HISR=(HISR_ID_LISR2HISR_CODE_BEGIN + 10),




L2_LMAC_EAR_HISR=(HISR_ID_LISR2HISR_CODE_BEGIN + 11),




LISR2HISR_SEARCHER=(HISR_ID_LISR2HISR_CODE_BEGIN + 12),




LISR2HISR_TFCI_0=(HISR_ID_LISR2HISR_CODE_BEGIN + 13),




LISR2HISR_TFCI_1=(HISR_ID_LISR2HISR_CODE_BEGIN + 14),




LISR2HISR_RXBRP_CC0=(HISR_ID_LISR2HISR_CODE_BEGIN + 15),




LISR2HISR_RXBRP_CC1=(HISR_ID_LISR2HISR_CODE_BEGIN + 16),




LISR2HISR_RXBRP_CCB=(HISR_ID_LISR2HISR_CODE_BEGIN + 17),




LISR2HISR_TDMA=(HISR_ID_LISR2HISR_CODE_BEGIN + 18),




LISR2HISR_CTIRQ1=(HISR_ID_LISR2HISR_CODE_BEGIN + 19),





LISR2HISR_CTIRQ2=(HISR_ID_LISR2HISR_CODE_BEGIN + 20),





LISR2HISR_RXBRP_HS=(HISR_ID_LISR2HISR_CODE_BEGIN + 21),




LISR2HISR_RXADC_OVLD_ANT0=(HISR_ID_LISR2HISR_CODE_BEGIN + 22),




LISR2HISR_RXADC_OVLD_ANT1=(HISR_ID_LISR2HISR_CODE_BEGIN + 23),


# 1064 "interface/service/config/hisr_config_internal.h"
LISR2HISR_SW_LISR2=(HISR_ID_LISR2HISR_CODE_BEGIN + 25),




LISR2HISR_SW_LISR1=(HISR_ID_LISR2HISR_CODE_BEGIN + 26),




LISR2HISR_SW_LISR3=(HISR_ID_LISR2HISR_CODE_BEGIN + 27),


# 1090 "interface/service/config/hisr_config_internal.h"
LISR2HISR_TOPSM=(HISR_ID_LISR2HISR_CODE_BEGIN + 30),





LISR2HISR_OSTIMER_ARM=(HISR_ID_LISR2HISR_CODE_BEGIN + 31),




# 1109 "interface/service/config/hisr_config_internal.h"
LISR2HISR_MODEM2G_TOPSM=(HISR_ID_LISR2HISR_CODE_BEGIN + 34),


# 1120 "interface/service/config/hisr_config_internal.h"
LISR2HISR_DSP2CPU=(HISR_ID_LISR2HISR_CODE_BEGIN + 41),


# 1136 "interface/service/config/hisr_config_internal.h"
LISR2HISR_MDGDMA2=(HISR_ID_LISR2HISR_CODE_BEGIN + 44),




LISR2HISR_DEINT0=(HISR_ID_LISR2HISR_CODE_BEGIN + 45),




LISR2HISR_DEINT1=(HISR_ID_LISR2HISR_CODE_BEGIN + 46),




LISR2HISR_DEINT2=(HISR_ID_LISR2HISR_CODE_BEGIN + 47),




LISR2HISR_DEINT3=(HISR_ID_LISR2HISR_CODE_BEGIN + 48),




LISR2HISR_EINT=(HISR_ID_LISR2HISR_CODE_BEGIN + 49),









EMIMPU_HISR=(HISR_ID_LISR2HISR_CODE_BEGIN + 51),

# 1181 "interface/service/config/hisr_config_internal.h"
BT_SCO_HISR=(HISR_ID_LISR2HISR_CODE_BEGIN + 53),




LISR2HISR_CC_IRQ_MD2MD1_SYS=(HISR_ID_LISR2HISR_CODE_BEGIN + 54),




LISR2HISR_CC_IRQ_MD2MD1_R0=(HISR_ID_LISR2HISR_CODE_BEGIN + 55),




LISR2HISR_CC_IRQ_MD2MD1_R1=(HISR_ID_LISR2HISR_CODE_BEGIN + 56),




LISR2HISR_CC_IRQ_MD2MD1_R2=(HISR_ID_LISR2HISR_CODE_BEGIN + 57),




BUS_MONITOR_MDPERI_HISR=(HISR_ID_LISR2HISR_CODE_BEGIN + 58),




BUS_MONITOR_MDMCU_HISR=(HISR_ID_LISR2HISR_CODE_BEGIN + 59),

# 153 "interface/service/config/hisr_config.h" 2
    HISR_END,
    RPS_TOTAL_STACK_HISRS = HISR_END
}kal_hisr;


extern kal_hisrid kal_init_hisr(kal_hisr e_hirs);






# 1 "interface/service/config/hisr_config_internal.h" 1
# 686 "interface/service/config/hisr_config_internal.h"
extern void trc_process_HisrEntry(void);








extern void TMC_Timer_HISR(void);
# 707 "interface/service/config/hisr_config_internal.h"



extern void bc_isr_hisr(void);




extern void l1dma_hisr(void);












# 740 "interface/service/config/hisr_config_internal.h"
extern void UL1C_HISR(void);






extern void UL1D_RealHISR(void);






extern void UL1D_UL2HISR(void);







extern void seq_isr_hisr(void);









extern void bcp_isr_hisr(void);

















extern void lte_dsp_timer_hisr(void);




extern void ert_hisr(void);







# 817 "interface/service/config/hisr_config_internal.h"
extern void DRV_HISR(void);




















extern void L1Audio_HISR(void);



# 851 "interface/service/config/hisr_config_internal.h"








extern void hifcldma_hisr_handler(void);


# 878 "interface/service/config/hisr_config_internal.h"
extern void hifwccifrx_hisr_handler(void);








# 919 "interface/service/config/hisr_config_internal.h"
extern void GPTCB_DEBUG_HISR(void);






extern void UL1SM_Interrupt(void);




extern void UL1D_SlotTick(void);




extern void UL1D_AICH_INTERRUPT(void);




extern void UL1D_PICH_INTERRUPT(void);





extern void EL1SM_Interrupt(void);






extern void lte_dsp_irq_event_lisr(void);






extern void lte_dsp_timer_lisr(void);





extern void l2_lte_copro_hisr(void);




extern void l2lmac_dl_rar_hisr(void);




extern void l2lmac_dl_ear_hisr(void);




extern void ul1d_cs_irq_handler(void);




extern void UL1D_CCTrCH0_TFCI_LISR(void);




extern void UL1D_CCTrCH1_TFCI_LISR(void);




extern void UL1D_CCTrCH0_DECODE_DONE_LISR(void);




extern void UL1D_CCTrCH1_DECODE_DONE_LISR(void);




extern void UL1D_CCTrCH_BCH_Interrupt_Handler(void);




extern void L1SM_TDMAInterrupt(void);




extern void isrCTIRQ1(void);





extern void L1D_FrameTick2(void);





extern void UL1D_HSDSCH_DECODE_DONE_LISR(void);




extern void ul1d_rxadc_ovld_ant0(void);




extern void ul1d_rxadc_ovld_ant1(void);


# 1064 "interface/service/config/hisr_config_internal.h"
extern void UL1D_HighPriHISR(void);




extern void UL1D_HISR(void);




extern void UL1D_LowPriHISR(void);


# 1090 "interface/service/config/hisr_config_internal.h"
extern void MD_TOPSM_FM_Interrupt(void);





extern void OSTD_Interrupt(void);




# 1109 "interface/service/config/hisr_config_internal.h"
extern void MODEM2G_TOPSM_FM_Interrupt(void);


# 1120 "interface/service/config/hisr_config_internal.h"
extern void L1D_DSP2MCU_Interrupt(void);


# 1136 "interface/service/config/hisr_config_internal.h"
extern void uart_hdma_isr(void);




extern void DEINT0_LISR(void);




extern void DEINT1_LISR(void);




extern void DEINT2_LISR(void);




extern void DEINT3_LISR(void);




extern void EINT_LISR(void);









extern void emimpu_lisr(void);

# 1181 "interface/service/config/hisr_config_internal.h"
extern void BT_SCO_LISR(void);




extern void cc_irq_hisr(void);




extern void cc_irq_hisr(void);




extern void cc_irq_hisr(void);




extern void cc_irq_hisr(void);




extern void drv_mdperi_busmon_lisr(void);




extern void drv_mdmcu_busmon_lisr(void);

# 166 "interface/service/config/hisr_config.h" 2
# 74 "driver/devdrv/cirq_v2/inc/intrCtrl_MT6735.h" 2
# 369 "driver/devdrv/cirq_v2/inc/intrCtrl_MT6735.h"
typedef enum
{
   LISR_UART1 = (27),
   LISR_UART2 = (28)
} LISR_IRQ_NO;

enum Irq_Code_Def_Enum
{
    Enum_IRQ_WTMR_CODE = (116),
    Enum_IRQ_RTRSLT_CODE = (117),
    Enum_IRQ_AI_CODE = (102),
    Enum_IRQ_PI_CODE = (101),
    Enum_IRQ_SRCHR_CODE = (100),
    Enum_IRQ_TFCI0_CODE = (104),
    Enum_IRQ_TFCI1_CODE = (103),
    Enum_IRQ_RXBRP0_CODE = (107),
    Enum_IRQ_RXBRP1_CODE = (106),
    Enum_IRQ_RXBRPB_CODE = (105),
    Enum_IRQ_TDMA_CODE = (107),
    Enum_IRQ_CTIRQ1_CODE = (123),
    Enum_IRQ_CTIRQ2_CODE = (122),




    Enum_IRQ_SISR1_CODE = (14),
    Enum_IRQ_SISR2_CODE = (15),

    Enum_IRQ_SISR3_CODE = (16),
    Enum_IRQ_SISR4_CODE = (17),
    Enum_IRQ_SISR5_CODE = (18),
    Enum_IRQ_RXBRPHS_CODE = (98),
    Enum_IRQ_RXADC0_CODE = (97),
    Enum_IRQ_RXADC1_CODE = (96),
    Enum_IRQ_OSTIMER_ARM_CODE = (0),
    Enum_IRQ_TDD_CODE = (55),
    Enum_IRQ_TDD_WAKEUP_CODE = (56),
    Enum_IRQ_TOPSM_CODE = (54),
    Enum_IRQ_UART1_CODE = (27),
    Enum_IRQ_UART2_CODE = (28),

    Enum_IRQ_MDGDMA0_CODE = (42),
    Enum_IRQ_MDGDMA1_CODE = (43),
    Enum_IRQ_MDGDMA2_CODE = (44),
    Enum_IRQ_MDGDMA3_CODE = (45),
    Enum_IRQ_EINT0_CODE = (46),
    Enum_IRQ_EINT1_CODE = (47),
    Enum_IRQ_EINT2_CODE = (48),
    Enum_IRQ_EINT3_CODE = (49),
    Enum_IRQ_EINT_SHARE_CODE = (50),
    Enum_IRQ_LTE2MD_PEER_WAKEUP_CODE = (79),
    Enum_IRQ_DSP_IRQ_EVENT_CODE = (38),
    Enum_IRQ_DSP_TIMER_CODE = (39),
    Enum_IRQ_DSP_L1DMA_CODE = (40),
    Enum_IRQ_L2COPRO_CODE = (12),
    Enum_IRQ_LMAC_RAR_CODE = (2),
    Enum_IRQ_LMAC_EAR_CODE = (3),
    Enum_IRQ_ALC1_CODE = (1),
    Enum_IRQ_MD_WDT_CODE = (4),
    Enum_IRQ_CCIF_ACK_CODE = (6),
    Enum_IRQ_CCIF_VLD_CODE = (7),
    Enum_IRQ_CLDMA_CODE = (8),
    Enum_IRQ_USB2_CODE = (13),

    Enum_IRQ_GPTM1_CODE = (20),
    Enum_IRQ_GPTM2_CODE = (21),
    Enum_IRQ_GPTM3_CODE = (22),
    Enum_IRQ_GPTM4_CODE = (23),
    Enum_IRQ_GPTM5_CODE = (24),
    Enum_IRQ_GPTM6_CODE = (25),
    Enum_IRQ_BUSMON1_CODE = (29),
    Enum_IRQ_BUSMON2_CODE = (61),
    Enum_IRQ_PCMON_CODE = (30),
    Enum_IRQ_SIM_CODE = (32),
    Enum_IRQ_SIM2_CODE = (33),
    Enum_IRQ_CA_DL_LMAC_RAR_CODE = (58),
    Enum_IRQ_CA_DL_LMAC_EAR_CODE = (59),
    Enum_IRQ_BSICTRL_IMM_RDINT_CODE = (69),
    Enum_IRQ_CAIF_VALID_CODE = (70),
    Enum_IRQ_CAIF_ACK_CODE = (71),
    Enum_IRQ_A7WDT_CODE = (72),
    Enum_IRQ_C1_IRQ_T1_CODE = (80),
    Enum_IRQ_C1_IRQ_T6_CODE = (81),
    Enum_IRQ_IDC2ARM_CODE = (90),
    Enum_IRQ_AUXADC_CODE = (91),
    Enum_IRQ_Code_End = 128
};
# 578 "interface/driver/sys_drv/intrCtrl.h" 2
# 599 "interface/driver/sys_drv/intrCtrl.h"
typedef struct IRQ_MASK_VALUE_STRUCT
{
# 611 "interface/driver/sys_drv/intrCtrl.h"
   kal_uint32 irq_mask0;
   kal_uint32 irq_mask1;
   kal_uint32 irq_mask2;
   kal_uint32 irq_mask3;
# 632 "interface/driver/sys_drv/intrCtrl.h"
} IRQ_MASK_VALUE_T;


typedef kal_uint32 IRQ_MASK_VALUE_T2[((128)+31)/32] ;
# 644 "interface/driver/sys_drv/intrCtrl.h"
typedef enum
{

# 1 "driver/devdrv/cirq_v1/inc/intrCtrl_SW_Handle.h" 1
# 227 "driver/devdrv/cirq_v1/inc/intrCtrl_SW_Handle.h"
# 1 "driver/devdrv/cirq_v2/inc/intrCtrl_MT6735_SW_Handle.h" 1
# 103 "driver/devdrv/cirq_v2/inc/intrCtrl_MT6735_SW_Handle.h"
    SW_TRIGGER_CODE1=((14)),
    SW_TRIGGER_CODE2=((15)),
    SW_TRIGGER_CODE3=((16)),
    SW_TRIGGER_CODE4=((17)),
    SW_TRIGGER_CODE5=((18)),
    SW_TRIGGER_CODE6=((19)),
    SW_TRIGGER_CODE7=((31)),
    SW_TRIGGER_CODE8=((34)),
# 228 "driver/devdrv/cirq_v1/inc/intrCtrl_SW_Handle.h" 2
# 648 "interface/driver/sys_drv/intrCtrl.h" 2

   SW_HANDLE_END
}SW_CODE_HANDLE;

extern void Activate_LISR(SW_CODE_HANDLE code);
extern void Deactivate_LISR(SW_CODE_HANDLE code);





extern const kal_uint8 SW_Code_Handle2Code[(128)];
extern kal_uint32 SW_INT_Counter[(128)];
# 670 "interface/driver/sys_drv/intrCtrl.h"
extern kal_uint32 SaveAndSetIRQMask(void);
extern void RestoreIRQMask(kal_uint32);

extern void IRQClearInt(kal_uint8);
extern void IRQMask(kal_uint8);
extern void IRQMaskAll(void);
extern void IRQUnmask(kal_uint8);
extern void CTIRQ1_2_MaskAll(IRQ_MASK_VALUE_T *val);
extern void CTIRQ1_2_Restore(IRQ_MASK_VALUE_T *val);
extern void IRQSensitivity(kal_uint8, kal_bool);
extern void FIQSensitivity(kal_bool);
extern void initINTR(void);
extern kal_uint16 INT_BootMode(void);
extern kal_uint32 IRQMask_Status(kal_uint8 code);
extern kal_uint32 IRQ_Status(void);
extern kal_uint32 FIQ_isValid(void);
# 694 "interface/driver/sys_drv/intrCtrl.h"
# 1 "interface/service/config/syscomp_config.h" 1
# 105 "interface/service/config/syscomp_config.h"
# 1 "interface/service/config/stack_types.h" 1
# 114 "interface/service/config/stack_types.h"
typedef kal_bool (*task_init_func_ptr) (void);
typedef kal_bool (*task_reset_func_ptr) (void);
# 106 "interface/service/config/syscomp_config.h" 2

# 1 "interface/service/config/hisr_config.h" 1
# 108 "interface/service/config/syscomp_config.h" 2
# 137 "interface/service/config/syscomp_config.h"
typedef struct {
   kal_task_func_ptr comp_entry_func;
   task_init_func_ptr comp_init_func;
   task_reset_func_ptr comp_reset_func;
} comptask_handler_struct;

typedef kal_bool (*kal_create_func_ptr)(comptask_handler_struct **);
# 164 "interface/service/config/syscomp_config.h"
typedef struct {
   kal_char *comp_name_ptr;
   kal_char *comp_qname_ptr;
   kal_uint32 comp_priority;
   kal_uint32 comp_stack_size;
   kal_create_func_ptr comp_create_func;
   kal_bool comp_internal_ram_stack;
   kal_uint8 comp_ext_qsize;
   kal_uint8 comp_int_qsize;
   kal_uint8 comp_boot_mode;
} comptask_info_struct;


typedef struct
{
    kal_hisr index;
    kal_uint8 priority;
    kal_uint8 options;
    kal_uint32 stack_size;
    kal_hisr_func_ptr entry_func;
    kal_char *hisr_name;
}hisr_parameter_s;

typedef struct hisr_intid_map_t
{
 kal_hisr hisr_id;
 interrupt_type int_id;
}hisr_intid_map;
# 695 "interface/driver/sys_drv/intrCtrl.h" 2
extern const hisr_intid_map hisr_intid_g[];
extern const kal_uint32 total_hisr_intid_g;
extern const kal_uint8 kalid2intrID[KAL_INTID_MAX+1];
extern kal_hisrid intrID2hisrID[];
# 721 "interface/driver/sys_drv/intrCtrl.h"
extern kal_uint32 CheckIRQLock(void);
extern kal_uint16 IRQ_Current_LISR(void);

extern void SetINTMask(kal_uint8 code);
extern void RestoreINTMask(kal_uint8 code);
# 188 "service/sst/include/ex_item.h" 2

# 1 "interface/service/sst/ex_public.h" 1
# 118 "interface/service/sst/ex_public.h"
typedef struct ex_bbreg_dump
{
    kal_uint32 *regions;





    kal_bool (*bbreg_dump_callback)();
    kal_char* owner;
    kal_uint16 num;
    kal_bool is_registered;
    void* next_dump;
} EX_BBREG_DUMP;




extern void ex_register_bbreg_dump(EX_BBREG_DUMP *dump, kal_char* filename);
# 167 "interface/service/sst/ex_public.h"
extern kal_uint32 INT_MemoryDumpFlag;
extern kal_uint32 INT_DefaultMemoryDumpFlag;
# 190 "service/sst/include/ex_item.h" 2





typedef enum
{
    INVAID_EXCEPTION = 0,
    UNDEF_EXCEPTION = 1,
    SWI_EXCEPTION = 2,
    PREFETCH_EXCEPTION = 3,
    DATAABORT_EXCEPTION = 4,
    ASSERT_FAIL_EXCEPTION = 5,
    SYS_FATALERR_EXT_TASK_EXCEPTION = 6,
    SYS_FATALERR_EXT_BUF_EXCEPTION = 7,
    SYS_LOCKUP = 8,
    ASSERT_DUMP_EXTENDED_RECORD = 9,
    ASSERT_FAIL_NATIVE = 10,
    DSP_ASSERT_FAIL = 11,
    DSP_EXCEPTION = 12,
    DSP_FATAL_ERROR = 13,
    STACKACCESS_EXCEPTION = 14,


    CC_INVALID_EXCEPTION = 0x20,
    CC_SELF_EXCEPTION = 0x21,
    CC_L1CORE_EXCEPTION = 0x22,
    CC_CS_EXCEPTION = 0x23,
    CC_MD32_EXCEPTION = 0x24,
    CC_C2K_EXCEPTION = 0x25,
    NUM_EXCEPTION
} exception_type;

typedef enum
{
    Healthy = 0,
    InternalSRAMCorrupted = 1,
    SystemStackCorrupted = 2,
    TaskStackCorrupted = 3,
    HISRStackCorrupted = 4,
    VectorTableCorrupted = 5,
} EX_DIAGNOSIS_T;

typedef enum
{
    EX_AUTO_STEP = 0,
    EX_BEGIN = 0,
    EX_INIT_LOG_DONE = 0x2F,
    EX_CC_COMM = 0x30,
    EX_CC_COMM_OPEN_PORT = 0x35,
    EX_CC_COMM_CCCI_HANDSHAKE = 0x40,
    EX_CC_COMM_CCCI_HANDSHAKE_DONE = 0x5F,
    EX_CC_COMM_CCCI_FLUSH_PORT = 0x60,
    EX_CC_COMM_CCCI_FLUSH_PORT_DONE = 0x67,
    EX_CC_COMM_DONE = 0x6F,
    EX_PROCESS = 0x70,
    EX_MSG_OUT = 0x80,
    EX_ANALYSE = 0x95,
    EX_APP_PROCESS = 0xA0,
    EX_MSG_SAVE = 0xB0,
    EX_EX_REBOOT = 0xCE,
    EX_EX_REBOOT_MP = 0xEE,
    EX_HANDOVER = 0xFF,
} exception_flow_index;

typedef enum
{
    EX_NE_BEGIN = 0x10,
    EX_NE_EX_REBOOT = 0xCE,
} exception_nested_flow_index;
# 272 "service/sst/include/ex_item.h"
typedef struct ex_exception_record_header_t
{
    exception_type ex_type;
    kal_uint8 ex_nvram;
    kal_uint16 ex_serial_num;
} EX_HEADER_T;


typedef struct _ex_rtc_struct
{
    kal_uint8 rtc_sec;
    kal_uint8 rtc_min;
    kal_uint8 rtc_hour;
    kal_uint8 rtc_day;
    kal_uint8 rtc_mon;
    kal_uint8 rtc_wday;
    kal_uint8 rtc_year;
    kal_uint8 rtc_pad;
} ex_rtc_struct;

typedef struct _ex_timestamp_struct
{
    kal_uint32 USCNT;
    kal_uint32 FrameNo;
} ex_timestamp_struct;




typedef struct ex_environment_info_t
{
    ex_timestamp_struct ex_timestamp;
    boot_mode_type boot_mode;
    kal_char execution_unit[8];
    kal_uint8 status;
    kal_uint8 ELM_status;
    kal_uint8 pad;
    kal_uint32 stack_ptr;
    kal_uint32 stack_dump[10];
    kal_uint16 ext_queue_pending_cnt;
    kal_uint16 interrupt_mask3;
    kal_uint32 ext_queue_pending[20];
    kal_uint32 interrupt_mask[2];
    kal_uint32 processing_lisr;
    kal_uint32 lr;
} EX_ENVINFO_T;


typedef struct ex_diagnosis_info_t
{
    EX_DIAGNOSIS_T diagnosis;
    kal_char owner[8];
    kal_uint8 pad[3];
    kal_uint32 timing_check[6];
} EX_DIAGNOSISINFO_T;
# 352 "service/sst/include/ex_item.h"
typedef struct ex_fatalerror_code_t
{
    kal_uint32 code1;
    kal_uint32 code2;
} EX_FATALERR_CODE_T;

typedef struct ex_description_t
{
    kal_uint32 trace;
    kal_uint8 param[16];
} EX_DESCRIPTION_T;

typedef struct ex_analysis_t
{
    kal_uint32 trace;
    kal_uint8 param[40];
    kal_uint8 owner[8];
} EX_ANALYSIS_T;

typedef struct ex_guideline_t
{
    kal_uint32 trace;
    kal_uint8 param[16];
} EX_GUIDELINE_T;






typedef struct
{
    kal_char ex_his_owner[8];
    kal_char ex_his_source[16];
    kal_uint32 ex_his_line;
    kal_uint32 ex_his_count;
} EX_CTRLBUFF_HISTORY_T;

typedef struct
{
    kal_uint32 ex_buf_RTOS_header1;
    kal_uint32 ex_buf_RTOS_header2;
    kal_uint32 ex_buf_KAL_header1;
    kal_uint32 ex_buf_KAL_header2;
    kal_uint32 ex_buf_KAL_header3;
    kal_uint32 ex_buf_poolID;
    kal_uint32 ex_buf_KAL_footer1;
    kal_uint32 ex_buf_KAL_footer2;
} EX_CTRLBUFF_COMMON_T;

typedef struct
{
    kal_char ex_buf_source[12];
    kal_uint32 ex_buf_line;
} EX_CTRLBUFF_OWNER_T;

typedef union
{
    EX_CTRLBUFF_HISTORY_T history;
    EX_CTRLBUFF_COMMON_T common;
} EX_CTRLBUFF_INFO_T;

typedef struct
{
    kal_uint32 ex_ctrlbuf_size;
    kal_uint32 ex_ctrlbuf_num;
    EX_CTRLBUFF_INFO_T ex_ctrlbuf_top;
    EX_CTRLBUFF_INFO_T ex_ctrlbuf_second;
    EX_CTRLBUFF_INFO_T ex_ctrlbuf_third;
    EX_CTRLBUFF_OWNER_T ex_monitor[3];
    kal_uint32 ex_reserved[2];
} EX_CTRLBUFF_T;

typedef struct
{
    module_type ex_his_module;
    kal_uint8 ex_his_source[8];
    kal_uint32 ex_his_hf;
    kal_uint32 ex_his_count;
} EX_ESBUFF_HISTORY_T;

typedef struct
{
    kal_uint32 ex_esbuf_size;
    kal_uint32 ex_esbuf_num;
    EX_ESBUFF_HISTORY_T ex_esbuf_top;
    EX_ESBUFF_HISTORY_T ex_esbuf_second;
    EX_ESBUFF_HISTORY_T ex_esbuf_third;
} EX_ESBUFF_T;

typedef struct
{
    kal_uint8 ex_q_src_mod;
    kal_uint8 ex_q_count;
    kal_uint16 ex_q_msg_id;
    kal_uint16 ex_q_cur_mes_no;
    kal_uint16 ex_q_config_entry;
} EX_QUEUE_T;

typedef struct
{
    kal_char ex_task_name[8];
    kal_char ex_task_stack_gp[8];
    kal_uint32 ex_task_cur_status;
    EX_QUEUE_T ex_task_external_q;
    EX_QUEUE_T ex_task_internal_q;
    kal_uint32 ex_reserved;
} EX_TASKINFO_T;


typedef struct ex_cp15_log_t
{
    kal_uint32 reg_ifsr;
    kal_uint32 reg_dfsr;
    kal_uint32 reg_far;

    kal_uint32 reg_ifar;

} EX_CP15_LOG_T;

typedef struct
{
    kal_uint32 cpsr;
    kal_uint32 reg[16];
    EX_CP15_LOG_T cp15_reg;
} EX_CPU_REG_T;
# 486 "service/sst/include/ex_item.h"
typedef struct ex_fatalerror_t
{
    EX_FATALERR_CODE_T error_code;
    EX_DESCRIPTION_T description;
    EX_ANALYSIS_T analysis;
    EX_GUIDELINE_T guideline;
    union
    {
        EX_CTRLBUFF_T ctrl_buff;
        EX_ESBUFF_T es_buff;
        EX_TASKINFO_T task_info[4];
        EX_CPU_REG_T cpu_reg;
    } info;
    kal_uint8 extrainfo[36];
} EX_FATALERR_T;
# 514 "service/sst/include/ex_item.h"
typedef struct ex_assert_fail_t
{
    kal_char filename[24];
    kal_uint32 linenumber;
    kal_uint32 parameters[3];
    kal_uint8 dump[512 - (sizeof(EX_HEADER_T) + 12 + sizeof(EX_ENVINFO_T) + sizeof(EX_DIAGNOSISINFO_T) + 24 + sizeof(kal_uint32) * 4 + 4)];
    kal_uint8 guard[4];
} EX_ASSERTFAIL_T;






typedef union
{
    EX_FATALERR_T fatalerr;
    EX_ASSERTFAIL_T assert;
} EX_CONTENT_T;





typedef struct ex_exception_log_t
{
    EX_HEADER_T header;
    kal_char sw_version[12];
    EX_ENVINFO_T envinfo;
    EX_DIAGNOSISINFO_T diaginfo;
    EX_CONTENT_T content;
} EX_LOG_T;



typedef struct ex_assertfail_record_t
{
    EX_HEADER_T header;
    kal_char sw_version[12];
    EX_ENVINFO_T envinfo;
    EX_DIAGNOSISINFO_T diaginfo;
    EX_ASSERTFAIL_T assert;
} ex_assertfail_record;


typedef struct ex_assertdumpextended_record_t
{
    EX_HEADER_T header;
    kal_char sw_version[512 - sizeof(EX_HEADER_T)];
} ex_assertdumpextended_record;


typedef struct ex_exception_record_t
{
    EX_HEADER_T header;
    kal_char sw_version[12];
    EX_ENVINFO_T envinfo;
    EX_DIAGNOSISINFO_T diaginfo;
    EX_FATALERR_CODE_T error_code;
    EX_DESCRIPTION_T description;
    EX_ANALYSIS_T analysis;
    EX_GUIDELINE_T guideline;
    EX_TASKINFO_T task_info[4];
} ex_exception_record;


typedef struct ex_stackfatalerr_task_record_t
{
    EX_HEADER_T header;
    kal_char sw_version[12];
    EX_ENVINFO_T envinfo;
    EX_DIAGNOSISINFO_T diaginfo;
    EX_FATALERR_CODE_T error_code;
    EX_DESCRIPTION_T description;
    EX_ANALYSIS_T analysis;
    EX_GUIDELINE_T guideline;
    EX_TASKINFO_T task_info[4];
} ex_stackfatalerr_task_record;


typedef struct ex_stackfatalerr_ctrlbuf_record_t
{
    EX_HEADER_T header;
    kal_char sw_version[12];
    EX_ENVINFO_T envinfo;
    EX_DIAGNOSISINFO_T diaginfo;
    EX_FATALERR_CODE_T error_code;
    EX_DESCRIPTION_T description;
    EX_ANALYSIS_T analysis;
    EX_GUIDELINE_T guideline;
    EX_CTRLBUFF_T ctrl_buff;
} ex_stackfatalerr_ctrlbuf_record;


typedef struct ex_stackfatalerr_abort_record_t
{
    EX_HEADER_T header;
    kal_char sw_version[12];
    EX_ENVINFO_T envinfo;
    EX_DIAGNOSISINFO_T diaginfo;
    EX_FATALERR_CODE_T error_code;
    EX_DESCRIPTION_T description;
    EX_ANALYSIS_T analysis;
    EX_GUIDELINE_T guideline;
    EX_CPU_REG_T cpu_reg;
} ex_stackfatalerr_abort_record;


typedef struct
{
    exception_type type;
    kal_bool ext;
    kal_uint32 *code1;
    kal_uint32 *code2;
    kal_uint32 e1;
    kal_uint32 e2;
    kal_uint32 e3;
    ASSERT_DUMP_PARAM_T *dump_param;
} EX_INIT_LOG_PARAM_T;
# 730 "service/sst/include/ex_item.h"
extern void ex_init_log(EX_INIT_LOG_PARAM_T *param);
extern void ex_save_log(EX_INIT_LOG_PARAM_T *param);
extern void ex_output_log(void);
extern kal_int8 ex_init_ctrl_buff_log(kal_uint32 *target_ptr, kal_uint32 code1, kal_uint32 code2);
extern kal_int8 ex_init_es_buff_log(kal_uint32 *target_ptr);
extern void ex_memory_dump_init(void);
extern void ex_output_loadinfo(void);



extern void ex_reset_hw(void);
extern void ex_reboot(void);

extern void ex_init_step_logging(void);
extern void ex_set_step_logging(kal_uint8 start_step);
extern void ex_fire_extern_step_logging(kal_uint32 info);
extern void ex_repeat_step_logging();


extern void ex_output_exc_msg(kal_bool bypass_nested);
extern void ex_reappear_log(void);





kal_uint32 ex_stack_overflow_check_by_mpu(void);





extern EX_LOG_T *ex_log_ptr;

extern EX_CP15_LOG_T ex_cp15_log;
# 154 "./service/dhl/database/msglog_db/custom_parse_db.c" 2
# 162 "./service/dhl/database/msglog_db/custom_parse_db.c"
# 1 "interface/service/nvram/nvram_editor_data_item.h" 1
# 2123 "interface/service/nvram/nvram_editor_data_item.h"
# 1 "modem/gl1/l1_dm/l1d_ext/m12190.h" 1
# 1174 "modem/gl1/l1_dm/l1d_ext/m12190.h"
# 1 "modem/gl1/l1_dm/l1d_ext/l1d_cid.h" 1
# 1175 "modem/gl1/l1_dm/l1d_ext/m12190.h" 2
# 1 "interface/modem/l1/gsm/external/l1cal.h" 1
# 235 "interface/modem/l1/gsm/external/l1cal.h"
# 1 "interface/modem/l1/gsm/external/l1_option.h" 1
# 236 "interface/modem/l1/gsm/external/l1cal.h" 2
# 1 "custom/modem/l1_rf/MT6735_2G_MT6169_CUSTOM/l1d_custom_rf.h" 1
# 41 "custom/modem/l1_rf/MT6735_2G_MT6169_CUSTOM/l1d_custom_rf.h"
# 1 "custom/modem/l1_rf/MT6735_2G_MT6169_CUSTOM/l1d_custom_mipi.h" 1
# 42 "custom/modem/l1_rf/MT6735_2G_MT6169_CUSTOM/l1d_custom_rf.h" 2
# 394 "custom/modem/l1_rf/MT6735_2G_MT6169_CUSTOM/l1d_custom_rf.h"
# 1 "custom/modem/mml1_rf/MT6735_MMRF_CUSTOM/mml1_custom_drdi.h" 1
# 395 "custom/modem/l1_rf/MT6735_2G_MT6169_CUSTOM/l1d_custom_rf.h" 2
# 237 "interface/modem/l1/gsm/external/l1cal.h" 2

# 1 "interface/modem/l1/gsm/external/l1_types_public.h" 1
# 129 "interface/modem/l1/gsm/external/l1_types_public.h"
# 1 "interface/modem/l1/gsm/external/mph_types.h" 1
# 188 "interface/modem/l1/gsm/external/mph_types.h"
# 1 "interface/modem/l1/gsm/external/l1_gemini_def.h" 1
# 189 "interface/modem/l1/gsm/external/mph_types.h" 2
# 201 "interface/modem/l1/gsm/external/mph_types.h"
typedef kal_int16 ARFCN;
typedef kal_int8 BSIC;
typedef kal_int8 TSC;
typedef kal_int8 TimeSlot;
typedef kal_uint8 TimeSlotMask;
typedef kal_int8 SubChannel;
typedef kal_int16 Power;
typedef kal_uint8 RxlevPower;
typedef kal_uint8 TimingAdvance;
typedef kal_int32 FrameNumber;
typedef kal_uint16 RAChData;

typedef kal_int8 TFI;
typedef kal_int8 PowerControlLevel;
typedef kal_int16 PowerSum;
typedef kal_uint8 BlockData;
typedef kal_int8 LoopMode;
typedef kal_int8 USF;

typedef enum
{
   BTSPowerControlModeNoPowerControl,
   BTSPowerControlModeA,
   BTSPowerControlModeB
} BTSPowerControlMode;

typedef enum
{
   CodingSchemeNone,
   CodingSchemeCS1,
   CodingSchemeCS2,
   CodingSchemeCS3,
   CodingSchemeCS4,




   CodingSchemeMCS1,
   CodingSchemeMCS2,
   CodingSchemeMCS3,
   CodingSchemeMCS4,
   CodingSchemeMCS5,
   CodingSchemeMCS6,
   CodingSchemeMCS7,
   CodingSchemeMCS8,
   CodingSchemeMCS9,

   CodingSchemePRACh8,
   CodingSchemePRACh11
} CodingScheme;

typedef enum
{
   PuncturingSchemeNone,
   PuncturingScheme1,
   PuncturingScheme2,
   PuncturingScheme3
} PuncturingScheme;


typedef enum
{
   PBCChModeNone,
   PBCChModeAll,
   PBCChModePSI1Only,
   PBCChModeHROnly,
   PBCChModeLROnly,
   PBCChModePSI1HR,
   PBCChModePSI1LR,
   PBCChModeHRLR,
   PBCChModeB0OnTC0Only
} PBCChMode;




typedef enum
{
   LogTChF,
   LogTChH,
   LogSDCCh4,
   LogSDCCh8
} LogChannel;




typedef enum
{
   TChModeNone,
   TChModeFSig,
   TChModeFS,
   TChModeF144,
   TChModeF96,
   TChModeF48,
   TChModeF24,


   TChModeHSig,
   TChModeHS,
   TChModeH48,
   TChModeH24,
   TChModeEFS,


   TChModeAFS,
   TChModeAHS,
   TChModeAFS_WB,


   TChModeFS_VAMOS,
   TChModeHS_VAMOS,
   TChModeEFS_VAMOS,
   TChModeAFS_VAMOS,
   TChModeAHS_VAMOS,
   TChModeAFS_WB_VAMOS,


   TChModeAFS1220,
   TChModeAFS1020,
   TChModeAFS795,
   TChModeAFS740,
   TChModeAFS670,
   TChModeAFS590,
   TChModeAFS515,
   TChModeAFS475,

   TChModeAHS795,
   TChModeAHS740,
   TChModeAHS670,
   TChModeAHS590,
   TChModeAHS515,
   TChModeAHS475,

   TChModeAFS_WB1265,
   TChModeAFS_WB885,
   TChModeAFS_WB660
} TChMode;




typedef enum
{
   RR_L1A_1

   ,RR_L1A_2







} module_id_enum;


typedef enum
{
    MPAL_GL1_QUERY_RRBP,
    MPAL_GL1_QUERY_RRBP_AND_PROTECT_PDTCH
} mpal_gl1_query_priority_enum;


typedef struct
{
  CodingScheme codingScheme;
   BlockData* header;
  BlockData* blockData;
   BlockData* blockData2;
   PuncturingScheme puncturingScheme_1;
   PuncturingScheme puncturingScheme_2;
} PrePacketBlockSpec;
# 382 "interface/modem/l1/gsm/external/mph_types.h"
typedef struct
{
   PrePacketBlockSpec block[4];
} PrePacketUplinkSpec;


typedef struct
{
   kal_bool l1_no_service_test;
   kal_bool l1_standby_gsm_meas_test;
   kal_bool l1_standby_gsm_bsic_req_test;
   kal_bool standby_gsm_report_cgi_pwrscan_test;
   kal_bool standby_gsm_report_cgi_bsic_test;
   kal_bool standby_gsm_report_cgi_sys_info_test;
   kal_bool l1_auto_gap_test;
   kal_bool auto_gap_start_cnf;
   kal_bool auto_gap_stop_cnf;


   kal_bool cgi_bsic_known;
   BSIC cgi_bsic;
   FrameNumber cgi_frame_offset;
   kal_int32 cgi_ebit_offset;
} L1InjectMessage;

typedef enum
{
   Normal = 0,
   IgnoreUSF,
   NoUplinkCB,
   Conflict
} ReportPDTChType;
# 130 "interface/modem/l1/gsm/external/l1_types_public.h" 2




typedef kal_int8 int8;
typedef kal_int16 int16;
typedef kal_int32 int32;
typedef kal_int64 int64;
typedef kal_int32 intx;
typedef kal_uint8 uint8;
typedef kal_uint16 uint16;
typedef kal_uint32 uint32;
typedef kal_uint32 uintx;
typedef kal_bool bool;







typedef int16 Gain;
typedef uint32 TimeStamp;

typedef enum
{
   FrequencyBand400,
   FrequencyBand850,
   FrequencyBand900,
   FrequencyBand1800,
   FrequencyBand1900,

   FrequencyBandCount
} FrequencyBand;




typedef enum
{
   ReportFTNone,
   ReportFTReportPeriodDone,
   ReportFTPowerScanDone,
   ReportFTFCCh,

   ReportFTDTS,
   ReportFTUTS,


   ReportFTNSFT,

   ReportFTEnd
} ReportType_FT;


typedef enum
{
    L1C_SIM1 = 0x00

    ,L1C_SIM2 = 0x01







    ,L1C_SIM_NUM
} l1c_sim_mode_enum;




typedef struct
{
   FrameNumber frame;
   intx ebits;
} Time;

typedef struct MeasurementsStruct Measurements;
struct MeasurementsStruct
{




   ARFCN ( *get )( Measurements* meas, int index );
   void ( *put )( Measurements* meas, int index, Power power );
   void ( *done )( Measurements* meas, intx measurementsDone );

   intx indexCount;
   intx measurementCount;



   intx started;
   intx finished;
   intx sessionLimit;
   intx startIndex;
   intx resultIndex;
   bool is_stopped;

   l1c_sim_mode_enum sim_mode;

};
# 245 "interface/modem/l1/gsm/external/l1_types_public.h"
typedef struct
{
    int32 power[100 -2];
    int16 valid_sample[100 -2];
    bool ok;
} ResultDSSPL;

typedef struct
{
    int32 freq_offset[33];
    int32 deviation[33];
    int16 fcb_ok_number[33];
    int32 capid;
    int16 init_dac_value;
    int32 slope;
    bool ok;
} ResultDSSAfc;

typedef struct
{
    int32 cload_freq_offset;
    bool ok;
    bool is_perform_cal;
} ResultDSSLPM;

typedef struct
{
    ResultDSSPL PLResult;
    ResultDSSAfc AfcResult;
    ResultDSSLPM LPMResult;

} ResultDTS;



typedef enum
{
   AdditionalSB,
   PeekSB,
   ThermalSB
} SBType;





typedef struct
{
   ARFCN arfcn;
   bool ok;


   bool fcb_ok;
   intx frameDelay;
   intx ebitDelay;
   BlockData data[ 4 ];

   Time bsTimingOffset;

   FrameNumber bsFrame;
   BSIC bsic;
   Time rxTime;

   bool hardwareUnavailable;

   bool extBsic;
   bool manual;
   bool enhancePM;


                    int16 snr;
                    intx bitErrorCount;

  uint8 bsic_tid;


   bool ready_to_report;
   TimeStamp timeStamp;


   uint8 fbWinOffDelay;

} SChData;

typedef struct
{
   int32 power;
   int32 iOffset;
   int32 qOffset;
   int32 deviation;
   int32 validSamples;
   Gain usedGain;
   Measurements meas;
} PM_TST_Data;




typedef union
{
   SChData *sch;
   PM_TST_Data *pm_tst;

   ResultDTS *dts_result;

} ReportData_FT;




typedef struct
{
   ReportType_FT type;
   ReportData_FT data;
} Report_FT;




typedef struct
{
   int8 TxTrimI;
   int8 TxTrimQ;
   int8 TxOffsetI;
   int8 TxOffsetQ;
   int8 TxCalbias;
   int8 TxIQSwap;
   int8 TxCMV;
   int8 TxGain;
   int8 TxCalrcsel;
   int8 TxPhasesel;
   int8 TxDccoarseI;
   int8 TxDccoarseQ;
} sBBTXCfg;

typedef enum
{
   GL1_ANTENNA_0,
   GL1_ANTENNA_1,
   GL1_ANTENNA_MAX = GL1_ANTENNA_1
} AntennaStatus;

typedef struct
{
   AntennaStatus status;
} TransmitAntenna;

typedef struct
{
   unsigned long pdata_tas_mask;
   unsigned long pdata_band_tas[FrequencyBandCount][7];
} sL1_TAS_CUSTOM_PDATA;

typedef struct
{
   kal_bool FORCE_TX_ANTENNA_ENABLE;
   kal_uint8 FORCE_TX_ANTENNA_IDX;
   kal_bool EN_TAS;
   kal_bool EN_TAS_WITH_TEST_SIM;
   kal_uint8 EN_BAND;
   kal_uint8 ANT_SEL_INIT;
   kal_bool EN_TAS_FOR_C2K;
} TASPublicParams;

typedef struct
{
   kal_int16 TH_RXLEV;
   kal_int16 TH_RXLEV_PS;
   kal_int16 S_RXLEV;
   kal_int32 FORCE_CHANGE_IDLE;
   kal_int32 FORCE_CHANGE_DEDICATED;
   kal_int32 PERIOD_IDLE;
   kal_int32 PERIOD_DEDICATED;
   kal_uint16 TH_SNR;
   kal_uint8 TH_PCL;
   kal_uint8 S_SNR_BLOCK;
   kal_uint8 S_SNR_SMOOTH;
   kal_bool FORCE_POWER_SCAN_ANT;
} TASPrivateParams;

typedef TASPublicParams sL1_TAS_CUSTOM_PARAMS ;
typedef TASPrivateParams sL1_TAS_LIB_PARAMS ;
# 239 "interface/modem/l1/gsm/external/l1cal.h" 2


# 1 "modem/gl1/l1_dm/l1d_ext/l1d_mipi_data.h" 1
# 65 "modem/gl1/l1_dm/l1d_ext/l1d_mipi_data.h"
# 1 "modem/gl1/l1_dm/l1d_ext/l1d_rf.h" 1
# 66 "modem/gl1/l1_dm/l1d_ext/l1d_mipi_data.h" 2
# 132 "modem/gl1/l1_dm/l1d_ext/l1d_mipi_data.h"
extern const volatile unsigned short* GGE_MIPI_RTX_REG_TABLE[5][13];
extern const volatile unsigned short* GGE_MIPI_TXMID_REG_TABLE[4][2];
# 242 "interface/modem/l1/gsm/external/l1cal.h" 2



unsigned long L1D_RF_GetID( void );
void L1D_RF_SetImmediateBSI( unsigned long bsidata );
void L1D_RF_GetImmediateBSI( unsigned long bsi_addr, unsigned long *bsi_data );
void L1D_RF_PowerOn( void );
void L1D_RF_PowerOff( void );



typedef struct
{
   signed short status;
   signed short tadc_dac;
   signed short temperature;
   signed short temp_idx;
}L1D_TEMPINFO_T;
void L1D_RF_GetTemperatureInfo(L1D_TEMPINFO_T* tempinfo);
# 280 "interface/modem/l1/gsm/external/l1cal.h"
typedef struct
{
   short max_arfcn;
   signed char gain_offset;

} sAGCGAINOFFSET;

typedef struct
{
   sAGCGAINOFFSET agcPathLoss[FrequencyBandCount][13];
}l1cal_agcPathLoss_T;

extern sAGCGAINOFFSET* AGC_PATHLOSS_TABLE[FrequencyBandCount];



typedef struct
{
   signed char gain_offset_middle;
   signed char gain_offset_low;

} sLNAGAINOFFSET;

typedef struct
{
   sLNAGAINOFFSET lnaPathLoss[FrequencyBandCount][13];
} sLNAPATHLOSS_L1CAL;

typedef sLNAPATHLOSS_L1CAL l1cal_lnaPathLoss_T;

void L1D_RF_SetPathLossTable( int rf_band, void *table );
void L1D_RF_SetLnaPathLossTable( sLNAPATHLOSS_L1CAL *table );
void L1D_RF_GetLnaPathLossTable( sLNAPATHLOSS_L1CAL *table );






typedef struct
{
   unsigned char point[2][16];

} sRAMPAREADATA;

typedef struct
{
   signed short max_arfcn;
   unsigned short mid_level;
   unsigned short hi_weight;
   unsigned short low_weight;

} sARFCN_SECTION;

typedef struct
{
   signed long lowest_power;
   unsigned short power[16];
   sRAMPAREADATA ramp[ 16 ];
   sARFCN_SECTION arfcn_weight[ 12 ];
   unsigned short battery_compensate[3 ][3 ];
} sRAMPDATA;

typedef struct
{
   sRAMPDATA rampData;
}l1cal_rampTable_T;

extern sRAMPDATA* RampData[FrequencyBandCount];
void L1D_RF_SetRampTable( int rf_band, void *table );
unsigned long L1D_RF_GetITC_PCL(void);


extern sRAMPDATA* RampData_EPSK[FrequencyBandCount];
void L1D_RF_SetRampTableEPSK( int rf_band, void *table );
void L1D_RF_SetPAGainTable( int rf_band, void *table );




typedef struct
{
   kal_uint16 dacValue;
   kal_int32 slopeInv;
}l1cal_afcData_T;

void L1D_RF_SetCrystalAFCData( void *table );
void L1D_RF_SetCrystalCap( int cap_no );
void L1D_RF_SetCrystalDac( short dacValue );



typedef struct
{
   kal_int16 filter_coefficient[60];
}l1spfc_T;



typedef struct
{
   unsigned char bbtx_common_mode_voltage;
   unsigned char bbtx_gain;
   unsigned char bbtx_calrcsel;
   unsigned char bbtx_trimI;
   unsigned char bbtx_trimQ;
   unsigned char bbtx_dccoarseI;
   unsigned char bbtx_dccoarseQ;
   unsigned char bbtx_offsetI;
   unsigned char bbtx_offsetQ;
   unsigned char bbtx_isCalibrated;
   int apc_bat_low_voltage;
   int apc_bat_high_voltage;
   int apc_bat_low_temperature;
   int apc_bat_high_temperature;
   unsigned char bbtx_common_mode_voltage_h;
   unsigned char bbtx_gain_h;
   unsigned char bbtx_calrcsel_h;
   unsigned char bbtx_trimI_h;
   unsigned char bbtx_trimQ_h;
   unsigned char bbtx_dccoarseI_h;
   unsigned char bbtx_dccoarseQ_h;
   unsigned char bbtx_offsetI_h;
   unsigned char bbtx_offsetQ_h;
   unsigned char bbtx_phsel;
   unsigned char bbtx_phsel_h;
   unsigned char bbrx_gsm850_gsm900_swap;
   unsigned char bbrx_dcs1800_pcs1900_swap;
} sBBTXParameters;

typedef struct
{
   sBBTXParameters BBTXParameters;
}l1cal_txiq_T;

extern sBBTXParameters BBTXParameters;

typedef unsigned char sMIDRAMPDATA[16];

extern sMIDRAMPDATA* InterRampData[FrequencyBandCount];
void L1D_RF_SetInterSlotRampTable( int rf_band, void *table );


extern sMIDRAMPDATA** EPSK_InterRampData[5];
void L1D_RF_EPSK_SetInterSlotRampTable( int rf_band, int _8G_mode, void *table );




typedef struct
{
   kal_uint8 interRampData[16];
}l1cal_interRampData_T;




typedef struct
{
   kal_uint8 EPSK_interRampData[4][16];
}l1cal_EPSK_interRampData_T;
# 451 "interface/modem/l1/gsm/external/l1cal.h"
typedef struct
{
   long min_freq;
   short min_dac;

} XO_SLOPE_AREA_DATA;

typedef struct
{
   XO_SLOPE_AREA_DATA XO_SlopeAreaData[4];
}l1cal_crystalAfcData_T;

typedef struct
{
   kal_int32 cap_id;
}l1cal_crystalCapData_T;

extern const XO_SLOPE_AREA_DATA XO_SlopeAreaData_RO[4];
extern long XO_CapID;




void L1D_RF_GetAFCDacTRxOffset( short *afcdactrxoffset );
void L1D_RF_SetAFCDacTRxOffset( short *afcdactrxoffset );




typedef struct
{
   unsigned long icorrection;
   unsigned long qcorrection;
} skyip2coef;

typedef struct
{
   unsigned long ipol;
   unsigned long qpol;
} sky117ip2pol;

typedef struct
{
   unsigned long acode;
   unsigned long amcode;
} mt6139ip2coef;

typedef struct
{
   signed short w_re;
   signed short w_im;
} w_coef;

typedef struct
{
   unsigned char map[16];
} gain_rf_map;

typedef union
{
   struct
   {
      skyip2coef data[5 ];
   } skyip2;
   struct
   {
      skyip2coef data[5 ];
      sky117ip2pol pol[5 ];
   } sky117ip2;
   struct
   {
      mt6139ip2coef data[5 ];
      unsigned long rxamcalmode;
   } mt6139ip2;
   struct
   {
      unsigned char fixgain_enable;
   } sky74137;
   struct
   {
      unsigned char fixed_mpll_clk;
      unsigned short mpll_freq_idx;
      unsigned char fixed_spll_clk;
      unsigned short spll_freq_idx;
   } mpll_fh;
   struct
   {
      unsigned char fixed_mpll_clk;
      unsigned short mpll_freq_idx;
      w_coef w_data[19];
   } mt6256_51rf;
   struct
   {
      unsigned char fixed_mpll_clk;
      unsigned short mpll_freq_idx;
      unsigned short is_md2g_log_on;
   } md2g_log;
   struct
   {
      unsigned char fixed_mpll_clk;
      unsigned short mpll_freq_idx;
      unsigned short is_md2g_log_on;
      gain_rf_map gain_rf_table[4 ];
   } mt6162_gain_rf;

   struct
   {
      unsigned char fixed_mpll_clk;
      unsigned short fixafc_en;
   } fixafc;

} sRxip2;



typedef struct
{
   unsigned long word6_4_0;
   unsigned long word6_5_0;
   unsigned long word6_6_0;
   unsigned long word6_7_0;
   unsigned long bvmode;
   unsigned long c3mode;
   unsigned long wordC3;
} b5ptxcoef;

typedef struct
{
   short pcl_index;
   unsigned char pa_vbias;

   unsigned short pa_gain;

} pa_vbias;

typedef struct
{
   pa_vbias GSM850_pa_vbias[8];
   pa_vbias GSM900_pa_vbias[8];
   pa_vbias DCS1800_pa_vbias[8];
   pa_vbias PCS1900_pa_vbias[8];
} mt6140tx_pa_vbias;

typedef struct
{
   pa_vbias GSM850_pa_vbias[8];
   pa_vbias GSM900_pa_vbias[8];
   pa_vbias DCS1800_pa_vbias[8];
   pa_vbias PCS1900_pa_vbias[8];
} mt6162tx_pa_vbias;

typedef struct
{
   pa_vbias GSM850_pa_vbias[8];
   pa_vbias GSM900_pa_vbias[8];
   pa_vbias DCS1800_pa_vbias[8];
   pa_vbias PCS1900_pa_vbias[8];
} mt6256tx_pa_vbias;

typedef struct
{
   pa_vbias GSM850_pa_vbias[16];
   pa_vbias GSM900_pa_vbias[16];
   pa_vbias DCS1800_pa_vbias[16];
   pa_vbias PCS1900_pa_vbias[16];
} orionRFtx_pa_vbias;

typedef struct
{
   unsigned char REFDET_SLOPE_SKEW;
   unsigned char AM_FB_DAC;
} ad6546txcoef;

typedef struct
{
   signed char MID_GAMA_THRESHOLD;
   signed char LOW_GAMA_THRESHOLD;
   signed char MID_DELTA_SLOPE_SKEW;
   signed char LOW_DELTA_SLOPE_SKEW;
   signed char MID_DELTA_APC_CAP;
   signed char LOW_DELTA_APC_CAP;
} ad6546tx_reg8_highband_delta;

typedef union
{

   struct
   {
      orionRFtx_pa_vbias data;
   } mt6280tx;
   struct
   {
      orionRFtx_pa_vbias data;
   } orionRFtx;
# 681 "interface/modem/l1/gsm/external/l1cal.h"
} sTxepsk;

typedef struct
{
   sRxip2 rx;
   sTxepsk tx;
} sRFSpecialCoef;

typedef struct
{
   sRFSpecialCoef RFSpecialCoef;
}l1cal_rfspecialcoef_T;

extern sRFSpecialCoef RFSpecialCoef;

void L1D_RF_SetRFSpecialCoef( void *table );



typedef struct
{
   signed char rollback_2t;
   signed char rollback_3t;
   signed char rollback_4t;
   signed char rollback_5t;
} sTX_POWER_ROLLBACK;

typedef struct
{
   sTX_POWER_ROLLBACK rollback_data[FrequencyBandCount];
}l1cal_tx_power_rollback_T;


void L1D_RF_SetTxPowerRollbackData( int rf_band, void *table );
extern sTX_POWER_ROLLBACK* tx_power_rollback_gmsk[FrequencyBandCount];


void L1D_RF_SetTxPowerRollbackData_EPSK( int rf_band, void *table );
extern sTX_POWER_ROLLBACK* tx_power_rollback_epsk[FrequencyBandCount];





typedef struct
{
   unsigned short data[16];
} sTXPC_ADCDATA;

typedef struct
{
   unsigned short data[8];
} sTXPC_TEMPDATA;

typedef struct
{
   char is_calibrated;
   sTXPC_ADCDATA adc[FrequencyBandCount];
   short temperature;
   sTXPC_TEMPDATA temp[FrequencyBandCount];
} sTXPC_L1CAL;

typedef sTXPC_L1CAL l1cal_txpc_T;

void L1D_RF_TXPC_SET_CAL( sTXPC_L1CAL *cal, int is_EPSK );
void L1D_RF_TXPC_GET_L1_SETTING( sTXPC_L1CAL *buff, int is_EPSK );



typedef struct
{
   unsigned short data[8];
} sTEMPERATURE_ADC_L1CAL;

typedef sTEMPERATURE_ADC_L1CAL l1cal_temperatureADC_T;

void L1D_RF_TXPC_Get_Temp_ADC( sTEMPERATURE_ADC_L1CAL *buff );



void L1D_RF_Set_TX_Notch_Path( kal_uint8 notch_en );



typedef signed long BPI_DATA_SIZE;





typedef struct
{
   signed short P_SR0;
   signed short P_SR3;
   signed short P_ST0;
   signed short P_ST3;
}sRF_PDATA_OFFCHIP_ITEM;

typedef struct
{
   sRF_PDATA_OFFCHIP_ITEM GSM850;
   sRF_PDATA_OFFCHIP_ITEM GSM;
   sRF_PDATA_OFFCHIP_ITEM DCS;
   sRF_PDATA_OFFCHIP_ITEM PCS;
}sRF_PDATA_OFFCHIP;

typedef struct
{
   BPI_DATA_SIZE xPDATA_GSM850_PR1;
   BPI_DATA_SIZE xPDATA_GSM850_PR2;
   BPI_DATA_SIZE xPDATA_GSM850_PR2B;
   BPI_DATA_SIZE xPDATA_GSM850_PR3;
   BPI_DATA_SIZE xPDATA_GSM850_PR3A;
   BPI_DATA_SIZE xPDATA_GSM850_PT1;
   BPI_DATA_SIZE xPDATA_GSM850_PT2;
   BPI_DATA_SIZE xPDATA_GSM850_PT2B;
   BPI_DATA_SIZE xPDATA_GSM850_PT3;
   BPI_DATA_SIZE xPDATA_GSM850_PT3A;
   BPI_DATA_SIZE xPDATA_GSM_PR1;
   BPI_DATA_SIZE xPDATA_GSM_PR2;
   BPI_DATA_SIZE xPDATA_GSM_PR2B;
   BPI_DATA_SIZE xPDATA_GSM_PR3;
   BPI_DATA_SIZE xPDATA_GSM_PR3A;
   BPI_DATA_SIZE xPDATA_GSM_PT1;
   BPI_DATA_SIZE xPDATA_GSM_PT2;
   BPI_DATA_SIZE xPDATA_GSM_PT2B;
   BPI_DATA_SIZE xPDATA_GSM_PT3;
   BPI_DATA_SIZE xPDATA_GSM_PT3A;
   BPI_DATA_SIZE xPDATA_DCS_PR1;
   BPI_DATA_SIZE xPDATA_DCS_PR2;
   BPI_DATA_SIZE xPDATA_DCS_PR2B;
   BPI_DATA_SIZE xPDATA_DCS_PR3;
   BPI_DATA_SIZE xPDATA_DCS_PR3A;
   BPI_DATA_SIZE xPDATA_DCS_PT1;
   BPI_DATA_SIZE xPDATA_DCS_PT2;
   BPI_DATA_SIZE xPDATA_DCS_PT2B;
   BPI_DATA_SIZE xPDATA_DCS_PT3;
   BPI_DATA_SIZE xPDATA_DCS_PT3A;
   BPI_DATA_SIZE xPDATA_PCS_PR1;
   BPI_DATA_SIZE xPDATA_PCS_PR2;
   BPI_DATA_SIZE xPDATA_PCS_PR2B;
   BPI_DATA_SIZE xPDATA_PCS_PR3;
   BPI_DATA_SIZE xPDATA_PCS_PR3A;
   BPI_DATA_SIZE xPDATA_PCS_PT1;
   BPI_DATA_SIZE xPDATA_PCS_PT2;
   BPI_DATA_SIZE xPDATA_PCS_PT2B;
   BPI_DATA_SIZE xPDATA_PCS_PT3;
   BPI_DATA_SIZE xPDATA_PCS_PT3A;
   BPI_DATA_SIZE xPDATA_GSM850_PR2M1;
   BPI_DATA_SIZE xPDATA_GSM850_PR2M2;
   BPI_DATA_SIZE xPDATA_GSM850_PR2M3;
   BPI_DATA_SIZE xPDATA_GSM850_PT2M1_G8;
   BPI_DATA_SIZE xPDATA_GSM850_PT2M2_G8;
   BPI_DATA_SIZE xPDATA_GSM850_PT2M3_G8;
   BPI_DATA_SIZE xPDATA_GSM850_PT2M1_8G;
   BPI_DATA_SIZE xPDATA_GSM850_PT2M2_8G;
   BPI_DATA_SIZE xPDATA_GSM850_PT2M3_8G;
   BPI_DATA_SIZE xPDATA_GSM_PR2M1;
   BPI_DATA_SIZE xPDATA_GSM_PR2M2;
   BPI_DATA_SIZE xPDATA_GSM_PR2M3;
   BPI_DATA_SIZE xPDATA_GSM_PT2M1_G8;
   BPI_DATA_SIZE xPDATA_GSM_PT2M2_G8;
   BPI_DATA_SIZE xPDATA_GSM_PT2M3_G8;
   BPI_DATA_SIZE xPDATA_GSM_PT2M1_8G;
   BPI_DATA_SIZE xPDATA_GSM_PT2M2_8G;
   BPI_DATA_SIZE xPDATA_GSM_PT2M3_8G;
   BPI_DATA_SIZE xPDATA_DCS_PR2M1;
   BPI_DATA_SIZE xPDATA_DCS_PR2M2;
   BPI_DATA_SIZE xPDATA_DCS_PR2M3;
   BPI_DATA_SIZE xPDATA_DCS_PT2M1_G8;
   BPI_DATA_SIZE xPDATA_DCS_PT2M2_G8;
   BPI_DATA_SIZE xPDATA_DCS_PT2M3_G8;
   BPI_DATA_SIZE xPDATA_DCS_PT2M1_8G;
   BPI_DATA_SIZE xPDATA_DCS_PT2M2_8G;
   BPI_DATA_SIZE xPDATA_DCS_PT2M3_8G;
   BPI_DATA_SIZE xPDATA_PCS_PR2M1;
   BPI_DATA_SIZE xPDATA_PCS_PR2M2;
   BPI_DATA_SIZE xPDATA_PCS_PR2M3;
   BPI_DATA_SIZE xPDATA_PCS_PT2M1_G8;
   BPI_DATA_SIZE xPDATA_PCS_PT2M2_G8;
   BPI_DATA_SIZE xPDATA_PCS_PT2M3_G8;
   BPI_DATA_SIZE xPDATA_PCS_PT2M1_8G;
   BPI_DATA_SIZE xPDATA_PCS_PT2M2_8G;
   BPI_DATA_SIZE xPDATA_PCS_PT2M3_8G;
   BPI_DATA_SIZE xPDATA_INIT;
   BPI_DATA_SIZE xPDATA_IDLE;
   BPI_DATA_SIZE xPDATA_GMSK;
   BPI_DATA_SIZE xPDATA_8PSK;
   sRF_PDATA_OFFCHIP xPDATA_OFFCHIP;
}sRF_BPI_VARIABLE;



typedef struct
{
   signed short xQB_RX_FENA_2_FSYNC;
   signed short xQB_RX_FSYNC_2_FENA;
   signed short xQB_TX_FENA_2_FSYNC;
   signed short xQB_TX_FSYNC_2_FENA;
   signed short xQB_SR0;
   signed short xQB_SR1;
   signed short xQB_SR2;
   signed short xQB_SR3;
   signed short xQB_SR2M;
   signed short xQB_PR1;
   signed short xQB_PR2;
   signed short xQB_PR2B;
   signed short xQB_PR3;
   signed short xQB_PR3A;
   signed short xQB_PR2M1;
   signed short xQB_PR2M2;
   signed short xQB_ST0;
   signed short xQB_ST1;
   signed short xQB_ST2;
   signed short xQB_ST2B;
   signed short xQB_ST3;
   signed short xQB_ST2M_G8;
   signed short xQB_ST2M_8G;
   signed short xQB_PT1;
   signed short xQB_PT2;
   signed short xQB_PT2B;
   signed short xQB_PT3;
   signed short xQB_PT3A;
   signed short xQB_PT2M1_G8;
   signed short xQB_PT2M2_G8;
   signed short xQB_PT2M3_G8;
   signed short xQB_PT2M1_8G;
   signed short xQB_PT2M2_8G;
   signed short xQB_PT2M3_8G;
   signed short xQB_APCON;
   signed short xQB_APCMID;
   signed short xQB_APCOFF;
   signed short xQB_APCDACON;
} sRF_TIMING_VARIABLE;



typedef struct
{
   int xBAT_VOLTAGE_SAMPLE_PERIOD;
   int xBAT_VOLTAGE_AVERAGE_COUNT;
   int xBAT_TEMPERATURE_SAMPLE_PERIOD;
   int xBAT_TEMPERATURE_AVERAGE_COUNT;
   int xBAT_LOW_VOLTAGE;
   int xBAT_HIGH_VOLTAGE;
   int xBAT_LOW_TEMPERATURE;
   int xBAT_HIGH_TEMPERATURE;
   int xRF_TEMPERATURE_SAMPLE_PERIOD;
   int xRF_TEMPERATURE_AVERAGE_COUNT;
} sRF_APC_COMPENSATE_VARIABLE;



typedef struct
{
   signed short txios_highpcl_850_GMSK;
   signed short txios_highpcl_900_GMSK;
   signed short txios_highpcl_DCS_GMSK;
   signed short txios_highpcl_PCS_GMSK;
   signed short txios_highpcl_850_EPSK;
   signed short txios_highpcl_900_EPSK;
   signed short txios_highpcl_DCS_EPSK;
   signed short txios_highpcl_PCS_EPSK;
   signed short txios_lowpcl_850_GMSK;
   signed short txios_lowpcl_900_GMSK;
   signed short txios_lowpcl_DCS_GMSK;
   signed short txios_lowpcl_PCS_GMSK;
   signed short txios_lowpcl_850_EPSK;
   signed short txios_lowpcl_900_EPSK;
   signed short txios_lowpcl_DCS_EPSK;
   signed short txios_lowpcl_PCS_EPSK;

}sRF_PCL_VARIABLE;



typedef struct
{
   signed short lbmod_gc_highpcl_850_GMSK;
   signed short lbmod_gc_highpcl_900_GMSK;
   signed short lbmod_gc_highpcl_DCS_GMSK;
   signed short lbmod_gc_highpcl_PCS_GMSK;
   signed short lbmod_gc_highpcl_850_EPSK;
   signed short lbmod_gc_highpcl_900_EPSK;
   signed short lbmod_gc_highpcl_DCS_EPSK;
   signed short lbmod_gc_highpcl_PCS_EPSK;
   signed short lbmod_gc_lowpcl_850_GMSK;
   signed short lbmod_gc_lowpcl_900_GMSK;
   signed short lbmod_gc_lowpcl_DCS_GMSK;
   signed short lbmod_gc_lowpcl_PCS_GMSK;
   signed short lbmod_gc_lowpcl_850_EPSK;
   signed short lbmod_gc_lowpcl_900_EPSK;
   signed short lbmod_gc_lowpcl_DCS_EPSK;
   signed short lbmod_gc_lowpcl_PCS_EPSK;
}sRF_LBMOD_GC_VARIABLE;



typedef struct
{
   signed short hbmod_gc_highpcl_850_GMSK;
   signed short hbmod_gc_highpcl_900_GMSK;
   signed short hbmod_gc_highpcl_DCS_GMSK;
   signed short hbmod_gc_highpcl_PCS_GMSK;
   signed short hbmod_gc_highpcl_850_EPSK;
   signed short hbmod_gc_highpcl_900_EPSK;
   signed short hbmod_gc_highpcl_DCS_EPSK;
   signed short hbmod_gc_highpcl_PCS_EPSK;
   signed short hbmod_gc_lowpcl_850_GMSK;
   signed short hbmod_gc_lowpcl_900_GMSK;
   signed short hbmod_gc_lowpcl_DCS_GMSK;
   signed short hbmod_gc_lowpcl_PCS_GMSK;
   signed short hbmod_gc_lowpcl_850_EPSK;
   signed short hbmod_gc_lowpcl_900_EPSK;
   signed short hbmod_gc_lowpcl_DCS_EPSK;
   signed short hbmod_gc_lowpcl_PCS_EPSK;

}sRF_HBMOD_GC_VARIABLE;



typedef struct
{
   signed short txitc_highpcl_850_GMSK;
   signed short txitc_highpcl_900_GMSK;
   signed short txitc_highpcl_DCS_GMSK;
   signed short txitc_highpcl_PCS_GMSK;
   signed short txitc_highpcl_850_EPSK;
   signed short txitc_highpcl_900_EPSK;
   signed short txitc_highpcl_DCS_EPSK;
   signed short txitc_highpcl_PCS_EPSK;
   signed short txitc_lowpcl_850_GMSK;
   signed short txitc_lowpcl_900_GMSK;
   signed short txitc_lowpcl_DCS_GMSK;
   signed short txitc_lowpcl_PCS_GMSK;
   signed short txitc_lowpcl_850_EPSK;
   signed short txitc_lowpcl_900_EPSK;
   signed short txitc_lowpcl_DCS_EPSK;
   signed short txitc_lowpcl_PCS_EPSK;
}sRF_ITC_PCL_VARIABLE;



typedef struct
{
   signed char xCLOSED_LOOP_TXPC_TYPE;
   signed short xQB_TX_SAMPLE_OFFSET_GMSK;
   signed short xQB_TX_SAMPLE_OFFSET_EPSK;
   signed short xTXPC_EPSK_TP_SLOPE_LB;
   signed short xTXPC_EPSK_TP_SLOPE_HB;
} sRF_TX_POWERFEEDBACK_VARIABLE;



typedef struct
{
   int xXO_CapID;
   signed short xafc_dac_default;
   signed short xafc_inv_slope;
   signed char xEGSM_DISABLE;
   unsigned char xGSM850_GSM900_SWAP;
   unsigned char xDCS1800_PCS1900_SWAP;
   unsigned char xGSM_ERR_DET_ID;
   signed short xTX_PROPAGATION_DELAY;
   signed short xTQ_EPSK_TX_DELAY;
} sRF_OTHERS_VARIABLE;



typedef struct
{
   sTX_POWER_ROLLBACK GSM850_tx_power_rollback_gmsk;
   sTX_POWER_ROLLBACK GSM_tx_power_rollback_gmsk;
   sTX_POWER_ROLLBACK DCS_tx_power_rollback_gmsk;
   sTX_POWER_ROLLBACK PCS_tx_power_rollback_gmsk;
   sTX_POWER_ROLLBACK GSM850_tx_power_rollback_epsk;
   sTX_POWER_ROLLBACK GSM_tx_power_rollback_epsk;
   sTX_POWER_ROLLBACK DCS_tx_power_rollback_epsk;
   sTX_POWER_ROLLBACK PCS_tx_power_rollback_epsk;
}sRF_TX_POWER_ROLLBACK_VARIABLE;



typedef struct
{
   unsigned long xGSM850_PATH_SEL;
   unsigned long xGSM_PATH_SEL;
   unsigned long xDCS_PATH_SEL;
   unsigned long xPCS_PATH_SEL;
}sRF_RX_BAND_VARIABLE;



typedef struct
{
   unsigned char xAFC_PREDICTION_ON;
   unsigned short xAFC_PREDICTION_INTERVAL;
   unsigned char xAFC_PREDICTION_DECAYING_FACTOR;
}sRF_AFC_TRACKING_VARIABLE;



typedef struct
{
   unsigned char xCLK1_EN;
   unsigned char xCLK2_EN;
   unsigned char xCLK3_EN;
   unsigned char xCLK4_EN;
}sRF_CLK_BUFFER_VARIABLE;



typedef struct
{
   unsigned long xGSM850_PORT_SEL;
   unsigned long xGSM_PORT_SEL;
   unsigned long xDCS_PORT_SEL;
   unsigned long xPCS_PORT_SEL;
}sRF_TX_PORT_VARIABLE;



typedef struct
{
   int start;
   int version;
   int RF_Type;
   char is_data_update;
   sRF_BPI_VARIABLE RF_BPI_Variable;
   sRF_TIMING_VARIABLE RF_Timing_Variable;
   sRF_APC_COMPENSATE_VARIABLE RF_APC_Compensate_Variable;
   sRF_PCL_VARIABLE RF_PCL_Varaible;
   sRF_LBMOD_GC_VARIABLE RF_Lbmod_GC_Variable;
   sRF_HBMOD_GC_VARIABLE RF_Hbmod_GC_Variable;
   sRF_ITC_PCL_VARIABLE RF_ITC_PCL_Variable;
   sRF_TX_POWERFEEDBACK_VARIABLE RF_TX_PowerFeedback_Variable;
   sRF_TX_POWER_ROLLBACK_VARIABLE RF_TX_Power_Rollback_Variable;
   sRF_RX_BAND_VARIABLE RF_RX_Band_Variable;
   sRF_OTHERS_VARIABLE RF_Others_Variable;
   sRF_AFC_TRACKING_VARIABLE RF_AFC_Tracking_Variable;
   sRF_CLK_BUFFER_VARIABLE RF_CLK_Buffer_Variable;
   sRF_TX_PORT_VARIABLE RF_TX_Port_Variable;
   int end;
}sL1D_RF_CUSTOM_INPUT_DATA;

typedef sL1D_RF_CUSTOM_INPUT_DATA l1d_rf_custom_input_data_T;

extern sL1D_RF_CUSTOM_INPUT_DATA l1d_rf_custom_input_data;


void L1D_RF_CAPID_Update( void );
void L1D_RF_Custom_BBTXParameter_Update( void );
void L1D_RF_Custom_TX_Power_Rollback_Table_Update_GPRS( void );
void L1D_RF_Custom_TX_Power_Rollback_Table_Update_EGPRS( void );



typedef struct
{
   kal_int32 cload_freq_offset;
}l1cal_cload_freq_offset_T;
# 1158 "interface/modem/l1/gsm/external/l1cal.h"
typedef struct
{
   kal_int16 gain_rf[FrequencyBandCount][13];
}l1cal_gainrf_T;

typedef struct
{
   short data[13];
} sTXGAIN_RFDATA;

extern sTXGAIN_RFDATA* GAIN_RF_TABLE[FrequencyBandCount];

typedef enum
{
   EPSKTxGainNormalState,
   EPSKTxGainCalibrationState,

} TXGainRFState;





typedef struct
{
   unsigned short mipi_data_st;
   unsigned short mipi_data_sp;
} sGGE_MIPIDATA_STSP;

typedef struct
{
   unsigned short mipi_elm_type;
   sGGE_MIPIDATA_STSP mipi_data_stsp;
   unsigned short mipi_evt_type;
     signed short mipi_evt_timing;
} sGGE_MIPIEVENT;

typedef struct
{
   unsigned short mipi_elm_type;
   unsigned short mipi_port_sel;
   unsigned short mipi_data_seq;
   unsigned long mipi_data;
} sGGE_MIPIDATA;

typedef struct
{
   signed short subband_arfcn;
   unsigned short mipi_addr;
   unsigned long mipi_data;
} sGGE_MIPISUBDATA;

typedef struct
{
   unsigned short mipi_elm_type;
   unsigned short mipi_port_sel;
   unsigned short mipi_data_seq;
   unsigned short mipi_usid;
   sGGE_MIPISUBDATA mipi_subband_data[5];
} sGGE_MIPIDATA_SUBBAND;

typedef struct
{
   unsigned long mipi_gmsk_data[5];
   unsigned long mipi_8psk_data[5];
} sGGE_MIPIPADATA;

typedef struct {
   sGGE_MIPIEVENT mipi_rxctrl_event[13];
   sGGE_MIPIDATA_SUBBAND mipi_rxctrl_data[30];
}sGGE_MIPI_RXCTRL_TABLE;

typedef struct {
   sGGE_MIPIEVENT mipi_txctrl_event[13];
   sGGE_MIPIDATA_SUBBAND mipi_txctrl_data[30];
   sGGE_MIPIPADATA mipi_txctrl_pa_data;
}sGGE_MIPI_TXCTRL_TABLE;

typedef struct {

   sGGE_MIPIEVENT mipi_txmidctrl_event[4][2];



   sGGE_MIPIDATA_SUBBAND mipi_txmidctrl_data[2];
}sGGE_MIPI_TXMIDCTRL_TABLE;

typedef struct
{
   sGGE_MIPI_RXCTRL_TABLE mipi_rx_ctrl_table;
   sGGE_MIPI_TXCTRL_TABLE mipi_tx_ctrl_table;
   sGGE_MIPI_TXMIDCTRL_TABLE mipi_txmid_ctrl_table;
}sGGE_MIPI_CTRL_TABLE_BAND;

typedef struct
{
   sGGE_MIPI_CTRL_TABLE_BAND* band400_mipi_table;
   sGGE_MIPI_CTRL_TABLE_BAND* band850_mipi_table;
   sGGE_MIPI_CTRL_TABLE_BAND* band900_mipi_table;
   sGGE_MIPI_CTRL_TABLE_BAND* band1800_mipi_table;
   sGGE_MIPI_CTRL_TABLE_BAND* band1900_mipi_table;
}sGGE_MIPI_CTRL_TABLE_SET;

typedef sGGE_MIPI_CTRL_TABLE_BAND l1cal_mipi_ctrl_table_band_T;

extern sGGE_MIPI_CTRL_TABLE_BAND GGE_MIPI_CTRL_TABLE_GSM850;
extern sGGE_MIPI_CTRL_TABLE_BAND GGE_MIPI_CTRL_TABLE_GSM900;
extern sGGE_MIPI_CTRL_TABLE_BAND GGE_MIPI_CTRL_TABLE_DCS1800;
extern sGGE_MIPI_CTRL_TABLE_BAND GGE_MIPI_CTRL_TABLE_PCS1900;
extern sGGE_MIPI_CTRL_TABLE_BAND* GGE_MIPI_CTRL_TABLE[];



extern sGGE_MIPIEVENT* GGE_MIPI_CTRL_TABLE_RX_EVENT[FrequencyBandCount];
extern sGGE_MIPIEVENT* GGE_MIPI_CTRL_TABLE_TX_EVENT[FrequencyBandCount];
extern sGGE_MIPIEVENT* GGE_MIPI_CTRL_TABLE_TXMID_EVENT[FrequencyBandCount];
extern sGGE_MIPIDATA_SUBBAND* GGE_MIPI_CTRL_TABLE_RX_DATA[FrequencyBandCount];



extern sGGE_MIPIDATA_SUBBAND* GGE_MIPI_CTRL_TABLE_TX_DATA[FrequencyBandCount];
extern sGGE_MIPIPADATA* GGE_MIPI_CTRL_TABLE_PA_DATA[FrequencyBandCount];
extern sGGE_MIPIDATA_SUBBAND* GGE_MIPI_CTRL_TABLE_TXMID_DATA[FrequencyBandCount];



typedef struct
{
   unsigned short l1d_drdi_status;


   unsigned short l1d_combined_config_index;
   unsigned char l1d_first_config_index_base;
   unsigned char l1d_second_config_index_base;
   unsigned char l1d_third_config_index_base;


   unsigned long l1d_gpio_get_pin_rpc_status;
   unsigned long l1d_gpio_combined_pin_value;


   signed long l1d_adc_get_ch_num_rpc_status;
   signed long l1d_adc_dcl_handle_status;
   signed long l1d_adc_cal_dcl_handle_status;
   unsigned long l1d_adc_get_ch_num;
   unsigned long l1d_adc_dac_read_result;
   unsigned long l1d_adc_volt_translate_result;
   unsigned char l1d_adc_volt_level;


   unsigned char l1d_barcode_lid_read_status;
   unsigned char l1d_barcode_digit_read_result;


   unsigned short l1d_custom_2grfparameters_lid_wr_status;

   unsigned short l1d_custom_gsm850_mipitable_lid_wr_status;
   unsigned short l1d_custom_gsm900_mipitable_lid_wr_status;
   unsigned short l1d_custom_dcs1800_mipitable_lid_wr_status;
   unsigned short l1d_custom_pcs1900_mipitable_lid_wr_status;

   unsigned short l1d_custom_gsm850_txpoweroffset_gmsk_lid_wr_status;
   unsigned short l1d_custom_gsm900_txpoweroffset_gmsk_lid_wr_status;
   unsigned short l1d_custom_dcs1800_txpoweroffset_gmsk_lid_wr_status;
   unsigned short l1d_custom_pcs1900_txpoweroffset_gmsk_lid_wr_status;

   unsigned short l1d_custom_gsm850_txpoweroffset_epsk_lid_wr_status;
   unsigned short l1d_custom_gsm900_txpoweroffset_epsk_lid_wr_status;
   unsigned short l1d_custom_dcs1800_txpoweroffset_epsk_lid_wr_status;
   unsigned short l1d_custom_pcs1900_txpoweroffset_epsk_lid_wr_status;


   unsigned char l1d_band_support_switch;


   unsigned long l1d_custom_pdata_txport_debug[4][2];

   signed long l1d_custom_pdata_gmsk_debug;
   signed long l1d_custom_pdata_8psk_debug;
   signed long l1d_custom_pdata_init_debug;
   signed long l1d_custom_pdata_idle_debug;

}sl1CustomDRDIStautaDebugInfo;

typedef sl1CustomDRDIStautaDebugInfo l1cal_l1CustomDRDIStautaDebugInfo_T;

extern sl1CustomDRDIStautaDebugInfo l1d_custom_drdi_status_debug_info;
# 1403 "interface/modem/l1/gsm/external/l1cal.h"
typedef sL1_TAS_CUSTOM_PARAMS l1_tas_custom_params_T;
typedef sL1_TAS_CUSTOM_PDATA l1_tas_custom_pdata_T;
typedef sL1_TAS_LIB_PARAMS l1_tas_lib_params_T;

extern sL1_TAS_CUSTOM_PARAMS L1_TAS_Custom_Params;
extern sL1_TAS_CUSTOM_PDATA L1_TAS_Custom_PData;
extern sL1_TAS_LIB_PARAMS L1_TAS_Lib_Params;
# 1176 "modem/gl1/l1_dm/l1d_ext/m12190.h" 2
# 1 "interface/modem/l1/gsm/external/l1_interface.h" 1
# 293 "interface/modem/l1/gsm/external/l1_interface.h"
extern kal_uint16 L1_ASSERT_BYPASS;
extern kal_uint16 L1D_MD2G_SLEEP_STATUS( void );
extern void L1D_INFORM_DSP_WAKEUP( void );
extern void L1D_INFORM_DSP_REENTER_SLEEP( void );
extern void L1D_HW_TDMA_AUX_TIME_SETUP( kal_uint16 event0, kal_uint16 event1 );
extern kal_uint16 L1D_TDMA_GET_TQCNT( void );
extern kal_uint16 L1D_HW_TDMA_GET_TQWRAP( void );
extern kal_uint32 L1D_HW_TDMA_GET_32KCNT( void );
extern void L1D_INFORM_DCXO_WAKEUP( void );
extern void L1D_PMU_FIX_VRF1828SETTING( unsigned char is_fixed );
extern kal_bool MML1_RF_REPORT_CALDATA_DOWNLOAD_STATUS( void );
extern char L1D_INFORM_WIFI_DEGRADE_POWER( void );
extern unsigned char L1D_Get_RX_Status( void );
extern unsigned char L1D_Get_BandCapability( void );
# 341 "interface/modem/l1/gsm/external/l1_interface.h"
void HW_TDMA_Start(void);
void HW_TDMA_Enable_CTIRQ1(void);
void HW_wait_32k_start(void);







extern unsigned char L1D_IS_MT6162_DCXO( void );


extern kal_uint16 L1D_Get_Win_TQ_WRAP( void );
extern kal_int8 L1D_GetT2( void );
extern void L1D_ENABLE_DTIRQ( void );
extern void L1D_CCCDReset( void );
extern kal_bool L1D_Get_Speech_Re_Sync_Flag( void );


extern void MD_DRV_L1D_Exit( void );
# 1177 "modem/gl1/l1_dm/l1d_ext/m12190.h" 2
# 1254 "modem/gl1/l1_dm/l1d_ext/m12190.h"
typedef enum
{
   BSI_SWITCH_2G_THEN_TD,
   BSI_SWITCH_2G,
   BSI_SWITCH_NO_ACT,
   BSI_SWITCH_NO_ACT_ONCE,
   BSI_SWITCH_TD
} BSI_SWITCH;
# 1338 "modem/gl1/l1_dm/l1d_ext/m12190.h"
typedef enum
{
   TXPC_NO_CONTROL_TYPE,
   TXPC_AUXADC_CLOSED_TYPE,
   TXPC_BSI_CLOSED_TYPE,
   TXPC_AUXADC_OPEN_TYPE,
   TXPC_BSI_OPEN_TYPE
} TXPC_TYPE;

typedef enum
{
   TXPC_SAMPLE_MODE,
   TXPC_NORMAL_MODE,
   TXPC_META_MODE,
   TXPC_TRANS_TO_META_MODE,
   TXPC_TRANS_TO_NORMAL_MODE
} TXPC_MODE;

typedef struct
{
            short adc;
            short idx;
            short value;
} sTXPC_TEMP_INFO;

typedef struct
{
            short power_idx_right;
            short power_dac_right;
            short power_dac_left;
            short power_dac_target;


   unsigned char is_dtx_detected;
            short adc_interval[4];
            short target_adc[4];
            short power_idx[4];

} sTXPC_SETUP;


typedef struct
{
   unsigned char tx_slots;

   unsigned char tx_mod_type;

   unsigned char tx_setting_change;
            char rf_band;
            short arfcn;
            short adc_interval[4];
            short target_adc[4];
            short power_idx[4];
            long rdbk_adc[4];
} sTXPC_CL_COMPUTE;

typedef struct
{
   unsigned short outdate;
            short arfcn;
            short dac_offset_ratio_G[4];

            short dac_offset_ratio_E[4];

} sTXPC_CL_DB_DATA;

typedef struct
{
   sTXPC_CL_DB_DATA data[8];
} sTXPC_CL_DB;



typedef struct
{
   short temperature;
   short update_coutdown;
} sTXPC_OL_DB;


typedef struct
{
   sTXPC_TEMP_INFO temp_info;
   sTXPC_SETUP setup;


   sTXPC_CL_COMPUTE cl_compute;
   sTXPC_CL_DB cl_db;


   sTXPC_OL_DB ol_db;

} sTXPC;

typedef struct
{

   short subband_compensation;
   short temperature_compensation;


   short ratio;

} sTXPC_TRACE;

extern char closed_loop_txpc_type;
extern const char open_loop_txpc_type;
extern char is_txpc_calibrated;


extern sTXPC_ADCDATA* TXADC_Data[FrequencyBandCount];
extern sTXPC_TEMPDATA* TXTEMP_Data[FrequencyBandCount];

extern sTXPC_ADCDATA* TXADC_Data_EPSK[FrequencyBandCount];
extern sTXPC_TEMPDATA* TXTEMP_Data_EPSK[FrequencyBandCount];




extern short ref_temperature;



typedef enum
{
   VOLTCOM_NORMAL_MODE,
   VOLTCOM_NSFT_MODE,
   VOLTCOM_META_MODE,
   VOLTCOM_TRANS_TO_META_MODE,
   VOLTCOM_TRANS_TO_NSFT_MODE
} VOLTCOM_MODE;
# 1495 "modem/gl1/l1_dm/l1d_ext/m12190.h"
typedef struct
{
   unsigned char cwin_idx;
   unsigned char band;
   signed char rtxwin_idx;
   char is_init;
   char is_nvram_data_ready;
   unsigned char cur_slot;
   unsigned char cur_slot_n;
   char rx_slots;
   char tx_slots;
   char tx_mod_type;
   unsigned short tx_mod_type2;
   char modidx;
   char change;
   char bb_tx_autocal;
   unsigned char bat_volt;
   unsigned char bat_temp;
   char old_band;
   unsigned short apc_dc_offset;
   unsigned short AFC_data;
   unsigned long RFN_data;
   unsigned long IFN_data;
   unsigned long AGC_data;
   char inj;
   char next_inj;
   char d2c_txiqswap;
   char d2c_txiqconfig;
   char egsm_disable;
   unsigned long Uncalibrated_LID_Flag;
   unsigned short gpio_modeswitch;
   unsigned char handle_tx_dcm;

   unsigned char is_afc_event_enable;
   unsigned char is_afc_trigger_bsi;






   unsigned long fhc_proc;
   signed short fhc_high_apc_dcoffset;
   unsigned char fhc_vbias[4];
   unsigned char fhc_is_low_pcl[4];
# 1549 "modem/gl1/l1_dm/l1d_ext/m12190.h"
   TXPC_MODE txpc_mode;
   TXPC_TYPE txpc_type;
   sTXPC txpc;
   sTXPC_TRACE txpc_trc;
   char is_txpc_in_meta;

   VOLTCOM_MODE voltcom_mode;
   char is_voltcom_in_meta;

   char if_state;
# 1574 "modem/gl1/l1_dm/l1d_ext/m12190.h"
   signed char is_lock_dcxo;


   unsigned long dcxo_frac_fpm;
   signed long tx_nfracoffset;


   char is_tx_decrease_power_needed;







   char blk_flag;





   unsigned long FBX;



   unsigned long is_init_abnormal;

   uint8 tas_ant_sel;

} sRFSETTING;

extern sRFSETTING l1d_rf;



typedef struct
{
   int arfcn;

   unsigned char tx_power[4];


   char is_wakeup;
# 1627 "modem/gl1/l1_dm/l1d_ext/m12190.h"
   unsigned short fhc_PGA_gain;
# 1680 "modem/gl1/l1_dm/l1d_ext/m12190.h"
   unsigned short tx_gain_setting[4];
# 1707 "modem/gl1/l1_dm/l1d_ext/m12190.h"
   char is_2g_on;
   char is_power_on_cal;
   char is_fhc;
   signed char calr_const;
   signed char calr_tcl_r_m;
   signed char txrcf_csel[2];
   signed short Gvga_rf[4][28];
   unsigned short power_on_cal_flag;
# 1751 "modem/gl1/l1_dm/l1d_ext/m12190.h"
} sRFSETTING2;

extern sRFSETTING2 l1d_rf2;



typedef struct
{
   char is_init;
   unsigned char band;
   unsigned char cur_slot;
   signed short arfcn;
   signed short tx_arfcn;
   unsigned char tx_mid_idx;
   short pm_delta[5];
   unsigned short tx_cwin;
} sMIPISETTING;

extern sMIPISETTING l1d_mipi;
typedef struct
{
   unsigned short ctrl;
   unsigned long data;

} sSDATAINITDATA;



typedef struct
{
   int max_gain;
   int min_gain;

} sL1DGAINRANGE;



typedef struct
{
   short pos_gain;
   short A;
   long setting;

} sL1DAGCDATA;



extern sLNAGAINOFFSET* LNA_PATHLOSS_TABLE[FrequencyBandCount];





typedef struct
{
   signed long lowest_power;
   unsigned short power[16];
   sRAMPAREADATA ramp;
} sRAMPDATA_DEFAULT;

extern const sRAMPDATA_DEFAULT RampData_Default;

extern const sRAMPDATA_DEFAULT RampData_Default_EPSK;




extern sMIDRAMPDATA* GSM850_EPSK_InterRampData[4];
extern sMIDRAMPDATA* GSM_EPSK_InterRampData[4];
extern sMIDRAMPDATA* DCS_EPSK_InterRampData[4];
extern sMIDRAMPDATA* PCS_EPSK_InterRampData[4];




extern XO_SLOPE_AREA_DATA XO_SlopeAreaData[4];
# 1839 "modem/gl1/l1_dm/l1d_ext/m12190.h"
extern unsigned char XO_LC_Flags;

typedef struct
{
   unsigned int curr_idx;
   XO_SLOPE_AREA_DATA *first_element;
   XO_SLOPE_AREA_DATA *last_element;
} XO_LC_PARAMS;




extern signed long pdata_gmsk;
extern signed long pdata_8psk;







typedef union
{ struct
   {
      unsigned int Address : 7;
      unsigned int POLAR_APC_CAP : 5;
      unsigned int VGA_SLOPE : 4;
      unsigned int REFDET_SLOPE_SKEW : 4;
      unsigned int AM_FB_DAC : 4;
      unsigned int reserved : 8;
   } AM_LOOP;
   unsigned int RegData;
} ad6546tx_reg8;

typedef struct
{
   unsigned short stage;
   unsigned short flag;
   unsigned short ADD;
   unsigned short delay_ADD;
   unsigned short event_timing;
   unsigned short ADD_pair;
   unsigned long DATA_pair;
} sBSIread;

typedef struct
{ signed short gain_bb_dac;
   unsigned short gain_bb_inverse;
} sTX_GAIN_BB_MAPPING;



typedef enum
{
   FMC_CAP_ID,
   FMC_TRX_OFFSET,
   FMC_TX_IQ,
   FMC_OE_ITEM,
   FMC_W_COEF,
   FMC_TX_PC,
   FMC_TX_PC_TEMP,
   FMC_BAT_TEMP_COMP,
   FMC_DTS_GAIN_CMB,
   FMC_UTS_BAND_CMB
} FAC_CAL_ITEM;







extern const unsigned char CONTISLOTMASK[5];
extern const unsigned char FIRSTSLOTMASK[5];




extern unsigned short U_TEMP_DAC[8];
# 1932 "modem/gl1/l1_dm/l1d_ext/m12190.h"
extern const unsigned long SDATA_CW117[5];
# 1949 "modem/gl1/l1_dm/l1d_ext/m12190.h"
void L1D_GCMachine_Stop( void );
short L1D_GCMachine_Done( void );
int L1D_CheckIfMetaMode( void );

void L1D_RF_Init( void );
void L1D_RF_Init_FIR( void );
void L1D_RF_Init_BPI( void );
void L1D_RF_Init_ABB( void );


void L1D_RF_Init_BSI_BPI( void );


void L1D_DM_Wait_BSI_Switch_Init_Done( void );
void L1D_DM_Wait_UMTS_RF_Init_Done( void );

void L1D_RF_WindowOn( void );
void L1D_RF_WindowOff( void );
void L1D_RF_SetWakeUpFlag( void );
void L1D_RF_ClearWakeUpFlag( void );







unsigned short L1D_RF_ARFCN_CH_to_TxFreq( int rf_band, int arfcn );
unsigned short L1D_RF_ARFCN_CH_to_RxFreq( int rf_band, int arfcn );



void L1D_RF_GetTxKDCOCAL2ndSetting( int rf_band, int arfcn, long *rfN, long *ifN );
unsigned short L1D_RF_GetTxDCOSCACodeTypeSetting( unsigned short Nint, unsigned long Nfrac );
unsigned short L1D_RF_GetTxDEMChunkSetting( int rf_band, unsigned short Nint );
unsigned short L1D_RF_GetTxDAoffsetSetting( unsigned short Nint );



void L1D_RF_SplitRxPLLSetting(unsigned long rfN, unsigned long ifN, unsigned short *Nint, unsigned long *Nfrac);
void L1D_RF_AdjustRxPLLSetting(unsigned short Nint, unsigned long Nfrac, signed long NfracOffset, unsigned long * rfN, unsigned long * ifN);
void L1D_RF_SplitTxPLLSetting(unsigned long rfN, unsigned long ifN, unsigned short *Nint, unsigned long *Nfrac);
void L1D_RF_AdjustTxPLLSetting(unsigned short Nint, unsigned long Nfrac, signed long NfracOffset, unsigned long * rfN, unsigned long * ifN);
void L1D_RF_CompensateSXSetting( unsigned short *Nint, unsigned long *Nfrac, signed long NfracOffset, unsigned char is_TX);
# 2031 "modem/gl1/l1_dm/l1d_ext/m12190.h"
void L1D_RF_GetRxPLLSetting( int rf_band, int arfcn, long *rfN, long *ifN );
void L1D_RF_GetTxPLLSetting( int rf_band, int arfcn, long *rfN, long *ifN );
int L1D_RF_GetGainSetting( int rf_band, int arfcn, int request_gain, long *gain_setting );
# 2297 "modem/gl1/l1_dm/l1d_ext/m12190.h"
void L1D_RF_SetFixGainEnable( unsigned char enable );
void L1D_RF_CheckFHC( char is_fhc );


void L1D_RF_UpdateAFCDac( unsigned short afc_data );

void L1D_RF_GetPGAGain( unsigned short tx_power );

void L1D_RF_InitRampTable( int rf_band );


void L1D_RF_InitRampTableEPSK( int rf_band );
short L1D_RF_SetInterslotPowerLevel( int rf_band, int arfcn, short mod_type );






void L1D_RF_SetCrystalCap_Value( int cap_no );
void L1D_RF_SetCrystalDac_Value( short dacValue );
int L1D_RF_GetCrystalCapRange( void );
int L1D_RF_GetWCalMode( void );
unsigned short L1D_RF_GetCalSets( FAC_CAL_ITEM item );
unsigned long L1D_GetBandSupport( void );
unsigned short L1D_Get_EPSK_TX_Support( void );
unsigned short L1D_GetPsEpskTxStatus( void );
unsigned short L1D_Get_TCVCXO_Support( void );
signed short L1D_RF_GetDSPSetPointLNAHighMode( void );
signed short L1D_RF_GetDSPSetPointLNAMidMode( void );
signed short L1D_RF_GetDSPSetPointLNALowMode( void );

unsigned long L1D_RF_TX_BSI_ENA( unsigned short win );


unsigned long L1D_RF_TX_BPI_ENA( unsigned short win );

void L1D_RF_TXIQ_Dynamic_Swap( void );
void L1D_BFE_SetTxIQSwap( void );
void L1D_BFE_SET_TxIQSwapRegister( int is_swap );
void L1D_BFE_GET_RxRegisters( void *set );
void L1D_BFE_SET_RxRegisters( void *set );
void L1D_BFE_GET_TxRegisters( void *set );
void L1D_BFE_SET_TxRegisters( void *set );
# 2354 "modem/gl1/l1_dm/l1d_ext/m12190.h"
typedef enum
{
   BSI_READ_STOP,
   BSI_READ_START,
   BSI_READ_DELAY,
   BSI_READ_DELAY_THEN_START

} BSI_READ_STATUS;

extern sBSIread BSIread;
void L1D_RF_Readback_BSI_Set_Event( void* data );
void L1D_RF_Readback_BSI_Set_Address( void* data );
void L1D_RF_Readback_BSI_GetData( unsigned short ADD, unsigned long *DATA );






unsigned long L1D_RF_SetTX_BSI_CW( short qb_st2, short timing_bound );
# 2383 "modem/gl1/l1_dm/l1d_ext/m12190.h"
unsigned short L1D_RF_FindGainStep( unsigned long gain_setting, FrequencyBand rf_band );
# 2392 "modem/gl1/l1_dm/l1d_ext/m12190.h"
void L1D_RF_Access_Dedicated_Mode_Start( char mode_flag );
void L1D_RF_Access_Dedicated_Mode_End( char mode_flag );
void L1D_RF_Check_RTX_PM( unsigned char rx_slots, int pm_count, char tx_cwin_idx, unsigned short is_fsi_win );
void L1D_RF_SetStandbyMode( void );

short L1D_RF_SetTxPowerLevel( int rf_band, int arfcn, short power_dbm, short mod_type );
short L1D_RF_GetRxPathLoss( int rf_band, int arfcn, short request_gain );
void L1D_RF_SetTxPower( short *tx_power );
void L1D_RF_NotifyBatteryVoltage( int micro_volt );
void L1D_RF_NotifyBatteryTemperature( int mili_degree );
void L1D_RF_NotifyRFTemperature( int temp_adc );
unsigned char L1D_RF_IS_GetRFTemperatureFromADC( void );
unsigned char L1D_RF_IS_GetBatteryInfoFromADC( void );

void L1D_RF_ResetSData_StopFSIWinOff( int idx );
void L1D_RF_SetSData_FSIWinOff( int idx );





void L1D_RF_SetPData_PR( void );
void L1D_RF_SetPData_PT( void );
void L1D_RF_SetPData_PR2M( void );
void L1D_RF_SetPData_PT2M( void );
void L1D_RF_SetSData_SR1( void );
void L1D_RF_SetSData_SR2( void );
void L1D_RF_SetSData_SR3( void );
void L1D_RF_SetSData_ST1( void );
void L1D_RF_SetSData_ST2( void );
void L1D_RF_SetSData_ST3( void );


void L1D_RF_SetSData_SR0( void );
void L1D_RF_SetSData_ST0( void );



void L1D_RF_SetSData_ST2B( void );
void L1D_RF_SetSData_ST2M( void );
void L1D_RF_Set_FB_FIR( void );



void L1D_RF_TXIQ_Dynamic_Config( void );
void L1D_BFE_SetTxIQ_Config( void );



void L1D_RF_init_FIR_SwitchNB( int wider );




extern const char is_2g_mipi_enable;

void L1D_MIPI_Init( void );
void L1D_MIPI_Init_BSI( void );
void L1D_MIPI_PowerOn( void );
void L1D_MIPI_PowerOff( void );

void L1D_MIPI_Table_Update(void);

void L1D_MIPI_TX_BSI_DISABLE( unsigned short );

void L1D_MIPI_RTX_WIN( signed int win_idx,unsigned short WIN_TYPE );
void L1D_MIPI_SetSData_SX( unsigned short rt_type );
void L1D_MIPI_CWIN_SELECT_CUR_SLOT( unsigned short tx_slot_con, unsigned char pre_slot );
void L1D_MIPI_SetSData_FSIWinOff_SR( void );
unsigned short L1D_MIPI_Parity_Bit( unsigned short data );

void L1D_MIPI_RX_SB( signed int cwin_idx, signed short pos_on, signed short pos_off, signed short tx_wrap );
void L1D_MIPI_RX_PM( signed int cwin_idx, unsigned short is_pm_enhance, unsigned short is_pm_1r7pm , unsigned short is_pm_tddm );
void L1D_MIPI_stopFSIwindow( void );



void L1D_RF_Init_TXPC_Data( void );
void L1D_RF_TXPC_Get_Temp_ADC( sTEMPERATURE_ADC_L1CAL *buff );
void L1D_RF_TXPC_Set_Temp_ADC( sTEMPERATURE_ADC_L1CAL *temp_adc );
void L1D_RF_TXPC_RecordParam( unsigned char scenario, const sRAMPDATA* band, unsigned short weight, short temp_idx, char is_rollback, short target_dac );
short L1D_RF_TXPC_RecUpdateAPCDAC( const short dac_ori, unsigned char rf_band, short arfcn, short slot, char is_EPSK );
short L1D_RF_TXPC_ComputeVAPC_DAC( const short dac_ori, short ratio, short dac_diff );







short L1D_RF_TXPC_Compute_OrionH_Remaining_GAIN( const short dac_ori, short ratio );
# 2493 "modem/gl1/l1_dm/l1d_ext/m12190.h"
void L1D_TXPC_CL_RecordPowerIndex( short index, short slot );
void L1D_RF_TXPC_CL_GetAllADC( sTXPC_L1CAL *buff, char is_EPSK );
void L1D_RF_TXPC_CL_GetAllTEMP( sTXPC_L1CAL *buff, char is_EPSK );
void L1D_RF_TXPC_CL_GetSubband( int rf_band, unsigned short *buff, char is_EPSK );
void L1D_RF_TXPC_CL_SetAllCalADC( sTXPC_L1CAL *cal_adc, char is_EPSK );
void L1D_RF_TXPC_CL_SetAllCalTEMP( sTXPC_L1CAL *cal_adc, char is_EPSK );
void L1D_RF_TXPC_CL_BackUpSubband( int rf_band, char is_EPSK );
void L1D_RF_TXPC_CL_RestoreSubband( void );
void L1D_RF_TXPC_CL_BackupAllCalADC( void );
void L1D_RF_TXPC_CL_RestoreAllCalADC( void );
void L1D_RF_TXPC_CL_Read_RF_Power( long *sample_array, unsigned char tx_slot, unsigned char mod_type );
void L1D_RF_TXPC_CL_Update_TXADC_Subband_Data( unsigned short read_back_data, short arfcn, char rf_band, unsigned char mod_type );
unsigned short L1D_RF_TXPC_CL_GetDetReadBack( unsigned char is_compensated, unsigned short slot_idx );
unsigned short L1D_RF_TXPC_CL_GetOneADC( int rf_band, int power_in_dBm, char is_EPSK );
unsigned char L1D_RF_TXPC_CL_Check_OHGMSK( void );
short L1D_TXPC_CL_Detector_Subband_Compensation( unsigned char mod_type );
short L1D_TXPC_CL_Detector_Temperature_Compensation( unsigned char mod_type );



short L1D_RF_TXPC_GetTxGainSetting( unsigned char is_gain_rf, unsigned char slot_idx );
short L1D_RF_TXPC_GetTemperatureInfo( unsigned char info_idx );
short L1D_RF_TXPC_CheckTransitionMode( void );
unsigned char L1D_RF_TXPC_IS_CAL( void );

void L1D_RF_GetRFTemperatureIdxAndValue( short temp_dac );


unsigned short L1D_RF_TXPC_GetTemperatureInfoFromBSI( void );
# 2636 "modem/gl1/l1_dm/l1d_ext/m12190.h"
void L1D_RF_set_TxPowerDecrementTable( unsigned char op_code, unsigned char tx_reduction_table[4][2][4] );
void L1D_RF_Check_TxPowerDecrementTable( char valid, unsigned char op_code, unsigned char tx_reduction_table[4][2][4] );
# 2647 "modem/gl1/l1_dm/l1d_ext/m12190.h"
void L1D_RF_Custom_Table_Update( void );
void L1D_RF_Custom_Table_Update_V2_No_Check( void );



void L1D_PowerOn_BSI( void );
void L1D_AFCDAC_On( void );
void L1D_AFCDAC_Off( void );
void L1D_BeforeSleep( void );
void L1D_AfterSleep( void );
char L1D_RF_Check_DCXO_Enable( void );
void L1D_RF_Set_DCXO_2G_AFCDAC_Active( char set );
unsigned short L1D_RF_GetTxPAVBias_TxITC( unsigned short lb_cw_high_idx, unsigned short hb_cw_high_idx );
short L1D_RF_GetTxPAVBias(void);
# 2670 "modem/gl1/l1_dm/l1d_ext/m12190.h"
typedef unsigned long uintBPI;





typedef unsigned long uintBSI;




void WAIT_TIME_QB( short time_qb );
void IMM_MODE_BEGIN( unsigned short imm_mask );
void IMM_MODE_END( void );
void IMM_SEND_BPI( uintBPI data );
void IMM_SEND_BSI( uintBSI ctrl, unsigned long data );
void IMM_RECEIVE_BSI( uintBSI ADD_Ctrl, unsigned long ADD, uintBSI DATA_Ctrl, unsigned long *DATA );
void IMM_UPDATE_BSI_BEGIN( void );
void IMM_UPDATE_BSI_END( void );
void IMM_OFFCHIP_BSI_CFG( BSI_SWITCH state );
# 2720 "modem/gl1/l1_dm/l1d_ext/m12190.h"
void XO_LC_Initialize( void );
void XO_LC_TuneAFCTable( signed int Ratio_ind );
signed short int XO_LC_CalculateNewDacNBSB( signed int Current_Freq, signed short int Servingstarted );
signed int XO_LC_InitialPhiFactor( signed short int DacValue );
signed int XO_LC_GetCurrentPhi_est( void );






short L1D_RF_PowerRollback( short power_dbm, int rf_band, unsigned short weight, short mod_type);
# 2757 "modem/gl1/l1_dm/l1d_ext/m12190.h"
unsigned short L1D_RF_Check_DCXO_LPM( void );
void L1D_RF_Set_DCXO_Power_Mode( char mode );
void L1D_RF_Set_FixAFC_Status( void );

extern long L1D_DualLoopAFC_SetAfcSlope( void );
# 2851 "modem/gl1/l1_dm/l1d_ext/m12190.h"
void L1D_PMU_VRF18Setting( char vrf18on );
void L1D_PMU_VRF28Setting( char vrf28on );
void L1D_PMU_VRF18ModeSetting( char onSel );
void L1D_PMU_VRF28ModeSetting( char onSel );
void L1D_PMU_VRF18HWModeSelect( void );
void L1D_PMU_VRF28HWModeSelect( void );
void L1D_PMIC_ADPT2_PWM_ENABLE( char pwm_ena );
void L1D_PMU_LPModeSetting( char modeSel );
void L1D_PMU_LPSetting( char lpSel );
unsigned long L1D_PMU_AUXADCRead( void );


void L1D_ABB_Set_ADCMUX_DLPad( void );
void L1D_ABB_Set_BBRX_CON( void );
unsigned char L1D_Check_BPI_Data( void );
# 2920 "modem/gl1/l1_dm/l1d_ext/m12190.h"
unsigned short L1D_Set_TXCON0( unsigned short tx_con0 );
# 2954 "modem/gl1/l1_dm/l1d_ext/m12190.h"
void L1D_RF_RCAL_Cal( RFC_DATABASE_T* pRfcDataBase );
void L1D_RF_TX_GainStep_Cal( RFC_DATABASE_T* pRfcDataBase );
void L1D_RF_TX_DET_DCOC_Cal( RFC_DATABASE_T* pRfcDataBase );
void L1D_RF_TX_RCF_Cal( RFC_DATABASE_T* pRfcDataBase );
void L1D_MMRF_SetPowerOnCalibrationData( RFC_DATABASE_T* pRfcDataBase );






char L1D_RF_CheckDMPower( void );
void L1D_RF_SetClockControl(void);
void L1D_RF_Gainrf_Init( void );
void L1D_RF_TxGainSetting( unsigned short mod_type, char slot_idx, signed short tx_power, FrequencyBand rf_band, unsigned long *cw74, unsigned long *cw75 );
void SPECIAL_IMM_RECEIVE_BSI( unsigned short ADD_Ctrl, unsigned long ADD, unsigned short DATA_Ctrl, unsigned long *DATA );
unsigned long L1D_RF_GetGainBB0CW( signed long gainbb0 );
# 3016 "modem/gl1/l1_dm/l1d_ext/m12190.h"
int L1D_GetTxPclCalVer( void );

void L1D_RF_GetAFCData( void *data_buffer );
# 3033 "modem/gl1/l1_dm/l1d_ext/m12190.h"
extern int L1D_FH_Is_MPLL_Free_Run_On( void );




unsigned char L1D_RF_IS_MT6162_DCXO( void );
unsigned char L1D_PMU_IS_FIX_VRF1828SETTING( void );
# 3114 "modem/gl1/l1_dm/l1d_ext/m12190.h"
typedef struct
{
   unsigned char power_decrement[4][2][4];
} sTX_POWER_DECREMENT_TABLE;
extern sTX_POWER_DECREMENT_TABLE Tx_Power_Decrement_Table;



extern sTX_POWER_DECREMENT_TABLE Tx_Fine_Tune_Table;
# 3143 "modem/gl1/l1_dm/l1d_ext/m12190.h"
void L1D_RF_Report_Temperature_HISR( kal_uint32 ap_param );
kal_int16 L1D_RF_Report_Temperature( void );




void L1D_RF_Update_VoltageInfo_HISR( kal_uint32 ap_param );




void L1D_RF_Update_TxPowerOffsetInfo_HISR( kal_uint32 ap_param );

signed long L1D_RF_UpdateVoltInfoPeriod( void );
# 3175 "modem/gl1/l1_dm/l1d_ext/m12190.h"
extern unsigned short L1D_Get_PSI_EE( void );
extern unsigned short L1D_Get_C_PSI_STA( void );







extern unsigned long MT6169_2G_CHIP_VER;






unsigned char L1D_Check_SW_SecVersion( void );
void L1D_RF_SetBSISPI_Control();
# 3297 "modem/gl1/l1_dm/l1d_ext/m12190.h"
void L1D_CustomDynamicInit( void );
void L1D_CustomDynamicDebugStoreToNVRAM( void );
void L1D_CustomDynamicDebug( void );
void L1D_CustomDrdiStatusUpdatetoNVRAM(unsigned short index);




unsigned char L1D_Get_BandCapability( void );



typedef struct
{

   unsigned long lnaPort;




   signed long asmLogics[8];



} sL1CustomDynamicInitRxData;



typedef struct
{

   unsigned long txPort;




   signed long asmpaLogics[11];






} sL1CustomDynamicInitTxData;

typedef struct
{

   signed long pdata_gmsk;
   signed long pdata_8psk;
   signed long pdata_init;
   signed long pdata_idle;
   sL1CustomDynamicInitTxData pdata_txdata[4];







} sL1CustomDynamicInitPData;
# 3411 "modem/gl1/l1_dm/l1d_ext/m12190.h"
extern kal_bool TPO_Table_on_mask_from_AP_done;





unsigned long L1D_RF_Get_Version( void );
# 3435 "modem/gl1/l1_dm/l1d_ext/m12190.h"
extern void L1D_UpdateTASParameters( sL1_TAS_CUSTOM_PARAMS* custom_param, sL1_TAS_LIB_PARAMS* lib_param );
uint16 L1D_RF_TAS_NVRAM_LID_QUERY(void);
# 2124 "interface/service/nvram/nvram_editor_data_item.h" 2

# 1 "interface/driver/hwdrv/batparm.h" 1
# 79 "interface/driver/hwdrv/batparm.h"
# 1 "interface/driver/peripheral/adc.h" 1
# 80 "interface/driver/hwdrv/batparm.h" 2
# 2126 "interface/service/nvram/nvram_editor_data_item.h" 2
# 2135 "interface/service/nvram/nvram_editor_data_item.h"
# 1 "interface/modem/general/device.h" 1
# 356 "interface/modem/general/device.h"
typedef enum {
   L4_BCD = 0x01,
   L4_ASCII = 0x04,
   L4_UCS2 = 0x08
} L4_charset_enum;


typedef enum {
   MMI_PS_AT_LANG_DEFAULT,
   MMI_PS_AT_LANG_UNKWN,
   MMI_PS_AT_LANG_EN,
   MMI_PS_AT_LANG_TW,
   MMI_PS_AT_LANG_ZH,
   MMI_PS_AT_LANG_LAST
} L4_AT_lang_enum;

typedef enum {
    L4_WB_AUDIO_INPUT_FIR,
    L4_WB_AUDIO_OUTPUT_FIR,
    L4_WB_ADUIO_MODE_PARAM
}l4_wb_audio_para_action_enum;





typedef enum {
    AUDIO_DEVICE_SPEAKER = 0 ,
    AUDIO_DEVICE_MICROPHONE ,
    AUDIO_DEVICE_BUZZER ,
    AUDIO_DEVICE_GMI ,
    AUDIO_DEVICE_SPEAKER2 ,
    AUDIO_DEVICE_LOUDSPEAKER ,
    AUDIO_DEVICE_SPEAKER_BOTH ,
    MAX_AUDIO_DEVICE_NUM
}audio_type_enum;



typedef enum {
    AUDIO_DEVICE_MIC1 = 0 ,
    AUDIO_DEVICE_MIC2 ,
    AUDIO_DEVICE_FMRR ,
    AUDIO_DEVICE_MIC3
}audio_input_path_enum;



typedef enum {
    VOL_NORMAL = 0 ,
    VOL_HEADSET ,
    VOL_HANDFREE ,
    MAX_VOL_CATE,
    VOL_TV_OUT = MAX_VOL_CATE
}volume_category_enum;



typedef enum {
    VOL_TYPE_CTN = 0 ,
    VOL_TYPE_KEY ,
    VOL_TYPE_MIC ,
    VOL_TYPE_GMI ,
    VOL_TYPE_SPH ,
    VOL_TYPE_SID ,
    VOL_TYPE_MEDIA ,
    MAX_VOL_TYPE
}volume_type_enum;
# 432 "interface/modem/general/device.h"
typedef enum {
    DEVICE_AUDIO_PLAY_CRESCENDO = 0 ,
    DEVICE_AUDIO_PLAY_INFINITE ,
    DEVICE_AUDIO_PLAY_ONCE ,
    DEVICE_AUDIO_PLAY_DESCENDO
}audio_play_style_enum;


typedef struct {
   kal_uint8 first_out_amp[MAX_AUDIO_DEVICE_NUM][7];
   kal_uint8 second_out_amp[MAX_AUDIO_DEVICE_NUM][7];
   kal_uint8 side[MAX_AUDIO_DEVICE_NUM][7];
   kal_uint8 volume[MAX_AUDIO_DEVICE_NUM];
} acoustic_gain_struct;







typedef enum {
    KEY_PRESSED = 0
    ,KEY_RELEASED
    ,KEY_LONGPRESS
    ,KEY_REPEATED




}keypad_status_enum;



typedef kal_uint8 keypad_code_enum;







typedef enum {
    RTC_TIME_CLOCK_IND = 0 ,
    RTC_ALARM_IND
}rtc_type_enum;



typedef enum {
    RTC_SETTING_TYPE_DATETIME = 0 ,
    RTC_SETTING_TYPE_DATE ,
    RTC_SETTING_TYPE_TIME
}rtc_setting_type_enum;


typedef kal_uint8 rtc_alarm_id_enum;






typedef enum {
    RTC_ALARM_VIBRATOR = 0x01 ,
    RTC_ALARM_LED = 0x02 ,
    RTC_ALARM_SOUND = 0x04 ,
    RTC_ALARM_SILENT = 0x08
}rtc_alarm_type_enum;



typedef enum {
 RTC_ALARM_DAY1 = 0x01 ,
 RTC_ALARM_DAY2 = 0x02 ,
 RTC_ALARM_DAY3 = 0x04 ,
 RTC_ALARM_DAY4 = 0x08 ,
 RTC_ALARM_DAY5 = 0x10 ,
 RTC_ALARM_DAY6 = 0x20 ,
 RTC_ALARM_DAY7 = 0x40 ,
 RTC_ALARM_DAY_ALL = 0x7F
}rtc_alarm_recurr_enum;


typedef enum {
    DATE_DD_MMM_YYYY = 1
# 527 "interface/modem/general/device.h"
    ,DATE_DD_MM_YYYY_S = 8
    ,DATE_MM_DD_YYYY_S
    ,DATE_YYYY_MM_DD_S
    ,DATE_YYYY_MM_DD_H
    ,DATE_MMM_DD_YYYY
}date_format_enum;






typedef enum {
    TIME_HH_MM_24 = 1 ,
    TIME_HH_MM_12
}time_format_enum;




typedef kal_uint8 rtc_format_enum;



typedef enum {
    DEVICE_AL_EN_None = 0 ,
    DEVICE_AL_EN_ChkS ,
    DEVICE_AL_EN_ChkMS ,
    DEVICE_AL_EN_ChkHMS ,
    DEVICE_AL_EN_ChkDHMS ,
    DEVICE_AL_EN_ChkWHMS ,
    DEVICE_AL_EN_ChkMDHMS ,
    DEVICE_AL_EN_ChkYMDHMS ,
    DEVICE_AL_EN_NoChange
}rtc_alarm_format_enum;


typedef enum {
    DEVICE_TC_EN_None = 0 ,
    DEVICE_TC_EN_ChkS ,
    DEVICE_TC_EN_ChkM ,
    DEVICE_TC_EN_ChkH ,
    DEVICE_TC_EN_ChkD ,
    DEVICE_TC_EN_ChkW ,
    DEVICE_TC_EN_ChkMon ,
    DEVICE_TC_EN_ChkY ,
    DEVICE_TC_EN_NoChange
}rtc_clock_format_enum;


typedef enum {
    ALARM_STATUS_ON_POWEROFF_CHARING =0 ,
    ALARM_STATUS_ON_POWEROFF ,
    ALARM_STATUS_ON_POWERON
}alarm_status_enum;



typedef enum {
  UEM_CALL_UNKNOW = 0 ,
  UEM_CALL_SETUP ,
  UEM_CALL_CONNECT ,
  UEM_CALL_DISCONNECT
}uem_call_state_enum;
# 601 "interface/modem/general/device.h"
typedef enum {
    GPIO_DEV_LED_MAINLCD = 0 ,
    GPIO_DEV_LED_SUBLCD ,
    GPIO_DEV_LED_STATUS_1 ,
    GPIO_DEV_LED_STATUS_2 ,
    GPIO_DEV_LED_STATUS_3 ,
    GPIO_DEV_LED_KEY ,
    GPIO_DEV_VIBRATOR ,
    GPIO_DEV_FLASHLIGHT ,
    GPIO_DEV_FTE_FEEDBACK_VIB ,
    GPIO_DEV_LED_BACKLIGHT_DIMMING,
    GPIO_DEV_RESERVED3 ,
    GPIO_DEV_RESERVED4 ,
    GPIO_DEV_RESERVED5 ,
    GPIO_DEV_RESERVED6 ,
    GPIO_DEV_RESERVED7 ,
    GPIO_DEV_RESERVED8 ,
    GPIO_DEV_RESERVED9 ,
    GPIO_DEV_RESERVED10 ,
    GPIO_DEV_RESERVED11 ,
    GPIO_DEV_RESERVED12 ,
    MAX_GPIO_DEVICE_NUM
}gpio_device_enum;



typedef enum {
    LED_LIGHT_LEVEL0 =0 ,
    LED_LIGHT_LEVEL1 ,
    LED_LIGHT_LEVEL2 ,
    LED_LIGHT_LEVEL3 ,
    LED_LIGHT_LEVEL4 ,
    LED_LIGHT_LEVEL5 ,



    LED_LIGHT_LEVEL_MAX
}gpio_device_led_level_typedef;

typedef enum
{

    LED_PATTERN_BEGIN,

    LED_POWER_ON = LED_PATTERN_BEGIN,
    LED_POWER_OFF,
    LED_BATTERY_WARNING,
    LED_BATTERY_LOW,
    LED_Connect900,
    LED_Connect1800,
    LED_OnCharging,
    LED_FullCharging,
    LED_MessageIn,
    LED_MessageRemind,
    LED_Caller1,
    LED_Caller2,
    LED_Caller3,
    LED_Caller4,
    LED_Caller5,
    LED_Caller6,
    LED_LimitService,
    LED_NoService,
    LED_Connect1900,
    LED_Roaming,
    LED_PATTERN_END = 50,


    LCD_PATTERN_BEGIN,
    LCD_PATTERN_1 = LCD_PATTERN_BEGIN,
    LCD_PATTERN_2,
    LCD_PATTERN_END = 100,


    VIB_PATTERN_BEGIN,
    VIB_PATTERN_1 = VIB_PATTERN_BEGIN,
    VIB_PATTERN_2,
    VIB_PATTERN_3,
    VIB_PATTERN_4,
    VIB_PATTERN_A,
    VIB_PATTERN_B,
    VIB_PATTERN_C,
    VIB_PATTERN_END = 150,

    MAX_PATTERN_ID = VIB_PATTERN_END
} PATTERN_ID;

typedef enum
{
    PLAY_STOP,
    PLAY_REPEAT,
    PLAY_ONCE,
    MAX_PATTERN_TYPE = PLAY_ONCE
} PATTERN_TYPE;

typedef struct
{
    kal_uint8 gpio_control[3];
    kal_uint16 duration_time;
} LED_PATTERN_STRUCT;

typedef struct
{
    kal_uint8 gpio_control[1];
    kal_uint16 duration_time;
} LCD_PATTERN_STRUCT;

typedef struct
{
    kal_uint8 gpio_control[1];
    kal_uint16 duration_time;
} VIB_PATTERN_STRUCT;

extern LCD_PATTERN_STRUCT *custom_get_lcd_patterns(PATTERN_ID lcd_pattern_id);
extern LED_PATTERN_STRUCT *custom_get_led_patterns(PATTERN_ID led_pattern_id);
extern VIB_PATTERN_STRUCT *custom_get_vib_patterns(PATTERN_ID vib_pattern_id);
extern kal_bool uem_play_pattern(PATTERN_ID pattern_id, PATTERN_TYPE pattern_type);
extern kal_uint8 custom_get_led_label(kal_uint8 id);
extern kal_uint8 custom_get_lcd_label(kal_uint8 id);
extern kal_uint8 custom_get_vib_label(kal_uint8 id);
extern void custom_uem_set_rmi_lang_id(kal_uint8 *lang_id);
extern kal_bool custom_uem_gpio_set_level(kal_uint8 gpio_dev_type, kal_uint8 gpio_dev_level);
extern kal_uint8* custom_uem_get_equip_id(kal_uint8 equip_id);




extern kal_uint32 custom_uem_get_bl_level_num(void);
extern kal_uint32 custom_uem_get_pwm_bl_mode(kal_uint8 gpio_dev_type);





typedef enum {
    VIBRATOR_OFF =0 ,
    VIBRATOR_ON
}gpio_device_vibrator_level_typedef;


typedef enum {
    AUD_MODE_NORMAL =0 ,
    AUD_MODE_HEADSET ,
    AUD_MODE_LOUDSPK ,
    MAX_AUD_MODE_NUM
}audio_mode_enum;



typedef enum {
    EXT_DEV_NONE = 0 ,
    EXT_DEV_HANDFREE ,
    EXT_DEV_EARPHONE ,
    EXT_DEV_CARKIT ,
    EXT_DEV_KEY_1 ,
    EXT_DEV_KEY_2 ,
    EXT_DEV_UART ,
    EXT_DEV_CLAM_OPEN = 8 ,
    EXT_DEV_CLAM_CLOSE ,
    EXT_DEV_HOOK_ON ,
    EXT_DEV_HOOK_OFF ,
    EXT_DEV_AUX_DETECT_DONE ,
    EXT_DEV_TRANSMITTER_HOLD_ON,
    EXT_DEV_TRANSMITTER_PUT_DOWN,
    MAX_EXT_DEVICE_NUM
}ext_device_enum;


typedef enum {
    AUD_LOOPBACK_MODE_NORMAL =0 ,
    AUD_LOOPBACK_MODE_HEADSET_PREFER ,
    AUD_LOOPBACK_MODE_HEADSET ,
    AUD_LOOPBACK_MODE_LOUDSPK ,
    MAX_AUD_LOOPBACK_MODE_NUM
}audio_loopback_mode_enum;







typedef enum
{
   UART_NVRAM_LID_FUNC_UART_CONFIG,
   UART_NVRAM_LID_FUNC_HIGH_SPEED_SIM,
   UART_NVRAM_LID_FUNC_SWDBG,
   UART_NVRAM_LID_FUNC_UART_POWER,
   UART_NVRAM_LID_FUNC_TST_OUTPUT_MODE,
   UART_NVRAM_LID_FUNC_USB_LOGGING
} uart_nvram_lid_function_enum;





typedef enum
{
   PMIC_VBAT_STATUS,
   PMIC_CHARGER_IN,
   PMIC_CHARGER_OUT,
   PMIC_OVERVOLPROTECT,
   PMIC_OVERBATTEMP,
   PMIC_LOWBATTEMP,
   PMIC_OVERCHARGECURRENT,
   PMIC_CHARGE_COMPLETE,
   PMIC_INVALID_BATTERY,
   PMIC_INVALID_CHARGER,
   PMIC_CHARGING_TIMEOUT,
   PMIC_LOWCHARGECURRENT,
   PMIC_CHARGE_BAD_CONTACT,
   PMIC_BATTERY_BAD_CONTACT,
   PMIC_USB_CHARGER_IN,
   PMIC_USB_CHARGER_OUT,
   PMIC_USB_NO_CHARGER_IN,
   PMIC_USB_NO_CHARGER_OUT,
   PMIC_BATTERY_IN,
   PMIC_BATTERY_OUT
} pmic_status_enum;
typedef pmic_status_enum battery_status_enum;

typedef enum
{
   BATTERY_LOW_POWEROFF = 0,
   BATTERY_LOW_TX_PROHIBIT,
   BATTERY_LOW_WARNING,
   BATTERY_LEVEL_0,
   BATTERY_LEVEL_1,
   BATTERY_LEVEL_2,
   BATTERY_LEVEL_3,
   BATTERY_LEVEL_4 = BATTERY_LEVEL_3,
   BATTERY_LEVEL_5 = BATTERY_LEVEL_3,
   BATTERY_LEVEL_6 = BATTERY_LEVEL_3,
   BATTERY_LEVEL_LAST = 9

} battery_level_enum;



typedef enum
{
 POWER_ON_KEYPAD = 0 ,
 POWER_ON_ALARM ,
 POWER_ON_CHARGER_IN ,
 POWER_ON_EXCEPTION ,
 POWER_ON_USB ,
 POWER_ON_UNINIT ,
 POWER_ON_PRECHARGE = 8
} power_on_status_enum;
# 857 "interface/modem/general/device.h"
extern power_on_status_enum uem_get_power_on_mode(void);


typedef enum
{
   NORMAL_RESET,
   CHARGING_RESET,
   ALARM_RESET,
   WM_RESET
} pmic_reset_type_enum;

typedef enum
{
 PMIC_GET_CHR_STATE
 ,PMIC_GET_AC_USB
 ,PMIC_GET_LED_CONFIG
 ,PMIC_GET_RGB_DIM
 ,PMIC_GET_BL_DIM
 ,PMIC_GET_SPEAKER_STATE
 ,PMIC_GET_SPEAKER_GAIN
 ,PMIC_GET_MISC_LDO_STATE
 ,PMIC_READ_REG
 ,PMIC_WRITE_REG
 ,PMIC_CHR_ENABLE
 ,PMIC_CHR_CURRENT_CTRL
 ,PMIC_USB_CHR_ENABLE
 ,PMIC_LED_ENABLE
 ,PMIC_LED_CONFIG
 ,PMIC_RGB_DIM_CLK
 ,PMIC_CHR_PUMP_ENABLE
 ,PMIC_CHR_PUMP_CURRENT
 ,PMIC_BL_DIM_CLK
 ,PMIC_BL_DIV_BYPASS
 ,PMIC_SPEAKER_ENABLE
 ,PMIC_SPEAKER_GAIN
 ,PMIC_VIBRATOR_ENABLE
 ,PMIC_VIBRATOR_SEL
 ,PMIC_VMC_ENABLE
 ,PMIC_VMC_SEL
 ,PMIC_VASW_ENABLE
 ,PMIC_VASW_SEL
 ,PMIC_USB_REG_ENABLE
 ,PMIC_VBAT_ENABLE
 ,PMIC_ISENSE_ENABLE
 ,PMIC_BL_PWM
 ,PMIC_MAX_NUM
}pmic_config_req_enum;




typedef enum
{
    FM_RADIO_CMD_MONO = 0,
    FM_RADIO_CMD_STEREO,
    FM_RADIO_CMD_RSSI,
    FM_RADIO_CMD_IF_COUNT,
    FM_RADIO_CMD_RSSI_INFO
}fm_radio_config_cmd_enum;

typedef enum
{
    FM_RADIO_COMMON_DISABLE = 0,
    FM_RADIO_COMMON_ENABLE,
    FM_RADIO_COMMON_ENABLE_EXTRA
}fm_radio_common_state_enum;




typedef enum
{
    RF_TEST_GSM_TX_BAND_850,
    RF_TEST_GSM_TX_BAND_900,
    RF_TEST_GSM_TX_BAND_1800,
    RF_TEST_GSM_TX_BAND_1900
}rf_test_gsm_tx_band_enum;

typedef enum
{
    RF_TEST_GSM_STOP,
    RF_TEST_GSM_TX_TEST,
    RF_TEST_GSM_RX_TEST,
    RF_TEST_GSM_POWER_SCAN
}rf_test_gsm_req_enum;





typedef enum
{
    RF_TEST_WIFI_STOP,
    RF_TEST_WIFI_TEST_MODE,
    RF_TEST_WIFI_NORMAL_MODE,
    RF_TEST_WIFI_TX_GET_DAC_OFFSET,
    RF_TEST_WIFI_TX_OUTPUT_POWER,
    RF_TEST_WIFI_TX_CARRIER_SUPP,
    RF_TEST_WIFI_TX_LOCAL_FREQ,
    RF_TEST_WIFI_TX_CONT_PKT,
    RF_TEST_WIFI_RX_CONT_PKT,
    RF_TEST_WIFI_POWER_SAVE,
    RF_TEST_WIFI_REG_MCR32_WRITE,
    RF_TEST_WIFI_REG_MCR32_READ,
    RF_TEST_WIFI_REG_MCR16_WRITE,
    RF_TEST_WIFI_REG_MCR16_READ,
    RF_TEST_WIFI_REG_BBCR_WRITE,
    RF_TEST_WIFI_REG_BBCR_READ,
    RF_TEST_WIFI_REG_EEPROM_WRITE,
    RF_TEST_WIFI_REG_EEPROM_READ,
    RF_TEST_WIFI_REG_EFUSE_WRITE,
    RF_TEST_WIFI_REG_EFUSE_READ
}rf_test_wifi_req_enum;





typedef enum
{
    IND_BATTCHG = 0 ,
    IND_SIGNAL ,
    IND_SERVICE ,
    IND_SOUNDER ,
    IND_MESSAGE ,
    IND_CALL ,
    IND_VOX ,
    IND_ROAM ,
    IND_SMSFULL
} indicator_type_enum;



typedef enum
{
    EQ_ME_MANUFACTURE_ID = 0 ,
    EQ_ME_MODEL_ID ,
    EQ_ME_REVISION_ID ,
    EQ_ME_SERIAL_NUMBER_ID ,
    EQ_ME_SERIAL_NUMBER_SIM2_ID ,
    EQ_ME_GLOBAL_OBJECT_ID ,
    EQ_ME_MANUFACTURE_INFO_ID ,
    EQ_ME_COMP_CAP_LIST_ID ,
    EQ_ME_SERIAL_NUMBER_SIM3_ID ,
    EQ_ME_SERIAL_NUMBER_SIM4_ID ,
    MAX_ME_ID_NUM
} equip_id_enum;






typedef enum
{
    DEV_OK = 0 ,
    DEV_FAIL ,
    DEV_FAIL_VM_NO_FREE_ENTRY ,
    DEV_FAIL_VM_BUFFER_FULL ,
    DEV_FAIL_VM_PLAY_NO_DATA
} dev_status_enum;





typedef enum
{
    DEVUSB_DETECT_ACTION_UNKNOWN = 0 ,
    DEVUSB_DETECT_ACTION_PLUGIN ,
    DEVUSB_DETECT_ACTION_PLUGOUT ,
    DEVUSB_DETECT_ACTION_USB_SUSPEND ,
    DEVUSB_DETECT_ACTION_MAX_ID
} devusb_detect_action_enum;


typedef enum
{
    DEVUSB_CFG_ACTION_UNKNOWN = 0 ,
    DEVUSB_CFG_ACTION_CDC_ACM ,
    DEVUSB_CFG_ACTION_MASS_STORAGE ,
    DEVUSB_CFG_ACTION_MULTI_COM,
    DEVUSB_CFG_ACTION_WEBCAM ,
    DEVUSB_CFG_ACTION_STOP_MS ,
    DEVUSB_CFG_ACTION_IRDBG ,
    DEVUSB_CFG_ACTION_PICTBRIGE ,
    DEVUSB_CFG_ACTION_MTP ,
    DEVUSB_CFG_ACTION_STOP_MTP ,
    DEVUSB_CFG_ACTION_MAX_ID
} devusb_cfg_action_enum;


typedef enum
{
    USB_SWITCH_PORT_APP_DATA = 0 ,
    USB_SWITCH_PORT_APP_DEBUG,
    USB_SWITCH_PORT_APP_NULL
} usb_switch_port_app_enum;
# 1099 "interface/modem/general/device.h"
typedef enum
{
    EM_USB_LOGGING_NONE,
# 1110 "interface/modem/general/device.h"
    EM_USB_LOGGING_MAX
} EM_USB_LOGGING_ITEM;







typedef enum
{
    MT6223PMU_READ_REG
    ,MT6223PMU_WRITE_REG
    ,MT6223PMU_GET_CHR_STATUS
    ,MT6223PMU_SET_CHR_GET_CHR_EN
    ,MT6223PMU_SET_CHR_SET_CHR_EN
    ,MT6223PMU_SET_CHR_GET_CHR_CUR
    ,MT6223PMU_SET_CHR_SET_CHR_CUR
    ,MT6223PMU_SET_CHR_GET_CHR_CUR_OFFSET
    ,MT6223PMU_SET_CHR_SET_CHR_CUR_OFFSET


    ,MT6223PMU_SET_CHR_GET_CV_THRESHOLD
    ,MT6223PMU_SET_CHR_SET_CV_THRESHOLD
    ,MT6223PMU_GET_DRIVER_INFO
    ,MT6223PMU_SET_DRIVER_INFO
    ,MT6223PMU_GET_LDO_VOLTAGE
    ,MT6223PMU_SET_LDO_VOLTAGE
    ,MT6223PMU_GET_LDO_ENABLE
    ,MT6223PMU_SET_LDO_ENABLE
    ,MT6223PMU_GET_BIAS_CURRENT
    ,MT6223PMU_SET_BIAS_CURRENT

 ,MT6223PMU_MAX_NUM
}EM_MT6223PMU_REQ_ENUM;


typedef enum
{
   PMU6223_CHR_STATE_CHR_DET = 0,
   PMU6223_CHR_STATE_BAT_ON,
   PMU6223_CHR_STATE_CV,
   PMU6223_CHR_STATE_CHR_OVP,
   PMU6223_CHR_STATE_CHARGING,
   PMU6223_CHR_STATE_MAX
}PMU6223_CHR_STATE;

typedef enum
{
   PMU6223_CHR_CUR_OFFSET_P1 = 0,
   PMU6223_CHR_CUR_OFFSET_P2,
   PMU6223_CHR_CUR_OFFSET_M2,
   PMU6223_CHR_CUR_OFFSET_M1
}PMU6223_CHR_CUR_OFFSET;

typedef enum
{
   PMU6223_DRIVE_INFO_VIB = 0,
   PMU6223_DRIVE_INFO_LED
}PMU6223_DRIVE_INFO;

typedef enum
{
   PMU6223_LDO_VOLTAGE_VRF = 0,
   PMU6223_LDO_VOLTAGE_VCORE,
   PMU6223_LDO_VOLTAGE_VM,
   PMU6223_LDO_VOLTAGE_VIO,
   PMU6223_LDO_VOLTAGE_VA,
   PMU6223_LDO_VOLTAGE_VTCXO,
   PMU6223_LDO_VOLTAGE_VSIM,
   PMU6223_LDO_VOLTAGE_VRTC1

}PMU6223_LDO_VOLTAGE_TYPE;

typedef enum
{
   PMU6223_LDO_ENABLE_VRF = 0,
   PMU6223_LDO_ENABLE_VTCXO,
   PMU6223_LDO_ENABLE_VSIM
}PMU6223_LDO_ENABLE;

typedef enum
{
   PMU6223_BIAS_CALIBRATE_VRF = 0,
   PMU6223_BIAS_CALIBRATE_VM,
   PMU6223_BIAS_CALIBRATE_VIO,
   PMU6223_BIAS_CALIBRATE_VSIM,
   PMU6223_BIAS_CALIBRATE_VCORE_CAL
}PMU6223_BIAS_CALIBRATE_TYPE;
# 1218 "interface/modem/general/device.h"
typedef enum
{
     MT6238PMU_READ_REG
    ,MT6238PMU_WRITE_REG
    ,MT6238PMU_GET_CHR_STATUS
    ,MT6238PMU_SET_CHR_GET_CHR_EN
    ,MT6238PMU_SET_CHR_SET_CHR_EN
    ,MT6238PMU_SET_CHR_GET_CHR_CUR
    ,MT6238PMU_SET_CHR_SET_CHR_CUR
    ,MT6238PMU_SET_CHR_GET_CHR_CUR_OFFSET
    ,MT6238PMU_SET_CHR_SET_CHR_CUR_OFFSET
    ,MT6238PMU_SET_CHR_GET_OV_TH_FREEZE
    ,MT6238PMU_SET_CHR_SET_OV_TH_FREEZE
    ,MT6238PMU_SET_CHR_GET_CV_THRESHOLD
    ,MT6238PMU_SET_CHR_SET_CV_THRESHOLD
    ,MT6238PMU_GET_DRIVER_INFO
    ,MT6238PMU_SET_DRIVER_INFO
    ,MT6238PMU_GET_LDO_VOL_SEL_VBT
    ,MT6238PMU_SET_LDO_VOL_SEL_VBT
    ,MT6238PMU_GET_LDO_VOL_SEL_VCAMD
    ,MT6238PMU_SET_LDO_VOL_SEL_VCAMD
    ,MT6238PMU_GET_LDO_VOL_SEL_VCAMA
    ,MT6238PMU_SET_LDO_VOL_SEL_VCAMA
    ,MT6238PMU_GET_LDO_VOL_SEL_VSIM
    ,MT6238PMU_SET_LDO_VOL_SEL_VSIM
    ,MT6238PMU_GET_LDO_VOLTAGE_CAL
    ,MT6238PMU_SET_LDO_VOLTAGE_CAL
    ,MT6238PMU_GET_LDO_ENABLE
    ,MT6238PMU_SET_LDO_ENABLE
    ,MT6238PMU_GET_DC_CONTROL
    ,MT6238PMU_SET_DC_CONTROL
    ,MT6238PMU_GET_BIAS_CURRENT
    ,MT6238PMU_SET_BIAS_CURRENT

 ,MT6238PMU_MAX_NUM
}EM_MT6238PMU_REQ_ENUM;

typedef enum
{
    EM_MT6238PMU_OV_TH_FREEZE_AUTO = 0,
    EM_MT6238PMU_OV_TH_FREEZE_FIXED
} EM_MT6238PMU_OV_TH_FREEZE_TYPE;


typedef enum
{
   PMU6238_CHR_CUR_OFFSET_P1 = 0,
   PMU6238_CHR_CUR_OFFSET_P2,
   PMU6238_CHR_CUR_OFFSET_M2,
   PMU6238_CHR_CUR_OFFSET_M1
}PMU6238_CHR_CUR_OFFSET;

typedef enum
{
   PMU6238_DRIVE_INFO_VIB = 0,
   PMU6238_DRIVE_INFO_LED
}PMU6238_DRIVE_INFO;

typedef enum
{
   PMU6238_LDO_VOLTAGE_VCORE = 0,
   PMU6238_LDO_VOLTAGE_VCORE_SLEEP,
   PMU6238_LDO_VOLTAGE_VRF,
   PMU6238_LDO_VOLTAGE_VM,
   PMU6238_LDO_VOLTAGE_VIO,
   PMU6238_LDO_VOLTAGE_VA,
   PMU6238_LDO_VOLTAGE_VTCXO,
   PMU6238_LDO_VOLTAGE_VSIM,
   PMU6238_LDO_VOLTAGE_VRTC1,
   PMU6238_LDO_VOLTAGE_VRTC2,
   PMU6238_LDO_VOLTAGE_VUSB,
   PMU6238_LDO_VOLTAGE_VBT,
   PMU6238_LDO_VOLTAGE_VCAMD,
   PMU6238_LDO_VOLTAGE_VCAMA,
   PMU6238_LDO_VOLTAGE_VSIM2
}PMU6238_LDO_VOLTAGE_TYPE;


typedef enum
{
   PMU6238_LDO_ENABLE_VRF_ON_SEL = 0,
   PMU6238_LDO_ENABLE_VRF_EN,
   PMU6238_LDO_ENABLE_VTCXO_ON_SEL,
   PMU6238_LDO_ENABLE_VTCXO_EN,
   PMU6238_LDO_ENABLE_VUSB,
   PMU6238_LDO_ENABLE_VBT,
   PMU6238_LDO_ENABLE_VCAM_D,
   PMU6238_LDO_ENABLE_VCAM_A,
   PMU6238_LDO_ENABLE_VSIM1,
   PMU6238_LDO_ENABLE_VSIM2
}PMU6238_LDO_ENABLE;


typedef enum
{
   PMU6238_DC_CONTROL_GAINP = 0,
   PMU6238_DC_CONTROL_GAIN,
   PMU6238_DC_CONTROL_GAIND,
   PMU6238_DC_CONTROL_DIR_CTRL_EN,
   PMU6238_DC_CONTROL_DCVCK_SEL,
   PMU6238_DC_CONTROL_ISEL,
   PMU6238_DC_CONTROL_ADJCKSEL,
   PMU6238_DC_CONTROL_MODESET,
   PMU6238_DC_CONTROL_MODEEN,
   PMU6238_DC_CONTROL_PFMSEL_0_3,
   PMU6238_DC_CONTROL_PFMSEL_4_6,
   PMU6238_DC_CONTROL_IASEL,
   PMU6238_DC_CONTROL_SLEW_CTRL
}PMU6238_DC_CONTROL_TYPE;

typedef enum
{
   PMU6238_BIAS_CALIBRATE_VRF = 0,
   PMU6238_BIAS_CALIBRATE_VM,
   PMU6238_BIAS_CALIBRATE_VIO,
   PMU6238_BIAS_CALIBRATE_VA,
   PMU6238_BIAS_CALIBRATE_VTCXO,
   PMU6238_BIAS_CALIBRATE_VSIM,
   PMU6238_BIAS_CALIBRATE_VUSB,
   PMU6238_BIAS_CALIBRATE_VBT,
   PMU6238_BIAS_CALIBRATE_VCAMD,
   PMU6238_BIAS_CALIBRATE_VCAMA,
   PMU6238_BIAS_CALIBRATE_VSIM2
}PMU6238_BIAS_CALIBRATE_TYPE;





typedef enum
{
     MT6326PMU_READ_REG
    ,MT6326PMU_WRITE_REG
 ,MT6326PMU_MAX_NUM
}EM_MT6326PMU_REQ_ENUM;





typedef enum
{
     MT6253PMU_READ_REG
    ,MT6253PMU_WRITE_REG
    ,MT6253PMU_MAX_NUM
}EM_MT6253PMU_REQ_ENUM;
# 2136 "interface/service/nvram/nvram_editor_data_item.h" 2
# 1 "interface/modem/general/tcm_api.h" 1
# 112 "interface/modem/general/tcm_api.h"
# 1 "./mtk_rel/HCT6737M_65_N/LWG_DSDS/BASIC/mcd/mcd_l3_inc_gprs_struct.h" 1
# 57 "./mtk_rel/HCT6737M_65_N/LWG_DSDS/BASIC/mcd/mcd_l3_inc_gprs_struct.h"
typedef struct _concise_qos_struct
{
 kal_uint8 reliability_class;
 kal_uint8 peak_throughput;
} concise_qos_struct;


typedef struct _qos_struct
{
 kal_uint8 qos_length;
 kal_uint8 unused1;
 kal_uint8 delay_class;
 kal_uint8 reliability_class;
 kal_uint8 peak_throughput;
 kal_uint8 unused2;
 kal_uint8 precedence_class;
 kal_uint8 unused3;
 kal_uint8 mean_throughput;
 kal_uint8 traffic_class;
 kal_uint8 delivery_order;
 kal_uint8 delivery_of_err_sdu;
 kal_uint8 max_sdu_size;
 kal_uint8 max_bitrate_up_lnk;
 kal_uint8 max_bitrate_down_lnk;
 kal_uint8 residual_bit_err_rate;
 kal_uint8 sdu_err_ratio;
 kal_uint8 transfer_delay;
 kal_uint8 traffic_hndl_priority;
 kal_uint8 guarntd_bit_rate_up_lnk;
 kal_uint8 guarntd_bit_rate_down_lnk;
 kal_uint8 unused4;
 kal_uint8 signalling_indication;
 kal_uint8 source_statistics_descriptor;
 kal_uint8 ext_max_bitrate_down_lnk;
 kal_uint8 ext_guarntd_bit_rate_down_lnk;
 kal_uint8 ext_max_bitrate_up_lnk;
 kal_uint8 ext_guarntd_bit_rate_up_lnk;
} qos_struct;
# 113 "interface/modem/general/tcm_api.h" 2



typedef enum
{
    TCM_REQ_QOS = 0,
    TCM_MIN_QOS,
    TCM_NEG_QOS
} tcm_qos_type_enum;


void tcm_qos_R99_to_R98( qos_struct *s, tcm_qos_type_enum qos_type );




kal_bool l4ctcm_decode_sdu_size(kal_uint16 val, kal_uint16 *size_ptr);


kal_bool l4ctcm_encode_bit_rate(kal_uint32 rate, kal_uint16 *val_ptr);





kal_bool l4ctcm_decode_bit_rate(kal_uint16 val, kal_uint32 *rate_ptr);




kal_bool l4ctcm_decode_transfer_delay(kal_uint16 val, kal_uint16 *delay_ptr);



kal_bool tcm_pdp_decode_qos_transfer_delay(kal_uint16 val, kal_uint16 *delay_ptr);
kal_bool tcm_pdp_decode_qos_bit_rate(kal_uint16 val, kal_uint32 *rate_ptr);




typedef struct
{



    kal_uint8 qos_length;
    kal_uint8 unused1;

    kal_uint8 delay_class;
# 171 "interface/modem/general/tcm_api.h"
    kal_uint8 reliability_class;
# 182 "interface/modem/general/tcm_api.h"
    kal_uint8 peak_throughput;
# 197 "interface/modem/general/tcm_api.h"
    kal_uint8 unused2;

    kal_uint8 precedence_class;
# 208 "interface/modem/general/tcm_api.h"
    kal_uint8 unused3;

    kal_uint8 mean_throughput;
# 219 "interface/modem/general/tcm_api.h"
    kal_uint8 traffic_class;
# 229 "interface/modem/general/tcm_api.h"
    kal_uint8 delivery_order;







    kal_uint8 delivery_of_err_sdu;
# 246 "interface/modem/general/tcm_api.h"
    kal_uint8 max_sdu_size;
# 256 "interface/modem/general/tcm_api.h"
    kal_uint8 max_bitrate_up_lnk;

    kal_uint8 max_bitrate_down_lnk;

    kal_uint8 residual_bit_err_rate;
# 272 "interface/modem/general/tcm_api.h"
    kal_uint8 sdu_err_ratio;
# 284 "interface/modem/general/tcm_api.h"
    kal_uint8 transfer_delay;

    kal_uint8 traffic_hndl_priority;
# 295 "interface/modem/general/tcm_api.h"
    kal_uint8 guarntd_bit_rate_up_lnk;

    kal_uint8 guarntd_bit_rate_down_lnk;

    kal_uint8 unused4;

    kal_uint8 signalling_indication;







    kal_uint8 source_statistics_descriptor;







    kal_uint8 ext_max_bitrate_down_lnk;

    kal_uint8 ext_guarntd_bit_rate_down_lnk;

    kal_uint8 ext_max_bitrate_up_lnk;

    kal_uint8 ext_guarntd_bit_rate_up_lnk;
} nvram_editor_qos_struct;


typedef struct {
    kal_uint8 qci;
    kal_uint8 unused1;
    kal_uint8 unused2;
    kal_uint8 unused3;
    kal_uint8 max_bitrate_up_lnk;
    kal_uint8 max_bitrate_down_lnk;
    kal_uint8 guarntd_bit_rate_up_lnk;
    kal_uint8 guarntd_bit_rate_down_lnk;
    kal_uint8 ext_max_bitrate_up_lnk;
    kal_uint8 ext_max_bitrate_down_lnk;
    kal_uint8 ext_guarntd_bit_rate_up_lnk;
    kal_uint8 ext_guarntd_bit_rate_down_lnk;
    kal_uint8 ext2_max_bitrate_up_lnk;
    kal_uint8 ext2_max_bitrate_down_lnk;
    kal_uint8 ext2_guarntd_bit_rate_up_lnk;
    kal_uint8 ext2_guarntd_bit_rate_down_lnk;
} nvram_editor_eps_qos_struct;



typedef struct
{
    nvram_editor_qos_struct req_qos;
    nvram_editor_qos_struct min_qos;
} tcm_ps_qos_profile_struct;
# 2137 "interface/service/nvram/nvram_editor_data_item.h" 2



# 1 "interface/modem/general/ps_public_struct.h" 1
# 2141 "interface/service/nvram/nvram_editor_data_item.h" 2
# 1 "interface/service/nvram/nvram_data_items.h" 1
# 2142 "interface/service/nvram/nvram_editor_data_item.h" 2






# 1 "interface/driver/peripheral/adc_cali.h" 1
# 80 "interface/driver/peripheral/adc_cali.h"
typedef struct
{


   kal_int32 ADCSlope[6];
   kal_int32 ADCOffset[6];
}ADC_CALIDATA;
# 2149 "interface/service/nvram/nvram_editor_data_item.h" 2

# 1 "interface/sap/svc_sap.h" 1



# 1 "interface/sap/sap_range.h" 1



# 1 "interface/sap/cross_core/global_sap_range.h" 1
# 69 "interface/sap/cross_core/global_sap_range.h"
typedef enum {

    SAP_ID_GLOBAL_BEGIN = 0, SAP_ID_GLOBAL_NIL_CHECK_TAIL = SAP_ID_GLOBAL_BEGIN,
    SAP_ID_GLOBAL_MD1_BEGIN, SAP_ID_GLOBAL_MD1_TAIL = SAP_ID_GLOBAL_MD1_BEGIN + 31,
    SAP_ID_GLOBAL_MD2_BEGIN, SAP_ID_GLOBAL_MD2_TAIL = SAP_ID_GLOBAL_MD2_BEGIN + 31,
    SAP_ID_GLOBAL_MD3_BEGIN, SAP_ID_GLOBAL_MD3_TAIL = SAP_ID_GLOBAL_MD3_BEGIN + 31,
    SAP_ID_GLOBAL_TAIL,

}GLOBAL_SAP_ID_TYPE;

typedef unsigned int sap_global_id_boundary_check1[98 - SAP_ID_GLOBAL_TAIL];
# 5 "interface/sap/sap_range.h" 2

typedef enum {
 SAP_ID_XXX_CODE_BASE = 98,

 SAP_ID_SVC_CODE_BEGIN = SAP_ID_XXX_CODE_BASE, SAP_ID_SVC_CODE_TAIL = SAP_ID_SVC_CODE_BEGIN + 10,

 SAP_ID_MD_CODE_BEGIN, SAP_ID_MD_CODE_TAIL = SAP_ID_MD_CODE_BEGIN + 250 + 250,

 SAP_ID_MD_SVC_CODE_BEGIN, SAP_ID_MD_SVC_CODE_TAIL = SAP_ID_MD_SVC_CODE_BEGIN + 20,

 SAP_ID_MD_DRV_CODE_BEGIN, SAP_ID_MD_DRV_CODE_TAIL = SAP_ID_MD_DRV_CODE_BEGIN + 30,

 SAP_ID_MD_MMI_CODE_BEGIN, SAP_ID_MD_MMI_CODE_TAIL = SAP_ID_MD_MMI_CODE_BEGIN + 40,

 SAP_ID_MD_MW_CODE_BEGIN, SAP_ID_MD_MW_CODE_TAIL = SAP_ID_MD_MW_CODE_BEGIN + 100,

 SAP_ID_MW_CODE_BEGIN, SAP_ID_MW_CODE_TAIL = SAP_ID_MW_CODE_BEGIN + 50 + 100,

 SAP_ID_DRV_CODE_BEGIN, SAP_ID_DRV_CODE_TAIL = SAP_ID_DRV_CODE_BEGIN + 200,


 SAP_ID_SYSSERVICE_CODE_BEGIN, SAP_ID_SYSSERVICE_CODE_TAIL = SAP_ID_SYSSERVICE_CODE_BEGIN + 10,

 SAP_ID_CODE_END,
}SAP_ID_TYPE;



typedef unsigned int sap_id_boundary_check1[(0xFFF -1) - SAP_ID_CODE_END];
# 5 "interface/sap/svc_sap.h" 2
# 1 "interface/sap/cross_core/global_sap.h" 1
# 67 "interface/sap/cross_core/global_sap.h"
# 1 "interface/sap/cross_core/global_sap_range.h" 1
# 68 "interface/sap/cross_core/global_sap.h" 2

typedef enum __cgen_sap_type_id_SAP_ID_GLOBAL_BEGIN{SAP_TAG_SAP_ID_GLOBAL_BEGIN = SAP_ID_GLOBAL_BEGIN,

    INVALID_SAP = SAP_ID_GLOBAL_BEGIN,
SAP_ID_CGEN_PARSE_LAST_ID=SAP_ID_GLOBAL_NIL_CHECK_TAIL }_cgen_sap_type_id_SAP_ID_GLOBAL_NIL_CHECK_TAIL;

typedef enum __cgen_sap_type_id_SAP_ID_GLOBAL_MD1_BEGIN{SAP_TAG_SAP_ID_GLOBAL_MD1_BEGIN = SAP_ID_GLOBAL_MD1_BEGIN,
# 1 "interface/sap/cross_core/md1_sap.h" 1
# 76 "interface/sap/cross_core/global_sap.h" 2
    SAP_TAG_SAP_ID_GLOBAL_MD1_TAIL,
SAP_ID_CGEN_PARSE_LAST_ID=SAP_ID_GLOBAL_MD1_TAIL }_cgen_sap_type_id_SAP_ID_GLOBAL_MD1_TAIL;

typedef enum __cgen_sap_type_id_SAP_ID_GLOBAL_MD2_BEGIN{SAP_TAG_SAP_ID_GLOBAL_MD2_BEGIN = SAP_ID_GLOBAL_MD2_BEGIN,
# 1 "interface/sap/cross_core/md2_sap.h" 1
# 81 "interface/sap/cross_core/global_sap.h" 2
    SAP_TAG_SAP_ID_GLOBAL_MD2_TAIL,
SAP_ID_CGEN_PARSE_LAST_ID=SAP_ID_GLOBAL_MD2_TAIL }_cgen_sap_type_id_SAP_ID_GLOBAL_MD2_TAIL;

typedef enum __cgen_sap_type_id_SAP_ID_GLOBAL_MD3_BEGIN{SAP_TAG_SAP_ID_GLOBAL_MD3_BEGIN = SAP_ID_GLOBAL_MD3_BEGIN,
# 1 "interface/sap/cross_core/md3_sap.h" 1
# 71 "interface/sap/cross_core/md3_sap.h"
    SIM_UIM_SAP,
    UIM_SIM_SAP,
    C2K_LTE_SAP,
    GMSS_CSS_SAP,
    LTE_C2K_SAP,
    RAC_CPSDM_SAP,
    CLC_EAS_SAP,
    RRM_VAL_SAP,
    URR_VAL_SAP,
    ERRC_VAL_SAP,
# 86 "interface/sap/cross_core/global_sap.h" 2
    SAP_TAG_SAP_ID_GLOBAL_MD3_TAIL,
SAP_ID_CGEN_PARSE_LAST_ID=SAP_ID_GLOBAL_MD3_TAIL }_cgen_sap_type_id_SAP_ID_GLOBAL_MD3_TAIL;
# 6 "interface/sap/svc_sap.h" 2

typedef enum __cgen_sap_type_id_SAP_ID_SVC_CODE_BEGIN{SAP_TAG_SAP_ID_SVC_CODE_BEGIN = SAP_ID_SVC_CODE_BEGIN,
 INLINE_ILM_SAP,
 FS_SAP,
 FT_TST_SAP,
 PS_NVRAM_SAP,
 STACK_SIM_TIMER_SAP,
 STACK_TIMER_SAP,

 DHL_ETSTM_SAP,
 ETSTM_DHL_SAP,
 DHL_MDDBG_SAP,
 MDDBG_DHL_SAP,
SAP_ID_CGEN_PARSE_LAST_ID=SAP_ID_SVC_CODE_TAIL }_cgen_sap_type_id_SAP_ID_SVC_CODE_TAIL;

typedef enum __cgen_sap_type_id_SAP_ID_SYSSERVICE_CODE_BEGIN{SAP_TAG_SAP_ID_SYSSERVICE_CODE_BEGIN = SAP_ID_SYSSERVICE_CODE_BEGIN,
   LAST_SAP_CODE,
SAP_ID_CGEN_PARSE_LAST_ID=SAP_ID_SYSSERVICE_CODE_TAIL }_cgen_sap_type_id_SAP_ID_SYSSERVICE_CODE_TAIL;
# 2151 "interface/service/nvram/nvram_editor_data_item.h" 2

# 1 "custom/modem/common/ps/ul1_nvram_def.h" 1
# 200 "custom/modem/common/ps/ul1_nvram_def.h"
typedef enum
{
    NVRAM_EF_UL1_RF_CUSTPACK_DATA_SELECT_LID = (0x0400 | (0x00FF & 0)),
    NVRAM_EF_UL1_RF_CUSTOM_DATA_LID = (0x0400 | (0x00FF & 1)),
    NVRAM_EF_UL1_3G_RF_PARAMETER_LID = (0x0400 | (0x00FF & 2)),
    NVRAM_EF_UL1_IOT_CUSTOMIZATION_LID = (0x0400 | (0x00FF & 3)),
    NVRAM_EF_UL1_HSPA_CATEGORY_LID = (0x0400 | (0x00FF & 4)),
    NVRAM_EF_UL1_MIPI_TPC_START = (0x0400 | (0x00FF & 5)),
    NVRAM_EF_UL1_MIPI_TPC_HIGHBAND1_LID = NVRAM_EF_UL1_MIPI_TPC_START,
    NVRAM_EF_UL1_MIPI_TPC_HIGHBAND2_LID,
    NVRAM_EF_UL1_MIPI_TPC_HIGHBAND3_LID,
    NVRAM_EF_UL1_MIPI_TPC_LOWBAND1_LID,
    NVRAM_EF_UL1_MIPI_TPC_LOWBAND2_LID,
    NVRAM_EF_UL1_MIPI_TPC_END = NVRAM_EF_UL1_MIPI_TPC_LOWBAND2_LID,
    NVRAM_EF_UL1_MIPI_ET_START = (0x0400 | (0x00FF & 10)),
    NVRAM_EF_UL1_MIPI_ET_HIGHBAND1_LID = NVRAM_EF_UL1_MIPI_ET_START,
    NVRAM_EF_UL1_MIPI_ET_HIGHBAND2_LID,
    NVRAM_EF_UL1_MIPI_ET_HIGHBAND3_LID,
    NVRAM_EF_UL1_MIPI_ET_LOWBAND1_LID,
    NVRAM_EF_UL1_MIPI_ET_LOWBAND2_LID,
    NVRAM_EF_UL1_MIPI_ET_END = NVRAM_EF_UL1_MIPI_ET_LOWBAND2_LID,
    NVRAM_EF_UL1_MIPI_RX_EVENT_START = (0x0400 | (0x00FF & 15)),
    NVRAM_EF_UL1_MIPI_RX_EVENT_HIGHBAND1_LID = NVRAM_EF_UL1_MIPI_RX_EVENT_START,
    NVRAM_EF_UL1_MIPI_RX_EVENT_HIGHBAND2_LID,
    NVRAM_EF_UL1_MIPI_RX_EVENT_HIGHBAND3_LID,
    NVRAM_EF_UL1_MIPI_RX_EVENT_LOWBAND1_LID,
    NVRAM_EF_UL1_MIPI_RX_EVENT_LOWBAND2_LID,
    NVRAM_EF_UL1_MIPI_RX_EVENT_END = NVRAM_EF_UL1_MIPI_RX_EVENT_LOWBAND2_LID,
    NVRAM_EF_UL1_MIPI_RX_DATA_START = (0x0400 | (0x00FF & 20)),
    NVRAM_EF_UL1_MIPI_RX_DATA_HIGHBAND1_LID = NVRAM_EF_UL1_MIPI_RX_DATA_START,
    NVRAM_EF_UL1_MIPI_RX_DATA_HIGHBAND2_LID,
    NVRAM_EF_UL1_MIPI_RX_DATA_HIGHBAND3_LID,
    NVRAM_EF_UL1_MIPI_RX_DATA_LOWBAND1_LID,
    NVRAM_EF_UL1_MIPI_RX_DATA_LOWBAND2_LID,
    NVRAM_EF_UL1_MIPI_RX_DATA_END = NVRAM_EF_UL1_MIPI_RX_DATA_LOWBAND2_LID,
    NVRAM_EF_UL1_MIPI_TX_EVENT_START = (0x0400 | (0x00FF & 25)),
    NVRAM_EF_UL1_MIPI_TX_EVENT_HIGHBAND1_LID = NVRAM_EF_UL1_MIPI_TX_EVENT_START,
    NVRAM_EF_UL1_MIPI_TX_EVENT_HIGHBAND2_LID,
    NVRAM_EF_UL1_MIPI_TX_EVENT_HIGHBAND3_LID,
    NVRAM_EF_UL1_MIPI_TX_EVENT_LOWBAND1_LID,
    NVRAM_EF_UL1_MIPI_TX_EVENT_LOWBAND2_LID,
    NVRAM_EF_UL1_MIPI_TX_EVENT_END = NVRAM_EF_UL1_MIPI_TX_EVENT_LOWBAND2_LID,
    NVRAM_EF_UL1_MIPI_TX_DATA_START = (0x0400 | (0x00FF & 30)),
    NVRAM_EF_UL1_MIPI_TX_DATA_HIGHBAND1_LID = NVRAM_EF_UL1_MIPI_TX_DATA_START,
    NVRAM_EF_UL1_MIPI_TX_DATA_HIGHBAND2_LID,
    NVRAM_EF_UL1_MIPI_TX_DATA_HIGHBAND3_LID,
    NVRAM_EF_UL1_MIPI_TX_DATA_LOWBAND1_LID,
    NVRAM_EF_UL1_MIPI_TX_DATA_LOWBAND2_LID,
    NVRAM_EF_UL1_MIPI_TX_DATA_END = NVRAM_EF_UL1_MIPI_TX_DATA_LOWBAND2_LID,
    NVRAM_EF_UL1_MIPI_ASM_ISOLATION_START = (0x0400 | (0x00FF & 35)),
    NVRAM_EF_UL1_MIPI_ASM_ISOLATION_HIGHBAND1_LID = NVRAM_EF_UL1_MIPI_ASM_ISOLATION_START,
    NVRAM_EF_UL1_MIPI_ASM_ISOLATION_HIGHBAND2_LID,
    NVRAM_EF_UL1_MIPI_ASM_ISOLATION_HIGHBAND3_LID,
    NVRAM_EF_UL1_MIPI_ASM_ISOLATION_LOWBAND1_LID,
    NVRAM_EF_UL1_MIPI_ASM_ISOLATION_LOWBAND2_LID,
    NVRAM_EF_UL1_MIPI_ASM_ISOLATION_END = NVRAM_EF_UL1_MIPI_ASM_ISOLATION_LOWBAND2_LID,
    NVRAM_EF_UL1_MIPI_INIT_CW_LID = (0x0400 | (0x00FF & 40)),
    NVRAM_EF_UL1_MIPI_SLEEP_CW_LID = (0x0400 | (0x00FF & 41)),
    NVRAM_EF_UL1_MIPI_ET_ON_CW_LID = (0x0400 | (0x00FF & 42)),
    NVRAM_EF_UL1_MIPI_ET_OFF_CW_LID = (0x0400 | (0x00FF & 43)),
    NVRAM_EF_UL1_VPA_SRC_SEL_START = (0x0400 | (0x00FF & 44)),
    NVRAM_EF_UL1_VPA_SRC_SEL_HIGHBAND1_LID = NVRAM_EF_UL1_VPA_SRC_SEL_START,
    NVRAM_EF_UL1_VPA_SRC_SEL_HIGHBAND2_LID,
    NVRAM_EF_UL1_VPA_SRC_SEL_HIGHBAND3_LID,
    NVRAM_EF_UL1_VPA_SRC_SEL_LOWBAND1_LID,
    NVRAM_EF_UL1_VPA_SRC_SEL_LOWBAND2_LID,
    NVRAM_EF_UL1_VPA_SRC_SEL_END = NVRAM_EF_UL1_VPA_SRC_SEL_LOWBAND2_LID,
    NVRAM_EF_UL1_TAS_RF_LID = (0x0400 | (0x00FF & 49)),
    NVRAM_EF_UL1_TAS_CUSTOM_LID = (0x0400 | (0x00FF & 50)),




    NVRAM_EF_UL1_3G_LAST_LID = (0x0400 | (0x00FF & 255))
}nvram_lid_ul1_enum;



typedef enum
{
   NVRAM_EF_UL1_TEMP_DAC_LID = (0x0B00 | (0x00FF & 0)),
   NVRAM_EF_UL1_PATHLOSS_START,
   NVRAM_EF_UL1_PATHLOSS_BAND1_LID = NVRAM_EF_UL1_PATHLOSS_START,
   NVRAM_EF_UL1_PATHLOSS_BAND2_LID,
   NVRAM_EF_UL1_PATHLOSS_BAND3_LID,
   NVRAM_EF_UL1_PATHLOSS_BAND4_LID,
   NVRAM_EF_UL1_PATHLOSS_BAND5_LID,
   NVRAM_EF_UL1_PATHLOSS_BAND6_LID,
   NVRAM_EF_UL1_PATHLOSS_BAND7_LID,
   NVRAM_EF_UL1_PATHLOSS_BAND8_LID,
   NVRAM_EF_UL1_PATHLOSS_BAND9_LID,
   NVRAM_EF_UL1_PATHLOSS_BAND10_LID,
   NVRAM_EF_UL1_PATHLOSS_BAND11_LID,
   NVRAM_EF_UL1_PATHLOSS_BAND12_LID,
   NVRAM_EF_UL1_PATHLOSS_BAND13_LID,
   NVRAM_EF_UL1_PATHLOSS_BAND14_LID,
   NVRAM_EF_UL1_PATHLOSS_BAND15_LID,
   NVRAM_EF_UL1_PATHLOSS_BAND16_LID,
   NVRAM_EF_UL1_PATHLOSS_BAND17_LID,
   NVRAM_EF_UL1_PATHLOSS_BAND18_LID,
   NVRAM_EF_UL1_PATHLOSS_BAND19_LID,
   NVRAM_EF_UL1_PATHLOSS_END = NVRAM_EF_UL1_PATHLOSS_BAND19_LID,
   NVRAM_EF_UL1_TXDAC_START,
   NVRAM_EF_UL1_TXDAC_BAND1_LID = NVRAM_EF_UL1_TXDAC_START,
   NVRAM_EF_UL1_TXDAC_BAND2_LID,
   NVRAM_EF_UL1_TXDAC_BAND3_LID,
   NVRAM_EF_UL1_TXDAC_BAND4_LID,
   NVRAM_EF_UL1_TXDAC_BAND5_LID,
   NVRAM_EF_UL1_TXDAC_BAND6_LID,
   NVRAM_EF_UL1_TXDAC_BAND7_LID,
   NVRAM_EF_UL1_TXDAC_BAND8_LID,
   NVRAM_EF_UL1_TXDAC_BAND9_LID,
   NVRAM_EF_UL1_TXDAC_BAND10_LID,
   NVRAM_EF_UL1_TXDAC_BAND11_LID,
   NVRAM_EF_UL1_TXDAC_BAND12_LID,
   NVRAM_EF_UL1_TXDAC_BAND13_LID,
   NVRAM_EF_UL1_TXDAC_BAND14_LID,
   NVRAM_EF_UL1_TXDAC_BAND15_LID,
   NVRAM_EF_UL1_TXDAC_BAND16_LID,
   NVRAM_EF_UL1_TXDAC_BAND17_LID,
   NVRAM_EF_UL1_TXDAC_BAND18_LID,
   NVRAM_EF_UL1_TXDAC_BAND19_LID,
   NVRAM_EF_UL1_TXDAC_END = NVRAM_EF_UL1_TXDAC_BAND19_LID,
   NVRAM_EF_UL1_TXPAOCTLEV_START,
   NVRAM_EF_UL1_TXPAOCTLEV_BAND1_LID = NVRAM_EF_UL1_TXPAOCTLEV_START,
   NVRAM_EF_UL1_TXPAOCTLEV_BAND2_LID,
   NVRAM_EF_UL1_TXPAOCTLEV_BAND3_LID,
   NVRAM_EF_UL1_TXPAOCTLEV_BAND4_LID,
   NVRAM_EF_UL1_TXPAOCTLEV_BAND5_LID,
   NVRAM_EF_UL1_TXPAOCTLEV_BAND6_LID,
   NVRAM_EF_UL1_TXPAOCTLEV_BAND7_LID,
   NVRAM_EF_UL1_TXPAOCTLEV_BAND8_LID,
   NVRAM_EF_UL1_TXPAOCTLEV_BAND9_LID,
   NVRAM_EF_UL1_TXPAOCTLEV_BAND10_LID,
   NVRAM_EF_UL1_TXPAOCTLEV_BAND11_LID,
   NVRAM_EF_UL1_TXPAOCTLEV_BAND12_LID,
   NVRAM_EF_UL1_TXPAOCTLEV_BAND13_LID,
   NVRAM_EF_UL1_TXPAOCTLEV_BAND14_LID,
   NVRAM_EF_UL1_TXPAOCTLEV_BAND15_LID,
   NVRAM_EF_UL1_TXPAOCTLEV_BAND16_LID,
   NVRAM_EF_UL1_TXPAOCTLEV_BAND17_LID,
   NVRAM_EF_UL1_TXPAOCTLEV_BAND18_LID,
   NVRAM_EF_UL1_TXPAOCTLEV_BAND19_LID,
   NVRAM_EF_UL1_TXPAOCTLEV_END = NVRAM_EF_UL1_TXPAOCTLEV_BAND19_LID,

   NVRAM_EF_UL1_PATHLOSS2_START,
   NVRAM_EF_UL1_PATHLOSS2_BAND1_LID = NVRAM_EF_UL1_PATHLOSS2_START,
   NVRAM_EF_UL1_PATHLOSS2_BAND2_LID,
   NVRAM_EF_UL1_PATHLOSS2_BAND3_LID,
   NVRAM_EF_UL1_PATHLOSS2_BAND4_LID,
   NVRAM_EF_UL1_PATHLOSS2_BAND5_LID,
   NVRAM_EF_UL1_PATHLOSS2_BAND6_LID,
   NVRAM_EF_UL1_PATHLOSS2_BAND7_LID,
   NVRAM_EF_UL1_PATHLOSS2_BAND8_LID,
   NVRAM_EF_UL1_PATHLOSS2_BAND9_LID,
   NVRAM_EF_UL1_PATHLOSS2_BAND10_LID,
   NVRAM_EF_UL1_PATHLOSS2_BAND11_LID,
   NVRAM_EF_UL1_PATHLOSS2_BAND12_LID,
   NVRAM_EF_UL1_PATHLOSS2_BAND13_LID,
   NVRAM_EF_UL1_PATHLOSS2_BAND14_LID,
   NVRAM_EF_UL1_PATHLOSS2_BAND15_LID,
   NVRAM_EF_UL1_PATHLOSS2_BAND16_LID,
   NVRAM_EF_UL1_PATHLOSS2_BAND17_LID,
   NVRAM_EF_UL1_PATHLOSS2_BAND18_LID,
   NVRAM_EF_UL1_PATHLOSS2_BAND19_LID,
   NVRAM_EF_UL1_PATHLOSS2_END = NVRAM_EF_UL1_PATHLOSS2_BAND19_LID,

   NVRAM_EF_UL1_TXPADRIFTCOMP_START,
   NVRAM_EF_UL1_TXPADRIFTCOMP_BAND1_LID = NVRAM_EF_UL1_TXPADRIFTCOMP_START,
   NVRAM_EF_UL1_TXPADRIFTCOMP_BAND2_LID,
   NVRAM_EF_UL1_TXPADRIFTCOMP_BAND3_LID,
   NVRAM_EF_UL1_TXPADRIFTCOMP_BAND4_LID,
   NVRAM_EF_UL1_TXPADRIFTCOMP_BAND5_LID,
   NVRAM_EF_UL1_TXPADRIFTCOMP_BAND6_LID,
   NVRAM_EF_UL1_TXPADRIFTCOMP_BAND7_LID,
   NVRAM_EF_UL1_TXPADRIFTCOMP_BAND8_LID,
   NVRAM_EF_UL1_TXPADRIFTCOMP_BAND9_LID,
   NVRAM_EF_UL1_TXPADRIFTCOMP_BAND10_LID,
   NVRAM_EF_UL1_TXPADRIFTCOMP_BAND11_LID,
   NVRAM_EF_UL1_TXPADRIFTCOMP_BAND12_LID,
   NVRAM_EF_UL1_TXPADRIFTCOMP_BAND13_LID,
   NVRAM_EF_UL1_TXPADRIFTCOMP_BAND14_LID,
   NVRAM_EF_UL1_TXPADRIFTCOMP_BAND15_LID,
   NVRAM_EF_UL1_TXPADRIFTCOMP_BAND16_LID,
   NVRAM_EF_UL1_TXPADRIFTCOMP_BAND17_LID,
   NVRAM_EF_UL1_TXPADRIFTCOMP_BAND18_LID,
   NVRAM_EF_UL1_TXPADRIFTCOMP_BAND19_LID,
   NVRAM_EF_UL1_TXPADRIFTCOMP_END = NVRAM_EF_UL1_TXPADRIFTCOMP_BAND19_LID,

   NVRAM_EF_UL1_TXPRACHTMCOMP_START,
   NVRAM_EF_UL1_TXPRACHTMCOMP_BAND1_LID = NVRAM_EF_UL1_TXPRACHTMCOMP_START,
   NVRAM_EF_UL1_TXPRACHTMCOMP_BAND2_LID,
   NVRAM_EF_UL1_TXPRACHTMCOMP_BAND3_LID,
   NVRAM_EF_UL1_TXPRACHTMCOMP_BAND4_LID,
   NVRAM_EF_UL1_TXPRACHTMCOMP_BAND5_LID,
   NVRAM_EF_UL1_TXPRACHTMCOMP_BAND6_LID,
   NVRAM_EF_UL1_TXPRACHTMCOMP_BAND7_LID,
   NVRAM_EF_UL1_TXPRACHTMCOMP_BAND8_LID,
   NVRAM_EF_UL1_TXPRACHTMCOMP_BAND9_LID,
   NVRAM_EF_UL1_TXPRACHTMCOMP_BAND10_LID,
   NVRAM_EF_UL1_TXPRACHTMCOMP_BAND11_LID,
   NVRAM_EF_UL1_TXPRACHTMCOMP_BAND12_LID,
   NVRAM_EF_UL1_TXPRACHTMCOMP_BAND13_LID,
   NVRAM_EF_UL1_TXPRACHTMCOMP_BAND14_LID,
   NVRAM_EF_UL1_TXPRACHTMCOMP_BAND15_LID,
   NVRAM_EF_UL1_TXPRACHTMCOMP_BAND16_LID,
   NVRAM_EF_UL1_TXPRACHTMCOMP_BAND17_LID,
   NVRAM_EF_UL1_TXPRACHTMCOMP_BAND18_LID,
   NVRAM_EF_UL1_TXPRACHTMCOMP_BAND19_LID,
   NVRAM_EF_UL1_TXPRACHTMCOMP_END = NVRAM_EF_UL1_TXPRACHTMCOMP_BAND19_LID,

   NVRAM_EF_UL1_AFCDAC_START,
   NVRAM_EF_UL1_AFCDAC_LID = NVRAM_EF_UL1_AFCDAC_START,
   NVRAM_EF_UL1_AFCDAC_END = NVRAM_EF_UL1_AFCDAC_LID,

   NVRAM_EF_UL1_AFCCAP_START,
   NVRAM_EF_UL1_AFCCAP_LID = NVRAM_EF_UL1_AFCCAP_START,
   NVRAM_EF_UL1_AFCCAP_END = NVRAM_EF_UL1_AFCCAP_LID,

   NVRAM_EF_UL1_TXPOWEROFFSET_START,
   NVRAM_EF_UL1_TXPOWEROFFSET_BAND1_LID = NVRAM_EF_UL1_TXPOWEROFFSET_START,
   NVRAM_EF_UL1_TXPOWEROFFSET_BAND2_LID,
   NVRAM_EF_UL1_TXPOWEROFFSET_BAND3_LID,
   NVRAM_EF_UL1_TXPOWEROFFSET_BAND4_LID,
   NVRAM_EF_UL1_TXPOWEROFFSET_BAND5_LID,
   NVRAM_EF_UL1_TXPOWEROFFSET_BAND6_LID,
   NVRAM_EF_UL1_TXPOWEROFFSET_BAND7_LID,
   NVRAM_EF_UL1_TXPOWEROFFSET_BAND8_LID,
   NVRAM_EF_UL1_TXPOWEROFFSET_BAND9_LID,
   NVRAM_EF_UL1_TXPOWEROFFSET_BAND10_LID,
   NVRAM_EF_UL1_TXPOWEROFFSET_BAND11_LID,
   NVRAM_EF_UL1_TXPOWEROFFSET_BAND12_LID,
   NVRAM_EF_UL1_TXPOWEROFFSET_BAND13_LID,
   NVRAM_EF_UL1_TXPOWEROFFSET_BAND14_LID,
   NVRAM_EF_UL1_TXPOWEROFFSET_BAND15_LID,
   NVRAM_EF_UL1_TXPOWEROFFSET_BAND16_LID,
   NVRAM_EF_UL1_TXPOWEROFFSET_BAND17_LID,
   NVRAM_EF_UL1_TXPOWEROFFSET_BAND18_LID,
   NVRAM_EF_UL1_TXPOWEROFFSET_BAND19_LID,
   NVRAM_EF_UL1_TXPOWEROFFSET_END = NVRAM_EF_UL1_TXPOWEROFFSET_BAND19_LID,

   NVRAM_EF_UL1_3G_CAL_LAST_LID = (0x0B00 | (0x00FF & 255))
}nvram_lid_ul1_cal_enum;
# 808 "custom/modem/common/ps/ul1_nvram_def.h"
typedef struct
{
   kal_uint8 dpa_cat;
   kal_uint8 upa_cat;
} nvram_ef_ul1_hspa_category_struct;
# 821 "custom/modem/common/ps/ul1_nvram_def.h"
# 1 "interface/modem/l1/fdd/external/ul1d_rf_common.h" 1
# 103 "interface/modem/l1/fdd/external/ul1d_rf_common.h"
# 1 "custom/modem/ul1_rf/MT6735_UMTS_FDD_MT6169_CUSTOM/ul1d_custom_rf.h" 1
# 38 "custom/modem/ul1_rf/MT6735_UMTS_FDD_MT6169_CUSTOM/ul1d_custom_rf.h"
# 1 "custom/modem/ul1_rf/MT6735_UMTS_FDD_MT6169_CUSTOM/ul1d_custom_mipi.h" 1
# 39 "custom/modem/ul1_rf/MT6735_UMTS_FDD_MT6169_CUSTOM/ul1d_custom_rf.h" 2
# 104 "interface/modem/l1/fdd/external/ul1d_rf_common.h" 2
# 1 "custom/modem/ul1_rf/MT6735_UMTS_FDD_MT6169_CUSTOM/wcustomdata.h" 1
# 354 "custom/modem/ul1_rf/MT6735_UMTS_FDD_MT6169_CUSTOM/wcustomdata.h"
void UL1CUSTOM_ReplaceAuxAdcCalibrate(kal_uint32 adcDigitalValue, kal_int32 *volt);





extern void UL1CUSTOM_DynamicInitByGPIO(void *data);
extern void UL1CUSTOM_DynamicInitByADC(void *data);
extern void UL1CUSTOM_DynamicInitByNvramBarcode(void *data);
extern void UL1CUSTOM_GPIO_NON_SMART_PHONE_PIN_ACCESS(kal_int16 *gpio_pin);
# 105 "interface/modem/l1/fdd/external/ul1d_rf_common.h" 2
# 822 "custom/modem/common/ps/ul1_nvram_def.h" 2


    extern nvram_ltable_entry_struct logical_data_item_table_ul1[];
# 2153 "interface/service/nvram/nvram_editor_data_item.h" 2

# 1 "custom/modem/common/ps/custom_recovery_timer.h" 1
# 103 "custom/modem/common/ps/custom_recovery_timer.h"
extern const kal_uint32 RECOVERY_TIMER_INTERVAL[];






extern kal_uint8 mm_get_max_recovery_timer_num(void);
# 2155 "interface/service/nvram/nvram_editor_data_item.h" 2
# 2832 "interface/service/nvram/nvram_editor_data_item.h"
typedef struct
{
    kal_uint32 total_rx_data;
    kal_uint32 total_tx_data;
    kal_uint32 last_rx_data;
    kal_uint32 last_tx_data;
} nvram_ef_tcm_statistics_struct;
# 2847 "interface/service/nvram/nvram_editor_data_item.h"
typedef struct
{
 kal_uint8 als_line_id[2];
}nvram_ef_als_line_id_struct;


typedef struct
{
    kal_uint8 byte1;
    kal_uint8 byte2;
    kal_uint8 byte3;
    kal_uint8 byte4;
    kal_uint16 byte5_byte6;
    kal_uint8 byte7;
    kal_uint8 byte8;
    kal_uint8 byte9;
    kal_uint8 byte10;
    kal_uint8 byte11;
    kal_uint8 byte12;
    kal_uint8 byte13;
    kal_uint8 byte14;
    kal_uint8 byte15;
    kal_uint8 byte16;
    kal_uint8 byte17;
    kal_uint8 byte18;
    kal_uint8 byte19;
    kal_uint8 byte20;
} nvram_ef_classmark_racap_struct;

typedef struct
{
    kal_uint8 cfu_flag[2];
} nvram_ef_cfu_flag_struct;

typedef struct
{
    kal_uint8 cfu_flag[1];
} nvram_ef_csm_essp_struct;

typedef struct
{
    kal_uint8 message_waiting_indication_status[5];
    kal_uint8 pad;
} nvram_ef_smsal_mwis_struct;

typedef struct
{
    kal_uint8 nvram_ef_tst_filter[(4096-(2)-(8))];
} nvram_ef_tst_filter_struct;
typedef struct
{
    kal_uint8 nvram_ef_dhl_filter[(4096-(2)-(8))];
} nvram_ef_dhl_filter_struct;

typedef struct
{
    kal_uint8 gsm_band[1];
    kal_uint8 umts_band[4];
    kal_uint8 lte_band[8];
} nvram_ef_as_band_setting_struct;

typedef struct
{
    kal_uint8 raw_data[38];
} nvram_ef_eq_plmn_struct;

typedef struct
{
    kal_uint8 raw_data[6];
} nvram_ef_band_info_struct;

typedef struct
{
    kal_uint8 raw_data[250];
} nvram_ef_gas_workung_band_info_struct;

typedef struct
{
    kal_uint16 cbmi_mask;
    kal_uint16 cbmir_mask;
    kal_uint16 dcs_mask;
} nvram_ef_cb_mask_struct;

typedef struct
{
    kal_uint8 raw_data[(52+60)];
} nvram_ef_mm_eqplmn_locigprs_struct;

typedef struct
{
 kal_uint8 mcc1;
 kal_uint8 mcc2;
 kal_uint8 mcc3;
 kal_uint8 mnc1;
 kal_uint8 mnc2;
 kal_uint8 mnc3;
}nvram_plmn_id_struct;

typedef enum{
    NVRAM_EF_RAT_NONE = 0,
    NVRAM_EF_RAT_GSM = 1,
    NVRAM_EF_RAT_UMTS = 2,
    NVRAM_EF_RAT_GSM_UMTS = 3,
    NVRAM_EF_RAT_LTE = 4,
    NVRAM_EF_RAT_GSM_LTE = NVRAM_EF_RAT_GSM | NVRAM_EF_RAT_LTE,
    NVRAM_EF_RAT_UMTS_LTE = NVRAM_EF_RAT_UMTS | NVRAM_EF_RAT_LTE,
    NVRAM_EF_RAT_GSM_UMTS_LTE = NVRAM_EF_RAT_GSM | NVRAM_EF_RAT_UMTS | NVRAM_EF_RAT_LTE
}nvram_rat_enum;
# 2969 "interface/service/nvram/nvram_editor_data_item.h"
typedef struct
{
    nvram_plmn_id_struct plmn_id;
    nvram_rat_enum rat;
}nvram_plmn_id_rat_struct;


typedef enum
{
    RAT_CDMA2000_ALL = 0,
    RAT_3GPP_ALL = 1,
    RAT_CDMA2000_1xRTT = 2,
    RAT_CDMA2000_HRPD = 3,
    RAT_GERAN = 4,
    RAT_UTRAN = 5,
    RAT_EUTRAN = 6
} nvram_gmss_rat_enum;

typedef enum
{
    NVRAM_PRIO_CLASS_NONE = 0x00,
    NVRAM_PRIO_CLASS_RPLMN = 0x01,
    NVRAM_PRIO_CLASS_HOME = 0x02,
    NVRAM_PRIO_CLASS_R_H = 0x03,
    NVRAM_PRIO_CLASS_PREF = 0x04,
    NVRAM_PRIO_CLASS_R_P = 0x05,
    NVRAM_PRIO_CLASS_H_P = 0x06,
    NVRAM_PRIO_CLASS_R_H_P = 0x07,
    NVRAM_PRIO_CLASS_NOT_PREFERRED= 0x08,
    NVRAM_PRIO_CLASS_R_NP = 0x09,
    NVRAM_PRIO_CLASS_H_NP = 0x0A,
    NVRAM_PRIO_CLASS_R_H_NP = 0x0B,
    NVRAM_PRIO_CLASS_P_NP = 0x0C,
    NVRAM_PRIO_CLASS_R_P_NP = 0x0D,
    NVRAM_PRIO_CLASS_H_P_NP = 0x0E,
    NVRAM_PRIO_CLASS_R_H_P_NP = 0x0F,
    NVRAM_PRIO_CLASS_LIMITED = 0x10

} nvram_prio_class_enum;



typedef struct
{

    kal_uint8 mm_proc;

    kal_uint8 lr_result;

    kal_uint8 attempt_counter;

    kal_uint16 lr_cause;

    kal_uint32 time;
}nvram_proc_record_struct;

typedef struct
{
    nvram_plmn_id_struct plmn_id;
    nvram_proc_record_struct rat_status[3];
}nvram_histoy_table_entry_struct;

typedef struct
{
    kal_uint8 num_of_history_table_entry;
    nvram_histoy_table_entry_struct table[16];
}nvram_histoy_table_struct;

typedef struct
{
    nvram_gmss_rat_enum rat;
    nvram_plmn_id_struct loc;
    nvram_prio_class_enum prio_class;

} nvram_gmss_mru_info_struct;

typedef struct
{
    nvram_rat_enum rplmn_rat;
    kal_uint8 num_of_eq_plmn;
    nvram_plmn_id_struct eq_plmn[16];
    nvram_plmn_id_rat_struct csg_previous_rplmn;
    kal_uint32 csg_id;
    kal_uint32 recovery_timer_interval[19];





    nvram_histoy_table_struct history_table;
    nvram_gmss_mru_info_struct gmss_mru_info;
} nvram_ef_nwsel_data_struct;

typedef struct
{
    kal_uint8 speech_version;
    kal_uint8 speech_version_byte2;
    kal_uint8 umts_supported_speech;
    kal_uint8 umts_supported_speech_byte2;
    kal_uint8 data_cap1;
    kal_uint8 data_cap2;
    kal_uint8 channel_coding;
    kal_uint8 disable_call;
    kal_uint8 rr_cap;
    kal_uint8 mm_non_drx_timer_value;
} nvram_ef_mscap_struct;


typedef struct _nvram_ef_cb_ch_info_struct
{
    kal_uint8 cbmir_mask[4];
    kal_uint8 cbmir_me_mask[4];

    kal_uint8 dcs_mask[4];
    kal_uint16 dcs[30];

    kal_uint8 cbmi_me_mask[5];
    kal_uint8 cbmi_sim_mask[3];
    kal_uint16 cbmi[40];
    kal_uint16 cbmir[60];
} nvram_ef_cb_ch_info_struct;


typedef struct
{
    kal_uint32 data[4];
}nvram_ef_sim_assert_struct;

typedef struct
{
 kal_uint8 rtc_sec;
 kal_uint8 rtc_min;
 kal_uint8 rtc_hour;
 kal_uint8 rtc_day;
 kal_uint8 rtc_mon;
 kal_uint8 rtc_wday;
 kal_uint8 rtc_year;
} nvram_ef_rtc;


typedef struct
{
    kal_uint8 time_valid;
    nvram_ef_rtc rtc_time;
    kal_uint8 ticks_diff_valid;
    kal_int32 ticks_diff_per_hour;
} nvram_ef_rtc_calibration;


typedef struct
{
   kal_uint8 BluetoothAddress[6];
   kal_uint8 MinEncryptionSize[1];
   kal_uint8 MaxEncryptionSize[1];
   kal_uint8 HCITransportLayerParameters[3];
   kal_uint8 FixedPIN[16];
   kal_uint8 FixedPINLength[1];
   kal_uint8 SleepEnableMask[1];
   kal_uint8 LowPowerClockParameter[8];
   kal_uint8 PowerControlConfiguration[13];
   kal_uint8 SleepControlParameters[12];
   kal_uint8 DebugControl[4];
   kal_uint8 LCandRMOverrideEnable[4];
   kal_uint8 RadioRegisterOverride[6];
   kal_uint8 CodecConfiguration[8];
   kal_uint8 CVSDGainVolumeSettings[6];
   kal_uint8 VoiceSettings[2];
   kal_uint8 UserBaudRate[3];

   kal_uint8 LowPowerDriftRate[1];
   kal_uint8 MaxTxPowerLevel[1];
   kal_uint8 AdaptiveFrequencyHoppingParameters[29];
   kal_uint8 BufferSize[4];
   kal_uint8 GpioMapping[16];
   kal_uint8 GpioPolarity[4];
} nvram_ef_btradio_rfmd3500_struct;




typedef struct
{
    unsigned char BDAddr[6];
    unsigned char ClassOfDevice[3];
    unsigned char LinkKeyType[1];
    unsigned char UnitKey[16];
    unsigned char Encryption[3];
    unsigned char PinCodeType[1];
    unsigned char Voice[2];
    unsigned char Codec[1];
    unsigned char Radio[30];
    unsigned char Sleep[6];
    unsigned char MainOscillatorInfo[5];
    unsigned char LPOInfo[4];
    unsigned char AFH[9];
    unsigned char PTA[49];
    unsigned char WDT[2];
    unsigned char Debug[1];
    unsigned char UART[2];
} nvram_ef_btradio_mt6601_struct;




typedef struct
{
    unsigned char BDAddr[6];
    unsigned char CapId[1];
    unsigned char LinkKeyType[1];
    unsigned char UnitKey[16];
    unsigned char Encryption[3];
    unsigned char PinCodeType[1];
    unsigned char Voice[2];
    unsigned char Codec[1];
    unsigned char Radio[6];
    unsigned char Sleep[7];
    unsigned char Reserved[2];
} nvram_ef_btradio_mt6611_struct;
# 3285 "interface/service/nvram/nvram_editor_data_item.h"
typedef struct
{
    unsigned char BDAddr[6];
    unsigned char CapId[1];
    unsigned char LinkKeyType[1];
    unsigned char UnitKey[16];
    unsigned char Encryption[3];
    unsigned char PinCodeType[1];
    unsigned char Voice[2];
    unsigned char Codec[1];
    unsigned char Radio[6];
    unsigned char Sleep[7];
    unsigned char Reserved[2];
    unsigned char ECLK_SEL;
} nvram_ef_btradio_mtk_bt_chip_struct;
# 3331 "interface/service/nvram/nvram_editor_data_item.h"
typedef struct
{
    kal_uint8 data[8190];
} nvram_ef_net_par_struct;
# 3353 "interface/service/nvram/nvram_editor_data_item.h"
typedef struct
{
    kal_uint8 data[24];
} nvram_ef_umts_imsi_struct;


typedef struct
{
    kal_uint8 data[6];
} nvram_ef_umts_start_hfn_struct;


typedef struct
{

    kal_uint8 pdcp_support;
    kal_uint8 pdcp_maxHeaderCompressLength;

    kal_uint8 rlc_totalAmBufferSize;
    kal_uint8 rlc_maxWinodwSize;
    kal_uint8 rlc_maxAmEntityNumber;

    kal_uint8 ulTrch_modeSpecificInfoSelect;
    kal_uint8 ulTrch_maxNoBitsTransmitted;
    kal_uint8 ulTrch_maxConvCodeBitsTransmitted;
    kal_uint8 ulTrch_turboEncodingSupportSelect;
    kal_uint8 ulTrch_turboEncodingBitLength;
    kal_uint8 ulTrch_maxSimultaneousTransChs;
    kal_uint8 ulTrch_maxTransmittedBlocks;
    kal_uint8 ulTrch_maxNumberOfTFC;
    kal_uint8 ulTrch_maxNumberOfTF;
    kal_uint8 ulTrch_maxSimultaneousCCTrCHCount;

    kal_uint8 dlTrch_maxNoBitsReceived;
    kal_uint8 dlTrch_maxConvCodeBitsReceived;
    kal_uint8 dlTrch_turboDecodingSupportSelect;
    kal_uint8 dlTrch_turboDecodingBitLength;
    kal_uint8 dlTrch_maxSimultaneousTransChs;
    kal_uint8 dlTrch_maxSimultaneousCCTrCHCount;
    kal_uint8 dlTrch_maxReceivedTransportBlocks;
    kal_uint8 dlTrch_maxNumberOfTFC;
    kal_uint8 dlTrch_maxNumberOfTF;

    kal_uint8 wcdma_prefered_offset;
    kal_uint8 band_reserved2;
    kal_uint8 band_powerClass;
    kal_uint8 powerClass_reserved1;
    kal_uint8 powerClass_reserved2;

    kal_uint8 pdcp_losslessSRNSRelocationSupport;
    kal_uint8 cipher_cap1;
    kal_uint8 cipher_cap2;
    kal_uint8 integrity_cap1;
    kal_uint8 integrity_cap2;

    kal_uint8 rrce_feature_cap;
    kal_uint8 smart_paging_3g_fdd;
    kal_uint8 integrity_protection_3g_fdd;

    kal_uint8 access_stratum_release;

    kal_uint8 dlPhyCh_maxNoDPCH_PDSCH_Codes;

    kal_uint8 r3_cap1;
    kal_uint8 r3_cap2;
    kal_uint8 r3_cap3;



    kal_uint8 r4_cap1;
    kal_uint8 reverseCompressionDepthHighByte;
    kal_uint8 reverseCompressionDepthLowByte;




    kal_uint8 r5_cap1;




    kal_uint8 r6_cap1;




    kal_uint8 r7_cap1;
    kal_uint8 r7_cap2;




    kal_uint8 r8_cap1;
    kal_uint8 r8_cap2;


    kal_uint8 r9_cap1;


}nvram_ef_umts_usime_rrc_dynamic_struct;
# 3543 "interface/service/nvram/nvram_editor_data_item.h"
typedef struct
{
    kal_uint8 data[2000];
} nvram_ef_umts_frequency_repository_struct;



typedef struct
{
    kal_uint8 band[22];
} nvram_ef_umts_band_priority_struct;




typedef struct
{
    nvram_plmn_id_struct disable_PLMN[16];
} nvram_ef_umts_dmcr_setting_struct;

typedef struct
{
    nvram_plmn_id_struct enable_PLMN[16];
} nvram_ef_umts_sib_skip_setting_struct;
# 3582 "interface/service/nvram/nvram_editor_data_item.h"
typedef struct
{
    kal_uint8 data[2000];
} nvram_ef_prev_visited_cell_info_struct;

typedef struct
{
    kal_uint8 data[2500];
} nvram_ef_ue_csg_list_struct;
# 3600 "interface/service/nvram/nvram_editor_data_item.h"
typedef struct
{
    kal_uint16 frequency;
    kal_uint8 num_cell;
    kal_uint16 physical_cell_id[32];
    kal_uint32 cell_id[32];
}nvram_ef_umts_fingerprint_CSG_recored_struct;

typedef struct
{
    kal_uint8 ratmode;
    nvram_plmn_id_struct csg_plmn;
    kal_uint32 csg_id;
    kal_uint32 csg_cell_id;
    kal_uint32 csg_frequency;
    kal_uint16 csg_physical_cell_id;

    kal_uint32 timestamp;
    kal_bool isUpdateRequired;

    kal_uint8 num_freq;
    nvram_ef_umts_fingerprint_CSG_recored_struct record[4];
}nvram_ef_umts_fingerprint_CSG_cell_struct;

typedef struct
{
    kal_uint8 num_record;
    nvram_ef_umts_fingerprint_CSG_cell_struct CSG_phy_cell[8];
}nvram_ef_umts_fingerprint_entry_struct;


typedef struct {
    kal_uint8 la_code[2];
    kal_uint16 cell_id;
}gas_csg_fingerprint_cell_struct;

typedef struct {
    nvram_plmn_id_struct csg_plmn;
    kal_uint16 csg_frequency;
    kal_uint16 csg_physical_cell_id;
    kal_uint32 csg_id;
    kal_uint32 csg_cell_id;
    kal_uint32 systick;
    kal_uint8 rat;
    kal_uint8 num_fingerprint_cell;
    gas_csg_fingerprint_cell_struct fingerprint_cell[50];
}gas_umts_lte_csg_cell_struct;

typedef struct
{
    kal_uint8 num_csg_cell;
    gas_umts_lte_csg_cell_struct csg_cell[8];
} nvram_ef_gas_csg_fingerprint_struct;


typedef struct
{
    kal_uint8 L1_3G_CAL_DATA[8184];
}nvram_ef_l1_3g_cal_data_struct;
# 3678 "interface/service/nvram/nvram_editor_data_item.h"
typedef struct {
    kal_uint32 magic_head[4];
    kal_uint32 enable_flag;
    kal_uint32 magic_tail[3];
} atcmd_check_context_struct;
typedef atcmd_check_context_struct nvram_atcmd_check_context_struct;

extern const nvram_atcmd_check_context_struct NVRAM_EF_ATCMD_ONOFF_CHECK_DEFAULT;


typedef struct {
    kal_uint8 etws_setting;
} nvram_ef_etws_setting_struct;

extern const nvram_ef_etws_setting_struct NVRAM_EF_ETWS_SETTING_DEFAULT;


typedef struct
{
    kal_uint8 context_id;

    kal_uint8 pdp_addr_type;
    kal_uint8 pdp_addr_len;
    kal_uint8 addr_val[16];

    kal_uint8 apn_len;
    kal_uint8 apn[100];
    kal_uint8 pcomp_algo;
    kal_uint8 dcomp_algo;

    kal_uint8 context_type;
    kal_uint8 primary_context_id;

    kal_uint8 reserved;
    kal_uint16 req_n201u;

    kal_uint8 p_cscf_discovery;
    kal_uint8 im_cn_signalling_flag;
    kal_uint8 request_type;
    kal_uint8 initial_attach;
} nvram_ef_tcm_PDP_profile_record_struct;



typedef struct{
  kal_uint32 local_port;
  kal_uint32 ipsec_local_port_start;
  kal_uint32 ipsec_local_port_range;
  kal_uint32 rtp_rtcp_local_port_start;
  kal_uint32 rtp_rtcp_local_port_range;
  kal_uint32 rtcp_interval;
  kal_uint16 sip_dscp;
  kal_uint16 sip_priority;
  kal_uint16 audio_dscp;
  kal_uint16 audio_priority;
  kal_uint16 video_dscp;
  kal_uint16 video_priority;
  kal_uint32 register_expiry;
  kal_uint32 UA_reg_t1_timer;
  kal_uint32 UA_reg_t2_timer;
  kal_uint32 UA_reg_t4_timer;
  kal_uint32 UA_reg_retry_base_time;
  kal_uint32 UA_reg_retry_max_time;
  kal_uint32 UA_call_conf_subtimer;
  kal_uint32 UA_call_session_timer;
  kal_uint32 UA_call_amr_fmt_variant;

  kal_uint8 VoLTE_Setting_SIP_Force_Use_UDP;
  kal_uint8 VoLTE_Setting_SIP_TCP_On_Demand;
  kal_uint16 VoLTE_Setting_SIP_TCP_MTU_Size;
  kal_uint32 VoLTE_Setting_SIP_TCP_MSS;

  kal_uint16 UA_call_session_min_se;
  kal_uint16 UA_call_rej_code;
  kal_uint16 UA_call_no_resource_code;
  kal_uint16 UA_call_rej_media_code;
  kal_uint16 UA_call_rej_by_user_code;
  kal_uint16 operator_code;
  kal_uint16 sms_rspcode;
  kal_uint16 pad1;
  kal_uint8 local_sip_protocol_type;
  kal_uint8 UA_g711_ptime;
  kal_uint8 UA_g726_ptime;
  kal_uint8 UA_call_codec_order1;
  kal_uint8 UA_call_codec_order2;
  kal_uint8 UA_call_codec_order3;
  kal_uint8 UA_call_def_max_ptime;
  kal_uint8 UA_call_def_ptime;
  kal_uint8 UA_call_amr_pt;
  kal_uint8 UA_call_amr_oct_pt;
  kal_uint8 UA_call_amr_open_pt;
  kal_uint8 UA_call_amr_wb_pt;
  kal_uint8 UA_call_amr_wb_oct_pt;
  kal_uint8 UA_call_h264_pt;
  kal_uint8 UA_call_h264_pt2;
  kal_uint8 UA_call_h265_pt;
  kal_uint8 UA_call_h265_pt2;
  kal_uint8 UA_call_g729_annexb;
  kal_uint8 UA_call_g729_ptime;
  kal_uint8 UA_call_priority;
  kal_uint8 UA_call_privacy;
  kal_uint8 UA_call_session_flag;
  kal_uint8 UA_call_tel_evt;
  kal_uint8 UA_call_tel_evt_pt;
  kal_uint8 UA_call_tel_evt_wb_pt;
  kal_uint8 UA_call_precondition;
  kal_uint8 early_media;
  kal_uint8 mwi_license;
  kal_uint8 UA_reg_keep_alive;
  kal_uint8 uri_type;
  kal_uint8 UA_net_ipsec;
  kal_uint8 UA_reg_uri_with_port;
  kal_uint8 UA_reg_ipsec_algo;
  kal_uint8 UA_reg_http_digest;
  kal_uint8 UA_reg_specific_ipsec_algo;
  kal_uint8 UA_call_mo_invite_to_bw_cnf_time;
  kal_uint8 ipv6_zero_compression;
  kal_uint8 support_max_retry_algo;
  kal_uint8 UA_ussd_nw_timeout_timer;
  kal_uint8 UA_ussd_setup_timeout_timer;
  kal_uint8 user_agent[128];
  kal_uint8 UA_call_amr_mode_set[16];
  kal_uint8 UA_call_amr_wb_mode_set[20];
  kal_uint8 UA_icsi_1[64];
  kal_uint8 UA_icsi_2[64];
  kal_uint8 UA_icsi_3[64];
  kal_uint8 UA_icsi_4[64];
  kal_uint8 UA_phone_context[64];
  kal_uint8 UA_reg_auth_name[64];
  kal_uint8 UA_reg_auth_password[32];
  kal_uint8 UA_phone_context_associated_impu[128];
  kal_uint8 UA_conf_factory_uri[128];



  kal_uint32 reject_code_in23G;
  kal_uint32 conf_sub_timer_timeout;
  kal_uint8 contact_with_username_inCall;
  kal_uint8 sendrecv_before_prcd;
  kal_uint8 always_use_UPDATE_for_prcd;
  kal_uint8 always_use_sip_uri_for_mo_call;
  kal_uint8 set_strength_mandatory;
  kal_uint8 send_refer_to_peer;
  kal_uint8 add_3gpp_ims_in_Accept;
  kal_uint8 terminal_based_cw;
  kal_uint8 refer_dialog_to_server;
  kal_uint8 check_reason_phrase;
  kal_uint8 merge_send_bye;
  kal_uint8 when_stop_tcall;
  kal_uint8 set_rtcp_0;
  kal_uint8 check_contact_380;
  kal_uint8 conf_participant_not_subscribe;
  kal_uint8 add_sdp_in_180_for_non_precond;
  kal_uint8 add_precondition_in_hold_unhold_sdp;
  kal_uint8 use_org_sdp_for_invite_without_sdp;
  kal_uint8 oir_privacy_to_header;
  kal_uint8 register_cap_whenever;
  kal_uint8 no_auto_retry_for_mo_call;
  kal_uint8 use_eps_prefix_in_phone_context;
  kal_uint8 follow_nw_ims_vops_support;
  kal_uint8 attempt_reg_when_receive403;
  kal_uint8 waiting_487_for_cancel_timer_timeout;
  kal_uint8 bcsfb_feature_enable;
  kal_uint8 send_183_when_prcd_none;
  kal_uint8 call_id_with_host_inCall;
  kal_uint8 add_rtcp_port_into_sdp;
  kal_uint8 ecc_session_timer_enable;
  kal_uint8 subscribe_dialog_to_server;
  kal_uint8 check_conference_subscribe;
  kal_uint8 conference_subscribe_timing;
  kal_uint8 general_amr_nb_wb;
  kal_uint8 disable_conf_call_prcd;
  kal_uint8 wait_cancel_in_srvcc_end;
  kal_uint8 reject_1w_if_1A1H;
  kal_uint8 no_auto_retry_for_dcm_mo_call;
  kal_uint8 join_send_bye;
  kal_uint8 reject_mtcall_by_vops;
  kal_uint8 not_add_SDP_in_OPTIONS;
  kal_uint8 pcscf_error_when663;
  kal_uint8 rel_conf_if_no_participant;
  kal_uint8 add_no_fork;
  kal_uint8 TMO_specific_SDP;
  kal_uint8 call_ringing_timer_timeout;
  kal_uint8 call_ringback_timer_timeout;
  kal_uint8 call_tcall_timer_timeout;
  kal_uint8 call_refreshcall_timer_expire;
  kal_uint8 call_callend_timer_timeout;
  kal_uint8 waiting_mt_cnf_timer_timeout;
  kal_uint8 mo_invite_to_bw_cnf_timer_timeout;
  kal_uint8 short_code_support;
  kal_uint8 early_media_when_rtp_coming;
  kal_uint8 session_refresher_in_req;
  kal_uint8 session_refresher_in_resp;
  kal_uint8 wfc_emerg_pidf_country;
  kal_uint8 set_des_strength_optional;
  kal_uint8 conf_user_count_includes_host;
  kal_uint8 ecn_init_method;
  kal_uint8 histinfo_in_supported;
  kal_bool add_country_to_pani;
  kal_uint8 pad3[3];


  kal_uint8 force_psi_scheme_to_tel;
  kal_uint8 add_user_phone;
  kal_uint8 update_call_id_with_host;
  kal_uint8 add_no_fork_in_SMS;
  kal_uint8 nsn_specific;
  kal_uint8 pad4[3];


  kal_uint32 keep_alive_mode;
  kal_uint32 tcp_connect_max_time_invite;
  kal_int32 retry_interval_after_403;
  kal_uint8 contact_with_username;
  kal_uint8 contact_with_transport;
  kal_uint8 contact_with_regid;
  kal_uint8 contact_with_mobility;
  kal_uint8 contact_with_expires;
  kal_uint8 authorization_with_algo;
  kal_uint8 rereg_in_rat_change;
  kal_uint8 rereg_in_oos_end;
  kal_uint8 de_subscribe;
  kal_uint8 use_specific_ipsec_algo;
  kal_uint8 try_next_pcscf;
  kal_uint8 dereg_clear_ipsec;
  kal_uint8 initial_reg_without_pani;
  kal_uint8 dereg_reset_tcp_client;
  kal_uint8 treg;
  kal_uint8 rereg_23g4;
  kal_uint8 resub_23g4;
  kal_uint8 not_auto_reg_403;
  kal_uint8 call_id_with_host_inReg;
  kal_uint8 ems_mode_ind;
  kal_uint8 contact_with_accesstype;
  kal_uint8 wfc_with_plani;
  kal_uint8 use_udp_on_tcp_fail;
  kal_uint8 ipsec_fail_allowed;
  kal_uint8 contact_with_video_feature_tag_in_subscribe;
  kal_uint8 via_without_rport;
  kal_uint8 reg_route_hdr;
  kal_uint8 via_uri_with_default_port;
  kal_uint8 notify_sms_notify_done;
  kal_uint8 emergency_use_imsi;
  kal_uint8 check_msisdn;
  kal_uint8 support_throttling_algo;
  kal_uint8 reg_after_nw_dereg_60s;
  kal_uint8 sub_contact_with_sip_instance;
  kal_uint8 stop_reg_md_lower_layer_err;
  kal_uint8 reg_gruu_support;
  kal_uint8 oos_end_reset_tcp_client;
  kal_uint8 wfc_refresh_23g;
  kal_uint8 pidf_country;
  kal_uint8 init_reg_backoff_enabled;
  kal_uint8 reg_fail_not_need_remove_binding;
  kal_uint8 pend_dereg_in_initial_reg;
  kal_uint8 pad5;
  kal_uint32 UA_reg_a_timer;
  kal_uint32 UA_reg_b_timer;
  kal_uint32 UA_reg_c_timer;
  kal_uint32 UA_reg_d_timer;
  kal_uint32 UA_reg_e_timer;
  kal_uint32 UA_reg_f_timer;
  kal_uint32 UA_reg_g_timer;
  kal_uint32 UA_reg_h_timer;
  kal_uint32 UA_reg_i_timer;
  kal_uint32 UA_reg_j_timer;
  kal_uint32 UA_reg_k_timer;
} nvram_ua_struct;

typedef struct{

  kal_uint32 resouce_retain_timer;
  kal_uint32 emergency_pdn_retain_timer;
  kal_uint32 auto_re_reg_timer;
  kal_uint32 auto_re_reg_base_timer;
  kal_uint32 auto_re_reg_max_timer;
  kal_uint32 poweroff_detach_timer;
  kal_uint32 poweroff_ims_dereg_timer;
  kal_uint32 emergency_reg_retain_timer;
  kal_uint8 pcscf_priority_list[8];
  kal_uint8 set_pcscf_discovery_via_nas;
  kal_uint8 voice_bearer_ctrl;
  kal_uint8 default_pcscf_address_is_v4;
  kal_uint8 force_user_accout_by_manual;
  kal_uint8 set_ue_im_cn_signaling_flag;
  kal_uint8 check_nw_im_cn_signaling_flag;
  kal_uint8 ims_signaling_qci;
  kal_uint8 ims_voice_qci;
  kal_uint8 ims_video_qci;
  kal_uint8 ims_v4v6_preference;

  kal_bool pcscf_manual_support;
  kal_bool pcscf_mo_support;
  kal_bool pcscf_sim_support;
  kal_bool pcscf_pco_renew_support;

  kal_bool emergency_call_learning_support;
  kal_bool home_detected_emergency_call_support;
  kal_bool sms_support;
  kal_bool voice_support;
  kal_bool video_over_ps_support;
  kal_bool ussd_support;
  kal_uint8 resource_allocation_mode;
  kal_uint8 icsi_resource_allocation_mode_1;
  kal_uint8 icsi_resource_allocation_mode_2;
  kal_uint8 icsi_resource_allocation_mode_3;

  kal_uint8 icsi_resource_allocation_mode_4;
  kal_uint8 ims_roaming_mode;
  kal_bool mncmcc_pass_flag;
  kal_bool ims_reg_allowed_at_23g;
  kal_uint8 unsync_cfg;
  kal_uint8 allow_emergency_dereg;
  kal_uint8 pcscf_manual_list[16];
  kal_uint8 default_psismsc[64];
  kal_uint8 manual_impi[64];
  kal_uint8 manual_impu[64];
  kal_uint8 manual_domain_name[64];
  kal_uint8 mncmcc_whitelist[128];

  kal_bool wfc_support;
  kal_uint8 wfc_pad[3];


  kal_uint8 ignore_sgn_qci_check;
  kal_uint8 ignore_media_qos_check;
  kal_uint8 default_fallback_support;
  kal_uint8 dedicated_fallback_support;
  kal_uint8 restore_pcscf;
  kal_uint8 not_acquire_audio_rtcp;
  kal_uint8 not_acquire_video_rtcp;
  kal_uint8 pad1;
  kal_uint8 pcscf_home_policy_list[32];
  kal_uint8 pcscf_visit_policy_list[32];
  kal_uint32 dereg_defer_pdn_release_timer;
  kal_bool timerF_expiry;
  kal_bool timerB_expiry;
  kal_bool ignore_video_qos_check;
  kal_uint8 pdn_rej_handle[64];
  kal_uint32 video_resource_retain_timer;
  kal_uint8 video_default_fallback_support;
  kal_bool enable_audio_precondition;
  kal_bool enable_video_precondition;
  kal_uint8 video_dedicated_fallback_support;
} nvram_imc_struct;

typedef struct{
  nvram_ua_struct ua_config;
  nvram_imc_struct imc_config;
} nvram_ef_ims_profile_record_struct;

typedef struct{
  kal_bool dtx_enable;
  kal_uint32 silence_dropcall_threshold;
  kal_uint16 jbm_load_params_enable;
  kal_uint16 jbm_prebuf_len;
  kal_uint16 jbm_jitter_max_depth;
  kal_uint16 jbm_jitter_full_offset;
  kal_uint16 silence_to_rrc_report_threshold;
  kal_uint16 ltecsr_common_para0;
  kal_uint16 ltecsr_common_para1;
  kal_uint16 ltecsr_common_para2;
  kal_uint16 ltecsr_common_para3;
  kal_uint16 ltecsr_common_para4;
  kal_uint32 rtp_expire_timer;
  kal_uint32 rtcp_expire_timer;
} nvram_ef_ltecsr_profile_record_struct;





typedef struct
{
    kal_uint8 allow_cs;
    kal_uint8 allow_ims;
    kal_uint8 max_attempt_total_num;
    kal_uint8 max_attempt_consecutive_cs_num;

    kal_uint8 max_attempt_consecutive_ims_num;
    kal_uint8 allow_recursive_cs;
    kal_uint8 allow_recursive_ims;
    kal_uint8 max_nw_selection_count;

    kal_uint8 ads_guard_timer_length;
    kal_uint8 wait_for_oos;
    kal_uint8 wait_for_irat;
    kal_uint8 wait_for_nas_nwsel;

    kal_uint8 allow_csfb_when_nas_detached;
    kal_uint8 allow_ims_when_nas_detached;
    kal_uint8 allow_ims_when_ims_unreged;
    kal_uint8 allow_ims_with_negative_imsvops_eutran;

    kal_uint8 allow_ims_with_negative_imsvops_utran;
    kal_uint8 ads_delay_enw_resume_ads_timer_length;
    kal_uint8 allow_wfc;
    kal_uint8 reserved1;
} nvram_vdm_ads_general_profile_struct;


typedef struct
{

    nvram_vdm_ads_general_profile_struct general_setting_normal;


    kal_uint8 allow_cs_during_ssac_barring;
    kal_uint8 reset_ssac_barring_lte_mobility;
    kal_uint8 reset_ssac_barring_4g32_mobility;
    kal_uint8 reserved3;

} nvram_vdm_ads_profile_normal_struct;


typedef struct
{

    nvram_vdm_ads_general_profile_struct general_setting_emerg;


    kal_uint8 allow_ims_with_negative_emb_eutran;
    kal_uint8 allow_ims_with_negative_emb_utran;
    kal_uint8 allow_ims_with_negative_sib_emc_eutran;
    kal_uint8 allow_ims_with_negative_sib_emc_utran;

    kal_uint8 prefer_ims_in_lte_limited_srv;
    kal_uint8 ads_delay_emerg_ads_timer_length;
    kal_uint8 reserved1;
    kal_uint8 reserved2;

} nvram_vdm_ads_profile_emerg_struct;


typedef struct
{

    nvram_vdm_ads_profile_normal_struct profile_normal;


    nvram_vdm_ads_profile_emerg_struct profile_emerg;

} nvram_ef_vdm_ads_profile_struct;





typedef struct
{
    kal_uint8 nvram_ef_barcode_num[64];
} nvram_ef_barcode_num_struct;




typedef struct
{
  kal_uint8 u1CalFlag;
  kal_uint8 u1CalDscrpt[30];
}nvram_cal_flag_entry_struct;
typedef struct
{
  kal_uint8 u1CalAllFlag;
  kal_uint8 u1CalMarkNumber;
  nvram_cal_flag_entry_struct CalFlagMarks[10];
}nvram_cal_flag_struct;


typedef struct
{
 kal_uint16 u2LidEnumVal;
 kal_uint16 u2LidRec;
 kal_uint16 u2CheckVal;

}nvram_cal_data_entry_struct;

typedef struct
{
   kal_uint8 u1ValidNum;
   nvram_cal_data_entry_struct CalDataCheck[225];
}nvram_cal_data_check_struct;

typedef struct
{
    kal_uint8 imei[8];
    kal_uint8 svn;
    kal_uint8 pad;
} nvram_ef_imei_imeisv_struct;
# 4205 "interface/service/nvram/nvram_editor_data_item.h"
typedef struct
{




    kal_uint32 PWM1[5][2];

    kal_uint32 PWM2[5][2];
    kal_uint32 PWM3[5][2];



    kal_uint32 MainLCD_Contrast[15];
    kal_uint32 MainLCD_Bias[5];
    kal_uint32 MainLCD_Linerate[5];
    kal_uint32 MainLCD_Temp[5];
    kal_uint32 SubLCD_Contrast[15];
    kal_uint32 SubLCD_Bias[5];
    kal_uint32 SubLCD_Linerate[5];
    kal_uint32 SubLCD_Temp[5];
    kal_uint32 BatteryLevel[10];
    kal_uint32 PMIC6318BLPWM[5][2];



} custom_hw_level_struct;

typedef struct
{
    kal_uint8 me_manufacture_id[MAX_ME_ID_NUM][30];
} uem_context_manufacture_struct;

typedef struct
{
    kal_uint8 text_length;
    kal_uint8 text_dcs;
    kal_uint8 text[62];
} rmi_greeting_text_struct;

typedef struct
{

    kal_uint8 audio_mute_flag;

    kal_uint8 gpio_status[MAX_GPIO_DEVICE_NUM];
    kal_uint8 silent_mode;

    kal_uint8 alert_mode;

    kal_uint8 country_code;
    kal_uint8 lang_id[2];

    kal_uint8 date_mode;
    kal_uint8 time_mode;

    kal_uint8 greeting_mode;
    rmi_greeting_text_struct greeting_text;

    rtc_alarm_info_struct alarm_info[3];
} uem_context_rmi_struct;
# 4281 "interface/service/nvram/nvram_editor_data_item.h"
typedef struct
{
    kal_uint8 alpha_id[62];
    kal_uint8 BCD_length;
    kal_uint8 TON_NPI;
    kal_uint8 DialNum[20];
    kal_uint8 cc_ident;
    kal_uint8 pad;
} nvram_ef_phb_struct;

typedef struct
{
    kal_uint8 name_length;
    kal_uint8 name_dcs;
    kal_uint8 name[(32)];
    kal_uint8 count;
    kal_uint8 addr_length;
    rtc_format_struct time;
    kal_uint8 addr_type;
    kal_uint8 addr_bcd[(41)];
    kal_uint8 accu_times;
    kal_uint8 is_new_event;
    kal_uint8 adn_record_index;
    kal_int32 call_duration;
} phb_ln_entry_struct;

typedef struct
{
    kal_uint8 no_entry;
    kal_uint8 padding1;
    kal_uint8 padding2;
    kal_uint8 padding3;
    phb_ln_entry_struct array[(10)];
} nvram_ef_phb_ln_struct;

typedef struct
{
    kal_uint8 type_seq[((6 * (2)) * (10) / (2))];
} nvram_ef_phb_ln_type_seq_struct;




typedef struct
{



    kal_uint8 alpha_id[10];

    kal_uint8 BCD_length;
    kal_uint8 TON_NPI;
    kal_uint8 DialNum[20];
    kal_uint8 cc_ident;
    kal_uint8 pad;
} nvram_ef_smsal_mailbox_addr_struct;

typedef struct
{
    kal_uint8 status;
    kal_uint8 remainder[183];
} nvram_ef_smsal_sms_struct;

typedef struct
{
    kal_uint8 profile_name[12];
    kal_uint8 para_ind;
    kal_uint8 da[12];
    kal_uint8 sca[12];
    kal_uint8 pid;
    kal_uint8 dcs;
    kal_uint8 vp;
} nvram_ef_smsal_smsp_struct;

typedef struct _nvram_smsal_common_param_struct
{
    kal_uint8 bearer_service;
    kal_uint8 status_report;
    kal_uint8 reply_path;
    kal_uint8 vp_format;
    kal_uint8 prefer_mem1;
    kal_uint8 prefer_mem2;
    kal_uint8 prefer_mem3;
    kal_uint8 cbch_req;
    kal_uint8 all_lang_on;
    kal_uint8 rmi_act_pfile_id;
    kal_uint8 fo;
    kal_uint8 sms_fdn_off;
    kal_uint8 last_used_tp_mr;
    kal_uint8 mem_capacity_available;
    kal_uint8 selected_msp;
    kal_uint8 reserve;
} nvram_ef_smsal_common_param_struct;

typedef struct
{
    kal_uint16 cbmi[10];
} nvram_ef_cb_default_ch_struct;



typedef struct
{
    kal_uint8 data[4];
} nvram_ef_ps_conformance_testmode_struct;

typedef struct
{
    kal_uint32 context_id;
    kal_uint8 context_type;
    kal_uint8 access_string[100];
    kal_uint8 user_name[32];
    kal_uint8 pass_word[32];
    kal_uint8 compression;
    kal_uint8 auth_type;
    kal_uint8 plmn_in_digit[7];
    kal_uint16 status;
} nvram_ef_mobile_broadband_provision_context_struct;
# 4410 "interface/service/nvram/nvram_editor_data_item.h"
typedef struct
{
    kal_uint8 entry_id ;
    kal_uint8 plmn_id[7] ;
    kal_uint8 check_nw ;
    kal_uint8 check_sim ;
} nvram_ef_msq_entry_struct ;




typedef struct
{
    kal_uint8 is_msq_on ;
    kal_uint8 padding ;
    nvram_ef_msq_entry_struct msq_entry[100] ;
} nvram_ef_msq_list_struct ;

typedef struct
{
    kal_uint8 mode;
} nvram_ef_regional_phone_mode_struct;





typedef struct
{
    kal_uint8 CacheByte[8];
} nvram_sys_cache_octet_struct;

typedef struct
{
    kal_uint8 data[128];
} nvram_ef_nvram_unit_test_struct;


typedef struct
{
    kal_uint8 volume_gain[MAX_VOL_CATE][MAX_VOL_TYPE][7];
    kal_uint8 volume[MAX_VOL_CATE][MAX_VOL_TYPE];
    kal_uint8 max_melody_volume_gain[MAX_VOL_CATE + 1];
    kal_uint8 melody_volume_gain_step[MAX_VOL_CATE + 1];
    kal_uint8 tv_out_volume_gain[7];
} custom_acoustic_struct;
# 4497 "interface/service/nvram/nvram_editor_data_item.h"
typedef struct
{
    kal_uint8 epsloci[(18)];
    kal_uint8 epsnsc[(54)];
    kal_uint32 tin;
} nvram_ef_epsloci_epsnsc_tin_struct;

typedef struct
{
    kal_uint8 ue_usage_setting;
    kal_uint8 voice_domain_preference;
    kal_uint8 sms_over_ip;
    kal_uint8 sms_over_sgs;
    kal_uint8 ue_mode_profile;
    kal_uint8 ue_mode;
    kal_uint8 max_CService;
    kal_uint8 is_vdp_set;
    kal_uint8 feature_config[((4)+(4)+(4)+(4))];
} nvram_ef_lte_preference_struct;

typedef struct
{
    kal_uint32 update_timestamp;
    kal_uint16 earfcn;
    kal_uint8 oldest_cell_indx;
    kal_uint8 numElements;
    kal_uint32 cellid[60];
}nvram_errc_fingerprint_per_freq_struct;

typedef enum{
    NV_ERRC_RAT_LTE,
    NV_ERRC_RAT_UMTS,
    NV_ERRC_RAT_GSM,
    NV_ERRC_RAT_NONE
}nvram_errc_cell_rat_enum;


typedef struct
{
    kal_uint32 update_systick;
    kal_uint32 update_timestamp;
    kal_bool is_update_needed;
    kal_uint16 freq;
    kal_uint16 pci;
    nvram_plmn_id_struct plmn_id;
    kal_uint32 csg_id;
    kal_uint32 cell_id;
    nvram_errc_cell_rat_enum rat;
    kal_uint8 numElements;
    nvram_errc_fingerprint_per_freq_struct frq[4];
}nvram_ef_errc_fingerprint_record_struct;

typedef struct
{
    kal_uint8 band;
    kal_uint8 freq_num;
    kal_uint8 freq_oldest_idx;
    kal_uint16 earfcn[16];
} nvram_ef_errc_learned_band_record_struct;

typedef struct
{
    kal_uint8 mcc[3];
    kal_uint8 is_valid;
    kal_uint8 band_num;
    kal_uint8 band_oldest_idx;
    kal_uint32 timestamp;
    nvram_ef_errc_learned_band_record_struct band[8];

    kal_uint8 is_detected_by_latest_search;
    kal_uint8 is_detected_by_cell;
    kal_uint8 is_detected_by_current_search;
} nvram_ef_errc_learned_mcc_record_struct;

typedef struct
{
    kal_uint16 earfcn;
    kal_uint16 pci;
    kal_uint32 cell_id;
    kal_uint8 is_valid;
    kal_uint8 is_detected_by_latest_search;
    kal_uint8 is_detected_by_cell;
    kal_uint8 is_detected_by_current_search;
} nvram_ef_errc_stored_cell_record_struct;

typedef struct
{
    nvram_ef_errc_stored_cell_record_struct cell[32];
} nvram_ef_errc_stored_cell_struct;

typedef struct
{
    nvram_plmn_id_struct plmnid;
    kal_bool csfb_2g_afr;
    kal_bool csfb_3g_afr;
} nvram_afr_setting_record_struct;

typedef struct
{
    nvram_afr_setting_record_struct hplmn_afr_mapping[8];
} nvram_ef_errc_afr_setting_struct;

typedef struct
{
 kal_uint16 earfcn;
    nvram_plmn_id_struct plmnid;
}nvram_carrier_data_struct;

typedef struct
{
    kal_uint8 stored_carr_num;
    nvram_carrier_data_struct stored_carr[(0x30) ];
}nvram_ef_errc_stored_carrier_struct;

typedef struct
{
 kal_uint8 interval_k0;
 kal_uint8 interval_k1;
 kal_uint8 interval_k2;
 kal_uint8 interval_k3;
 kal_uint8 interval_k4;
 kal_uint8 interval_k5;
 kal_uint8 interval_k6;
 kal_uint8 interval_k7;
 kal_uint8 interval_k8;
 kal_uint8 interval_k9;
 kal_uint8 interval_k10;
 kal_uint8 interval_k11;
 kal_uint8 interval_k12;
 kal_uint8 interval_k13;
 kal_uint8 interval_k14;
 kal_uint8 interval_k15;
 kal_uint8 interval_k16;
 kal_uint8 interval_k17;
 kal_uint8 interval_k18;
 kal_uint8 interval_k19;
} nvram_filter_coef_interval_struct;

typedef struct {
    nvram_plmn_id_struct plmn_id;
    kal_uint16 earfcn;
} nvram_errc_designated_freq_record_struct;

typedef struct {
    nvram_plmn_id_struct plmn_id;
    kal_uint16 earfcn;
    kal_uint8 bandwidth;
} nvram_errc_designated_black_freq_record_struct;

typedef struct {
    nvram_plmn_id_struct plmn_id;
    kal_uint8 band_num;
    kal_uint8 band_list[(64)];
} nvram_errc_priority_band_record_struct;

typedef struct {
    kal_uint8 freq_num;
    nvram_errc_designated_freq_record_struct freq_list[(0x14)];

    kal_uint8 black_freq_num;
    nvram_errc_designated_black_freq_record_struct black_freq_list[(0x10)];

    kal_uint8 priority_band_inf_num;
    nvram_errc_priority_band_record_struct priority_band_inf[(0x10)];
} nvram_errc_designated_carrier_inf_struct;

typedef struct {
    kal_uint8 hsr_monitor_mode;
    kal_uint16 earfcn;
} nvram_errc_hsr_preload_freq_struct;

typedef struct
     {
 kal_uint8 tband_ind;
    kal_uint8 tbarred_cell;
    kal_uint8 tbarred_freq;
    kal_uint8 tcsg_cell;
 kal_uint8 carrs_interval;
    kal_uint8 list1_used_carr_max;
 kal_int16 skip_bw_rsrp_th;
    kal_int16 skip_bw_rsrq_th;
 kal_uint8 tsib_ng_rej;
 kal_uint8 nsib_ng_max;
 kal_uint8 tnsib_clear;
 kal_uint8 est_s_rxlev_th;
 kal_uint8 est_s_qual_th;
 kal_uint16 trach;

 nvram_filter_coef_interval_struct filter_coef_interval[(0x04)];
 kal_uint8 eutran_neighbour_cellreport_flg;
 kal_uint8 iir_filter_coef_rsrp;
 kal_uint8 iir_filter_coef_rsrq;
 kal_uint16 th0_interval;
 kal_uint16 th1_interval;
 kal_uint16 th2_interval;
 kal_uint16 th3_interval;
    kal_uint16 th4_interval;

 kal_uint8 max_kraerr;
 kal_uint8 traerr;
 kal_uint8 tvalid_raerr;

 kal_uint8 mib_crc_ng_max;
 kal_uint8 sib1_crc_ng_max;
 kal_uint8 si1_crc_ng_max;
 kal_uint8 si_crc_ng_max;
 kal_uint8 sib10_crc_ng_max;
 kal_uint8 sib11_crc_ng_max;
 kal_uint8 sib12_crc_ng_max;
 kal_uint8 mib_sib1_protect_tim_val;
 kal_uint8 sib2_9_protect_tim_val;
 kal_uint8 crc_ng_tim_shift;
 kal_uint8 standby_mib_sib1_protect_tim_val;
 kal_uint8 standby_sib2_9_protect_tim_val;

 kal_uint8 csfb_enhancement_item_status;
 kal_uint8 csfb_enhancement_item_status_in_test_mode;

    kal_uint8 is_eia0_by_sp1;

    kal_uint8 background_search_status_in_test_mode;

    nvram_errc_designated_carrier_inf_struct designated_carrier_inf;
    kal_uint8 afr_timer;

    kal_uint8 csfb_enhancement_item_status_2;
    kal_uint8 csfb_enhancement_item_status_2_in_test_mode;

    kal_uint16 errc_detection_timer;

    kal_int16 lte_to_c2k_rsrp_threshold;
    kal_int16 c2k_to_lte_rsrp_delta;

    kal_uint16 hsr_inactive_timer_val;
    kal_uint8 hsr_on_thrs;
    kal_uint8 hsr_off_thrs;
    kal_uint8 hsr_monitor_mode;
    nvram_errc_hsr_preload_freq_struct hsr_preload_freq_list[(10)];
    kal_uint8 hsr_using_8475;
    kal_int16 q_qualmin_thres_nvram;
} nvram_ef_errc_performance_para_struct;

typedef struct {
    kal_uint16 band;
    kal_uint32 dl_lower_earfcn;
    kal_uint32 dl_upper_earfcn;
    kal_uint32 ul_lower_earfcn;
    kal_uint32 ul_upper_earfcn;
} nvram_errc_partial_band_list_struct;


typedef struct {
    kal_uint8 valid_num;
    nvram_errc_partial_band_list_struct band_list[10];
} nvram_errc_partial_band_inf_struct;


typedef struct{
    kal_uint8 raw_data[(3)];
    kal_uint8 disable_bw[(64)];
    nvram_errc_partial_band_inf_struct partial_band_info;
} nvram_ef_lte_cap_struct;

typedef struct
         {
 kal_uint8 rohc_profiles[(0x09)];
 kal_uint8 max_num_rohc_sessions;
} nvram_errc_capa_pdcp_param_struct;

typedef struct
         {
 kal_uint8 ue_tx_ante_sel_fdd;
    kal_uint8 ue_tx_ante_sel_tdd;
 kal_uint8 ue_specific_ref_sigs;
} nvram_errc_capa_phylayer_param_struct;

typedef struct
         {
 kal_uint8 enhancedDualLayerFDD_r9;
 kal_uint8 enhancedDualLayerTDD_r9;
} nvram_errc_capa_phylayer_param_v920_struct;

typedef struct
         {
 kal_uint8 dtm_r9;
 kal_uint8 e_RedirectionGERAN_r9;
} nvram_errc_capa_irat_param_geram_v920_struct;

typedef struct
         {
 kal_uint8 e_RedirectionUTRA_r9_fdd;
    kal_uint8 e_RedirectionUTRA_r9_tdd;
} nvram_errc_capa_irat_param_utra_v920_struct;

typedef struct
         {
 kal_uint8 intraFreqProximityIndication_r9;
 kal_uint8 interFreqProximityIndication_r9;
 kal_uint8 utran_ProximityIndication_r9;
} nvram_errc_capa_csg_prox_ind_param_r9_struct;

typedef struct
         {
 kal_uint8 intraFreqSI_AcquisitionForHO_r9_fdd;
    kal_uint8 intraFreqSI_AcquisitionForHO_r9_tdd;
 kal_uint8 interFreqSI_AcquisitionForHO_r9_fdd;
    kal_uint8 interFreqSI_AcquisitionForHO_r9_tdd;
 kal_uint8 utran_SI_AcquisitionForHO_r9_fdd;
    kal_uint8 utran_SI_AcquisitionForHO_r9_tdd;
} nvram_errc_capa_nei_cell_si_acq_r9_struct;

typedef struct
         {
 kal_uint8 rach_Report_r9;
} nvram_errc_capa_son_param_r9_struct;

typedef struct
         {
 nvram_errc_capa_phylayer_param_struct phylayer_param_r9;
    kal_uint32 feature_group_ind_r9;
    kal_uint32 feature_group_ind_add_r9;
    nvram_errc_capa_irat_param_utra_v920_struct irat_param_utra_r9;
    nvram_errc_capa_nei_cell_si_acq_r9_struct nei_cell_si_acq_r9;
} nvram_errc_capa_add_ue_eutra_cap_r9_struct;

typedef struct
         {
    kal_uint8 voiceOverPS_HS_UTRA_FDD_r9;
    kal_uint8 voiceOverPS_HS_UTRA_TDD128_r9;
    kal_uint8 srvcc_FromUTRA_FDD_ToUTRA_FDD_r9;
    kal_uint8 srvcc_FromUTRA_FDD_ToGERAN_r9;
    kal_uint8 srvcc_FromUTRA_TDD128_ToUTRA_TDD128_r9;
    kal_uint8 srvcc_FromUTRA_TDD128_ToGERAN_r9;
} nvram_errc_capa_irat_param_utra_v9c0_struct;

typedef struct
         {
 kal_uint8 tm5_FDD_r9;
 kal_uint8 tm5_TDD_r9;
} nvram_errc_capa_phylayer_param_v9d0_struct;

typedef struct
         {
 kal_uint8 e_RedirectionUTRA_TDD_r10_fdd;
    kal_uint8 e_RedirectionUTRA_TDD_r10_tdd;
} nvram_errc_capa_irat_param_utra_tdd_v1020_struct;

typedef struct
         {
 kal_uint8 tdd_SpecialSubframe_r11;
} nvram_errc_capa_phylayer_param_v1130_struct;

typedef struct
         {

    kal_uint8 ue_eutra_cap_ver;


 kal_uint8 access_stratum_release;
 kal_uint8 ue_category;
 nvram_errc_capa_pdcp_param_struct pdcp_param;
 nvram_errc_capa_phylayer_param_struct phylayer_param;
 kal_uint32 feature_group_ind_fdd;
    kal_uint32 feature_group_ind_tdd;
 nvram_errc_capa_phylayer_param_v920_struct phylayer_param_v920;
    nvram_errc_capa_irat_param_geram_v920_struct irat_param_geram_v920;
    nvram_errc_capa_irat_param_utra_v920_struct irat_param_utra_v920;
 kal_uint8 deviceType_r9;
 nvram_errc_capa_csg_prox_ind_param_r9_struct csg_prox_ind_param_r9;
    nvram_errc_capa_nei_cell_si_acq_r9_struct nei_cell_si_acq_r9;
    nvram_errc_capa_son_param_r9_struct son_param_r9;
    kal_uint32 feature_group_ind_add_r9_fdd;
    kal_uint32 feature_group_ind_add_r9_tdd;
    nvram_errc_capa_add_ue_eutra_cap_r9_struct fdd_add_ue_eutra_cap_r9;
    nvram_errc_capa_add_ue_eutra_cap_r9_struct tdd_add_ue_eutra_cap_r9;
    nvram_errc_capa_irat_param_utra_v9c0_struct irat_param_utra_v9c0;
    nvram_errc_capa_phylayer_param_v9d0_struct phylayer_param_v9d0;
    nvram_errc_capa_irat_param_utra_tdd_v1020_struct irat_param_utra_tdd_v1020;
    nvram_errc_capa_phylayer_param_v1130_struct phylayer_param_v1130;
    kal_uint8 freq_band_priority_adjustment_r12;
} nvram_ef_ue_eutra_cap_struct;

typedef struct
         {
    LTE_Band lte_band[(14 +1)];
} nvram_el1_band_ind_struct;

typedef struct
         {
    ERF_RX_PDATABASE_T rx_pdata_by_band[14];
} nvram_el1_rx_pdata_struct;

typedef struct
         {
    ERF_TX_PDATABASE_T tx_pdata_by_band[14];
} nvram_el1_tx_pdata_struct;

typedef struct
         {
    ERF_RXON_BPIOFFSET_T rxon_bpioffset;
} nvram_el1_rxon_bpioffset_struct;

typedef struct
         {
    ERF_TXON_BPIOFFSET_T txon_bpioffset;
} nvram_el1_txon_bpioffset_struct;

typedef struct
         {
    ERF_RXOFF_BPIOFFSET_T rxoff_bpioffset;
} nvram_el1_rxoff_bpioffset_struct;

typedef struct
         {
    ERF_TXOFF_BPIOFFSET_T txoff_bpioffset;
} nvram_el1_txoff_bpioffset_struct;

typedef struct
         {
    LTE_MPRAdjust_T mpr_by_band[14];
} nvram_el1_mpr_struct;

typedef struct
         {
    LTE_AMPRAdjust_T ampr_by_band[14];
} nvram_el1_ampr_struct;

typedef struct
         {
    ERF_IOBASE_T rf_io_by_band[14];
}nvram_el1_rf_io_struct;

typedef struct
         {
    FreqAdj_CO_TMS_Config gps_co_tms_data;
}nvram_el1_gps_co_tms_data_struct;


typedef struct
         {
    kal_uint16 DRDI_STATUS;
}nvram_el1_dynamic_init_struct;

typedef struct
         {
    El1CustomDynamicInitDebug custom_dynamic_init_debug_info;
}nvram_el1_dynamic_init_debug_struct;


typedef struct
         {
    kal_uint8 RF_RX_PATH0_EN;
    kal_uint8 RF_RX_PATH1_EN;
} nvram_el1_rf_rx_path_config_struct;


typedef struct
         {
    kal_uint16 MIPI_EN;
} nvram_el1_mipi_feature_struct;


typedef struct
         {
    kal_uint16 MIPI_BYPASS_EN;
} nvram_el1_mipi_bypass_feature_struct;

typedef struct
         {
   LTE_MIPI_EVENT_TABLE_T mipi_rx_event[25];
}nvram_el1_mipi_rx_event_struct;

typedef struct
         {
   LTE_MIPI_EVENT_TABLE_T mipi_tx_event[25];
}nvram_el1_mipi_tx_event_struct;

typedef struct
{
   LTE_MIPI_EVENT_TABLE_T mipi_tpc_event[6];
}nvram_el1_mipi_tpc_event_struct;

typedef struct
         {
   LTE_MIPI_TPC_SECTION_TABLE_T mipi_tpc_sec_data[5];
}nvram_el1_mipi_tpc_data_struct;

typedef struct
         {
   LTE_MIPI_DATA_SUBBAND_TABLE_T mipi_rx_data[50];
}nvram_el1_mipi_rx_data_struct;

typedef struct
         {
   LTE_MIPI_DATA_SUBBAND_TABLE_T mipi_tx_data[60];
}nvram_el1_mipi_tx_data_struct;

typedef struct
         {
   LTE_MIPI_DATA_SUBBAND_TABLE_T mipi_bypass_tx_data[60];
}nvram_el1_mipi_bypass_tx_data_struct;





typedef struct
         {
    kal_uint16 DRDI_STATUS;
}nvram_mml1_dynamic_init_struct;


typedef struct
         {
   MML1_MIPI_INITIAL_CW_T mipi_initial_cw_table[10];
}nvram_mml1_mipi_initial_cw_struct;

typedef struct
         {
   MML1_MIPI_USID_CHANGE_T mipi_usid_change_table[10];
}nvram_mml1_mipi_usid_change_struct;


typedef struct
{
    kal_uint16 arfcn;
    kal_uint8 band_indicator;
} nvram_gsm_cell_struct;

typedef struct
{
    kal_uint8 num_of_cells;
    nvram_gsm_cell_struct gsm_cell[32];
} nvram_ef_gsm_ba_info_struct;
# 5040 "interface/service/nvram/nvram_editor_data_item.h"
BEGIN_NVRAM_DATA


LID_BIT "003" NVRAM_EF_TCM_CID_0_PROFILE_LID
     nvram_ef_tcm_PDP_profile_record_struct * (1 * ((2)))
         {
         context_id:"Context identifier"
         {
         };

         pdp_addr_type:"PDP address type"
         {
         };
         pdp_addr_len:"PDP address length"
         {
         };
         addr_val:"Static PDP address value, in MSB"
         {
         };

         apn_len:"APN length"
         {
         };
         apn:"APN string";
         pcomp_algo:"Protocol (header) compression algorithm"
         {
         };
         dcomp_algo:"Data compression algorithm"
         {
         };

         context_type:"Padding"
         {
         };
         primary_context_id:"Primary context identifier"
         {
         };

         reserved:"Reserved (AT-definition)"
         {
         };

         req_n201u:"Requested N201U"
         {
         };

         p_cscf_discovery:"p_cscf_discovery"
         {
         };

         im_cn_signalling_flag:"im_cn_signalling_flag"
         {
         };

         request_type:"request_type"
         {
         };
         initial_attach:"initial_attach"
         {
         };
         };

LID_BIT "004" NVRAM_EF_TCM_PDP_PROFILE_LID
     nvram_ef_tcm_PDP_profile_record_struct *((11) * ((2)))
         {
         context_id:"Context identifier"
         {
         };

         pdp_addr_type:"PDP address type"
         {
         };
         pdp_addr_len:"PDP address length"
         {
         };
         addr_val:"Static PDP address value, in MSB"
         {
         };

       apn_len:"APN length"
         {
         };
       apn:"APN string";
       pcomp_algo:"Protocol (header) compression algorithm"
         {
         };
       dcomp_algo:"Data compression algorithm"
         {
         };

       context_type:"Padding"
         {
         };
       primary_context_id:"Primary context identifier"
         {
         };

         reserved:"Reserved (AT-definition)"
         {
         };

         req_n201u:"Requested N201U"
         {
         };

         p_cscf_discovery:"p_cscf_discovery"
         {
         };

         im_cn_signalling_flag:"im_cn_signalling_flag"
         {
         };

         request_type:"request_type"
         {
         };
         initial_attach:"initial_attach"
         {
         };
         };



LID_BIT "009" NVRAM_EF_IMS_PROFILE_LID
     nvram_ef_ims_profile_record_struct *(1 * (2))
         {
         };
LID_BIT "000" NVRAM_EF_LTECSR_PROFILE_LID
     nvram_ef_ltecsr_profile_record_struct *1
         {
         };



LID_BIT "004" NVRAM_EF_VDM_ADS_PROFILE_LID
    nvram_ef_vdm_ads_profile_struct *(1 * (2))
    {
        profile_normal:"settings for normal calls"{};
        profile_emerg:"settings for emergency calls"{};
     };
# 5194 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT "000" NVRAM_EF_SYS_STATISTICS_LID
     stack_statistics_struct *1
     {
     };
# 5242 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "002" NVRAM_EF_L1_AGCPATHLOSS_LID
     l1cal_agcPathLoss_T *1
     {

     };
# 5264 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "002" NVRAM_EF_L1_RAMPTABLE_GSM850_LID
     l1cal_rampTable_T *1
     {

     };
# 5287 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "002" NVRAM_EF_L1_RAMPTABLE_GSM900_LID
     l1cal_rampTable_T *1
     {

     };
# 5310 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "002" NVRAM_EF_L1_RAMPTABLE_DCS1800_LID
     l1cal_rampTable_T *1
     {
     };
# 5332 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "002" NVRAM_EF_L1_RAMPTABLE_PCS1900_LID
     l1cal_rampTable_T *1
     {
     };
# 5359 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "002" NVRAM_EF_L1_EPSK_RAMPTABLE_GSM850_LID
     l1cal_rampTable_T *1
     {

     };
# 5378 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "002" NVRAM_EF_L1_EPSK_INTERSLOT_RAMP_GSM850_LID
     l1cal_EPSK_interRampData_T *1
     {
     };
# 5401 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "002" NVRAM_EF_L1_EPSK_RAMPTABLE_GSM900_LID
     l1cal_rampTable_T *1
     {

     };
# 5420 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "002" NVRAM_EF_L1_EPSK_INTERSLOT_RAMP_GSM900_LID
     l1cal_EPSK_interRampData_T *1
     {
     };
# 5442 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "002" NVRAM_EF_L1_EPSK_RAMPTABLE_DCS1800_LID
     l1cal_rampTable_T *1
     {
     };
# 5460 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "002" NVRAM_EF_L1_EPSK_INTERSLOT_RAMP_DCS1800_LID
     l1cal_EPSK_interRampData_T *1
     {
     };
# 5482 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "002" NVRAM_EF_L1_EPSK_RAMPTABLE_PCS1900_LID
     l1cal_rampTable_T *1
     {
     };
# 5500 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "002" NVRAM_EF_L1_EPSK_INTERSLOT_RAMP_PCS1900_LID
     l1cal_EPSK_interRampData_T *1
     {
     };
# 5522 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "000" NVRAM_EF_L1_GMSK_TX_POWER_ROLLBACK_TABLE_LID
     l1cal_tx_power_rollback_T *1
     {

     };
# 5540 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "000" NVRAM_EF_L1_EPSK_TX_POWER_ROLLBACK_TABLE_LID
     l1cal_tx_power_rollback_T *1
     {

     };
# 5561 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "000" NVRAM_EF_L1_GMSK_TXPC_LID
     l1cal_txpc_T *1
     {

     };
# 5580 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "000" NVRAM_EF_L1_EPSK_TXPC_LID
     l1cal_txpc_T *1
     {

     };
# 5601 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "000" NVRAM_EF_L1_LNAPATHLOSS_LID
     l1cal_lnaPathLoss_T *1
     {

     };
# 5825 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "001" NVRAM_EF_L1_2G_RF_PARAMETER_LID
     l1d_rf_custom_input_data_T *1
     {
      start:"#U_0x12345678_L_0x12345678";
      version:"";
      RF_Type:"";
      is_data_update:"#U_1_L_1";

      RF_BPI_Variable:"";

      RF_Timing_Variable:""{};
      RF_Timing_Variable.xQB_RX_FENA_2_FSYNC:"#U_32767"{};
      RF_Timing_Variable.xQB_RX_FSYNC_2_FENA:"#U_32767"{};
      RF_Timing_Variable.xQB_TX_FENA_2_FSYNC:"#U_32767"{};
      RF_Timing_Variable.xQB_TX_FSYNC_2_FENA:"#U_32767"{};
      RF_Timing_Variable.xQB_SR0:"#U_32767"{};
      RF_Timing_Variable.xQB_SR1:"#U_32767"{};
      RF_Timing_Variable.xQB_SR2:"#U_32767"{};
      RF_Timing_Variable.xQB_SR3:"#U_32767"{};
      RF_Timing_Variable.xQB_SR2M:"#U_32767"{};
      RF_Timing_Variable.xQB_PR1:"#U_32767"{};
      RF_Timing_Variable.xQB_PR2:"#U_32767"{};
      RF_Timing_Variable.xQB_PR2B:"#U_32767"{};
      RF_Timing_Variable.xQB_PR3:"#U_32767"{};
      RF_Timing_Variable.xQB_PR3A:"#U_32767"{};
      RF_Timing_Variable.xQB_PR2M1:"#U_32767"{};
      RF_Timing_Variable.xQB_PR2M2:"#U_32767"{};
      RF_Timing_Variable.xQB_ST0:"#U_32767"{};
      RF_Timing_Variable.xQB_ST1:"#U_32767"{};
      RF_Timing_Variable.xQB_ST2:"#U_32767"{};
      RF_Timing_Variable.xQB_ST2B:"#U_32767"{};
      RF_Timing_Variable.xQB_ST3:"#U_32767"{};
      RF_Timing_Variable.xQB_ST2M_G8:"#U_32767"{};
      RF_Timing_Variable.xQB_ST2M_8G:"#U_32767"{};
      RF_Timing_Variable.xQB_PT1:"#U_32767"{};
      RF_Timing_Variable.xQB_PT2:"#U_32767"{};
      RF_Timing_Variable.xQB_PT2B:"#U_32767"{};
      RF_Timing_Variable.xQB_PT3:"#U_32767"{};
      RF_Timing_Variable.xQB_PT3A:"#U_32767"{};
      RF_Timing_Variable.xQB_PT2M1_G8:"#U_32767"{};
      RF_Timing_Variable.xQB_PT2M2_G8:"#U_32767"{};
      RF_Timing_Variable.xQB_PT2M3_G8:"#U_32767"{};
      RF_Timing_Variable.xQB_PT2M1_8G:"#U_32767"{};
      RF_Timing_Variable.xQB_PT2M2_8G:"#U_32767"{};
      RF_Timing_Variable.xQB_PT2M3_8G:"#U_32767"{};
      RF_Timing_Variable.xQB_APCON:"#U_32767"{};
      RF_Timing_Variable.xQB_APCMID:"#U_32767"{};
      RF_Timing_Variable.xQB_APCOFF:"#U_32767"{};
      RF_Timing_Variable.xQB_APCDACON:"#U_32767"{};

      RF_APC_Compensate_Variable:""{};
      RF_APC_Compensate_Variable.xBAT_VOLTAGE_SAMPLE_PERIOD:"#U_10000"{};
      RF_APC_Compensate_Variable.xBAT_VOLTAGE_AVERAGE_COUNT:"#U_10000"{};
      RF_APC_Compensate_Variable.xBAT_TEMPERATURE_SAMPLE_PERIOD:"#U_10000"{};
      RF_APC_Compensate_Variable.xBAT_TEMPERATURE_AVERAGE_COUNT:"#U_10000"{};
      RF_APC_Compensate_Variable.xBAT_LOW_VOLTAGE:"#U_10000"{};
      RF_APC_Compensate_Variable.xBAT_HIGH_VOLTAGE:"#U_10000"{};
      RF_APC_Compensate_Variable.xBAT_LOW_TEMPERATURE:"#U_10000"{};
      RF_APC_Compensate_Variable.xBAT_HIGH_TEMPERATURE:"#U_10000"{};
      RF_APC_Compensate_Variable.xRF_TEMPERATURE_SAMPLE_PERIOD:"#U_10000"{};
      RF_APC_Compensate_Variable.xRF_TEMPERATURE_AVERAGE_COUNT:"#U_10000"{};

      RF_PCL_Varaible:"";
      RF_Lbmod_GC_Variable:"";
      RF_Hbmod_GC_Variable:"";
      RF_ITC_PCL_Variable:"";

      RF_TX_PowerFeedback_Variable:""{};

      RF_TX_PowerFeedback_Variable.xQB_TX_SAMPLE_OFFSET_GMSK:"#U_32767"{};
      RF_TX_PowerFeedback_Variable.xQB_TX_SAMPLE_OFFSET_EPSK:"#U_32767"{};
      RF_TX_PowerFeedback_Variable.xTXPC_EPSK_TP_SLOPE_LB:"#U_32767"{};
      RF_TX_PowerFeedback_Variable.xTXPC_EPSK_TP_SLOPE_HB:"#U_32767"{};

      RF_TX_Power_Rollback_Variable:""{};

      RF_RX_Band_Variable:""{};

      RF_Others_Variable:""{};
      RF_Others_Variable.xXO_CapID:"#U_10000"{};
      RF_Others_Variable.xafc_dac_default:"#U_32767"{};
      RF_Others_Variable.xafc_inv_slope:"#U_32767"{};
      RF_Others_Variable.xEGSM_DISABLE:"#U_127"{};
      RF_Others_Variable.xGSM850_GSM900_SWAP:"#U_127"{};
      RF_Others_Variable.xDCS1800_PCS1900_SWAP:"#U_127"{};
      RF_Others_Variable.xGSM_ERR_DET_ID:"#U_127"{};

      RF_AFC_Tracking_Variable:""{};
      RF_AFC_Tracking_Variable.xAFC_PREDICTION_ON:"#U_127"{};
      RF_AFC_Tracking_Variable.xAFC_PREDICTION_INTERVAL:"#U_32767"{};
      RF_AFC_Tracking_Variable.xAFC_PREDICTION_DECAYING_FACTOR:"#U_255"{};

      RF_CLK_Buffer_Variable:""{};

      end:"#U_0x87654321_L_0x87654321";

     };
# 5936 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "001" NVRAM_EF_L1_CUSTOM_DRDI_STATUS_DEBUGINFO_LID
     l1cal_l1CustomDRDIStautaDebugInfo_T *1
     {

     };
# 5956 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "000" NVRAM_EF_L1_MIPI_CTRL_TABLE_GSM850_LID
     l1cal_mipi_ctrl_table_band_T *1
     {

     };
# 5975 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "000" NVRAM_EF_L1_MIPI_CTRL_TABLE_GSM900_LID
     l1cal_mipi_ctrl_table_band_T *1
     {

     };
# 5994 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "000" NVRAM_EF_L1_MIPI_CTRL_TABLE_DCS1800_LID
     l1cal_mipi_ctrl_table_band_T *1
     {

     };
# 6013 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "000" NVRAM_EF_L1_MIPI_CTRL_TABLE_PCS1900_LID
     l1cal_mipi_ctrl_table_band_T *1
     {

     };
# 6035 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "000" NVRAM_EF_L1_TEMPERATURE_ADC_LID
     l1cal_temperatureADC_T *1
     {

     };
# 6056 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "001" NVRAM_EF_L1_TAS_CUSTOM_PARAMES_LID
     l1_tas_custom_params_T *1
     {

     };
# 6073 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "000" NVRAM_EF_L1_TAS_CUSTOM_PDATA_LID
     l1_tas_custom_pdata_T *1
     {

     };
# 6101 "interface/service/nvram/nvram_editor_data_item.h"
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TEMP_DAC_LID
     ul1cal_tempdacData_T *1
     {

   };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS_BAND1_LID
     ul1cal_pathlossData_T *1
     {

   };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS_BAND2_LID
     ul1cal_pathlossData_T *1
     {

   };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS_BAND3_LID
     ul1cal_pathlossData_T *1
     {

   };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS_BAND4_LID
     ul1cal_pathlossData_T *1
     {

   };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS_BAND5_LID
     ul1cal_pathlossData_T *1
     {

   };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS_BAND6_LID
     ul1cal_pathlossData_T *1
     {

   };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS_BAND7_LID
     ul1cal_pathlossData_T *1
     {

   };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS_BAND8_LID
     ul1cal_pathlossData_T *1
     {

   };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS_BAND9_LID
     ul1cal_pathlossData_T *1
     {

   };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS_BAND10_LID
     ul1cal_pathlossData_T *1
     {

   };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS_BAND11_LID
     ul1cal_pathlossData_T *1
     {

   };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS_BAND19_LID
     ul1cal_pathlossData_T *1
     {

   };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXDAC_BAND1_LID
     ul1cal_txdacData_T *1
     {

   };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXDAC_BAND2_LID
     ul1cal_txdacData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXDAC_BAND3_LID
     ul1cal_txdacData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXDAC_BAND4_LID
     ul1cal_txdacData_T *1
     {

   };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXDAC_BAND5_LID
     ul1cal_txdacData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXDAC_BAND6_LID
     ul1cal_txdacData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXDAC_BAND7_LID
     ul1cal_txdacData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXDAC_BAND8_LID
     ul1cal_txdacData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXDAC_BAND9_LID
     ul1cal_txdacData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXDAC_BAND10_LID
     ul1cal_txdacData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXDAC_BAND11_LID
     ul1cal_txdacData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXDAC_BAND19_LID
     ul1cal_txdacData_T *1
     {

     };
# 6239 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "002" NVRAM_EF_L1_AFCDATA_LID
     l1cal_afcData_T *1
     {
     };
# 6256 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "004" NVRAM_EF_L1_TXIQ_LID
     l1cal_txiq_T *1
     {
     };
# 6273 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "006" NVRAM_EF_L1_RFSPECIALCOEF_LID
     l1cal_rfspecialcoef_T *1
     {
     };
# 6295 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "002" NVRAM_EF_L1_INTERSLOT_RAMP_GSM850_LID
     l1cal_interRampData_T *1
     {
     };
# 6317 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "002" NVRAM_EF_L1_INTERSLOT_RAMP_GSM900_LID
     l1cal_interRampData_T *1
     {
     };
# 6339 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "002" NVRAM_EF_L1_INTERSLOT_RAMP_DCS1800_LID
     l1cal_interRampData_T *1
     {
     };
# 6362 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "002" NVRAM_EF_L1_INTERSLOT_RAMP_PCS1900_LID
     l1cal_interRampData_T *1
     {
     };
# 6384 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "003" NVRAM_EF_L1_CRYSTAL_AFCDATA_LID
     l1cal_crystalAfcData_T *1
     {
     };
# 6401 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "002" NVRAM_EF_L1_CRYSTAL_CAPDATA_LID
     l1cal_crystalCapData_T *1
     {
     };
# 6511 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT "000" NVRAM_EF_AS_BAND_SETTING_LID nvram_ef_as_band_setting_struct * (1 * (2)){};

     LID_BIT MULTIPLE_LID "000" NVRAM_EF_BAND_INFO_LID
     nvram_ef_band_info_struct *(1 * (2))
     {
     };
# 6531 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "000" NVRAM_EF_GAS_WORKING_BAND_INFO_LID
     nvram_ef_gas_workung_band_info_struct *(1 * (2))
     {
     };
# 6550 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT "003" NVRAM_EF_TST_FILTER_LID
     nvram_ef_tst_filter_struct *1
     {
         nvram_ef_tst_filter:"tst specific data"
         {
         };
     };
     LID_BIT "000" NVRAM_EF_DHL_FILTER_LID
     nvram_ef_dhl_filter_struct *1
     {
         nvram_ef_dhl_filter:"dhl-specific data"
         {
         };
     };
# 6578 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT "000" NVRAM_EF_GAS_CSG_FINGERPRINT_LID
     nvram_ef_gas_csg_fingerprint_struct *1
     {
     };
# 6595 "interface/service/nvram/nvram_editor_data_item.h"
LID_BIT "003" NVRAM_EF_CB_CH_INFO_LID
     nvram_ef_cb_ch_info_struct *(1 * (2))
     {
         cbmir_mask:"CBMIR MASK"
         {
         };

         cbmir_me_mask:"CBMIR ME MASK"
         {
         };

         dcs_mask:"DCS MASK"
         {
         };

         dcs:"DCS storage in ME"
         {
         };

         cbmi_me_mask:"CBMI MASK"
         {
         };

         cbmi_sim_mask:"CBMI MASK"
         {
         };

         cbmi:"CBMI storage in ME";

         cbmir:"CBMIR storage in ME";
     };

LID_BIT "002" NVRAM_EF_SMSAL_COMMON_PARAM_LID
     nvram_ef_smsal_common_param_struct *(1 * (2))
     {
         bearer_service:" Preferred Service"
         {
           bearer:8 "Prefered band"
             {
               0x0:"GPRS only";
                 0x1:"GSM only";
                 0x2:"GPRS prefer";
                 0x3:"GSM prefer";
             };
         };

       status_report:" Status Report"
         {
           status_rep:8 "Status Report"
             {
               0x0:"Not Supported (or request)";
               0x1:"Supported (or request)";
             };
         };

       reply_path:" Reply Path"
         {
           reply_p:8 "Reply Path"
             {
               0x0:"Not Supported (or request)";
               0x1:"Supported (or request)";
             };
         };

       vp_format:" VP Format"
         {
           vp_f:8 "VP Format"
             {
               0x0:"VP not present";
               0x1:"Enhanced format";
               0x2:"Relative format (default)";
               0x3:"Absolute format";
             };
         };

       prefer_mem1:" Preferred Memory 1"
         {
           p_mem1:8 "Preferred Memory 1"
             {
               0x0:"SIM";
               0x1:"ME";
               0x2:"SR";
               0x3:"BM";
               0x4:"TA";
               0x5:"SM_PREFER";
               0x6:"ME_PREFER";
               0x7:"Not Specified (default)";
             };
         };
       prefer_mem2:" Preferred Memory 2"
         {
           p_mem2:8 "Preferred Memory 2"
             {
               0x0:"SIM";
               0x1:"ME";
               0x2:"SR";
               0x3:"BM";
               0x4:"TA";
               0x5:"SM_PREFER";
               0x6:"ME_PREFER";
               0x7:"Not Specified (default)";
             };
         };
       prefer_mem3:" Preferred Memory 3"
         {
           p_mem3:8 "Preferred Memory 3"
             {
               0x0:"SIM";
               0x1:"ME";
               0x2:"SR";
               0x3:"BM";
               0x4:"TA";
               0x5:"SM_PREFER";
               0x6:"ME_PREFER";
               0x7:"Not Specified (default)";
             };
         };

       cbch_req:"CB status"
         {
           cb_req:8 "CB status"
             {
               0x0:"CB OFF";
               0x1:"CB ON";
             };
         };
       all_lang_on:"CB all language ON "
         {
           all_lang_is_on:8 "CB all language ON"
             {
               0x0:"CB All Language OFF";
               0x1:"CB All Language ON";
             };
         };
       rmi_act_pfile_id:"Activated profile ID for AT command"
         {
         };
       fo:"First Octet of TP Header"
         {
         };
       sms_fdn_off:"Turn Off SMS FDN"
         {
           sms_fdn_is_off:8 "Turn Off SMS FDN"
             {
               0x0:"Not Turn OFF";
               0x1:"Turn OFF";
             };
         };

       last_used_tp_mr:"last used tp message reference"
         {
         };

       mem_capacity_available:"mem_capacity_available"
         {
           mem_cap_available:8 "mem_capacity_available"
             {
               0x0:"means flag unset; memory capacity available";
               0x1:"means flag set";
             };
         };

       selected_msp:"last used msp"
         {
         };

       reserve:"not used"
         {
         };

     };


LID_BIT "001" NVRAM_EF_SMSAL_MAILBOX_ADDR_LID
     nvram_ef_smsal_mailbox_addr_struct *(2 * (2))
     {
         alpha_id:"Alpha identifier"
         {
         };

       BCD_length:"Length of BCD number"
         {
         };
       TON_NPI:"TON and NPI"
         {
         };
       DialNum:"Dailling number"
         {
         };
       cc_ident:"Capability/ configuration identifier"
         {
         };
       pad:"Extension 1 record identifier"
         {
         };
     };



LID_BIT "001" NVRAM_EF_SMSAL_SMS_LID
     nvram_ef_smsal_sms_struct *(10 * (2))
     {
         status:"Status"
         {
         };

       remainder:"Reminder"
         {
         };

     };


LID_BIT "000" NVRAM_EF_SMSAL_SMSP_LID
     nvram_ef_smsal_smsp_struct *(2 * (2))
     {
         profile_name:"store alpha-identifier"
         {
         };

       para_ind:"Parameter Indicator"
         {
         };
       da:"Destination Address"
         {
         };
       sca:"Service Centre Address"
         {
         };
       pid:"Protocol identifier"
         {
         };
       dcs:"Data coding scheme"
         {
         };
       vp:"Validity period"
         {
         };
     };

LID_BIT "000" NVRAM_EF_CB_DEFAULT_CH_LID
     nvram_ef_cb_default_ch_struct *(1 * (2))
     {
         cbmi:"Default CB Channel ID";
     };
# 6854 "interface/service/nvram/nvram_editor_data_item.h"
LID_BIT "000" NVRAM_EF_SMSAL_MWIS_LID
     nvram_ef_smsal_mwis_struct *(5 * (2))
     {
         message_waiting_indication_status:"Message waiting indication status";
         message_waiting_indication_status[0]
         {
           vm:1 "Voice mail"
             {
               0x0:"Set indication active";
                 0x1:"Set indication inactive";
             };

           fax:1 "FAX"
             {
               0x0:"Set indication active";
               0x1:"Set indication inactive";
             };

           email:1 "Email"
             {
               0x0:"Set indication active";
               0x1:"Set indication inactive";
             };

           other:1 "Other"
             {
               0x0:"Set indication active";
               0x1:"Set indication inactive";
             };

           RFU:4 "RFU"
             {
               0x0:"Set indication active";
               0x1:"Set indication inactive";
             };
         };

         message_waiting_indication_status[1]
         {
           vm:8 "Number of Voicemail message waiting"
             {
             };
         };

         message_waiting_indication_status[2]
         {
           fm:8 "Number of fax mail message waiting"
             {
             };
         };

         message_waiting_indication_status[3]
         {
           em:8 "Number of email message waiting"
             {
             };
         };

         message_waiting_indication_status[4]
         {
           om:8 "Number of other message waiting"
             {
             };
         };

       pad:"Padding"
         {
         };
     };
# 6937 "interface/service/nvram/nvram_editor_data_item.h"
LID_BIT "000" NVRAM_EF_CFU_FLAG_LID
     nvram_ef_cfu_flag_struct *(1 * (2))
     {
         cfu_flag:"CFU flag"
         {
         };
     };

LID_BIT "000" NVRAM_EF_CSM_ESSP_LID
     nvram_ef_csm_essp_struct *1
     {
     };

LID_BIT "001" NVRAM_EF_MM_LOCIGPRS_LID
     nvram_ef_mm_eqplmn_locigprs_struct * (1 * (2))
     {
     };
# 6967 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "001" NVRAM_EF_MSCAP_LID
     nvram_ef_mscap_struct *1
     {
         speech_version:"Supported speech version"
         {
           FR:1 "FR"
             {
               0x0:"Not supported";
                 0x1:"Supported";
             };

           HR:1 "HR"
             {
               0x0:"Not supported";
               0x1:"Supported";
             };

           EFR:1 "EFR"
             {
               0x0:"Not supported";
               0x1:"Supported";
             };

           AMR_FR:1 "AMR FR"
             {
               0x0:"Not supported";
               0x1:"Supported";
             };

           AMR_HR:1 "AMR HR"
             {
               0x0:"Not supported";
               0x1:"Supported";
             };
         };
       speech_version_byte2:"speech_version_byte2"
         {
           AMR_WB:8 "2G AMR WB"
           {
             0x0:"Not supported";
             0x2:"supported";
           };
         };
       umts_supported_speech:"umts_supported_speech"
         {
           umts_supported_code:8 "umts_supported_code"
           {
             0x20:"TDD support CODEC";
             0x60:"FDD support CODEC";
           };
         };
       umts_supported_speech_byte2:"umts_supported_speech_byte2"
         {
           AMR_WB:8 "3G AMR WB"
           {
             0x00:"Not supported";
             0x04:"supported";
           };
         };


       data_cap1:"Supported speech version"
         {
           CSD:1 "CSD"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           trans_fax:1 "Transparent Fax"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           non_trans_fax:1 "Non-transparent Fax"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           trans_data_cs:1 "Transparent data circuit synchronous"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           non_trans_data_cs:1 "Non-transparent data circuit synchronous"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           trans_data_acs:1 "Transparent data circuit asynchronous"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           non_trans_data_acs:1 "Non-transparent data circuit asynchronous"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           trans_PAD_aa:1 "Transparent PAD access asynchronous"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };
         };

       data_cap2:"Supported speech version"
         {
           non_trans_PAD_aa:1 "Non-transparent PAD access asynchronous"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           trans_data_ps:1 "Transparent data packet synchronous"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           non_trans_PAD_pas:1 "Non-transparent data packet asynchronous"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           HSCSD_multislot:5 "HSCSD multislot class"
             {
             };

         };
         channel_coding:"Supported speech version"
         {
           tch_f48:1 "TCH/F4.8"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           tch_f96:1 "TCH/F9.6"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           tch_f144:1 "TCH/F14.4"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           tch_f288:1 "TCH/F28.8"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           tch_f32:1 "TCH/F32"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           tch_f432:1 "TCH/F43.2"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };
         };

         disable_call:"disable_call"
         {
            disable_call:8 "disable_call"
            {
              0x01:"call disabled" ;
              0x00:"call not disabled";
            };
         };

         rr_cap:"rr_cap"
         {
            spare_bits:5 "spare"
            {
            };

            vamos_support_level:2 "VAMOS Level"
            {
              0x00:"VAMOS disabled" ;
              0x01:"VAMOS level I supported";
              0x02:"VAMOS level II supported";
            };

            random_fill_bits:1 "Random fill bits support"
            {
              0x0:"random fill bit disabled" ;
              0x1:"random fill bit enabled";
            };
         };
         mm_non_drx_timer_value:"mm_non_drx_timer_value"
         {
            mm_non_drx_timer_value:8 "mm_non_drx_timer_value"
            {
            };
         };
     };
# 7208 "interface/service/nvram/nvram_editor_data_item.h"
 LID_BIT "002" NVRAM_EF_ALS_LINE_ID_LID
     nvram_ef_als_line_id_struct *(1 * (2))
     {
         als_line_id:"als_line_id"
         {
           als_line_id:8 "als_line_id"
           {
             0x00:"line 1";
             0x01:"line 2";
           };
         };
     };


LID_BIT MULTIPLE_LID "005" NVRAM_EF_CLASSMARK_RACAP_LID
     nvram_ef_classmark_racap_struct *1
     {
         byte1:""
         {
           a54:1 "A5/4"
             {
             };

           a55:1 "A5/5"
             {
             };
           a56:1 "A5/6"
             {
             };
           a57:1 "A5/7"
             {
             };
           band3:1 "Band 3"
             {
             };
           band2:1 "Band 2"
             {
             };
           band1:1 "Band 1"
             {
             };
           spare:1 "Spare"
             {
             };
         };

       byte2:""
         {
           radio_cap1:4
             {
             };
           radio_cap2:4
             {
             };
         };

       byte3:""
         {
           ucs2:1 "UCS2 treatment"
             {
             };
           hscsd_mtslot_cap:5 "HSCSD Multi slot capability"
             {
             };
           hscsd_mtslot_cap_p:1 "HSCSD Multi slot capability present"
             {
             };
           rsupport:1 "R-GSM support"
             {
             };
         };

       byte4:""
         {
           gsm400_p:1 "GSM400 present"
             {
             };
           ms_posi_method:5 "MS Positioning method"
             {
             };
           ms_posi_method_p:1 "MS Positioning method present"
             {
             };
           em_cap:1 "Extended Measurement Capability"
             {
             };
         };

       byte5_byte6:""
         {
           gsm1900_r_cap:4 "GSM1900 Radio Capability"
             {
             };
           gsm1900_r_cap_p:1 "GSM1900 Radio Capability present"
             {
             };
           gsm850_r_cap:4 "GSM850 Radio Capability"
             {
             };
           gsm850_r_cap_p:1 "GSM850 Radio Capability present"
             {
             };
           gsm400_r_cap:4 "GSM400 Radio Capability"
             {
             };
           gsm400_supp:2 "GSM400 Bands Supported"
             {
             };
         };

       byte7:"Octet3 of Mobile Station Classmark2 information element"
         {
           spare:3 "Spare"
             {
             };
           a51:1 "A5/1"
             {
             };
           es_ind:1 "ES IND"
             {
             };
           rev_level:2 "Revision level"
             {
             };
           spare:1 "Spare"
             {
             };
         };


       byte8:"Octet4 of Mobile Station Classmark2 information element"
         {
           spare:1 "Spare"
             {
             };
           vgcs:1 "VGCS"
             {
             };
           vbs:1 "VBS"
             {
             };
           sm_cap:1 "SM capability"
             {
             };
           SSScr_ind:2 "SS Screen Indicator"
             {
             };
           ps_cap:1 "PS capability"
             {
             };
           spare:1 "Spare"
             {
             };
         };


       byte9:"Octet5 of Mobile Station Classmark2 information element"
         {
           a52:1 "A5/2"
             {
             };
           a53:1 "A5/3"
             {
             };
           cmsp:1 "CMSP"
             {
             };
           solsa:1 "SoLSA"
             {
             };
           spare:1 "Spare"
             {
             };
           lcsva_cap:1 "LCSVA CAP"
             {
             };
           spare:1 "Spare"
             {
             };
           cm3:1 "Support options in Classmark 3"
             {
             };
         };

       byte10:"GPRS related parameters used in Mobile Station Radio Access Capability IE"
         {
           rev_level_ind:1 "Revision Level Indicator"
             {
             };
           gprs_ext_dyna_cap:1 "GPRS Extended Dynamic Allocation Capability"
             {
             };
           gprs_mtslot_cap:5 "GPRS Multi slot capability"
             {
             };
           gprs_mtslot_cap_p:1 "GPRS Multi slot capability present"
             {
             };
         };

       byte11:"GPRS related parameters used in Mobile network capability IE"
         {
           sm_cap_gprs:1 "SM capabilities via GPRS channels"
             {
             };
           gea_7:1 "GEA7"
             {
             };
           gea_6:1 "GEA6"
             {
             };
           gea_5:1 "GEA5"
             {
             };
           gea_4:1 "GEA4"
             {
             };
           gea_3:1 "GEA3"
             {
             };
           gea_2:1 "GEA2"
             {
             };
           gea_1:1 "GEA1"
             {
             };
         };

       byte12:"GPRS related parameters used in Mobile network capability IE"
         {
           pfc:1 "BSS packet flow proedure"
             {
             };
           spare:7 "Spare"
             {
             };
         };

       byte13:" "
         {
           spare:8 "Spare"
             {
             };
         };

       byte14:" "
         {
           spare:8 "Spare"
             {
             };
         };

       byte15:"R4 Capabilities"
         {
           spare:4 "Spare"
             {
             };
           extended_dtm:1 "Extended DTM GPRS/EDGE Multi Slot Class"
             {
             };
           geran_fp1:1 "GERAN Feature Package 1"
             {
             };
           tdd_support:1 "UMTS 1.28 Mcps TDD Radio Access Technology Capability"
             {
             };
           gsm_750:1 "GSM 750 Associated Radio Capability"
         {
             };
         };

       byte16:"R5 Capabilities"
         {
           spare:1 "Spare"
             {
             };
           Oct_psk_multislot:2 "8PSK Multislot Power Profile"
             {
             };
           gmsk_multislot:2 "GMSK Multislot Power Profile"
             {
             };
           geran_fp2:1 "GERAN Feature Package 2"
             {
             };
           geran_iu:1 "GERAN Iu Mode Capability"
             {
             };
           high_multislot:1 "High Multislot Capability"
             {
             };
         };

       byte17:"R6 Capabilities"
         {
           spare:1 "Spare"
             {
             };
           rptd_acch:1 "Repeated ACCH Capability"
             {
             };
           dtm_high_multislot:1 "DTM GPRS High Multi Slot Class"
             {
             };
           dtm_enhancement:1 "DTM Enhancements Capability"
             {
             };
           saic:2 "Downlink Advanced Receiver Performance"
             {
             };
           t_gsm_900:1 "T-GSM 900 Bands Supported"
             {
             };
           t_gsm_400:1 "T-GSM 400 Bands Supported"
             {
             };
         };

       byte18:"R7 Capabilities"
         {
           spare:4 "Spare"
             {
             };
           add_pos_cap:1 "Additional Positioning Capabilities"
             {
             };
           cphr_set:1 "Ciphering Mode Setting Capability"
             {
             };
           t_gsm_810:1 "T-GSM 810 Associated Radio Capability"
             {
             };
           t_gsm_710:1 "GSM 710 Associated Radio Capability"
             {
             };
         };

       byte19:"R8 Capabilities"
         {
           spare:4 "Spare"
             {
             };
           pbcr:1 "Priority-based reselection support"
             {
             };
           e_utra_meas:1 "E-UTRA Measurement and Reporting support"
         {
             };
           e_utra_tdd:1 "E-UTRA TDD support"
             {
             };
           e_utra_fdd:1 "E-UTRA FDD support"
             {
             };
         };

       byte20:"R9 Capabilities"
         {
           spare:5 "Spare"
             {
             };
           vamos:2 "VAMOS Level"
         {
             };
           csg_report:1 "UTRA CSG Cells Reporting"
             {
             };
         };
     };


LID_BIT "009" NVRAM_EF_NET_PAR_LID nvram_ef_net_par_struct * 1{};
# 7589 "interface/service/nvram/nvram_editor_data_item.h"
LID_BIT "000" NVRAM_EF_UMTS_IMSI_LID nvram_ef_umts_imsi_struct * (1 * (2)){};
LID_BIT "000" NVRAM_EF_UMTS_START_HFN_LID nvram_ef_umts_start_hfn_struct * (1 * (2)){};
LID_BIT "019" NVRAM_EF_UMTS_USIME_RRC_DYNAMIC_CAP_LID nvram_ef_umts_usime_rrc_dynamic_struct * (1 * (2)){};
LID_BIT "003" NVRAM_EF_UMTS_FREQUENCY_REPOSITORY_LID nvram_ef_umts_frequency_repository_struct * 1{};







LID_BIT "000" NVRAM_EF_UMTS_DMCR_SETTING_LID nvram_ef_umts_dmcr_setting_struct * (1){};
LID_BIT "000" NVRAM_EF_UMTS_SIB_SKIP_SETTING_LID nvram_ef_umts_sib_skip_setting_struct * (1){};





LID_BIT "000" NVRAM_EF_PREV_VISITED_CELL_INFO_LID nvram_ef_prev_visited_cell_info_struct * (1 * (2)){};
LID_BIT "000" NVRAM_EF_UE_CSG_LIST_LID nvram_ef_ue_csg_list_struct * 1{};



LID_BIT "000" NVRAM_EF_UMTS_FINGERPRINT_INFO_LID nvram_ef_umts_fingerprint_entry_struct * 1{};




LID_BIT "000" NVRAM_EF_UMTS_BAND_PRIORITY_LID nvram_ef_umts_band_priority_struct * 1{};




LID_BIT "000" NVRAM_EF_L1_3G_CAL_DATA_LID nvram_ef_l1_3g_cal_data_struct * 1 {};
# 7634 "interface/service/nvram/nvram_editor_data_item.h"
LID_BIT "000" NVRAM_EF_SIM_ASSERT_LID nvram_ef_sim_assert_struct* 80 {};
# 7862 "interface/service/nvram/nvram_editor_data_item.h"
LID_BIT "000" NVRAM_EF_ETWS_SETTING_LID
     nvram_ef_etws_setting_struct *1
     {

    };



LID_BIT "004" NVRAM_EF_PORT_SETTING_LID
     port_setting_struct *1
     {
     };
# 7887 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "001" NVRAM_EF_BARCODE_NUM_LID
     nvram_ef_barcode_num_struct *1
     {
         nvram_ef_barcode_num:"Barcode Serial Number"
         {
         };
     };
# 7906 "interface/service/nvram/nvram_editor_data_item.h"
LID_BIT "000" NVRAM_EF_CAL_FLAG_LID
     nvram_cal_flag_struct *1
     {
         u1CalAllFlag:"Calibration flag for this phone"
         {
         };
         u1CalMarkNumber:"The number valid element of calibration mark"
         {
         };
         CalFlagMarks:"The 10-element array of calibration flag"
         {
         };

     };
# 7932 "interface/service/nvram/nvram_editor_data_item.h"
LID_BIT "000" NVRAM_EF_CAL_DATA_CHECK_LID
     nvram_cal_data_check_struct *1
     {
         u1ValidNum:"The number valid element of calibration data check"
         {
         };
         CalDataCheck:"The 225-element array of cal data check"
         {
         };
     };
# 7955 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT MULTIPLE_LID "001" NVRAM_EF_IMEI_IMEISV_LID
     nvram_ef_imei_imeisv_struct *10
     {
         imei:"The IMEI is 15 digit"
         {
         };

       svn:"Software version number"
         {
         };
       pad:"Padding Byte"
         {
         };
     };
# 7983 "interface/service/nvram/nvram_editor_data_item.h"
LID_BIT MULTIPLE_LID "003" NVRAM_EF_MS_SECURITY_LID
     smu_security_info_struct *(1 * (2))
     {
       security_indication:"Security indication"
         {
           pl:1 "Phone lock"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           nl:1 "Network lock"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           nsbl:1 "Network subset lock"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           spl:1 "Service provide lock"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           cl:1 "Corporate lock"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           il:1 "IMSI lock"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           al:1 "Auto lock"
             {
               0x0:"Not Supported";
               0x1:"Supported";
             };

           res:1 "Reserved"
             {




             };

         };
       phone_key:"Phone lock Password"
         {
         };
       last_imsi:"Last IMSI code"
         {
         };

       pin1:"Last IMSI code"
         {
         };
       pin1_valid:"Last IMSI code"
         {
         };
       phone_lock_verified:"Phone Lock verified"
         {
         };
       iccid:"ICCID"
         {
         };
     };
# 8073 "interface/service/nvram/nvram_editor_data_item.h"
     LID_BIT "000" NVRAM_EF_GPS_SETTING_DATA_LID
     nvram_ef_gps_setting_data_struct *1
     {
     };
# 8135 "interface/service/nvram/nvram_editor_data_item.h"
LID_BIT "003" NVRAM_EF_PHB_LID
     nvram_ef_phb_struct *10
     {
         alpha_id:"Alpha identifier"
         {
         };

       BCD_length:"Length of BCD number"
         {
         };
       TON_NPI:"TON and NPI"
         {
         };
       DialNum:"Dailling number"
         {
         };
       cc_ident:"Capability/ configuration identifier"
         {
         };
       pad:"Extension 1 record identifier"
         {
         };
     };
# 8176 "interface/service/nvram/nvram_editor_data_item.h"
LID_BIT "003" NVRAM_EF_PHB_LN_ENTRY_LID
     nvram_ef_phb_ln_struct *(6 * (2))
     {
         no_entry:"Numbers of entries"
         {
         };
         padding1:"padding1"
         {
         };

         padding2:"padding2"
         {
         };
         padding3:"padding3"
         {
         };
       array:"Last Number information"
         {
         };
       array.name_length:"name length"
         {
         };
       array.name_dcs:"name dcs"
         {
         };
       array.name:"name"
         {
         };
       array.count:"count"
         {
         };
       array.addr_length:"addr length"
         {
         };
       array.addr_type:"addr type"
         {
         };
       array.addr_bcd:"addr bcd"
         {
         };
       array.accu_times:"accu times"
         {
         };
       array.is_new_event:"is new event"
         {
         };
       array.adn_record_index:"adn record index"
         {
         };
       array.call_duration:"call duration"
         {
         };
       array.time:"Call time"
         {
         };
       array.time.rtc_sec:"Second"
         {
         };
       array.time.rtc_min:"Minute"
         {
         };
       array.time.rtc_hour:"Hour"
         {
         };
       array.time.rtc_day:"Day"
         {
         };
       array.time.rtc_mon:"Month"
         {
         };
       array.time.rtc_wday:"Week day"
         {
         };
       array.time.rtc_year:"Year"
         {
         };
     };
# 8266 "interface/service/nvram/nvram_editor_data_item.h"
 LID_BIT "000" NVRAM_EF_PHB_LN_TYPE_SEQ_LID
     nvram_ef_phb_ln_type_seq_struct *(1 * (2))
     {
     };





LID_BIT "004" NVRAM_EF_CUST_HW_LEVEL_TBL_LID
     custom_hw_level_struct *1
     {

         PWM1:" PWM1[Level][0]: freq, PWM1[Level][1]: duty";
         PWM2:" PWM2[Level][0]: freq, PWM2[Level][1]: duty";
         PWM3:" PWM3[Level][0]: freq, PWM3[Level][1]: duty";

         MainLCD_Contrast:" MainLCD Contrast [Level 1 ~ 15]";





         SubLCD_Contrast:" SubLCD Contrast [Level 1 ~ 15]";





         BatteryLevel:" Battery Level [Level 1 ~ 10 ] ";



     };

LID_BIT "001" NVRAM_EF_UEM_MANUFACTURE_DATA_LID
     uem_context_manufacture_struct *1
     {
         me_manufacture_id:""
         {
         };
     };

LID_BIT "002" NVRAM_EF_UEM_RMI_DATA_LID
     uem_context_rmi_struct *1
     {

         audio_mute_flag:"Audio mute flag"
         {
         };

       gpio_status:"GPIO status"
         {
         };
       silent_mode:"Silent mode ON/OFF"
         {
         };
       alert_mode:"Alert mode"
         {
         };
       country_code:"Country code"
         {
         };
       lang_id:"Language identifier"
         {
         };
       date_mode:"Date mode"
         {
         };
       time_mode:"Time mode"
         {
         };
       greeting_mode:"Greeting mode"
         {
         };
       greeting_text:"Greeting Text"
         {
         };
       greeting_text.text_dcs:"dcs"
         {
         };
       greeting_text.text_length:"Length"
         {
         };
       greeting_text.text:"context"
         {
         };

       alarm_info:"Alarm Information"
         {
         };
       alarm_info.alarm_format:"Alarm format"
         {
         };
       alarm_info.alarm_index:"Alarm index"
         {
         };
       alarm_info.type:"Alarm Type"
         {
         };
       alarm_info.text:"Alarm Text"
         {
         };
       alarm_info.recurr:"Alarm recurrence"
         {
         };

       alarm_info.data_time:"Alarm date and time"
         {
         };
       alarm_info.data_time.rtc_sec:"Second"
         {
         };
       alarm_info.data_time.rtc_min:"Minute"
         {
         };
       alarm_info.data_time.rtc_hour:"Hour"
         {
         };
       alarm_info.data_time.rtc_mon:"Month"
         {
         };
       alarm_info.data_time.rtc_wday:"Week day"
         {
         };
       alarm_info.data_time.rtc_year:"Year"
         {
         };
     };
# 8409 "interface/service/nvram/nvram_editor_data_item.h"
LID_BIT "004" NVRAM_EF_SYS_CACHE_OCTET_LID
     nvram_sys_cache_octet_struct *20
     {
     };
# 8470 "interface/service/nvram/nvram_editor_data_item.h"
LID_BIT "000" NVRAM_EF_PS_CONFORMANCE_TESTMODE_LID
    nvram_ef_ps_conformance_testmode_struct* 1
    {

};
# 8513 "interface/service/nvram/nvram_editor_data_item.h"
LID_BIT "001" NVRAM_EF_MSQ_LIST_LID
    nvram_ef_msq_list_struct *1
    {
        is_msq_on:"Switch ON/OFF of MSQ"
        {
            is_msq_on:8 "Switch ON/OFF of MSQ"
            {
                0x00: "MSQ: OFF";
                0x01: "MSQ: ON";
            };
        };

        msq_entry:"MSQ entries";
# 8540 "interface/service/nvram/nvram_editor_data_item.h"
    };


LID_BIT "010" NVRAM_EF_RAC_PREFERENCE_LID
     nvram_ef_rac_preference_struct *(1 * (2))
     {
         arg1:"PLMN selection mode / Preferred Service in NMO III"
         {

           plmn_list_pref:1 "PLMN list preference"
             {
               0x0:"ACCURACY First";
               0x1:"SPEED First";
             };
# 8568 "interface/service/nvram/nvram_editor_data_item.h"
           unused:1 "Unused"
             {

             };


           csg_auto_search_preference:1 "CSG auto search preference"
             {
               0x0:"DISABLE";
               0x1:"ENABLE";
             };







           mm_integrity_check_preference:1 "MM integrity check preference"
             {
               0x0:"enable integrity check";
               0x1:"disable integrity check when test SIM";
             };






           conn_type:1 "GPRS Connection Type"
             {
               0x0:"When Needed";
               0x1:"Always on";
             };
           pf_serv:2 "Preferred service"
             {
               0x0:"CS_ONLY";
               0x1:"PS_ONLY";
               0x2:"BOTH_PREFER_CS";
               0x3:"BOTH_PREFER_PS";
             };
           plmn_sel_mode:1 "PLMN select mode"
             {
               0x0:"Manual";
               0x1:"Automatic";
             };
         };

         rat_mode: "RAT_MODE"
         {
           pf_rat_mode: 8 "Prefered RAT MODE"
             {
               0x1: "L4C_RAT_GSM";
               0x2: "L4C_RAT_UMTS";
               0x3: "L4C_RAT_GSM_UMTS";
               0x4: "L4C_RAT_LTE";
               0x5: "L4C_RAT_GSM_LTE";
               0x6: "L4C_RAT_UMTS_LTE";
               0x7: "L4C_RAT_GSM_UMTS_LTE";
             };
         };

         preferred_rat: "PREFERRED_RAT"
         {
           pf_rat: 4 "Preferred RAT"
             {
               0x0: "L4C_RAT_NONE";
               0x1: "L4C_RAT_GSM";
               0x2: "L4C_RAT_UMTS";
               0x4: "L4C_RAT_LTE";
             };

           pf_irat: 4 "IRAT"
             {
               0x0: "L4C_RAT_NONE";
               0x1: "L4C_RAT_GSM";
               0x2: "L4C_RAT_UMTS";
               0x3: "L4C_RAT_GSM_UMTS";
             };

         };

         preference: "DATA TRANSFER PREFERENCE"
         {

           pf_gprs_transfer: 2 "gprs transfer preference"
         {
               0x0: "DATA_PREFER";
               0x1: "CALL_PREFER";
             };






           pf_peer_gprs_transfer: 2 "peer gprs transfer preference"
             {
               0x0: "NO_PREEMPTION";
               0x1: "PREEMPT_PEER_PS_TRANSFER";
             };






           pf_hspa_preference: 4 "hspa preference"
             {
               0x0: "HSPA_OFF";
               0x1: "HSDPA_ON";
               0x2: "HSDPA_HSUPA_ON";
               0x3: "HSPA_PLUS_ON";
             };





         };
     roaming_setting: "ROAMING RELATED SETTING"
           {
           pf_iroaming: 1 "international roaming support"
               {
                 0x0: "ENABLE";
                 0x1: "DISABLE";
               };
           pf_nroaming: 1 "national roaming support"
               {
                 0x0: "ENABLE";
                 0x1: "DISABLE";
               };
           pf_hhplmn: 1 "auto return to high priority PLMN support"
               {
                 0x0: "ENABLE";
                 0x1: "DISABLE";
               };

           pf_roamingbroker: 1 "enable VIVO roaming broker"
               {
                 0x0: "DISABLE";
                 0x1: "ENABLE";
               };
           unused: 4 "Unused"
               {
               };
           };

    mm_ivt: "MOBILITY MANAGEMENT IMS VOICE TERMINATION"
    {
        mm_ivt:8 "mobility management IMS voice termination"
        {
            0x1: "DISABLED";
            0x2: "ENABLED";
        };
             };

    utran_vdp: "VOICE DOMAIN PREFERENCE FOR UTRAN"
    {
        utran_vdp:8 "voice domain preference for UTRAN"
        {
            0x1: "CS Voice only";
            0x2: "CS Voice preferred, IMS PS Voice as secondary";
            0x3: "IMS PS Voice preferred, CS Voice as secondary";
        };
    };

    reported_rat: "SUPPORTED RAT MODE REPORTED TO NETWORK"
    {
        reported_rat:8 "supported RAT mode reported to network"
        {
           0x1: "GSM";
           0x2: "UMTS";
           0x3: "GSM and UMTS";
           0x4: "LTE";
           0x5: "GSM and LTE";
           0x6: "UMTS and LTE";
           0x7: "GSM and UMTS and LTE";
           0x10: "C2K";
           0x14: "LTE and C2K";
           0x17: "GSM and UMTS and LTE and C2K";
        };
    };
     };


LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_PWRONCAL_LID
     RFC_DATABASE_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_FREQADJTBL_LID
     LTE_FreqAdjustTable *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_RSSIGAINTBL_1STBAND_LID
     LTE_RSSIBandGainTable *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_RSSIGAINTBL_2NDBAND_LID
     LTE_RSSIBandGainTable *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_RSSIGAINTBL_3RDBAND_LID
     LTE_RSSIBandGainTable *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_RSSIGAINTBL_4THBAND_LID
     LTE_RSSIBandGainTable *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_RSSIGAINTBL_5THBAND_LID
     LTE_RSSIBandGainTable *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_RSSIGAINTBL_6THBAND_LID
     LTE_RSSIBandGainTable *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_RSSIGAINTBL_7THBAND_LID
     LTE_RSSIBandGainTable *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_RSSIGAINTBL_8THBAND_LID
     LTE_RSSIBandGainTable *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_RSSIGAINTBL_9THBAND_LID
     LTE_RSSIBandGainTable *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_RSSIGAINTBL_10THBAND_LID
     LTE_RSSIBandGainTable *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_RSSIGAINTBL_11THBAND_LID
     LTE_RSSIBandGainTable *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_RSSIGAINTBL_12THBAND_LID
     LTE_RSSIBandGainTable *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_RSSIGAINTBL_13THBAND_LID
     LTE_RSSIBandGainTable *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_RSSIGAINTBL_14THBAND_LID
     LTE_RSSIBandGainTable *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXPAOCTLEV_1STBAND_LID
     LTE_sPAOCTLVLSETTING *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXPAOCTLEV_2NDBAND_LID
     LTE_sPAOCTLVLSETTING *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXPAOCTLEV_3RDBAND_LID
     LTE_sPAOCTLVLSETTING *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXPAOCTLEV_4THBAND_LID
     LTE_sPAOCTLVLSETTING *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXPAOCTLEV_5THBAND_LID
     LTE_sPAOCTLVLSETTING *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXPAOCTLEV_6THBAND_LID
     LTE_sPAOCTLVLSETTING *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXPAOCTLEV_7THBAND_LID
     LTE_sPAOCTLVLSETTING *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXPAOCTLEV_8THBAND_LID
     LTE_sPAOCTLVLSETTING *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXPAOCTLEV_9THBAND_LID
     LTE_sPAOCTLVLSETTING *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXPAOCTLEV_10THBAND_LID
     LTE_sPAOCTLVLSETTING *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXPAOCTLEV_11THBAND_LID
     LTE_sPAOCTLVLSETTING *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXPAOCTLEV_12THBAND_LID
     LTE_sPAOCTLVLSETTING *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXPAOCTLEV_13THBAND_LID
     LTE_sPAOCTLVLSETTING *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXPAOCTLEV_14THBAND_LID
     LTE_sPAOCTLVLSETTING *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXDAC_1STBAND_LID
     LTE_sRAMPDATA *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXDAC_2NDBAND_LID
     LTE_sRAMPDATA *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXDAC_3RDBAND_LID
     LTE_sRAMPDATA *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXDAC_4THBAND_LID
     LTE_sRAMPDATA *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXDAC_5THBAND_LID
     LTE_sRAMPDATA *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXDAC_6THBAND_LID
     LTE_sRAMPDATA *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXDAC_7THBAND_LID
     LTE_sRAMPDATA *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXDAC_8THBAND_LID
     LTE_sRAMPDATA *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXDAC_9THBAND_LID
     LTE_sRAMPDATA *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXDAC_10THBAND_LID
     LTE_sRAMPDATA *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXDAC_11THBAND_LID
     LTE_sRAMPDATA *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXDAC_12THBAND_LID
     LTE_sRAMPDATA *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXDAC_13THBAND_LID
     LTE_sRAMPDATA *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TXDAC_14THBAND_LID
     LTE_sRAMPDATA *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_ETVINLUTDATA_1STBAND_LID
     LTE_RfcEtVinLutPerBand_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_ETVINLUTDATA_2NDBAND_LID
     LTE_RfcEtVinLutPerBand_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_ETVINLUTDATA_3RDBAND_LID
     LTE_RfcEtVinLutPerBand_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_ETVINLUTDATA_4THBAND_LID
     LTE_RfcEtVinLutPerBand_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_ETVINLUTDATA_5THBAND_LID
     LTE_RfcEtVinLutPerBand_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_ETVINLUTDATA_6THBAND_LID
     LTE_RfcEtVinLutPerBand_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_ETVINLUTDATA_7THBAND_LID
     LTE_RfcEtVinLutPerBand_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_ETVINLUTDATA_8THBAND_LID
     LTE_RfcEtVinLutPerBand_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_ETVINLUTDATA_9THBAND_LID
     LTE_RfcEtVinLutPerBand_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_ETVINLUTDATA_10THBAND_LID
     LTE_RfcEtVinLutPerBand_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_ETVINLUTDATA_11THBAND_LID
     LTE_RfcEtVinLutPerBand_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_ETVINLUTDATA_12THBAND_LID
     LTE_RfcEtVinLutPerBand_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_ETVINLUTDATA_13THBAND_LID
     LTE_RfcEtVinLutPerBand_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_ETVINLUTDATA_14THBAND_LID
     LTE_RfcEtVinLutPerBand_T *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_ETCOMPPARAM_LID
     LTE_RfcEtCompParam_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TEMPERATUREDAC_LID
     LTE_TemperatureDac_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MPRADJTBL_LID
     nvram_el1_mpr_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_AMPRADJTBL_LID
     nvram_el1_ampr_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_BAND_INDICATOR_LID
     nvram_el1_band_ind_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_RX_PDATABASE_LID
     nvram_el1_rx_pdata_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_TX_PDATABASE_LID
     nvram_el1_tx_pdata_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_RXON_BPIOFFSET_LID
     nvram_el1_rxon_bpioffset_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_TXON_BPIOFFSET_LID
     nvram_el1_txon_bpioffset_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_RXOFF_BPIOFFSET_LID
     nvram_el1_rxoff_bpioffset_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_TXOFF_BPIOFFSET_LID
     nvram_el1_txoff_bpioffset_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_RF_IO_LID
     nvram_el1_rf_io_struct *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_GPS_CO_TMS_DATA_LID
     nvram_el1_gps_co_tms_data_struct *1
     {

     };


LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_CUSTOM_DYNAMIC_INIT_LID
     nvram_el1_dynamic_init_struct *1
     {

     };

LID_BIT MULTIPLE_LID "003" NVRAM_EF_EL1_CUSTOM_DYNAMIC_INIT_DEBUG_LID
     nvram_el1_dynamic_init_debug_struct *1
     {

     };


LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_RF_RX_PATH_CONFIG_LID
     nvram_el1_rf_rx_path_config_struct *1
     {

     };


LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_FEATURE_LID
     nvram_el1_mipi_feature_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_RX_EVENT_1STBAND_LID
     nvram_el1_mipi_rx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_RX_EVENT_2NDBAND_LID
     nvram_el1_mipi_rx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_RX_EVENT_3RDBAND_LID
     nvram_el1_mipi_rx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_RX_EVENT_4THBAND_LID
     nvram_el1_mipi_rx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_RX_EVENT_5THBAND_LID
     nvram_el1_mipi_rx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_RX_EVENT_6THBAND_LID
     nvram_el1_mipi_rx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_RX_EVENT_7THBAND_LID
     nvram_el1_mipi_rx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_RX_EVENT_8THBAND_LID
     nvram_el1_mipi_rx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_RX_EVENT_9THBAND_LID
     nvram_el1_mipi_rx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_RX_EVENT_10THBAND_LID
     nvram_el1_mipi_rx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_RX_EVENT_11THBAND_LID
     nvram_el1_mipi_rx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_RX_EVENT_12THBAND_LID
     nvram_el1_mipi_rx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_RX_EVENT_13THBAND_LID
     nvram_el1_mipi_rx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_RX_EVENT_14THBAND_LID
     nvram_el1_mipi_rx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TX_EVENT_1STBAND_LID
     nvram_el1_mipi_tx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TX_EVENT_2NDBAND_LID
     nvram_el1_mipi_tx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TX_EVENT_3RDBAND_LID
     nvram_el1_mipi_tx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TX_EVENT_4THBAND_LID
     nvram_el1_mipi_tx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TX_EVENT_5THBAND_LID
     nvram_el1_mipi_tx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TX_EVENT_6THBAND_LID
     nvram_el1_mipi_tx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TX_EVENT_7THBAND_LID
     nvram_el1_mipi_tx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TX_EVENT_8THBAND_LID
     nvram_el1_mipi_tx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TX_EVENT_9THBAND_LID
     nvram_el1_mipi_tx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TX_EVENT_10THBAND_LID
     nvram_el1_mipi_tx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TX_EVENT_11THBAND_LID
     nvram_el1_mipi_tx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TX_EVENT_12THBAND_LID
     nvram_el1_mipi_tx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TX_EVENT_13THBAND_LID
     nvram_el1_mipi_tx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TX_EVENT_14THBAND_LID
     nvram_el1_mipi_tx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TPC_EVENT_1STBAND_LID
     nvram_el1_mipi_tpc_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TPC_EVENT_2NDBAND_LID
     nvram_el1_mipi_tpc_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TPC_EVENT_3RDBAND_LID
     nvram_el1_mipi_tpc_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TPC_EVENT_4THBAND_LID
     nvram_el1_mipi_tpc_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TPC_EVENT_5THBAND_LID
     nvram_el1_mipi_tpc_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TPC_EVENT_6THBAND_LID
     nvram_el1_mipi_tpc_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TPC_EVENT_7THBAND_LID
     nvram_el1_mipi_tpc_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TPC_EVENT_8THBAND_LID
     nvram_el1_mipi_tpc_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TPC_EVENT_9THBAND_LID
     nvram_el1_mipi_tpc_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TPC_EVENT_10THBAND_LID
     nvram_el1_mipi_tpc_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TPC_EVENT_11THBAND_LID
     nvram_el1_mipi_tpc_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TPC_EVENT_12THBAND_LID
     nvram_el1_mipi_tpc_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TPC_EVENT_13THBAND_LID
     nvram_el1_mipi_tpc_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_TPC_EVENT_14THBAND_LID
     nvram_el1_mipi_tpc_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "002" NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_1STBAND_LID
     nvram_el1_mipi_tpc_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "002" NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_2NDBAND_LID
     nvram_el1_mipi_tpc_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "002" NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_3RDBAND_LID
     nvram_el1_mipi_tpc_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "002" NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_4THBAND_LID
     nvram_el1_mipi_tpc_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "002" NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_5THBAND_LID
     nvram_el1_mipi_tpc_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "002" NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_6THBAND_LID
     nvram_el1_mipi_tpc_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "002" NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_7THBAND_LID
     nvram_el1_mipi_tpc_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "002" NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_8THBAND_LID
     nvram_el1_mipi_tpc_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "002" NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_9THBAND_LID
     nvram_el1_mipi_tpc_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "002" NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_10THBAND_LID
     nvram_el1_mipi_tpc_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "002" NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_11THBAND_LID
     nvram_el1_mipi_tpc_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "002" NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_12THBAND_LID
     nvram_el1_mipi_tpc_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "002" NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_13THBAND_LID
     nvram_el1_mipi_tpc_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "002" NVRAM_EF_EL1_MIPI_PA_TPC_SECTION_DATA_14THBAND_LID
     nvram_el1_mipi_tpc_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_RX_DATA_1STBAND_LID
     nvram_el1_mipi_rx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_RX_DATA_2NDBAND_LID
     nvram_el1_mipi_rx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_RX_DATA_3RDBAND_LID
     nvram_el1_mipi_rx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_RX_DATA_4THBAND_LID
     nvram_el1_mipi_rx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_RX_DATA_5THBAND_LID
     nvram_el1_mipi_rx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_RX_DATA_6THBAND_LID
     nvram_el1_mipi_rx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_RX_DATA_7THBAND_LID
     nvram_el1_mipi_rx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_RX_DATA_8THBAND_LID
     nvram_el1_mipi_rx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_RX_DATA_9THBAND_LID
     nvram_el1_mipi_rx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_RX_DATA_10THBAND_LID
     nvram_el1_mipi_rx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_RX_DATA_11THBAND_LID
     nvram_el1_mipi_rx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_RX_DATA_12THBAND_LID
     nvram_el1_mipi_rx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_RX_DATA_13THBAND_LID
     nvram_el1_mipi_rx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_RX_DATA_14THBAND_LID
     nvram_el1_mipi_rx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_TX_DATA_1STBAND_LID
     nvram_el1_mipi_tx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_TX_DATA_2NDBAND_LID
     nvram_el1_mipi_tx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_TX_DATA_3RDBAND_LID
     nvram_el1_mipi_tx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_TX_DATA_4THBAND_LID
     nvram_el1_mipi_tx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_TX_DATA_5THBAND_LID
     nvram_el1_mipi_tx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_TX_DATA_6THBAND_LID
     nvram_el1_mipi_tx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_TX_DATA_7THBAND_LID
     nvram_el1_mipi_tx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_TX_DATA_8THBAND_LID
     nvram_el1_mipi_tx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_TX_DATA_9THBAND_LID
     nvram_el1_mipi_tx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_TX_DATA_10THBAND_LID
     nvram_el1_mipi_tx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_TX_DATA_11THBAND_LID
     nvram_el1_mipi_tx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_TX_DATA_12THBAND_LID
     nvram_el1_mipi_tx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_TX_DATA_13THBAND_LID
     nvram_el1_mipi_tx_data_struct *1
     {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_TX_DATA_14THBAND_LID
     nvram_el1_mipi_tx_data_struct *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_BYPASS_FEATURE_LID
     nvram_el1_mipi_bypass_feature_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_1STBAND_LID
     nvram_el1_mipi_tx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_2NDBAND_LID
     nvram_el1_mipi_tx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_3RDBAND_LID
     nvram_el1_mipi_tx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_4THBAND_LID
     nvram_el1_mipi_tx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_BYPASS_TX_EVENT_5THBAND_LID
     nvram_el1_mipi_tx_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_1STBAND_LID
     nvram_el1_mipi_tpc_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_2NDBAND_LID
     nvram_el1_mipi_tpc_event_struct *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_3RDBAND_LID
     nvram_el1_mipi_tpc_event_struct *1
             {

             };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_4THBAND_LID
     nvram_el1_mipi_tpc_event_struct *1
             {

             };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_BYPASS_TPC_EVENT_5THBAND_LID
     nvram_el1_mipi_tpc_event_struct *1
             {

             };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_1STBAND_LID
     nvram_el1_mipi_tpc_data_struct *1
             {

             };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_2NDBAND_LID
     nvram_el1_mipi_tpc_data_struct *1
             {

             };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_3RDBAND_LID
     nvram_el1_mipi_tpc_data_struct *1
     {

         };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_4THBAND_LID
     nvram_el1_mipi_tpc_data_struct *1
         {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_BYPASS_PA_TPC_SECTION_DATA_5THBAND_LID
     nvram_el1_mipi_tpc_data_struct *1
           {

           };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_1STBAND_LID
     nvram_el1_mipi_bypass_tx_data_struct *1
     {

         };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_2NDBAND_LID
     nvram_el1_mipi_bypass_tx_data_struct *1
         {

     };
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_3RDBAND_LID
     nvram_el1_mipi_bypass_tx_data_struct *1
           {

           };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_4THBAND_LID
     nvram_el1_mipi_bypass_tx_data_struct *1
     {

         };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_MIPI_BYPASS_TX_DATA_5THBAND_LID
     nvram_el1_mipi_bypass_tx_data_struct *1
         {

     };
# 9745 "interface/service/nvram/nvram_editor_data_item.h"
LID_BIT MULTIPLE_LID "001" NVRAM_EF_EL1_TAS_PARAMETER_LID
     EL1_TAS_PARAMETER *1
         {

     };
# 9761 "interface/service/nvram/nvram_editor_data_item.h"
LID_BIT MULTIPLE_LID "000" NVRAM_EF_EL1_SVLTE_BAND_INDICATOR_LID
     nvram_el1_band_ind_struct *1
             {

             };


LID_BIT "002" NVRAM_EF_EPSLOCI_EPSNSC_TIN_LID
    nvram_ef_epsloci_epsnsc_tin_struct * (1 * (2))
    {
        epsloci:"EPSLOCI[18]"
        {
        };
        epsnsc:"EPSNSC[54]"
        {
        };
        tin:"TIN"
        {
            tin: 32 "TIN"
            {
                0x0000: "deleted";
                0x0001: "P-TMSI";
                0x0002: "RAT related TMSI";
                0x0003: "GUTI";
            };
        };
    };

LID_BIT "005" NVRAM_EF_LTE_PREFERENCE_LID
    nvram_ef_lte_preference_struct * (1 * (2))
    {
        ue_usage_setting:"ue_usage_setting"
        {
            ue_usage_setting:8 "ue_usage_setting"
            {
                0x0: "Voice Centric";
                0x1: "Data Centric";
            };
        };
        voice_domain_preference:"voice_domain_preference"
        {
            voice_domain_preference:8 "voice_domain_preference"
            {
                0x1: "CS Voice only";
                0x2: "CS Voice preferred, IMS PS Voice as secondary";
                0x3: "IMS PS Voice preferred, CS Voice as secondary";
                0x4: "IMS PS Voice only";
            };
        };
        sms_over_ip:"sms_over_ip"
        {
            sms_over_ip:8 "sms_over_ip"
            {
                0x0: "SMS over IP not preferred";
                0x1: "SMS over IP preferred";
            };
        };
        sms_over_sgs:"sms_over_sgs"
        {
            sms_over_sgs:8 "sms_over_sgs"
            {
                0x0: "SMS over SGs not supported";
                0x1: "SMS over SGs supported";
            };
        };
        ue_mode_profile:"ue_mode_profile"
        {
            ue_mode_profile:8 "ue_mode_profile"
            {
                0x1: "Profile 1";
                0x6: "Profile 6";
            };
        };
        ue_mode:"ue_mode"
        {
            ue_mode:8 "ue_mode"
            {
                0x0: "PS mode 2";
                0x1: "CS/PS mode 1";
                0x2: "CS/PS mode 2";
                0x3: "PS mode 1";
            };
        };
        max_CService:"max_CService"
        {

        };
        is_vdp_set:"is_vdp_set"
        {
            is_vdp_set:8 "is_vdp_set"
            {
                0x00: "Not Set";
                0x01: "Set";
            };
        };
        feature_config:"feature_config";
        feature_config[0]
        {
            general_feature:8 "General Feature[0]"
            {
            };
        };
        feature_config[1]
        {
            general_feature:8 "General Feature[1]"
            {
            };
        };
        feature_config[2]
        {
            general_feature:8 "General Feature[2]"
            {
            };
        };
        feature_config[3]
        {
            general_feature:8 "General Feature[3]"
            {
            };
        };
        feature_config[4]
        {
            r10_feature:8 "R10 Implementation[0]"
            {
            };
        };
        feature_config[5]
        {
            r10_feature:8 "R10 Implementation[1]"
            {
            };
        };
        feature_config[6]
        {
            r10_feature:8 "R10 Implementation[2]"
            {
            };
        };
        feature_config[7]
        {
            r10_feature:8 "R10 Implementation[3]"
            {
            };
        };
        feature_config[8]
        {
            r11_feature:8 "R11 Implementation[0]"
            {
            };
        };
        feature_config[9]
        {
            r11_feature:8 "R11 Implementation[1]"
            {
            };
        };
        feature_config[10]
        {
            r11_feature:8 "R11 Implementation[2]"
            {
            };
        };
        feature_config[11]
        {
            r11_feature:8 "R11 Implementation[3]"
            {
            };
        };
        feature_config[12]
        {
            r12_feature:8 "R12 Implementation[0]"
             {
            };
             };
        feature_config[13]
        {
            r12_feature:8 "R12 Implementation[1]"
             {
             };
        };
        feature_config[14]
        {
            r12_feature:8 "R12 Implementation[2]"
             {
            };
             };
        feature_config[15]
        {
            r12_feature:8 "R12 Implementation[3]"
             {
             };
         };
     };

LID_BIT "000" NVRAM_EF_ERRC_STORED_CARRIER_LID nvram_ef_errc_stored_carrier_struct * (1){};

LID_BIT "002" NVRAM_EF_ERRC_PERFORMANCE_PARA_LID nvram_ef_errc_performance_para_struct * (1){};

LID_BIT "000" NVRAM_EF_ERRC_FINGER_PRINT_LID nvram_ef_errc_fingerprint_record_struct * (8){};

LID_BIT "001" NVRAM_EF_ERRC_LEARNED_MCC_LID nvram_ef_errc_learned_mcc_record_struct * (6){};

LID_BIT "000" NVRAM_EF_ERRC_STORED_CELL_LID nvram_ef_errc_stored_cell_struct * (1){};

LID_BIT "000" NVRAM_EF_ERRC_AFR_SETTING_LID nvram_ef_errc_afr_setting_struct * (1){};

LID_BIT "003" NVRAM_EF_LTE_CAP_LID nvram_ef_lte_cap_struct * (1){};

LID_BIT "001" NVRAM_EF_UE_EUTRA_CAP_CSFB_LID nvram_ef_ue_eutra_cap_struct * (1){};

LID_BIT "001" NVRAM_EF_UE_EUTRA_CAP_MMDC_LID nvram_ef_ue_eutra_cap_struct * (1){};






LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPAOCTLEV_BAND1_LID
     ul1cal_txPaOctLevData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPAOCTLEV_BAND2_LID
     ul1cal_txPaOctLevData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPAOCTLEV_BAND3_LID
     ul1cal_txPaOctLevData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPAOCTLEV_BAND4_LID
     ul1cal_txPaOctLevData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPAOCTLEV_BAND5_LID
     ul1cal_txPaOctLevData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPAOCTLEV_BAND6_LID
     ul1cal_txPaOctLevData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPAOCTLEV_BAND7_LID
     ul1cal_txPaOctLevData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPAOCTLEV_BAND8_LID
     ul1cal_txPaOctLevData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPAOCTLEV_BAND9_LID
     ul1cal_txPaOctLevData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPAOCTLEV_BAND10_LID
     ul1cal_txPaOctLevData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPAOCTLEV_BAND11_LID
     ul1cal_txPaOctLevData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPAOCTLEV_BAND19_LID
     ul1cal_txPaOctLevData_T *1
     {

     };



   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS2_BAND1_LID
        ul1cal_pathlossRxdData_T *1
        {

      };
   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS2_BAND2_LID
        ul1cal_pathlossRxdData_T *1
        {

      };
   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS2_BAND3_LID
        ul1cal_pathlossRxdData_T *1
        {

      };
   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS2_BAND4_LID
        ul1cal_pathlossRxdData_T *1
        {

      };
   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS2_BAND5_LID
        ul1cal_pathlossRxdData_T *1
        {

      };
   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS2_BAND6_LID
        ul1cal_pathlossRxdData_T *1
        {

      };
   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS2_BAND7_LID
        ul1cal_pathlossRxdData_T *1
        {

      };
   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS2_BAND8_LID
        ul1cal_pathlossRxdData_T *1
        {

      };
   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS2_BAND9_LID
        ul1cal_pathlossRxdData_T *1
        {

      };
   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS2_BAND10_LID
        ul1cal_pathlossRxdData_T *1
        {

      };
   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS2_BAND11_LID
        ul1cal_pathlossRxdData_T *1
        {

      };
   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_PATHLOSS2_BAND19_LID
        ul1cal_pathlossRxdData_T *1
        {

      };


   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPADRIFTCOMP_BAND1_LID
        ul1cal_txPaDriftCompData_T *1
        {

      };
   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPADRIFTCOMP_BAND2_LID
        ul1cal_txPaDriftCompData_T *1
        {

      };
   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPADRIFTCOMP_BAND3_LID
        ul1cal_txPaDriftCompData_T *1
        {

      };
   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPADRIFTCOMP_BAND4_LID
        ul1cal_txPaDriftCompData_T *1
        {

      };
   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPADRIFTCOMP_BAND5_LID
        ul1cal_txPaDriftCompData_T *1
        {

      };
   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPADRIFTCOMP_BAND6_LID
        ul1cal_txPaDriftCompData_T *1
        {

      };
   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPADRIFTCOMP_BAND7_LID
        ul1cal_txPaDriftCompData_T *1
        {

      };
   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPADRIFTCOMP_BAND8_LID
        ul1cal_txPaDriftCompData_T *1
        {

      };
   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPADRIFTCOMP_BAND9_LID
        ul1cal_txPaDriftCompData_T *1
        {

      };
   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPADRIFTCOMP_BAND10_LID
        ul1cal_txPaDriftCompData_T *1
        {

      };
   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPADRIFTCOMP_BAND11_LID
        ul1cal_txPaDriftCompData_T *1
        {

      };
   LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPADRIFTCOMP_BAND19_LID
        ul1cal_txPaDriftCompData_T *1
        {

      };





LID_BIT MULTIPLE_LID "001" NVRAM_EF_MML1_CUSTOM_DYNAMIC_INIT_LID
     nvram_mml1_dynamic_init_struct *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_MML1_MIPI_INITIAL_CW_LID
     nvram_mml1_mipi_initial_cw_struct *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_MML1_MIPI_USID_CHANGE_LID
     nvram_mml1_mipi_usid_change_struct *1
     {

     };
# 10205 "interface/service/nvram/nvram_editor_data_item.h"
LID_BIT "001" NVRAM_EF_TST_CONFIG_LID
     tst_config_struct_t *1
     {
     };


LID_BIT "001" NVRAM_EF_HMU_CONFIG_LID
    hmu_conf_struct *1
    {
    };

LID_BIT "001" NVRAM_EF_HMU_HD_CONFIG_LID
    hmu_hd_conf_struct *1
    {
    };



LID_BIT "000" NVRAM_EF_NMU_CONFIG_LID
    nmu_nvram_table_t *1
    {
    };
# 10241 "interface/service/nvram/nvram_editor_data_item.h"
LID_BIT "000" NVRAM_EF_REGIONAL_PHONE_MODE_LID
     nvram_ef_regional_phone_mode_struct *(1)
     {
        mode: "RAT_MODE"
        {
            regional_phone_mode: 8 "Power-on annimation mode"
            {
                0x0: "Disable MCC/MNC specific power-on annimation";
                0x1: "Enable MCC/MNC specific power-on annimation";
            };
        };
     };

LID_BIT "057" NVRAM_EF_SBP_MODEM_CONFIG_LID
    nvram_ef_sbp_modem_config_struct *(1)
    {
        sbp_mode: "SBP ID"
        {
        };
        modem_sbp_config: "modem configuration";
        modem_sbp_config[0]
        {
            Permanent_Auto_Select: 1 "Permanent Auto Selection Mode"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            UMTS_CB_Off: 1 "Turn Off Cell Broadcast in UMTS network"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            MM_Try_Abnormal_LAI_once_more: 1 "__MM_TRY_ABNORMAL_LAI_ONCE_MORE__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            MM_Disable_Retry_Abnormal_LAI: 1 "__MM_DISABLE_RETRY_ABNORMAL_LAI__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            Disable_Auto_Return_pre_RPLMN: 1 "__DISABLE_AUTO_RETURN_PRE_RPLMN__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            MM_HPLMN_1st_Attempt_Enhance: 1 "__MM_HPPLMN_1ST_ATTEMPT_ENHANCE__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            OOS_Early_IND: 1 "__OOS_EARLY_IND__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            L2_Random_Fill_BIT: 1 "Enable L2 Random Fill Bits Support "
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };
        };
        modem_sbp_config[1]
        {
            CB_3G_Service_by_PLMN: 1 "__CB_3G_SERVICE_BY_PLMN__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            MM_Ignore_EQPLMN_In_Manual_Mode: 1 "__MM_IGNORE_EQPLMN_IN_MANUAL_MODE__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            MM_Ignore_YOIGO_EQPLMN: 1 "__MM_IGNORE_YOIGO_EQPLMN__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            MM_Ignore_PLAY_EQPLMN: 1 "__MM_IGNORE_PLAY_EQPLMN__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            MM_Ignore_EQPLMN_In_Auto_Mode: 1 "__MM_IGNORE_EQPLMN_IN_AUTO_MODE__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            MM_Disable_Previous_Rplmn_From_Nvram: 1 "__MM_DISABLE_PREVIOUS_RPLMN_FROM_NVRAM__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };
            NWSEL_Mm_International_Hpplmn_Search: 1 "__MM_INTERNATIONAL_HPPLMN_SEARCH__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            NWSEL_Atnt_Hpplmn_Search: 1 "__ATNT_HPPLMN_SEARCH__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };
        };

        modem_sbp_config[2]
        {
            NWSEL_Hpplmn_Regardless_Any_Mcc: 1 "__HPPLMN_REGARDLESS_ANY_MCC__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            NWSEL_Disable_Rplmn_From_Gloci: 1 "__DISABLE_RPLMN_FROM_GLOCI__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            NWSEL_Disable_Plmnsel_Oplmn_Coexist: 1 "__DISABLE_PLMNSEL_OPLMN_COEXIST__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            NWSEL_Disable_Display_Roaming_Hplmn_In_Eplmn: 1 "__DISABLE_DISPLAY_ROAMING_HPLMN_IN_EPLMN__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            NWSEL_Rplmn_Hplmn_Combined_Search: 1 "__RPLMN_HPLMN_COMBINED_SEARCH__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            NWSEL_Mm_Search_Hplmn_Before_Rplmn: 1 "__MM_SEARCH_HPLMN_BEFORE_RPLMN__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };
            NWSEL_Disable_Plmn_Sel_When_Access_Barred: 1 "__DISABLE_PLMN_SEL_WHEN_ACCESS_BARRED__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            NWSEL_Tmo_Plmn_Matching: 1 "__TMO_PLMN_MATCHING__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };
        };

        modem_sbp_config[3]
        {
            NWSEL_Mm_Not_Try_Another_Rat_For_Lu_Abnormal: 1 "__MM_NOT_TRY_ANOTHER_RAT_FOR_LU_ABNORMAL__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            ENS: 1 "__ENS__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            NWSEL_Mm_Perform_Plmn_Search_After_Lu_Abnormal: 1 "__MM_PERFORM_PLMN_SEARCH_AFTER_LU_ABNORMAL__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            MM_Resume_GPRS_After_LU_Abnormal: 1 "__RESUME_GPRS_AFTER_LU_ABNORMAL__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            MM_TMO_ECC_Notification_Enable: 1 "__TMO_ECC_NOTIFICATION_ENABLE__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            ENS_RAT_Balancing_Enable: 1 "dynamically load balances 3G ME to different RAT mode settings"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            ORANGE_H_Plus_Enable: 1 "ORANGE requirement to display symbol in idle mode based on cell's max capabilities"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            USIM_CSP_Support_Enable: 1 "To Support CSP file Under USIM Application"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };
        };

        modem_sbp_config[4]
        {
            SAT_No_Evdl_in_Session: 1 "Store and reissue event download envelope when in SAT session"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            IMEI_Lock_Support: 1 "To Support Verification of IMEI before camping on Network"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            DOCOMO_IOT_SMS_Enable: 1 "Enable MO SMS Retry for Docomo IOT test"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            USE_SM_QOS_SUBSCRIBED_Enable: 1 "__USE_SM_QOS_SUBSCRIBED__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            NO_SUPPORT_A5_3: 1 "Disable A5_3 Encryption Algorithm "
            {
                0x0: "Enable A5_3";
                0x1: "Disable A5_3";
            };

            DOCOMO_IOT_CC_nable: 1 "Handle primitive facility after or before peer connect ack for Docomo IOT"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            AT_ME_Identification_Without_Header_Enable: 1 "__AT_ME_IDENTIFICATION_WITHOUT_HEADER__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            Start_Short_String_As_Call_Enable: 1 "Short string is intended to be treated as CC operation"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

        };

        modem_sbp_config[5]
        {


            Customized_Idle_String_As_Call_Enable: 1 "Idle string is intended to be treated as CC operation"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            Disable_Skip_New_Fplmn_Manual_Resel: 1 "__DISABLE_SKIP_NEW_FPLMN_MANUAL_RESEL__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            ADAPTIVE_PAGING_PERIOD_IN_UNACK_MODE: 1 "Adaptive Paging Period in UNACK Mode Enabled "
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

   Op01_Roaming_Rat_Order: 1 "__OP01_ROAMING_RAT_ORDER__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            Background_Search_2G4_FDD_Enable: 1 "2G FDD to LTE Background Search Enabled "
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            Background_Search_3G4_FDD_Enable: 1 "3G FDD to LTE Background Search Enabled "
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            Background_Search_2G4_TDD_Enable: 1 "2G TDD to LTE Background Search Enabled "
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            Background_Search_3G4_TDD_Enable: 1 "3G TDD to LTE Background Search Enabled "
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

        };

        modem_sbp_config[6]
        {
            Prefer_Search_3G: 1 "__PREFER_SEARCH_3G__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            Prefer_Search_4G: 1 "__PREFER_SEARCH_4G__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            TMO_GBA_Enable: 1 "__TMO_GBA__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            TC01: 1 "OP01_TEST_MODE_CONSIDER_SIM"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            Disable_Eutran_After_Abnormal: 1 "__DISABLE_EUTRAN_AFTER_ABNORMAL__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            Disable_Rplmn_From_Epsloci: 1 "__DISABLE_RPLMN_FROM_EPSLOCI__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            Disable_Eutran_After_No_Suitable: 1 "__DISABLE_EUTRAN_AFTER_NO_SUITABLE__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            Not_Stay_on_FBLA_for_REG_PROV: 1 "__MM_NOT_STAY_ON_FBLA_FOR_REG_PROV__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };
        };

        modem_sbp_config[7]
        {
            No_Optional_RAU_after_CCO_Failure: 1 "__TMO_NO_OPTIONAL_RAU_AFTER_CCO_FAILURE__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            Enable_PROVIDE_LOCAL_PS_INFO_Support: 1 "Enable switch for USAT to get location info from 3/4G instead of 2G"
            {
                0x0: "USAT get provide_local_info from 2G";
                0x1: "USAT get provide_local_info from 3/4G";
            };

            EMR_REPORTING_WITH_SI2Q_BSIC_PARA: 1 "EMR with SI2Q BSIC Param Enabled "
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            AMR_WB_GSM: 1 "AMR_WB_GSM"
            {
                0x0: "Disable AMR_WB_GSM";
                0x1: "Enable AMR_WB_GSM";
            };

            AMR_WB_UMTS: 1 "AMR_WB_UMTS"
            {
                0x0: "Disable AMR_WB_UMTS";
                0x1: "Enable AMR_WB_UMTS";
            };

            TMO_Remote_SIM_Lock: 1 "__TMO_SIM_LOCK__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            PS_ONLY_LTE_NETWORK_SUPPORT: 1 "PS_ONLY_LTE_NETWORK_SUPPORT"
            {
                0x0: "Disable PS_ONLY_LTE_NETWORK_SUPPORT";
                0x1: "Enable PS_ONLY_LTE_NETWORK_SUPPORT";
            };

            IGNORE_PLMN_CHANGE_FOR_MANUAL_MODE: 1 "IGNORE_PLMN_CHANGE_FOR_MANUAL_MODE"
            {
                0x0: "Disable IGNORE_PLMN_CHANGE_FOR_MANUAL_MODE";
                0x1: "Enable IGNORE_PLMN_CHANGE_FOR_MANUAL_MODE";
            };

        };

        modem_sbp_config[8]
        {
            CLEAR_CODE_33: 1 "__CLEAR_CODE_33__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            Release_PS_Connection_for_EUTRAN_Update: 1 "__RELEASE_PS_CONN_FOR_EUTRAN_UPDATE__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            SAT_REISSUE_REFRESH_AFTER_CALL_END: 1 "Store and reissue SIM Refresh command if rejected during call"
            {
                0x0: "Disable SAT_REISSUE_REFRESH_AFTER_CALL_END";
                0x1: "Enable SAT_REISSUE_REFRESH_AFTER_CALL_END";
            };

            ALLOW_SIM_REFRESH_RESET_WHEN_IN_CALL: 1 "Allow SIM Refresh(UICC Reset) proactive command during call"
            {
                0x0: "Disable ALLOW_SIM_REFRESH_RESET_WHEN_IN_CALL";
                0x1: "Enable ALLOW_SIM_REFRESH_RESET_WHEN_IN_CALL";
            };

            TMO_IRAT_SET_ACTIVE_FLAG: 1 "TMO_IRAT_SET_ACTIVE_FLAG"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

   IS_ATT_CONN_REJ: 1 "IS_ATT_CONN_REJ"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            RELEASE_DEACTIVATING_BEARER_DURING_IRAT: 1 "RELEASE_DEACTIVATING_BEARER_DURING_IRAT"
            {
                0x0: "Disable feature";
                0x1: "Enable feature";
            };

            SDM_RETRY_IMS_WHEN_CS_SEND_FAIL: 1 "SDM_RETRY_IMS_WHEN_CS_SEND_FAIL"
            {
                0x0: "Not enabled";
                0x1: "Enabled";
            };
        };

        modem_sbp_config[9]
        {
            EMM_RETRY_EMC_WHEN_ABNORMAL: 1 "EMM_ALWAYS_REJ_EMC_WHEN_ABNORMAL"
            {
                0x0: "EMM always reject EMC service when abnormal occured";
                0x1: "EMM retry EMC service when abnormal occured";
            };

            EMM_RETRY_EMC_IN_SAHRED_NW: 1 "EMM_RETRY_EMC_IN_SHARED_NW"
            {
                0x0: "EMM reject EMC in shared NW";
                0x1: "EMM retry EMC attach in shared NW";
            };

            EMM_RETRY_EMC_IN_SAME_PLMN: 1 "EMM_RETRY_EMC_IN_SAME_PLMN"
            {
                0x0: "EMM reject EMC in same PLMN";
                0x1: "EMM retry EMC attach in same PLMN";
            };

            EMM_RETRY_EMC_IN_DIFF_PLMN: 1 "EMM_RETRY_EMC_IN_DIFF_PLMN"
            {
                0x0: "EMM reject EMC in different PLMN";
                0x1: "EMM retry EMC attach in different PLMN";
            };

            MM_IMSI_DETACH_WHEN_MM_CONN_ACTIVE: 1 "MM_IMSI_DETACH_WHEN_MM_CONN_ACTIVE"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            CSG_3G: 1 "3G CSG is Enabled "
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            DISABLE_4G_CSG: 1 "4G CSG Support is Disabled "
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

   FINGERPRINT: 1 "Support for FINGERPRINT Enabled "
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };
        };

        modem_sbp_config[10]
        {
   R11_COMB_BUT_EPS_ABNORMAL_HANDLE: 1 "R11_COMB_BUT_EPS_ABNORMAL_HANDLE"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            CSFB_REJECT: 1 "CSFB_REJECT"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            CONSERVATIVE_IPV4V6_FALLBACK_STRATEGY: 1 "CONSERVATIVE_IPV4V6_FALLBACK_STRATEGY"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            IS_OP07: 1 "ATnT is Enabled "
            {
                0x0: "Not Operator07(AT&T)";
                0x1: "Operator07(AT&T)";
            };

            SDM_ALWAYS_CS_WHEN_2G: 1 "SDM_ALWAYS_CS_WHEN_2G"
            {
                0x0: "Not Enabled";
                0x1: "Enabled";
            };

            SDM_ALWAYS_CS_WHEN_3G: 1 "SDM_ALWAYS_CS_WHEN_3G"
            {
                0x0: "Not Enabled";
                0x1: "Enabled";
            };

            SDM_TRY_CS_WHEN_2G_VOICE_CALL: 1 "SDM_TRY_CS_WHEN_2G_VOICE_CALL"
            {
                0x0: "Not Enabled";
                0x1: "Enabled";
            };

            SDM_DISABLE_SMS_OVER_SGS: 1 "Disable SMS over SGS"
            {
                0x0: "SMS over SGS is not disabled";
                0x1: "SMS over SGS is disabled";
            };
        };

        modem_sbp_config[11]
        {
            SDM_PREFER_SMS_OVER_SGS_TO_IMS: 1 "SDM_PREFER_SMS_OVER_SGS_TO_IMS"
            {
                0x0: "SMS over SGS is not preferred over IMS when in LTE";
                0x1: "SMS over SGS is preferred over IMS when in LTE";
            };

            SDM_RETRY_CS_WHEN_IMS_SEND_FAIL: 1 "SDM_RETRY_CS_WHEN_IMS_SEND_FAIL"
            {
                0x0: "Not enabled";
                0x1: "Enabled";
            };

            REPORT_CSG_LIST_IN_SIGNAL_DECREASING_ORDER: 1 "REPORT_CSG_LIST_IN_SIGNAL_DECREASING_ORDER"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            GSMA_NETWORK_ACCESS_CONTROL: 1 "GSMA_NETWORK_ACCESS_CONTROL"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            CONN_PAGING_TRIGGER_LOCAL_REL: 1 "CONN_PAGING_TRIGGER_LOCAL_REL"
            {
                0x0: "Not enabled";
                0x1: "Enabled";
            };

            LTE_FAST_POWER_ON_SEARCH: 1 "LTE Fast Power-On Search"
            {
                0x0: "Not enabled";
                0x1: "Enabled";
            };

            LTE_CONN_ENHANCE_PS_PERFORMANCE: 1 "Enhance PS performance in LTE connected"
            {
                0x0: "Not enabled";
                0x1: "Enabled";
            };

            LTE_MRU_SEARCH: 1 "LTE MRU Search"
            {
                0x0: "Not enabled";
                0x1: "Enabled";
            };
        };

        modem_sbp_config[12]
        {
            VDM_REDIAL_IMS_VT_TO_CS_VOICE: 1 "Convert VT to voice call when IMS to CS redial because of dedicated bearer timeout"
            {
                0x0: "Not enabled";
                0x1: "Enabled";
            };

            SLT: 1 "SLT enable"
            {
                0x0: "Disable";
                0x1: "Enable";
            };

            OP09_SIM_LOCK: 1 "To check if the inserted card is a CT card"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            ERRC_DETECTION_TIMER: 1 "SBP_ERRC_DETECTION_TIMER"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            UMAC_TVM_DECREASE_TRANSMITTED: 1 "Decrease TVM value by data transmitted in current TTI. Test SBP only"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            UMAC_TVM_FAVOR_POW_PERF: 1 "Used to reduce power consumption by decreasing TVM value.Test SBP only"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            ECC_NOT_PREEMPT_SEARCH: 1 "__ECC_NOT_PREEMPT_SEARCH__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            RAC_CHANGE_VDP_WHEN_IMS_ONOFF: 1 "__RAC_CHANGE_VDP_WHEN_IMS_ONOFF__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };
        };

        modem_sbp_config[13]
        {
   MM_T3212_PERIOD_SETTING: 1 "__MM_T3212_PERIOD_SETTING__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };
            DISABLE_EUTRAN_MEAS_AND_REP_CAP: 1 "Disable E-UTRAN Measurement and Reporting support capability "
            {
                0x0: "Not disable E-UTRAN Measurement and Reporting support capability";
                0x1: "Disable E-UTRAN Measurement and Reporting support capability";
            };

            CLEAR_LOCI_WHEN_UICC_RESET: 1 "Remove temporary mobile identities from SIM on refresh(UICC reset)"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            SAT_LOCATION_INFO_CHANGE_LIMITED_TO_NORMAL_FIRST_TIME: 1 "Issue first location info envelope as normal even if it is in limited service"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            PLMN_SEARCH_ABORT_SUPPORT: 1 "PLMN_SEARCH_ABORT_SUPPORT"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

   CC_SIM_ORIG_DIALLED_NUM: 1 "When call control by sim is triggered and call number modified, modem report original dialed number"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

   CC_SIM_SPECIFIC_ERROR_CAUSE: 1 "When call control by sim is triggered and call failed, modem report specific cause"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            DISABLE_EUTRAN_AFTER_ROAMING_NOT_ALLOWED: 1 "DISABLE_EUTRAN_AFTER_ROAMING_NOT_ALLOWED"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };
        };

        modem_sbp_config[14]
        {
            NWSEL_BACKUP_RPLMN_IN_AUTO_MODE: 1 "__NWSEL_BACKUP_RPLMN_IN_AUTO_MODE__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };
            LTE_IGNORE_CONN_PS_PAGING: 1 "SBP_LTE_IGNORE_CONN_PS_PAGING"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            ROAMING_NOT_ALLOW_AS_NO_SUITABLE: 1 "ROAMING_NOT_ALLOW_AS_NO_SUITABLE"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            DISABLE_2MIN_MINIMUM_HPPLMN_TIMER: 1 "__DISABLE_2MIN_MINIMUM_HPPLMN_TIMER__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            SPEED_CS_FEATURE: 1 "SBP_SPEED_CS_FEATURE"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };
            EMM_IGNORE_MT_CS_WHEN_IMS_CALL: 1 "Ignore CS Service Notification During MT call"
            {
                0x0: "Not enabled";
                0x1: "Enabled";
            };
            TMOUS_VOLTE_FT: 1 "__TMOUS_VOLTE_FT__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };
            CMCC_VOLTE_FT: 1 "__CMCC_VOLTE_FT__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };
        };

        modem_sbp_config[15]
        {
            AUTO_RESEL_ONLY_WHEN_NO_SERVICE: 1 "AUTO_RESEL_ONLY_WHEN_NO_SERVICE"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            ENHANCED_SOR: 1 "ENHANCED_SOR"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            C2K_OM_SOLUTION1: 1 "C2K_OM_SOLUTION1"
            {
                0x0: "OP09 or OM SOLUTION2";
                0x1: "OM SOLUTION1";
            };
            RAC_UEMODE_WITHOUT_CONSIDER_VDP: 1 "__RAC_UEMODE_WITHOUT_CONSIDER_VDP__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            DATA_SR_RETRY_THROTTLING: 1 "DATA_SR_RETRY_THROTTLING"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            EMM_CONN_FAIL_ABNORMAL_B: 1 "EMM CONN FAIL ABNORMAL B support"
            {
                0x0: "Not enabled";
                0x1: "Enabled";
            };

            SBP_USER_REQ_NOT_INIT_MM_PROC_WHEN_ABNORMAL_T3212_RUNNING: 1 "User request not trigger LU in attempt-to-update state and T3212 running"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            SBP_USER_REQ_NOT_INIT_GMM_PROC_WHEN_ABNORMAL_T3302_RUNNING: 1 "User request not trigger ATTACH/RAU in attempt-to-update state and T3302 running"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };
        };

        modem_sbp_config[16]
        {
   DISABLE_MO_SMS_OVER_PS: 1 " Disable MO SMS over PS domain"
   {
       0x0: "MO SMS over PS allowed";
    0x1: "MO SMS over PS not allowed";
   };

            LBS_CP_PLMN_BLACK_LIST: 1 "LBS_CP_PLMN_BLACK_LIST"
            {
                0x0: "Disable black list";
                0x1: "Enable black list";
            };
            LBS_CP_BLACK_NILR: 1 "LBS_CP_BLACK_NILR"
            {
                0x0: "CP NILR allowed";
                0x1: "CP NILR not allowed";
            };

            SEARCH_4G_WHEN_FIRST_PS_ATTACH: 1 "Search 4G when first PS attach"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            DISABLE_BEARER_RSC_ALLOC: 1 "Disable Bearer Resource Allocation"
            {
                0x0: "No";
                0x1: "Yes";
            };

            DISABLE_BEARER_RSC_MOD: 1 "Disable Bearer Resource Modification"
            {
                0x0: "No";
                0x1: "Yes";
            };

            EMM_IGNORE_TAC_ALL_ZEROS_CHECK: 1 "Ignore TAC check for all zeros value"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            X4G_BACKGROUND_SEARCH_OPTIMIZATION_3G: 1 "TO SUPPORT 4G BACKGROUND SEARCH OPTIMIZATION IN 3G"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };
        };

        modem_sbp_config[17]
        {
            X4G_BACKGROUND_SEARCH_OPTIMIZATION_2G: 1 "TO SUPPORT 4G BACKGROUND SEARCH OPTIMIZATION IN 2G"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

   MM_SKIP_LU_AFTER_CSFB_FOR_EAFR: 1 "MM_SKIP_LU_AFTER_CSFB_FOR_EAFR"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            FAST_ROAMING_SEARCH: 1 "__FAST_ROAMING_SEARCH__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            SEARCH_NOT_PREFERRED_AVAILABLE_PLMN: 1 "__SEARCH_NOT_PREFERRED_AVAILABLE_PLMN__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            MCC_ASSIST_FULLBAND_RAT_SELECTION: 1 "__MCC_ASSIST_FULLBAND_RAT_SELECTION__"
            {
                0x0: "Not enabled";
                0x1: "Enabled";
            };

            FULLBAND_RAT_ORDER_ON_CUSTOM_SETTING: 1 "__FULLBAND_RAT_ORDER_ON_CUSTOM_SETTING__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            REG_HISTORY_FOR_PLMN_SELECTION: 1 "__REG_HISTORY_FOR_PLMN_SELECTION__"
            {
                0x0: "Not enabled";
                0x1: "Enabled";
            };

            SEARCH_AVAILABLE_PLMN_IMMEDIATELY: 1 "__SEARCH_AVAILABLE_PLMN_IMMEDIATELY__"
            {
                0x0: "Not enabled";
                0x1: "Enabled";
            };

        };

       modem_sbp_config[18]
       {
            FAST_HPPLMN_SEARCH: 1 "__FAST_HPPLMN_SEARCH__"
            {
                0x0: "Not enabled";
                0x1: "Enabled";
            };

            LTE_DISABLE_ENH_CELLSEL: 1 "Disable LTE enhance cell selection"
            {
                0x0: "No";
                0x1: "Yes";
            };

            CLEAR_LOCI_WHEN_REFRESH_FCN: 1 "Clear temporary mobile identities in SIM on refresh type FCN"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

   DRX_TEST_TRACE: 1 "Enable DRX trace"
            {
                0x0: "No";
                0x1: "Yes";
            };

   DISABLE_PAGING_RESPONSE_IN_LIMITED_SIM_ME_LOCK: 1 "__DISABLE_PAGING_RESPONSE_IN_LIMITED_SIM_ME_LOCK__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            LTE_FORCE_RX_NESIB_B4_CONN: 1 "Force LTE rx nesibs before conn"
   {
                0x0: "No";
                0x1: "Yes";
            };

             DISABLE_LTE_B41: 1 "Disable LTE Band 41"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

   DISABLE_CS_DETACH_FOR_SET_MULTIRAT: 1 "Disable CS detach when SetRat as 2/4G, 3/4G, 2/3/4G"
            {
                0x0: "No";
                0x1: "Yes";
            };


       };

        modem_sbp_config[19]
        {
            SBP_SEL_AUTO_MODE_FROM_MANUAL_MODE_IF_REFRESH_TYPE_RESET: 1 "Change PLMN sel mode to AUTO if sim reset"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            SBP_SM_DISABLE_PS_SIG_CONN_RETRY_TIMER: 1 "Disable SM PS signalling connection retry timer"
            {
                0x0: "No";
                0x1: "Yes";
            };

            SBP_CELL_FACH_LTE_APBCR: 1 "R11 LTE APBCR in CELL_FACH state"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            SBP_NWSEL_DO_NOT_SEARCH_NEXT_FOR_REJ_12: 1 "Do not perform next PLMN + RAT search for reject cause #12"
            {
                0x0: "Not Enabled";
                0x1: "Enabled";
            };

            SBP_NO_3G_FULL_BAND_SEARCH_DURING_CSFB_REDIR: 1 "Disable 3G Full band search during CSFB redirection"
            {
                0x0: "Do 3G full band search during CSFB redirection";
                0x1: "Don't do 3G full band search during CSFB redirection";
            };

   SBP_CS_AUTHENTICATION_REJECT_PS_UNAFFECTED: 1 "CS authentication is rejected but PS unaffected"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

   SBP_FORCE_LU_FOR_SPECIAL_NW_EMM_DETACH: 1 "FORCE_LU_FOR_SPECIAL_NW_EMM_DETACH"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            SBP_PREFER_3G_IN_23G_MODE: 1 "Prefer 3G in 23G mode"
            {
                0x0: "No";
                0x1: "Yes";
            };

        };

        modem_sbp_config[20]
        {
            SBP_WAIT_RRC_CONN_REL_FOR_SET_RAT_MODE: 1 "Wait for network to release RRC conn for set rat mode"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            SBP_AVOID_PS_DETACH_WHEN_EUTRAN_DISABLED: 1 "When Eutran disabled avoid PS detach"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            LTE_PARTIAL_BAND: 1 " LTE_PARTIAL_BAND"
            {
                0x0: "Not support LTE PARTIAL BAND";
                0x1: "Support LTE PARTIAL BAND";
            };

            LTE_DISABLE_BW: 1 " LTE_DISABLE_BW"
            {
                0x0: "Not support LTE DISABLE BW";
                0x1: "Support LTE DISABLE BW";
            };
            GAS_SMART_SCAN: 1 "GAS_SMART_SCAN"
            {
                0x0: "Disabled";
                0x1: "Enabled";
            };

            SDM_RETRY_IMS_WHEN_IMS_SEND_FAIL: 1 "SDM_RETRY_IMS_WHEN_IMS_SEND_FAIL"
            {
                0x0: "Not enabled";
                0x1: "Enabled";
            };
   SAT_ALLOW_REFRESH_RESET_SIM_BY_MODEM: 1 "allow SIM Refresh RESET to happen at Modem"
   {
       0x0: "Not Supported";
    0x1: "Supported";
   };

            SBP_NOT_PREFER_HPLMNWACT_INFO: 1 "Prefer to use EF-HPLMNwACT info received from SIM/USIM"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };
        };

        modem_sbp_config[21]
        {
            IGNORE_INT_CHECK_FOR_NAS_MSG: 1 "IGNORE_INT_CHECK_FOR_NAS_MSG"
            {
                0x0: "NOT skip integrity check for certain NAS messages";
                0x1: "Skip integrity check for certain NAS messages";
            };

            SBP_RAC_CHANGE_USAGE_SETTING_BY_SIM: 1 "SBP_RAC_CHANGE_USAGE_SETTING_BY_SIM"
            {
                0x0: "Disabled";
                0x1: "Enabled";
            };

            SBP_DO_NOT_START_TD_DISABLE_TIMER: 1 "Do not start EUTRAN TD disable timer"
            {
                0x0: "Not Enabled";
                0x1: "Enabled";
            };

            BEFORE_RINGING_CSFB: 1 "BEFORE_RINGING_CSFB"
            {
                0x0: "Not enabled";
                0x1: "Enabled";
            };

            SBP_SET_FOLLOW_ON_REQUEST_FOR_IMS_PDP: 1 "SBP_SET_FOLLOW_ON_REQUEST_FOR_IMS_PDP"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            SBP_NOT_REPORT_IMS_UL_DATA_STATUS: 1 "SBP_NOT_REPORT_IMS_UL_DATA_STATUS"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            SBP_LTE_ENH_RSRP_SEARCH: 1 "LTE enhance RSRP search"
            {
                0x0: "Not enabled";
                0x1: "Enabled";
            };

            ALLOW_CSFB_FOR_DATAONLY: 1 "ALLOW_CSFB_FOR_DATAONLY"
            {
                0x0: "Not enabled";
                0x1: "Enabled";
            };
        };

  modem_sbp_config[22]
        {
            VDM_DELAY_ENW_RESUME_ADS: 1 "VDM_DELAY_ENW_RESUME_ADS"
            {
                0x0: "Not enabled";
                0x1: "Enabled";
            };

   NWSEL_INCREMENTAL_LTE_DISABLE_FOR_NW_REJ: 1 "Whether to use incremental LTE disable timer for NW reject cause #13 & #15"
            {
                0x0: "Not enabled";
    0x1: "Enabled";
            };
            MM_DO_NOT_START_FOP_GUARD_TIMER: 1 "Do Not Start FOP Guard Timer"
            {
                0x0: "Not Supported";
                0x1: " Supported";
            };

            EXTRA_FILE_SELECTION_AFTER_SAT_COMMAND: 1 "Selects EF_ICCID after event list proactive cmd and location info envelope"
            {
                0x0: "Disabled";
                0x1: "Enabled";
            };

   ALLOW_REGISTRATION_FOR_PPAC_RESTRICTION: 1 "Allow Registration when PPAC restriction is on"
            {
                0x0: "Not Supported";
                0x1: " Supported";
            };

   SBP_CUSTOM_FPLMN_USED: 1 "SBP_CUSTOM_FPLMN_USED"
            {
                0x0: "Not Supported";
                0x1: " Supported";
            };

   DISABLE_MM_SKIP_LU_WHEN_BACK_TO_REGISTERED_LAI: 1 "DISABLE_THE_SKIPPING_OF_LU_WHEN_BACK_TO_REGISTERED_LAI"
            {
                0x0: "Not enabled";
                0x1: "Enabled";
            };

   DISABLE_SMS_RETRY: 1 "SBP_DISABLE_SMS_RETRY"
            {
                0x0: "Not enabled";
                0x1: "Enabled";
            };
        };

        modem_sbp_config[23]
        {
            DO_NOT_CLEAR_CS_FPLMN_FOR_RAT_MODE_CHANGE: 1 "To not clear CS FPLMN list on RAT mode change"
            {
                0x0: "Not Enabled";
                0x1: "Enabled";
            };

            TELSTRA_BAND_PRIORITY_SEARCH: 1 "Telstra Band priority search support"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

   CB_CHANNEL_STORED_IN_SIM_FIRST: 1 "Configure CB channels to be stored in SIM first instead of NVRAM"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            SBP_REL_12_EPLMN_LIST_HANDLING: 1 "Rel-12 conformance not to delete EPLMN list for #9,#10,#40 RAU/TAU proc"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            SBP_AVOID_INTRA_LTE_PINGPONG_RESEL: 1 "SBP_AVOID_INTRA_LTE_PINGPONG_RESEL"
            {
                0x0: "Disabled";
                0x1: "Enabled";
            };

            STAY_ON_23G_FOR_LIMITED_WHEN_NO_IMS: 1 "Force to search 23G for Limited Service when IMS is not supported"
            {
                0x0: "Disabled";
                0x1: "Enabled";
            };

            DISABLE_ISR_SUPPORT : 1 "To disable ISR Support in LTE RAT "
            {
                0x0: "Not Enabled";
                0x1: "Enabled";
            };
   TERMINAL_CAPABILITY_FLEX: 1 "FOR_FLEXIBLE_UICC/CLF_INTERFACE_SETTINGS"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

        };

        modem_sbp_config[24]
        {
            CMCC_SRVCC_CDRX_EHEN: 1 "SBP_CMCC_SRVCC_CDRX_EHEN"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            SRVCC_STOP_UAS_MEAS: 1 "SBP_SRVCC_STOP_UAS_MEAS"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            SRVCC_STOP_EAS_MEAS: 1 "SBP_SRVCC_STOP_EAS_MEAS"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            SRVCC_DRX_INC_GAP: 1 "SBP_SRVCC_DRX_INC_GAP"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            SKIP_VDP_IE_IN_ATTACH_TAU_REQ: 1 "SKIP_VDP_IE_IN_ATTACH_TAU_REQ"
            {
            };

            CMHK_CUSTOMIZE_EPLMN: 1 "__CMHK_CUSTOMIZE_EPLMN__"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

            HSR_ENHANCE: 1 "HSR_ENHANCE"
            {
                0x0: "Not enabled";
                0x1: "Enabled";
            };

            LTE_EPLMN_SEARCH: 1 "LTE EPLMN Search"
            {
                0x0: "Not enabled";
                0x1: "Enabled";
            };
        };

        modem_sbp_config[25]
        {
            OMIT_PTMSI_TYPE_FOR_TESTSIM: 1 "OMIT_PTMSI_TYPE_FOR_TESTSIM"
            {
                 0x0: "Not Supported";
                 0x1: "Supported";
            };

            SM_4G23_LOCAL_RELEASE_IMS_PDN : 1 "SBP_4G23_LOCAL_REL_IMS_PDN"
            {
                0x0: "Disable";
                0x1: "Enable";
            };

            SBP_CB_CHANNEL_ONLY_STORED_IN_NVRAM: 1 "CB channels are stored only in NVRAM"
            {
                0x0: "Disable";
                0x1: "Enable";
            };

            SIM_RETRY_WHEN_CDMA_DETECTION_RESET_ERROR: 1 "SIM retry when CDMA detection reset error"
            {
                0x0: "Disable";
                0x1: "Enable";
            };

            SCA_CONFIGURED_BY_CUSTOMER: 1 "Is SCA configured by customer in custom file"
            {
                0x0: "No";
                0x1: "Yes";
            };

            BAR_EUTRA_FREQ_BASED_ON_EUTRA_DISABLE_TIMER: 1 "Bar EUTRA frequencies based on EUTRA Disable timer"
            {
                0x0: "No";
                0x1: "Yes";
            };

            SDM_DISABLE_SMS_OVER_WIFI: 1 "Disable SMS over WIFI"
            {
                0x0: "SMS over WIFI is not disabled";
                0x1: "SMS over WIFI is disabled";
            };
   MPT_REJ_8_MAPPING_TO_15: 1 "MPT_REJ_8_MAPPING_TO_15"
            {
                0x0: "Disable";
                0x1: "Enable";
            };
        };

        modem_sbp_config[26]
        {
            X2G_HO_START_CPHR_CR0585_ENABLE: 1 "X2G_HO_START_CPHR_CR0585_ENABLE"
            {
                0x0: "Disable X2G_HO_START_CPHR_CR0585";
                0x1: "Enable X2G_HO_START_CPHR_CR0585";
            };
            VDM_ADS_RETRY_CS_AND_REDIAL_VT_TO_CS_VOICE_FOR_BEREJECT: 1 "VDM_ADS_RETRY_CS_AND_REDIAL_VT_TO_CS_VOICE_FOR_BEREJECT"
            {
                0x0: "Disable retry CS and redial VT to cs voice for BEREJECT";
                0x1: "Enable retry CS and redial VT to cs voice for BEREJECT";
            };
   CONVERT_ATTACH_REJECT_FROM_CAUSE_7_TO_14: 1 "CONVERT_ATTACH_REJECT_FROM_CAUSE_7_TO_14"
            {
                0x0: "Do not Convert attach reject cause #7";
                0x1: "Convert attach reject cause from 7 to 14 in VPLMN";
            };
   GMM_REATTACH_FOR_NW_DETACH_OTHER_CAUSE: 1 "GMM_REATTACH_FOR_NW_DETACH_OTHER_CAUSE"
            {
                0x0: "Do not reattach for nw detach other cause ";
                0x1: "GMM reattach for nw detach other cause ";
            };

            MM_STRICT_PRECONDITION_FOR_REL7_MANUAL_RHPLMN_SEL: 1 "MM_STRICT_PRECONDITION_FOR_REL7_MANUAL_RHPLMN_SEL - will not add HPLMN to list in manual mode"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };
            LTE_SET_RAT_DO_COMBINED_DETACH: 1 "LTE_SET_RAT_DO_COMBINED_DETACH"
            {
                0x0: "Disable";
                0x1: "Enable";
            };

            DCM_ETWS_TEST_UE: 1 "DOCOMO ETWS TEST UE"
            {
                0x0: "Disable";
                0x1: "Enable";
            };

            ROHC_COMPR_DECOMPR_TRACE: 1 "Print ROHC compr and decompr trace on PS intergrated"
            {
                0x0: "Disable";
                0x1: "Enable";
            };

        };
        modem_sbp_config[27]
        {
            SBP_NWSEL_CUSTOMIZE_EHPLMN: 1 "NWSEL use customize ehplmn if support"
            {
                0x0: "not support";
                0x1: "support";
            };

            SBP_RAC_NW_LOSS_OPTIMIZATION: 1 "Network loss display optimization from MD"
            {
                0x0: "Not Enabled";
                0x1: "Enabled";
            };
   STKSMS_NO_PDU_CHK: 1 "No PDU check for the STK SMS over IMS"
   {
       0x0: "Disable";
    0x1: "Enable";
   };

   IGNORE_EFSMSP_PARAM_IND_FOR_SMSC: 1 "Ignore Parameter Indicator in EFsmsp for SMSC"
            {
                0x0: "Not Supported";
                0x1: "Supported";
            };

   SBP_DISABLE_CTCH_IF_CONFLICT_WITH_BCH: 1 "DISABLE_CTCH_IF_CONFLICT_WITH_BCH"
            {
                0x0: "Enable CTCH Reception if conflict with BCH";
                0x1: "Disable CTCH Reception if conflict with BCH";
            };

            R13_DOS_ENHANCE: 1 "R13 DoS enhancement"
            {
                0x0: "Disable R13 DoS enhancement";
                0x1: "Enable R13 DoS enhancement";
            };

   DISABLE_RETRY_FOR_SAT_SMS: 1 "No Retry for the SMS from SAT"
   {
       0x0: "Disable";
    0x1: "Enable";
   };

   DISABLE_CSFB_PAGE_CSMT_3G: 1 "SBP_DISABLE_CSFB_PAGE_CSMT_3G"
   {
       0x0: "CMST Flag will be set in 3G paging Response if PLMN is not in DISABLE CSMT PLMN list";
       0x1: "CMST Flag will not be set in 3G paging Response";
   };
        };
        modem_sbp_config[28]
        {
            EMM_REJ_CAUSE_2_ADD_TO_FTAI: 1 "EMM_REJ_CAUSE_2_ADD_TO_FTAI"
            {
                0x0: "Disable";
                0x1: "Enable";
            };

            SBP_CS_PS_MODE2_NO_SEARCH_AFTER_ABN: 1 "Don't trigger search when UE is in CS_PS_MODE2 and 5 times abnormal occurs"
            {
                0x0: "Trigger search when UE is in CS_PS_MODE2 and 5 times abnormal occurs";
                0x1: "Don't trigger search when UE is in CS_PS_MODE2 and 5 times abnormal occurs";
            };

   DISABLE_BIP_SUPPORT: 1 "Disable BIP support"
            {
                0x0: "Disable BIP support";
                0x1: "Enable BIP support";
            };

            SBP_VDM_DISABLE_RETRY_FOR_4_DIGIT_NUMBER_WHEN_VOWIFI_FAIL: 1 "Disable retry for call number which has 4 digits when VoWIFI fails"
            {
                0x0: "4 digit number will retry when VoWIFI fails";
                0x1: "4 digit number will not retry when VoWIFI fails";
            };

        };
    };

LID_BIT "001" NVRAM_EF_SBP_MODEM_DATA_CONFIG_LID
    nvram_ef_sbp_modem_data_config_struct *(1)
    {
        sbp_mode: "SBP ID"
        {
        };
        modem_sbp_data_config: "modem data configuration";
        modem_sbp_data_config[0]
        {
            VAMOS: 8 "VAMOS"
            {
                0x00: "Not Supported";
                0x01: "VAMOS_1 Supported";
                0x02: "VAMOS_2 Supported";
            };
        };

     modem_sbp_data_config[1]
        {
            IDC_EN: 8 "IDC_EN"
            {
                0x00: "IDC disable";
    0x01: "IDC enable";
            };
        };

     modem_sbp_data_config[2]
        {
            IDC_BAND7_IM3_TX_PWR: 8 "IDC_BAND7_IM3_TX_PWR"
            {
                0x01: "TX_PWR_1";
                0x02: "TX_PWR_2";
                0x03: "TX_PWR_3";
                0x04: "TX_PWR_4";
                0x05: "TX_PWR_5";
                0x06: "TX_PWR_6";
                0x07: "TX_PWR_7";
                0x08: "TX_PWR_8";
                0x09: "TX_PWR_9";
                0x0a: "TX_PWR_10";
                0x0b: "TX_PWR_11";
                0x0c: "TX_PWR_12";
                0x0d: "TX_PWR_13";
                0x0e: "TX_PWR_14";
                0x0f: "TX_PWR_15";
                0x10: "TX_PWR_16";
                0x11: "TX_PWR_17";
                0x12: "TX_PWR_18";
    0x13: "TX_PWR_19";
    0x14: "TX_PWR_20";
    0x15: "TX_PWR_21";
    0x16: "TX_PWR_22";
    0x17: "TX_PWR_23";
            };
        };

     modem_sbp_data_config[3]
        {
            IDC_BAND13_GPS_TX_PWR: 8 "IDC_BAND13_GPS_TX_PWR"
            {
                0x01: "TX_PWR_1";
                0x02: "TX_PWR_2";
                0x03: "TX_PWR_3";
                0x04: "TX_PWR_4";
                0x05: "TX_PWR_5";
                0x06: "TX_PWR_6";
                0x07: "TX_PWR_7";
                0x08: "TX_PWR_8";
                0x09: "TX_PWR_9";
                0x0a: "TX_PWR_10";
                0x0b: "TX_PWR_11";
                0x0c: "TX_PWR_12";
                0x0d: "TX_PWR_13";
                0x0e: "TX_PWR_14";
                0x0f: "TX_PWR_15";
                0x10: "TX_PWR_16";
                0x11: "TX_PWR_17";
                0x12: "TX_PWR_18";
    0x13: "TX_PWR_19";
                0x14: "TX_PWR_20";
    0x15: "TX_PWR_21";
    0x16: "TX_PWR_22";
    0x17: "TX_PWR_23";

            };
        };

     modem_sbp_data_config[4]
        {
            IDC_802_ANT_ISOLATION: 8 "IDC_802_ANT_ISOLATION"
            {
                0x07: "ANT_ISOLATION_7";
                0x08: "ANT_ISOLATION_8";
                0x09: "ANT_ISOLATION_9";
                0x0a: "ANT_ISOLATION_10";
                0x0b: "ANT_ISOLATION_11";
                0x0c: "ANT_ISOLATION_12";
    0x0d: "ANT_ISOLATION_13";
    0x0e: "ANT_ISOLATION_14";
    0x0f: "ANT_ISOLATION_15";
    0x10: "ANT_ISOLATION_16";
    0x11: "ANT_ISOLATION_17";
    0x12: "ANT_ISOLATION_18";
    0x13: "ANT_ISOLATION_19";
    0x14: "ANT_ISOLATION_20";
    0x15: "ANT_ISOLATION_21";
    0x16: "ANT_ISOLATION_22";
    0x17: "ANT_ISOLATION_23";
    0x18: "ANT_ISOLATION_24";
            };
        };

     modem_sbp_data_config[5]
        {
            IDC_GPS_ANT_ISOLATION: 8 "IDC_GPS_ANT_ISOLATION"
            {
                0x07: "ANT_ISOLATION_7";
                0x08: "ANT_ISOLATION_8";
                0x09: "ANT_ISOLATION_9";
                0x0a: "ANT_ISOLATION_10";
                0x0b: "ANT_ISOLATION_11";
                0x0c: "ANT_ISOLATION_12";
    0x0d: "ANT_ISOLATION_13";
                0x0e: "ANT_ISOLATION_14";
    0x0f: "ANT_ISOLATION_15";
    0x10: "ANT_ISOLATION_16";
    0x11: "ANT_ISOLATION_17";
    0x12: "ANT_ISOLATION_18";
    0x13: "ANT_ISOLATION_19";
    0x14: "ANT_ISOLATION_20";
    0x15: "ANT_ISOLATION_21";
    0x16: "ANT_ISOLATION_22";
    0x17: "ANT_ISOLATION_23";
    0x18: "ANT_ISOLATION_24";
            };
        };

        modem_sbp_data_config[7]
        {
            PLMN_SEARCH_ABORT_3G_TIMER_PERIOD: 8 "PLMN search abort timer value for 3G"
            {
                0x05: "5s";
                0x06: "6s";
                0x07: "7s";
                0x08: "8s";
                0x09: "9s";
                0x0a: "10s";
                0x0b: "11s";
                0x0c: "12s";
                0x0d: "13s";
                0x0e: "14s";
                0x0f: "15s";
                0x10: "16s";
                0x11: "17s";
                0x12: "18s";
                0x13: "19s";
                0x14: "20s";
                0x15: "21s";
                0x16: "22s";
                0x17: "23s";
                0x18: "24s";
                0x19: "25s";
                0x1a: "26s";
                0x1b: "27s";
                0x1c: "28s";
                0x1d: "29s";
                0x1e: "30s";
            };
        };
        modem_sbp_data_config[8]
        {
            PLMN_SEARCH_ABORT_4G_TIMER_PERIOD: 8 "PLMN search abort timer value for 4G"
            {
                0x05: "5s";
                0x06: "6s";
                0x07: "7s";
                0x08: "8s";
                0x09: "9s";
                0x0a: "10s";
                0x0b: "11s";
                0x0c: "12s";
                0x0d: "13s";
                0x0e: "14s";
                0x0f: "15s";
                0x10: "16s";
                0x11: "17s";
                0x12: "18s";
                0x13: "19s";
                0x14: "20s";
                0x15: "21s";
                0x16: "22s";
                0x17: "23s";
                0x18: "24s";
                0x19: "25s";
                0x1a: "26s";
                0x1b: "27s";
                0x1c: "28s";
                0x1d: "29s";
                0x1e: "30s";
            };
        };
        modem_sbp_data_config[9]
        {
            EUTRAN_DISABLE_TIMER_VALUE: 8 "EUTRAN Disable timer value"
            {
                0x01: "1 minutes";
                0x02: "2 minutes";
                0x03: "3 minutes";
                0x04: "4 minutes";
                0x05: "5 minutes";
                0x06: "6 minutes";
                0x07: "7 minutes";
                0x08: "8 minutes";
                0x09: "9 minutes";
                0x0a: "10 minutes";
                0x0b: "11 minutes";
                0x0c: "12 minutes";
                0x0d: "13 minutes";
                0x0e: "14 minutes";
                0x0f: "15 minutes";
                0x10: "16 minutes";
                0x11: "17 minutes";
                0x12: "18 minutes";
                0x13: "19 minutes";
                0x14: "20 minutes";
                0x15: "21 minutes";
                0x16: "22 minutes";
                0x17: "23 minutes";
                0x18: "24 minutes";
                0x19: "25 minutes";
                0x1a: "26 minutes";
                0x1b: "27 minutes";
                0x1c: "28 minutes";
                0x1d: "29 minutes";
                0x1e: "30 minutes";
                0xff: "No preference";
            };
        };

        modem_sbp_data_config[10]
        {
            SS_DISABLE_AFR_TIMER_PERIOD : 8 "SS disable AFR timer value"
            {
                0x00: "not to disable AFR";
                0x03: "3s";
                0x04: "4s";
                0x05: "5s";
                0x06: "6s";
                0x07: "7s";
                0x08: "8s";
                0x09: "9s";
                0x0a: "10s";
                0x0b: "11s";
                0x0c: "12s";
                0x0d: "13s";
                0x0e: "14s";
                0x0f: "15s";
            };
        };

        modem_sbp_data_config[11]
        {
            SIM_MAX_RETRY_WHEN_CDMA_DETECTION_RESET_ERROR: 8 "SIM max rerty when CDMA detection reset error"
            {
            };
        };

        modem_sbp_data_config[12]
        {
            SBP_VDM_ADS_SEL_ALGO_MASK_WFCP_VDP_PRIORITY_GROUP1: 8 "VDM ads selection algorithm mask of WFCP and VDP priority group1 (WFCP=Cellular Only and WIFI Only)"
            {
                0x01: "WFCP=Cellular Only + VDP=IMS prefer: WFCP prefer";
                0x02: "WFCP=Cellular Only + VDP=CS prefer: WFCP prefer";
                0x04: "WFCP=Cellular Only + VDP=IMS only: WFCP prefer";
                0x08: "WFCP=Cellular Only + VDP=CS only: WFCP prefer";
                0x10: "WFCP=WIFI Only + VDP=IMS prefer: WFCP prefer";
                0x20: "WFCP=WIFI Only + VDP=CS prefer: WFCP prefer";
                0x40: "WFCP=WIFI Only + VDP=IMS only: WFCP prefer";
                0x80: "WFCP=WIFI Only + VDP=CS only: WFCP prefer";
            };

        };

        modem_sbp_data_config[13]
        {
            SBP_VDM_ADS_SEL_ALGO_MASK_WFCP_VDP_PRIORITY_GROUP2: 8 "VDM ads selection algorithm priority of WFCP and VDP mask_2 (WFCP=Cellular Prefer and WIFI Prefer)"
            {
                0x01: "WFCP=Cellular Prefer + VDP=IMS prefer: WFCP prefer";
                0x02: "WFCP=Cellular Prefer + VDP=CS prefer: WFCP prefer";
                0x04: "WFCP=Cellular Prefer + VDP=IMS only: WFCP prefer";
                0x08: "WFCP=Cellular Prefer + VDP=CS only: WFCP prefer";
                0x10: "WFCP=WIFI Prefer + VDP=IMS prefer: WFCP prefer";
                0x20: "WFCP=WIFI Prefer + VDP=CS prefer: WFCP prefer";
                0x40: "WFCP=WIFI Prefer + VDP=IMS only: WFCP prefer";
                0x80: "WFCP=WIFI Prefer + VDP=CS only: WFCP prefer";
            };

        };
    };

LID_BIT "001" NVRAM_EF_2G_BA_INFO_LID nvram_ef_gsm_ba_info_struct * 1{};

END_NVRAM_DATA
# 163 "./service/dhl/database/msglog_db/custom_parse_db.c" 2
# 1 "./build/HCT6737M_65_N/LWG_DSDS/nvram_auto_gen/nvram_editor.h" 1



# 1 "custom/driver/common/adc_nvram_def.h" 1
# 96 "custom/driver/common/adc_nvram_def.h"
# 1 "driver/drv_def/drv_features.h" 1
# 115 "driver/drv_def/drv_features.h"
# 1 "driver/drv_def/drv_features_usb.h" 1
# 116 "driver/drv_def/drv_features.h" 2
# 1 "driver/drv_def/drv_features_i2c.h" 1
# 117 "driver/drv_def/drv_features.h" 2
# 1 "driver/drv_def/drv_features_accdet.h" 1
# 118 "driver/drv_def/drv_features.h" 2
# 1 "driver/drv_def/drv_features_adc.h" 1
# 119 "driver/drv_def/drv_features.h" 2
# 1 "driver/drv_def/drv_features_pfc.h" 1
# 120 "driver/drv_def/drv_features.h" 2
# 1 "driver/drv_def/drv_features_gcu.h" 1
# 121 "driver/drv_def/drv_features.h" 2
# 1 "driver/drv_def/drv_features_gpt.h" 1
# 122 "driver/drv_def/drv_features.h" 2

# 1 "driver/drv_def/drv_features_pwm.h" 1
# 124 "driver/drv_def/drv_features.h" 2
# 1 "driver/drv_def/drv_features_rtc.h" 1
# 125 "driver/drv_def/drv_features.h" 2
# 1 "driver/drv_def/drv_features_wdt.h" 1
# 126 "driver/drv_def/drv_features.h" 2
# 1 "driver/drv_def/drv_features_uart.h" 1
# 127 "driver/drv_def/drv_features.h" 2

# 1 "driver/drv_def/drv_features_gpio.h" 1
# 129 "driver/drv_def/drv_features.h" 2
# 1 "driver/drv_def/drv_features_bmt.h" 1
# 130 "driver/drv_def/drv_features.h" 2
# 1 "driver/drv_def/drv_features_misc.h" 1
# 131 "driver/drv_def/drv_features.h" 2
# 1 "driver/drv_def/drv_features_msdc.h" 1
# 132 "driver/drv_def/drv_features.h" 2
# 1 "driver/drv_def/drv_features_sim.h" 1
# 133 "driver/drv_def/drv_features.h" 2
# 147 "driver/drv_def/drv_features.h"
# 1 "driver/drv_def/drv_features_spi.h" 1
# 148 "driver/drv_def/drv_features.h" 2
# 1 "driver/drv_def/drv_features_hif.h" 1
# 149 "driver/drv_def/drv_features.h" 2

# 1 "driver/drv_def/drv_features_f32k.h" 1
# 151 "driver/drv_def/drv_features.h" 2
# 97 "custom/driver/common/adc_nvram_def.h" 2
# 1 "custom/driver/drv/misc_drv/_Default_BB/MT6735/adc_channel.h" 1
# 98 "custom/driver/common/adc_nvram_def.h" 2






typedef enum
{
    NVRAM_EF_ADC_LID = (0x0A00 | (0x00FF & 0)),
}nvram_lid_adc_enum;
# 5 "./build/HCT6737M_65_N/LWG_DSDS/nvram_auto_gen/nvram_editor.h" 2
# 1 "custom/middleware/common/audio_nvram_def.h" 1
# 6 "./build/HCT6737M_65_N/LWG_DSDS/nvram_auto_gen/nvram_editor.h" 2

# 1 "custom/driver/common/adc_nvram_editor.h" 1
# 115 "custom/driver/common/adc_nvram_editor.h"
# 1 "custom/driver/common/adc_nvram_def.h" 1
# 116 "custom/driver/common/adc_nvram_editor.h" 2





BEGIN_NVRAM_DATA



LID_BIT MULTIPLE_LID "000" NVRAM_EF_ADC_LID
ADC_CALIDATA *1
{
 ADCSlope:"ADC Slop";
 ADCOffset:"ADC Offset";
};

END_NVRAM_DATA
# 8 "./build/HCT6737M_65_N/LWG_DSDS/nvram_auto_gen/nvram_editor.h" 2
# 1 "custom/middleware/common/audio_nvram_editor.h" 1
# 9 "./build/HCT6737M_65_N/LWG_DSDS/nvram_auto_gen/nvram_editor.h" 2
# 1 "custom/modem/common/ps/ul1_nvram_editor.h" 1
# 179 "custom/modem/common/ps/ul1_nvram_editor.h"
# 1 "custom/modem/common/ps/ul1_nvram_def.h" 1
# 180 "custom/modem/common/ps/ul1_nvram_editor.h" 2



BEGIN_NVRAM_DATA
# 290 "custom/modem/common/ps/ul1_nvram_editor.h"
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_3G_RF_PARAMETER_LID
     U_sUl1dRfCustomInputData * (1)
     {
        startPattern:"#U_0x1234ABCD_L_0x1234ABCD"
        {
        };
        structVersion:""
        {
        };
        rfType:""
        {
        };
        isDataUpdate:"#U_1_L_1"
        {
        };
        umtsRfPaControlTimingOffset:""
        {
        };
        umtsRfPaControlTimingOffset.maxOffset:"#U_65535"
        {
        };
        umtsRfPaControlTimingOffset.vmOffset:"#U_65535"
        {
        };
        umtsRfPaControlTimingOffset.vbiasOffset:"#U_65535"
        {
        };
        umtsRfPaControlTimingOffset.dc2dcOffset:"#U_65535"
        {
        };
        umtsRfPaControlTimingOffset.vgaOffset:"#U_65535"
        {
        };
        umtsBsiBpiTiming:""
        {
        };
        umtsBsiBpiTiming.xTC_PR1:"#U_32767"
        {
        };
        umtsBsiBpiTiming.xTC_PR2:"#U_32767"
        {
        };
        umtsBsiBpiTiming.xTC_PR2B:"#U_32767"
        {
        };
        umtsBsiBpiTiming.xTC_PR3:"#U_32767"
        {
        };
        umtsBsiBpiTiming.xTC_PR3A:"#U_32767"
        {
        };
        umtsBsiBpiTiming.xTC_PT1:"#U_32767"
        {
        };
        umtsBsiBpiTiming.xTC_PT2:"#U_32767"
        {
        };
        umtsBsiBpiTiming.xTC_PT2B:"#U_32767"
        {
        };
        umtsBsiBpiTiming.xTC_PT3:"#U_32767"
        {
        };
        umtsBsiBpiTiming.xTC_PT3A:"#U_32767"
        {
        };
        umtsPdata:""
        {
        };
        umtsBandIndicator:""
        {
        };
        umtsRxLnaPortSel:""
        {
        };
        umtsTxPathSel:""
        {
        };
        xPMU_PA_CONTROL:""
        {
        };
        endPattern:"#U_0xABCD1234_L_0xABCD1234"
        {
        };
     };




LID_BIT "000" NVRAM_EF_UL1_IOT_CUSTOMIZATION_LID
     U_sUl1IotCustomSupportStruct *(1)
     {
         ADAPT_Customized:""
         {
         };
         reserved1:""
         {
         };
         reserved2:""
         {
         };
         reserved3:""
         {
         };
     };



LID_BIT "000" NVRAM_EF_UL1_HSPA_CATEGORY_LID
   nvram_ef_ul1_hspa_category_struct * (1)
   {
      dpa_cat:""
      {
      };
      upa_cat:""
      {
      };
   };



LID_BIT "000" NVRAM_EF_UL1_CUSTOM_DYNAMIC_INIT_DEBUG_LID
     Ul1CustomDynamicInitDebug * (1)
     {
        combined_config_index:""
        {
        };
        first_config_index_base:""
        {
        };
        second_config_index_base:""
        {
        };
        third_config_index_base:""
        {
        };
        gpio_get_pin_rpc_status:""
        {
        };
        gpio_return_pin_num:""
        {
        };
        gpio_pin_value:""
        {
        };
        gpio_combined_pin_value:""
        {
        };
        adc_get_ch_num_rpc_status:""
        {
        };
        adc_dcl_handle_status:""
        {
        };
        adc_cal_dcl_handle_status:""
        {
        };
        adc_get_ch_num:""
        {
        };
        adc_dac_read_result:""
        {
        };
        adc_volt_translate_result:""
        {
        };
        adc_volt_level:""
        {
        };
        barcode_lid_read_status:""
        {
        };
        barcode_digit_read_result:""
        {
        };
        umts_tempdac_lid_write_status:""
        {
        };
        umts_txrampdata_lid_write_status:""
        {
        };
        umts_txpaoctlvl_lid_write_status:""
        {
        };
        umts_rxpathloss_lid_write_status:""
        {
        };
        umts_rf_params_lid_write_status:""
        {
        };
        custom_dynamic_init_result_params:""
        {
        };
     };



LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPRACHTMCOMP_BAND1_LID
     ul1cal_txPrachTmCompData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPRACHTMCOMP_BAND2_LID
     ul1cal_txPrachTmCompData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPRACHTMCOMP_BAND3_LID
     ul1cal_txPrachTmCompData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPRACHTMCOMP_BAND4_LID
     ul1cal_txPrachTmCompData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPRACHTMCOMP_BAND5_LID
     ul1cal_txPrachTmCompData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPRACHTMCOMP_BAND6_LID
     ul1cal_txPrachTmCompData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPRACHTMCOMP_BAND7_LID
     ul1cal_txPrachTmCompData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPRACHTMCOMP_BAND8_LID
     ul1cal_txPrachTmCompData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPRACHTMCOMP_BAND9_LID
     ul1cal_txPrachTmCompData_T *1
     {

     };
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPRACHTMCOMP_BAND10_LID
     ul1cal_txPrachTmCompData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPRACHTMCOMP_BAND11_LID
     ul1cal_txPrachTmCompData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_TXPRACHTMCOMP_BAND19_LID
     ul1cal_txPrachTmCompData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_AFCDAC_LID
     ul1cal_afcDacData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_AFCCAP_LID
     ul1cal_afcCapData_T *1
     {

     };


LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_TPC_HIGHBAND1_LID
     ul1mipi_tpcData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_TPC_HIGHBAND2_LID
     ul1mipi_tpcData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_TPC_HIGHBAND3_LID
     ul1mipi_tpcData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_TPC_LOWBAND1_LID
     ul1mipi_tpcData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_TPC_LOWBAND2_LID
     ul1mipi_tpcData_T *1
     {

     };
# 627 "custom/modem/common/ps/ul1_nvram_editor.h"
LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_RX_EVENT_HIGHBAND1_LID
     ul1mipi_rxEvent_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_RX_EVENT_HIGHBAND2_LID
     ul1mipi_rxEvent_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_RX_EVENT_HIGHBAND3_LID
     ul1mipi_rxEvent_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_RX_EVENT_LOWBAND1_LID
     ul1mipi_rxEvent_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_RX_EVENT_LOWBAND2_LID
     ul1mipi_rxEvent_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_RX_DATA_HIGHBAND1_LID
     ul1mipi_rxData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_RX_DATA_HIGHBAND2_LID
     ul1mipi_rxData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_RX_DATA_HIGHBAND3_LID
     ul1mipi_rxData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_RX_DATA_LOWBAND1_LID
     ul1mipi_rxData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_RX_DATA_LOWBAND2_LID
     ul1mipi_rxData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_TX_EVENT_HIGHBAND1_LID
     ul1mipi_txEvent_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_TX_EVENT_HIGHBAND2_LID
     ul1mipi_txEvent_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_TX_EVENT_HIGHBAND3_LID
     ul1mipi_txEvent_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_TX_EVENT_LOWBAND1_LID
     ul1mipi_txEvent_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_TX_EVENT_LOWBAND2_LID
     ul1mipi_txEvent_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_TX_DATA_HIGHBAND1_LID
     ul1mipi_txData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_TX_DATA_HIGHBAND2_LID
     ul1mipi_txData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_TX_DATA_HIGHBAND3_LID
     ul1mipi_txData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_TX_DATA_LOWBAND1_LID
     ul1mipi_txData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_TX_DATA_LOWBAND2_LID
     ul1mipi_txData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_ASM_ISOLATION_HIGHBAND1_LID
     ul1mipi_asmIsoData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_ASM_ISOLATION_HIGHBAND2_LID
     ul1mipi_asmIsoData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_ASM_ISOLATION_HIGHBAND3_LID
     ul1mipi_asmIsoData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_ASM_ISOLATION_LOWBAND1_LID
     ul1mipi_asmIsoData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_ASM_ISOLATION_LOWBAND2_LID
     ul1mipi_asmIsoData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_INIT_CW_LID
     ul1mipi_initCwData_T *1
     {

     };

LID_BIT MULTIPLE_LID "000" NVRAM_EF_UL1_MIPI_SLEEP_CW_LID
     ul1mipi_sleepCwData_T *1
     {

     };
# 924 "custom/modem/common/ps/ul1_nvram_editor.h"
END_NVRAM_DATA
# 10 "./build/HCT6737M_65_N/LWG_DSDS/nvram_auto_gen/nvram_editor.h" 2
# 164 "./service/dhl/database/msglog_db/custom_parse_db.c" 2





# 1 "./build/HCT6737M_65_N/LWG_DSDS/nvram_auto_gen/custom_nvram_database.h" 1
# 170 "./service/dhl/database/msglog_db/custom_parse_db.c" 2



# 1 "custom/middleware/common/resource_audio.h" 1
# 72 "custom/middleware/common/resource_audio.h"
typedef enum
{
   MIN_TONE_ID = 0,
   TONE_DTMF_0 = MIN_TONE_ID,
   TONE_DTMF_1,
   TONE_DTMF_2,
   TONE_DTMF_3,
   TONE_DTMF_4,
   TONE_DTMF_5,
   TONE_DTMF_6,
   TONE_DTMF_7,
   TONE_DTMF_8,
   TONE_DTMF_9,
   TONE_KEY_STAR,
   TONE_KEY_HASH,
   TONE_KEY_NORMAL,
   TONE_KEY_VOL_UP = TONE_KEY_NORMAL,
   TONE_KEY_VOL_DOWN = TONE_KEY_NORMAL,
   TONE_KEY_UP = TONE_KEY_NORMAL,
   TONE_KEY_DOWN = TONE_KEY_NORMAL,
   TONE_KEY_LEFT = TONE_KEY_NORMAL,
   TONE_KEY_RIGHT = TONE_KEY_NORMAL,
   TONE_KEY_MENU = TONE_KEY_NORMAL,
   TONE_KEY_FUNCTION = TONE_KEY_NORMAL,
   TONE_KEY_SK_LEFT = TONE_KEY_NORMAL,
   TONE_KEY_SK_RIGHT = TONE_KEY_NORMAL,
   TONE_KEY_SEND = TONE_KEY_NORMAL,
   TONE_KEY_END = TONE_KEY_NORMAL,
   TONE_KEY_POWER = TONE_KEY_NORMAL,

   TONE_KEY_CLICK,

   TONE_CALL_CONNECT,
   TONE_MT_SMS_IN_CALL,
   TONE_CALL_TIME_REMINDER,

   TONE_DIAL_CALL_GSM,
   TONE_DIAL_CALL_PCS,
   TONE_BUSY_CALL_GSM,
   TONE_BUSY_CALL_PCS,
   TONE_CONGESTION_GSM,
   TONE_CONGESTION_PCS,
   TONE_RADIO_PATH,
   TONE_RADIO_NA,
   TONE_ERROR_INFO,
   TONE_NUM_UNOBTAIN,
   TONE_AUTH_ERROR,
   TONE_CALL_WAITING,
   TONE_RINGING_CALL_GSM,
   TONE_RINGING_CALL_PCS,
   TONE_POSITIVE_ACK,
   TONE_NEGATIVE_ACK,

   TONE_DIAL_CALL_GSM_STK,
   TONE_DIAL_CALL_PCS_STK,
   TONE_BUSY_CALL_GSM_STK,
   TONE_BUSY_CALL_PCS_STK,
   TONE_CONGESTION_GSM_STK,
   TONE_CONGESTION_PCS_STK,
   TONE_RADIO_PATH_STK,
   TONE_RADIO_NA_STK,
   TONE_ERROR_INFO_STK,
   TONE_NUM_UNOBTAIN_STK,
   TONE_AUTH_ERROR_STK,
   TONE_CALL_WAITING_STK,
   TONE_RINGING_CALL_GSM_STK,
   TONE_RINGING_CALL_PCS_STK,
   TONE_POSITIVE_ACK_STK,
   TONE_NEGATIVE_ACK_STK,


   TONE_WARNING1,
   TONE_WARNING2,
   TONE_ERROR1,
   TONE_ERROR2,
   TONE_GENERAL_BEEP,
   TONE_BATTERY_LOW,
   TONE_BATTERY_WARNING,
   TONE_AUX_IND,
   TONE_DATA_CALL,



   NUM_RESOURCE_TONES,

   MAX_TONE_ID = 80
}audio_id_enum;




typedef struct {
   kal_uint16 freq1;
   kal_uint16 freq2;
   kal_uint16 on_duration;
   kal_uint16 off_duration;
   kal_int8 next_operation;
} device_tones_struct;

typedef struct {
   const unsigned char *data;
   kal_uint32 len;
   kal_int32 format;
}
audio_resource_struct;

typedef struct {
 short start;
 short end;
}
start_end_t;

extern device_tones_struct** resource_tones;
# 174 "./service/dhl/database/msglog_db/custom_parse_db.c" 2



# 1 "interface/sap/sap_range.h" 1
# 178 "./service/dhl/database/msglog_db/custom_parse_db.c" 2

# 1 "interface/sap/svc/tst_msgid.h" 1
# 40 "interface/sap/svc/tst_msgid.h"
typedef enum __cgen_msg_type_id_TST_MSG_CODE_BEGIN{MSG_TAG_TST_MSG_CODE_BEGIN = MSG_ID_TST_CODE_BEGIN,

MSG_ID_DHL_INJECT_STRING = MSG_ID_TST_CODE_BEGIN,
MSG_ID_TST_INJECT_STRING,
MSG_ID_DHL_IND_READ_VARIABLE_RETURN,
MSG_ID_DHL_IND_READ_MEMORY_REPORT,
MSG_ID_DHL_IND_QUERY_MEMORY_RANGE,
MSG_ID_DHL_IND_NVRAM_READ_CNF,
MSG_ID_DHL_IND_NVRAM_RESET_CNF,
MSG_ID_DHL_IND_NVRAM_WRITE_CNF,
MSG_ID_DHL_IND_STACK_STATISTICS,
MSG_ID_DHL_IND_FILE_TRANSFER_REPORT,
MSG_ID_DHL_IND_FILE_SAVE_REPORT,
MSG_ID_DHL_IND_QUERY_BUF_MONITOR_REPORT,
MSG_ID_DHL_TO_ETSTM,
MSG_ID_ETSTM_TO_DHL,
MSG_ID_DHL_IND_SWLA_QUERY_HEADER_REPORT,
MSG_ID_DHL_IND_GENERAL_QUERY_CMD_ACK,
MSG_ID_DHL_TEST,
MSG_ID_HELLO_GPD,
MSG_ID_HELLO_PTR_ARRAY,
MSG_ID_HELLO_INLINE_ILM,
MSG_ID_HELLO_INLINE_ILM2,
MSG_ID_DHL_DRIVER_STATE_CHANGE,
MSG_ID_DHL_TTY_RX_DONE,
MSG_ID_DHL_REDUMP_END_WARN,
MSG_ID_DHL_CMD_NVRAM,
MSG_ID_DHL_CMD_READ_STACK_STATISTICS,
MSG_ID_DHL_CMD_QUERY_CTRL_BUF_MONITOR_DATA,
MSG_ID_DHL_CMD_QUERY_FLC_BUF_MONITOR_DATA,
MSG_ID_DHL_CMD_MSG_BKPT,
MSG_ID_DHL_CMD_INJECT_AT_CMD,
MSG_ID_DHL_CMD_SWLA_START,
MSG_ID_DHL_CMD_SWLA_STOP,
MSG_ID_DHL_CMD_SWLA_EMI_MONITOR_MASTER_SELECT,
MSG_ID_DHLDBG_MSG_BREAK,
MSG_ID_DHL_IND_VIRTUAL_CHANNEL,
MSG_ID_DHL_IND_UBDB,
MSG_ID_TST_R8_DL_PKT_SINGLE_GPD_IND,
MSG_ID_DHL_CMD_ST_START,
MSG_ID_DHL_CMD_ST_STOP,
MSG_ID_DHL_CMD_ST_STOP_REPORT,
MSG_ID_DHL_CMD_ST_QUERY_HEADER,
MSG_ID_DHL_IND_ST_QUERY_HEADER_REPORT,
MSG_ID_TST_L2COPRO_FILTER_RETRIEVAL,
MSG_ID_TST_L2COPRO_FILTER_SAVE,
MSG_ID_DHL_CMD_SET_DHL_MUX_FILTER,
MSG_ID_DHL_CMD_ENABLE_23G_DSP_LOGGING,
MSG_ID_DHL_CMD_DISABLE_23G_DSP_LOGGING,
MSG_ID_DHL_CMD_LOOP_BACK_RESPONSE,
MSG_ID_DHL_AUTO_MEMORY_DUMP_IN_ILM,
MSG_ID_DHL_IND_CUSTOM_READ_MEMORY_REPORT,
MSG_ID_DHL_UPCM_IMS_UL_RAW_DATA,
MSG_ID_DHL_UPCM_IMS_DL_RAW_DATA,
MSG_ID_L2_TRACE_OPEN,
MSG_ID_L2_TRACE_CLOSE,
# 111 "interface/sap/svc/tst_msgid.h"
MSG_ID_CGEN_PARSE_LAST_ID=MSG_ID_TST_CODE_TAIL }_cgen_msg_type_id_MSG_ID_TST_CODE_TAIL;
# 180 "./service/dhl/database/msglog_db/custom_parse_db.c" 2
# 1 "interface/sap/md_svc_sap.h" 1





typedef enum __cgen_sap_type_id_SAP_ID_MD_SVC_CODE_BEGIN{SAP_TAG_SAP_ID_MD_SVC_CODE_BEGIN = SAP_ID_MD_SVC_CODE_BEGIN,
 UART_L4C_SAP,
SAP_ID_CGEN_PARSE_LAST_ID=SAP_ID_MD_SVC_CODE_TAIL }_cgen_sap_type_id_SAP_ID_MD_SVC_CODE_TAIL;
# 180 "./service/dhl/database/msglog_db/custom_parse_db.c" 2
